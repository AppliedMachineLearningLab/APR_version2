[{"idx": 17004, "status": "update", "global_index": 21152, "project_name": "android_", "written_on": "2013-10-01 00:29:37", "tufano_target": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ; }", "comment": "Shouldn't the order be descending by default?", "tokenized_comment": ["Shouldn", "'", "t", "<|s|>", "the", "<|s|>", "order", "<|s|>", "be", "<|s|>", "descending", "<|s|>", "by", "<|s|>", "default", "?"], "tufano_code": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 , INT_1 ) ; }", "our_target": "    myRefreshingAlarm.addRequest(myUpdateRequest, REFRESH_INTERVAL_MS);\n", "our_code": "  private void addUpdatingRequest() {\n    if (myRefreshingAlarm.isDisposed()) {\n      return;\n    }\n    myRefreshingAlarm.cancelAllRequests();\n<|startfocus|>\n    myRefreshingAlarm.addRequest(myUpdateRequest, 500);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "add", "Updating", "Request", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Refreshing", "Alarm", ".", "is", "Disposed", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "my", "Refreshing", "Alarm", ".", "cancel", "All", "Requests", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "my", "Refreshing", "Alarm", ".", "add", "Request", "(", "my", "Update", "Request", ",", "<|s|>", "500", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 201, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_759", "comment_id": "04bcaf30_0f148596", "class_list": ["DeviceChooser", "MyDeviceTableModel", "DeviceNameRenderer", "LaunchCompatibilityRenderer"], "func_list": ["public DeviceChooser(boolean multipleSelection,", "public void valueChanged(ListSelectionEvent e)", "new DoubleClickListener()", "protected boolean onDoubleClick(MouseEvent e)", "public void keyPressed(KeyEvent e)", "private void setColumnWidth(JBTable deviceTable, int columnIndex, String sampleText)", "private int getWidth(JBTable deviceTable, String sampleText)", "public void init(@Nullable String[] selectedSerials)", "public void run()", "private void addUpdatingRequest()", "private void resetSelection(@NotNull String[] selectedSerials)", "void updateTable()", "public int compare(IDevice device1, IDevice device2)", "private int safeGetApiLevel(IDevice device)", "public JTable getDeviceTable()", "public JComponent getPanel()", "public IDevice[] getSelectedDevices()", "private IDevice[] getFilteredDevices(AndroidDebugBridge bridge)", "public void finish()", "public void dispose()", "public void setEnabled(boolean enabled)", "private static String getDeviceState(@NotNull IDevice device)", "public void fireSelectedDevicesChanged()", "public void addListener(@NotNull DeviceChooserListener listener)", "public MyDeviceTableModel(IDevice[] devices)", "public String getColumnName(int column)", "public int getRowCount()", "public int getColumnCount()", "public Object getValueAt(int rowIndex, int columnIndex)", "protected void customizeCellRenderer(JTable table,", "public void valueChanged(ListSelectionEvent e)", "public void keyPressed(KeyEvent e)", "public void keyPressed(KeyEvent e)"], "prime_var_dic": {}}, {"idx": 42114, "status": "update", "global_index": 8344, "project_name": "android_", "written_on": "2016-02-12 14:20:26", "tufano_target": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > result = new TYPE_3 < TYPE_2 > ( ) ; for ( TYPE_4 VAR_1 : VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( result , VAR_3 . METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; } return result ; }", "comment": "Line too long.", "tokenized_comment": ["Line", "<|s|>", "too", "<|s|>", "long", "."], "tufano_code": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > result = new TYPE_3 < TYPE_2 > ( ) ; for ( TYPE_4 VAR_1 : VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( result , VAR_3 . METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; } return result ; }", "our_target": "            addCreateDexJarAndPushTasks(result, run.basenameOfJar(classpathElement),\n                    classpathElement, null);\n", "our_code": "    @Override public Set<Task> installTasks() {\n        Set<Task> result = new HashSet<Task>();\n        // dex everything on the classpath and push it to the device.\n        for (File classpathElement : run.classpath.getElements()) {\n<|startfocus|>\n            addCreateDexJarAndPushTasks(result, run.basenameOfJar(classpathElement), classpathElement, null);\n<|endfocus|>\n        }\n        return result;\n    }", "tokenized_code": ["<|4-s|>", "@", "Override", "<|s|>", "public", "<|s|>", "Set", "<", "Task", ">", "<|s|>", "install", "Tasks", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Set", "<", "Task", ">", "<|s|>", "result", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hash", "Set", "<", "Task", ">", "(", ");", "<|nl|>", "<|8-s|>", "//", "<|s|>", "dex", "<|s|>", "everything", "<|s|>", "on", "<|s|>", "the", "<|s|>", "classpath", "<|s|>", "and", "<|s|>", "push", "<|s|>", "it", "<|s|>", "to", "<|s|>", "the", "<|s|>", "device", ".", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "File", "<|s|>", "classpath", "Element", "<|s|>", ":", "<|s|>", "run", ".", "classpath", ".", "get", "Elements", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "add", "Create", "Dex", "Jar", "And", "Push", "Tasks", "(", "result", ",", "<|s|>", "run", ".", "basename", "Of", "Jar", "(", "classpath", "Element", ")", ",", "<|s|>", "classpath", "Element", ",", "<|s|>", "null", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "result", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 60, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4796", "comment_id": "bdb504dc_4080a2b8", "class_list": ["DeviceRuntime"], "func_list": ["public DeviceRuntime(Run run, ModeId modeId, Variant variant,", "@Override public Set<Task> installTasks()", "@Override public Set<Task> installActionTasks(Action action, File jar)", "@Override public Task executeActionTask(Action action, boolean useLargeTimeout)", "@Override public VmCommandBuilder newVmCommandBuilder(Action action, File workingDirectory)", "@Override public Set<Task> cleanupTasks(Action action)", "@Override public Classpath getRuntimeClasspath(Action action)", "private void addCreateDexJarAndPushTasks(", "private Task newCreateDexJarTask(Classpath classpath, File classpathElement, String name,"], "prime_var_dic": {"run": 1, "modeId": 1}}, {"idx": 10613, "status": "update", "global_index": 21086, "project_name": "android_", "written_on": "2013-09-09 23:08:21", "tufano_target": "public static String METHOD_4 ( TYPE_1 file ) { return METHOD_4 ( file , true ) ; }", "comment": "In a finally block, call Closeables.close().", "tokenized_comment": ["In", "<|s|>", "a", "<|s|>", "finally", "<|s|>", "block", ",", "<|s|>", "call", "<|s|>", "Closeables", ".", "close", "(", ")", "."], "tufano_code": "public static void METHOD_1 ( TYPE_1 file , String VAR_1 ) { try { TYPE_2 writer = new TYPE_2 ( new TYPE_3 ( file ) ) ; writer.write ( VAR_1 ) ; writer . METHOD_2 ( ) ; } catch ( TYPE_4 VAR_2 ) { TYPE_5 . METHOD_3 ( VAR_2 ) ; } }", "our_target": "  @Nullable\n  public static String readTextFile(@NotNull File file) {\n    return readTextFile(file, true);\n", "our_code": "<|startfocus|>\n  public static void writeTextFile(@NotNull File file, @NotNull String contents) {\n    try {\n      BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n      writer.write(contents);\n      writer.close();\n    } catch (IOException e) {\n      LOG.warn(e);\n    }\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "write", "Text", "File", "(", "@", "Not", "Null", "<|s|>", "File", "<|s|>", "file", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "contents", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Buffered", "Writer", "<|s|>", "writer", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Buffered", "Writer", "(", "new", "<|s|>", "File", "Writer", "(", "file", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "writer", ".", "write", "(", "contents", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "writer", ".", "close", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "warn", "(", "e", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 382, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_604", "comment_id": "27661513_81e8c02a", "class_list": ["TemplateUtils", "name", "", "name"], "func_list": ["public static String extractClassName(@NotNull String string)", "public static String stripSuffix(@NotNull String string, @NotNull String suffix)", "public static String camelCaseToUnderlines(String string)", "public static String underlinesToCamelCase(String string)", "public static String getTargetLabel(@NotNull IAndroidTarget target)", "public static String[] getKnownVersions()", "public static File[] listFiles(File dir)", "public static List<Element> getChildren(@NotNull Element element)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static void selectEditor(Project project, VirtualFile file)", "public static String readTextFile(@NotNull File file)", "public static void writeTextFile(@NotNull File file, @NotNull String contents)", "public static File getGradleBuildFile(File moduleRoot)", "public static String extractClassName(@NotNull String string)", "public static String extractClassName(@NotNull String string)", "public static String stripSuffix(@NotNull String string, @NotNull String suffix)", "public static String camelCaseToUnderlines(String string)", "public static String underlinesToCamelCase(String string)", "public static String getTargetLabel(@NotNull IAndroidTarget target)", "public static String[] getKnownVersions()", "public static File[] listFiles(File dir)", "public static List<Element> getChildren(@NotNull Element element)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static void selectEditor(Project project, VirtualFile file)", "public static String readTextFile(@NotNull File file)", "public static void writeTextFile(@NotNull File file, @NotNull String contents)", "public static File getGradleBuildFile(File moduleRoot)", "public static String extractClassName(@NotNull String string)"], "prime_var_dic": {}}, {"idx": 14359, "status": "update", "global_index": 14137, "project_name": "android_", "written_on": "2014-03-27 16:40:17", "tufano_target": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! VAR_1 && TYPE_1 . METHOD_2 ( VAR_2 ) == 0 && VAR_3 ) { TYPE_2 . METHOD_3 ( this , STRING_2 ) ; return ; } METHOD_4 ( VAR_3 ) ; }", "comment": "One word \"forever\"", "tokenized_comment": ["One", "<|s|>", "word", "<|s|>", "\"", "forever", "\""], "tufano_code": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! VAR_1 && TYPE_1 . METHOD_2 ( VAR_2 ) == 0 && VAR_3 ) { TYPE_2 . METHOD_3 ( this , STRING_1 ) ; return ; } METHOD_4 ( VAR_3 ) ; }", "our_target": "            CatLog.d(this, \"User should clear text..show message forever\");\n", "our_code": "    public void onResume() {\n        super.onResume();\n\n        /*\n         * If an immediate response is required and userClear flag is set and\n         * no dialog duration is set, display Text should be displayed to user\n         * for ever until some high priority event occurs (incoming call, MMI\n         * code execution etc as mentioned under section ETSI 102.223, 6.4.1)\n         * In that specific case, don't set the timeout.  If an immediate\n         * response is required from the card, then it has already been sent,\n         * and no further response is necessary from Android.\n         */\n        if (!mTextMsg.responseNeeded &&\n                StkApp.calculateDurationInMilis(mTextMsg.duration) == 0 &&\n                mTextMsg.userClear) {\n<|startfocus|>\n            CatLog.d(this, \"User should clear text..show message for ever\");\n<|endfocus|>\n            return;\n        }\n\n        startTimeOut(mTextMsg.userClear);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Resume", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Resume", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "/*", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "If", "<|s|>", "an", "<|s|>", "immediate", "<|s|>", "response", "<|s|>", "is", "<|s|>", "required", "<|s|>", "and", "<|s|>", "user", "Clear", "<|s|>", "flag", "<|s|>", "is", "<|s|>", "set", "<|s|>", "and", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "no", "<|s|>", "dialog", "<|s|>", "duration", "<|s|>", "is", "<|s|>", "set", ",", "<|s|>", "display", "<|s|>", "Text", "<|s|>", "should", "<|s|>", "be", "<|s|>", "displayed", "<|s|>", "to", "<|s|>", "user", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "for", "<|s|>", "ever", "<|s|>", "until", "<|s|>", "some", "<|s|>", "high", "<|s|>", "priority", "<|s|>", "event", "<|s|>", "occurs", "<|s|>", "(", "incoming", "<|s|>", "call", ",", "<|s|>", "MMI", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "code", "<|s|>", "execution", "<|s|>", "etc", "<|s|>", "as", "<|s|>", "mentioned", "<|s|>", "under", "<|s|>", "section", "<|s|>", "ETSI", "<|s|>", "102", ".", "223", ",", "<|s|>", "6", ".", "4", ".", "1", ")", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "In", "<|s|>", "that", "<|s|>", "specific", "<|s|>", "case", ",", "<|s|>", "don", "'", "t", "<|s|>", "set", "<|s|>", "the", "<|s|>", "timeout", ".", "<|2-s|>", "If", "<|s|>", "an", "<|s|>", "immediate", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "response", "<|s|>", "is", "<|s|>", "required", "<|s|>", "from", "<|s|>", "the", "<|s|>", "card", ",", "<|s|>", "then", "<|s|>", "it", "<|s|>", "has", "<|s|>", "already", "<|s|>", "been", "<|s|>", "sent", ",", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "and", "<|s|>", "no", "<|s|>", "further", "<|s|>", "response", "<|s|>", "is", "<|s|>", "necessary", "<|s|>", "from", "<|s|>", "Android", ".", "<|nl|>", "<|8-s|>", "<|s|>", "*/", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "m", "Text", "Msg", ".", "response", "Needed", "<|s|>", "&&", "<|nl|>", "<|16-s|>", "Stk", "App", ".", "calculate", "Duration", "In", "Milis", "(", "m", "Text", "Msg", ".", "duration", ")", "<|s|>", "==", "<|s|>", "0", "<|s|>", "&&", "<|nl|>", "<|16-s|>", "m", "Text", "Msg", ".", "user", "Clear", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "Cat", "Log", ".", "d", "(", "this", ",", "<|s|>", "\"", "User", "<|s|>", "should", "<|s|>", "clear", "<|s|>", "text", "..", "show", "<|s|>", "message", "<|s|>", "for", "<|s|>", "ever", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "start", "Time", "Out", "(", "m", "Text", "Msg", ".", "user", "Clear", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 142, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_4500", "comment_id": "f91d8f5d_8810c737", "class_list": ["StkDialogActivity"], "func_list": ["public void handleMessage(Message msg)", "protected void onCreate(Bundle icicle)", "public void onClick(View v)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public void onResume()", "public void onPause()", "public void onSaveInstanceState(Bundle outState)", "public void onRestoreInstanceState(Bundle savedInstanceState)", "private void sendResponse(int resId, boolean confirmed)", "private void initFromIntent(Intent intent)", "private void cancelTimeOut()", "private void startTimeOut(boolean waitForUserToClear)"], "prime_var_dic": {"String": 1, "time": 1, "int": 3}}, {"idx": 74868, "status": "update", "global_index": 2523, "project_name": "android_", "written_on": "2017-03-28 04:59:49", "tufano_target": "public void METHOD_5 ( int VAR_1 ) { METHOD_2 ( STRING_2 + VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }", "comment": "the name for this seems like it could be a general case.  maybe something like clearBlacklistForForcedConnection ?", "tokenized_comment": ["the", "<|s|>", "name", "<|s|>", "for", "<|s|>", "this", "<|s|>", "seems", "<|s|>", "like", "<|s|>", "it", "<|s|>", "could", "<|s|>", "be", "<|s|>", "a", "<|s|>", "general", "<|s|>", "case", ".", "<|2-s|>", "maybe", "<|s|>", "something", "<|s|>", "like", "<|s|>", "clear", "Blacklist", "For", "Forced", "Connection", "<|s|>", "?"], "tufano_code": "public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( STRING_1 + VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }", "our_target": "    public void prepareForForcedConnection(int netId) {\n        localLog(\"prepareForForcedConnection: netId=\" + netId);\n", "our_code": "<|startfocus|>\n    public void prepareForConnectionAttempt(int netId) {\n        localLog(\"prepareForConnectionAttempt: netId=\" + netId);\n<|endfocus|>\n\n        clearConnectionAttemptTimeStamps();\n        clearBssidBlacklist();\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "prepare", "For", "Connection", "Attempt", "(", "int", "<|s|>", "net", "Id", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "local", "Log", "(", "\"", "prepare", "For", "Connection", "Attempt", ":", "<|s|>", "net", "Id", "=", "\"", "<|s|>", "+", "<|s|>", "net", "Id", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "clear", "Connection", "Attempt", "Time", "Stamps", "(", ");", "<|nl|>", "<|8-s|>", "clear", "Bssid", "Blacklist", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1042, "base_patch_number": 26, "changed_patch_number": 27, "code_file_name": "android_4060", "comment_id": "783c3f73_6410cb76", "class_list": ["manages", "WifiConnectivityManager", "", "BssidBlacklistStatus", "RestartSingleScanListener", "AllSingleScanListener", "SingleScanListener", "PnoScanListener"], "func_list": ["private void localLog(String log)", "public void onAlarm()", "private boolean handleScanResults(List<ScanDetail> scanDetails, String listenerName)", "public void clearScanDetails()", "public void onSuccess()", "public void onFailure(int reason, String description)", "public void onPeriodChanged(int periodInMs)", "public void onResults(WifiScanner.ScanData[] results)", "public void onFullResult(ScanResult fullScanResult)", "public void resetLowRssiNetworkRetryDelay()", "public int getLowRssiNetworkRetryDelay()", "public void onPnoNetworkFound(ScanResult[] results)", "private boolean shouldSkipConnectionAttempt(Long timeMillis)", "private void noteConnectionAttempt(Long timeMillis)", "private void clearConnectionAttemptTimeStamps()", "private void connectToNetwork(WifiConfiguration candidate)", "private int getScanBand()", "private boolean setScanChannels(ScanSettings settings)", "private void watchdogHandler()", "private void startPeriodicSingleScan()", "private void resetLastPeriodicSingleScanTimeStamp()", "private void periodicScanTimerHandler()", "private void startSingleScan(boolean isFullBandScan)", "private void startPeriodicScan(boolean scanImmediately)", "private void startDisconnectedPnoScan()", "private void stopPnoScan()", "private void scheduleWatchdogTimer()", "private void schedulePeriodicScanTimer(int intervalMs)", "private void cancelPeriodicScanTimer()", "private void scheduleDelayedSingleScan(boolean isFullBandScan)", "private void scheduleDelayedConnectivityScan(int msFromNow)", "private void startConnectivityScan(boolean scanImmediately)", "private void stopConnectivityScan()", "public void handleScreenStateChanged(boolean screenOn)", "public void handleConnectionStateChanged(int state)", "public void setUntrustedConnectionAllowed(boolean allowed)", "public void setUserConnectChoice(int netId)", "public void prepareForConnectionAttempt(int netId)", "public void forceConnectivityScan()", "private boolean updateBssidBlacklist(String bssid, boolean enable, int reasonCode)", "public boolean trackBssid(String bssid, boolean enable, int reasonCode)", "public boolean isBssidDisabled(String bssid)", "private HashSet<String> buildBssidBlacklist()", "private void updateFirmwareRoamingConfiguration()", "private void refreshBssidBlacklist()", "private void clearBssidBlacklist()", "private void startPeriodicSingleScan()", "private void stopPnoScan()", "private void updateRunningState()", "public void setWifiEnabled(boolean enable)", "public void enable(boolean enable)", "long getLastPeriodicSingleScanTimeStamp()", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private void localLog(String log)", "public void onAlarm()", "private boolean handleScanResults(List<ScanDetail> scanDetails, String listenerName)", "public void clearScanDetails()", "public void onSuccess()", "public void onFailure(int reason, String description)", "public void onPeriodChanged(int periodInMs)", "public void onResults(WifiScanner.ScanData[] results)", "public void onFullResult(ScanResult fullScanResult)", "public void resetLowRssiNetworkRetryDelay()", "public int getLowRssiNetworkRetryDelay()", "public void onPnoNetworkFound(ScanResult[] results)", "private boolean shouldSkipConnectionAttempt(Long timeMillis)", "private void noteConnectionAttempt(Long timeMillis)", "private void clearConnectionAttemptTimeStamps()", "private void connectToNetwork(WifiConfiguration candidate)", "private int getScanBand()", "private boolean setScanChannels(ScanSettings settings)", "private void watchdogHandler()", "private void startPeriodicSingleScan()", "private void resetLastPeriodicSingleScanTimeStamp()", "private void periodicScanTimerHandler()", "private void startSingleScan(boolean isFullBandScan)", "private void startPeriodicScan(boolean scanImmediately)", "private void startDisconnectedPnoScan()", "private void stopPnoScan()", "private void scheduleWatchdogTimer()", "private void schedulePeriodicScanTimer(int intervalMs)", "private void cancelPeriodicScanTimer()", "private void scheduleDelayedSingleScan(boolean isFullBandScan)", "private void scheduleDelayedConnectivityScan(int msFromNow)", "private void startConnectivityScan(boolean scanImmediately)", "private void stopConnectivityScan()", "public void handleScreenStateChanged(boolean screenOn)", "public void handleConnectionStateChanged(int state)", "public void setUntrustedConnectionAllowed(boolean allowed)", "public void setUserConnectChoice(int netId)", "public void prepareForConnectionAttempt(int netId)", "public void forceConnectivityScan()", "private boolean updateBssidBlacklist(String bssid, boolean enable, int reasonCode)", "public boolean trackBssid(String bssid, boolean enable, int reasonCode)", "public boolean isBssidDisabled(String bssid)", "private HashSet<String> buildBssidBlacklist()", "private void updateFirmwareRoamingConfiguration()", "private void refreshBssidBlacklist()", "private void clearBssidBlacklist()", "private void startPeriodicSingleScan()", "private void stopPnoScan()", "private void updateRunningState()", "public void setWifiEnabled(boolean enable)", "public void enable(boolean enable)", "long getLastPeriodicSingleScanTimeStamp()", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private void localLog(String log)", "public void onAlarm()", "private boolean handleScanResults(List<ScanDetail> scanDetails, String listenerName)", "public void clearScanDetails()", "public void onSuccess()", "public void onFailure(int reason, String description)", "public void onPeriodChanged(int periodInMs)", "public void onResults(WifiScanner.ScanData[] results)", "public void onFullResult(ScanResult fullScanResult)", "public void resetLowRssiNetworkRetryDelay()", "public int getLowRssiNetworkRetryDelay()", "public void onPnoNetworkFound(ScanResult[] results)", "private boolean shouldSkipConnectionAttempt(Long timeMillis)", "private void noteConnectionAttempt(Long timeMillis)", "private void clearConnectionAttemptTimeStamps()", "private void connectToNetwork(WifiConfiguration candidate)", "private int getScanBand()", "private boolean setScanChannels(ScanSettings settings)", "private void watchdogHandler()", "private void startPeriodicSingleScan()", "private void resetLastPeriodicSingleScanTimeStamp()", "private void periodicScanTimerHandler()", "private void startSingleScan(boolean isFullBandScan)", "private void startPeriodicScan(boolean scanImmediately)", "private void startDisconnectedPnoScan()", "private void stopPnoScan()", "private void scheduleWatchdogTimer()", "private void schedulePeriodicScanTimer(int intervalMs)", "private void cancelPeriodicScanTimer()", "private void scheduleDelayedSingleScan(boolean isFullBandScan)", "private void scheduleDelayedConnectivityScan(int msFromNow)", "private void startConnectivityScan(boolean scanImmediately)", "private void stopConnectivityScan()", "public void handleScreenStateChanged(boolean screenOn)", "public void handleConnectionStateChanged(int state)", "public void setUntrustedConnectionAllowed(boolean allowed)", "public void setUserConnectChoice(int netId)", "public void prepareForConnectionAttempt(int netId)", "public void forceConnectivityScan()", "private boolean updateBssidBlacklist(String bssid, boolean enable, int reasonCode)", "public boolean trackBssid(String bssid, boolean enable, int reasonCode)", "public boolean isBssidDisabled(String bssid)", "private HashSet<String> buildBssidBlacklist()", "private void updateFirmwareRoamingConfiguration()", "private void refreshBssidBlacklist()", "private void clearBssidBlacklist()", "private void startPeriodicSingleScan()", "private void stopPnoScan()", "private void updateRunningState()", "public void setWifiEnabled(boolean enable)", "public void enable(boolean enable)", "long getLastPeriodicSingleScanTimeStamp()", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void onAlarm()", "public void clearScanDetails()", "public void onSuccess()", "public void onFailure(int reason, String description)", "public void onPeriodChanged(int periodInMs)", "public void onResults(WifiScanner.ScanData[] results)", "public void onFullResult(ScanResult fullScanResult)", "public void onAlarm()", "public void clearScanDetails()", "public void resetLowRssiNetworkRetryDelay()", "public int getLowRssiNetworkRetryDelay()", "public void onSuccess()", "public void onFailure(int reason, String description)", "public void onPeriodChanged(int periodInMs)", "public void onResults(WifiScanner.ScanData[] results)", "public void onFullResult(ScanResult fullScanResult)", "public void onPnoNetworkFound(ScanResult[] results)"], "prime_var_dic": {"implements": 1}}, {"idx": 94702, "status": "update", "global_index": 19915, "project_name": "android_", "written_on": "2012-09-04 21:31:56", "tufano_target": "private void METHOD_1 ( ) { METHOD_4 ( false ) ; }", "comment": "This call will actually delete the autofill profile, which as that is user data I am inclined to say should not be done.", "tokenized_comment": ["This", "<|s|>", "call", "<|s|>", "will", "<|s|>", "actually", "<|s|>", "delete", "<|s|>", "the", "<|s|>", "autofill", "<|s|>", "profile", ",", "<|s|>", "which", "<|s|>", "as", "<|s|>", "that", "<|s|>", "is", "<|s|>", "user", "<|s|>", "data", "<|s|>", "I", "<|s|>", "am", "<|s|>", "inclined", "<|s|>", "to", "<|s|>", "say", "<|s|>", "should", "<|s|>", "not", "<|s|>", "be", "<|s|>", "done", "."], "tufano_code": "private void METHOD_1 ( ) { VAR_1 = null ; METHOD_2 ( null , null ) ; VAR_2 . METHOD_3 ( ) ; }", "our_target": "        updateSearchEngine(false);\n", "our_code": "    private void resetCachedValues() {\n<|startfocus|>\n        mSearchEngine = null;\n        setAutoFillProfile(null, null);\n        mCustomUserAgents.clear();\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "reset", "Cached", "Values", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Search", "Engine", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "set", "Auto", "Fill", "Profile", "(", "null", ",", "<|s|>", "null", ");", "<|nl|>", "<|8-s|>", "m", "Custom", "User", "Agents", ".", "clear", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 515, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4270", "comment_id": "AAAI6n%2F%2F7wo%3D", "class_list": ["BrowserSettings"], "func_list": ["public static void initialize(final Context context)", "public static BrowserSettings getInstance()", "private BrowserSettings(Context context)", "public void setController(Controller controller)", "public void startManagingSettings(WebSettings settings)", "public void stopManagingSettings(WebSettings settings)", "public void run()", "private static void requireInitialization()", "private void syncSetting(WebSettingsClassic settings)", "private void syncStaticSettings(WebSettingsClassic settings)", "private void syncSharedSettings()", "private void syncManagedSettings()", "public void onSharedPreferenceChanged(", "public static String getFactoryResetHomeUrl(Context context)", "public LayoutAlgorithm getLayoutAlgorithm()", "public int getPageCacheCapacity()", "public WebStorageSizeManager getWebStorageSizeManager()", "private String getAppCachePath()", "private void updateSearchEngine(boolean force)", "public SearchEngine getSearchEngine()", "public boolean isDebugEnabled()", "public void setDebugEnabled(boolean value)", "public void clearCache()", "public void clearCookies()", "public void clearHistory()", "public void clearFormData()", "public void clearPasswords()", "public void clearDatabases()", "public void clearLocationAccess()", "public void resetDefaultPreferences()", "private void resetCachedValues()", "public AutoFillProfile getAutoFillProfile()", "public void setAutoFillProfile(AutoFillProfile profile, Message msg)", "public void toggleDebugSettings()", "public boolean hasDesktopUseragent(WebView view)", "public void toggleDesktopUseragent(WebView view)", "public static int getAdjustedMinimumFontSize(int rawValue)", "public int getAdjustedTextZoom(int rawValue)", "static int getRawTextZoom(int percent)", "public int getAdjustedDoubleTapZoom(int rawValue)", "static int getRawDoubleTapZoom(int percent)", "public SharedPreferences getPreferences()", "public void updateConnectionType()", "private TextSize getTextSize()", "public int getMinimumFontSize()", "public boolean forceEnableUserScalable()", "public int getTextZoom()", "public void setTextZoom(int percent)", "public int getDoubleTapZoom()", "public void setDoubleTapZoom(int percent)", "public String getSearchEngineName()", "public boolean allowAppTabs()", "public boolean openInBackground()", "public boolean enableJavascript()", "public PluginState getPluginState()", "public ZoomDensity getDefaultZoom()", "public boolean loadPageInOverviewMode()", "public boolean autofitPages()", "public boolean blockPopupWindows()", "public boolean loadImages()", "public String getDefaultTextEncoding()", "public String getHomePage()", "public void setHomePage(String value)", "public boolean isAutofillEnabled()", "public void setAutofillEnabled(boolean value)", "public boolean isHardwareAccelerated()", "public boolean isSkiaHardwareAccelerated()", "public int getUserAgent()", "public boolean enableVisualIndicator()", "public boolean enableCpuUploadPath()", "public boolean enableJavascriptConsole()", "public boolean isSmallScreen()", "public boolean isWideViewport()", "public boolean isNormalLayout()", "public boolean isTracing()", "public boolean enableLightTouch()", "public boolean enableNavDump()", "public String getJsEngineFlags()", "public boolean useQuickControls()", "public boolean useMostVisitedHomepage()", "public boolean useFullscreen()", "public boolean useInvertedRendering()", "public float getInvertedContrast()", "public boolean showSecurityWarnings()", "public boolean acceptCookies()", "public boolean saveFormdata()", "public boolean enableGeolocation()", "public boolean rememberPasswords()", "public static String getPreloadOnWifiOnlyPreferenceString(Context context)", "public static String getPreloadAlwaysPreferenceString(Context context)", "public String getDefaultPreloadSetting()", "public String getPreloadEnabled()", "public static String getLinkPrefetchOnWifiOnlyPreferenceString(Context context)", "public static String getLinkPrefetchAlwaysPreferenceString(Context context)", "public String getDefaultLinkPrefetchSetting()", "public String getLinkPrefetchEnabled()", "public long getLastRecovered()", "public void setLastRecovered(long time)", "public boolean wasLastRunPaused()", "public void setLastRunPaused(boolean isPaused)"], "prime_var_dic": {"implements": 1, "String": 3, "font": 1, "int": 5, "sInstance": 1, "sInitialized": 1, "sFactoryResetUrl": 1, "options": 1, "recovery": 1, "is": 1}}, {"idx": 95896, "status": "update", "global_index": 11901, "project_name": "android_", "written_on": "2014-07-23 14:16:54", "tufano_target": "private TYPE_1 METHOD_1 ( String text ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( target , TYPE_3 . METHOD_5 ( text ) . METHOD_6 ( ) ) ; }", "comment": "Does fest already assert that buttons it clicks are (1) visible, and (2) inside a visible parent, recursively up the parent chain? \n\nIf not, it would be good for us to add some assertion checking for that. I can imagine there are cases where we want to look up buttons without requiring that they are visible (for example if we want to assert precisely that some widget *is* invisible, by first looking it up, then asserting !isVisible()), so perhaps the finder method can take a parameter \"requireVisible\" which if true, will recursively make sure the widget is visible and positioned at a x/y/w/h rectangle that is fully within its parent and all parents up the chain.", "tokenized_comment": ["Does", "<|s|>", "fest", "<|s|>", "already", "<|s|>", "assert", "<|s|>", "that", "<|s|>", "buttons", "<|s|>", "it", "<|s|>", "clicks", "<|s|>", "are", "<|s|>", "(", "1", ")", "<|s|>", "visible", ",", "<|s|>", "and", "<|s|>", "(", "2", ")", "<|s|>", "inside", "<|s|>", "a", "<|s|>", "visible", "<|s|>", "parent", ",", "<|s|>", "recursively", "<|s|>", "up", "<|s|>", "the", "<|s|>", "parent", "<|s|>", "chain", "?", "<|s|>", "<|nl|>", "<|nl|>", "If", "<|s|>", "not", ",", "<|s|>", "it", "<|s|>", "would", "<|s|>", "be", "<|s|>", "good", "<|s|>", "for", "<|s|>", "us", "<|s|>", "to", "<|s|>", "add", "<|s|>", "some", "<|s|>", "assertion", "<|s|>", "checking", "<|s|>", "for", "<|s|>", "that", ".", "<|s|>", "I", "<|s|>", "can", "<|s|>", "imagine", "<|s|>", "there", "<|s|>", "are", "<|s|>", "cases", "<|s|>", "where", "<|s|>", "we", "<|s|>", "want", "<|s|>", "to", "<|s|>", "look", "<|s|>", "up", "<|s|>", "buttons", "<|s|>", "without", "<|s|>", "requiring", "<|s|>", "that", "<|s|>", "they", "<|s|>", "are", "<|s|>", "visible", "<|s|>", "(", "for", "<|s|>", "example", "<|s|>", "if", "<|s|>", "we", "<|s|>", "want", "<|s|>", "to", "<|s|>", "assert", "<|s|>", "precisely", "<|s|>", "that", "<|s|>", "some", "<|s|>", "widget", "<|s|>", "*", "is", "*", "<|s|>", "invisible", ",", "<|s|>", "by", "<|s|>", "first", "<|s|>", "looking", "<|s|>", "it", "<|s|>", "up", ",", "<|s|>", "then", "<|s|>", "asserting", "<|s|>", "!", "is", "Visible", "(", ")", ")", ",", "<|s|>", "so", "<|s|>", "perhaps", "<|s|>", "the", "<|s|>", "finder", "<|s|>", "method", "<|s|>", "can", "<|s|>", "take", "<|s|>", "a", "<|s|>", "parameter", "<|s|>", "\"", "require", "Visible", "\"", "<|s|>", "which", "<|s|>", "if", "<|s|>", "true", ",", "<|s|>", "will", "<|s|>", "recursively", "<|s|>", "make", "<|s|>", "sure", "<|s|>", "the", "<|s|>", "widget", "<|s|>", "is", "<|s|>", "visible", "<|s|>", "and", "<|s|>", "positioned", "<|s|>", "at", "<|s|>", "a", "<|s|>", "x", "/", "y", "/", "w", "/", "h", "<|s|>", "rectangle", "<|s|>", "that", "<|s|>", "is", "<|s|>", "fully", "<|s|>", "within", "<|s|>", "its", "<|s|>", "parent", "<|s|>", "and", "<|s|>", "all", "<|s|>", "parents", "<|s|>", "up", "<|s|>", "the", "<|s|>", "chain", "."], "tufano_code": "private TYPE_1 METHOD_1 ( final String text ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( target , new TYPE_2 < TYPE_1 > ( VAR_2 class ) { protected boolean METHOD_4 ( TYPE_1 VAR_3 ) { return text . equals ( VAR_3 . getText ( ) ) ; } } ) ; }", "our_target": "  private JButton findButtonByText(@NotNull String text) {\n    return robot.finder().find(target, JButtonMatcher.withText(text).andShowing());\n", "our_code": "<|startfocus|>\n  private JButton findButtonByText(@NotNull final String text) {\n    return robot.finder().find(target, new GenericTypeMatcher<JButton>(JButton.class) {\n      @Override\n      protected boolean isMatching(JButton button) {\n        return text.equals(button.getText());\n      }\n    });\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "JButton", "<|s|>", "find", "Button", "By", "Text", "(", "@", "Not", "Null", "<|s|>", "final", "<|s|>", "String", "<|s|>", "text", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "return", "<|s|>", "robot", ".", "finder", "(", ")", ".", "find", "(", "target", ",", "<|s|>", "new", "<|s|>", "Generic", "Type", "Matcher", "<", "JButton", ">", "(", "JButton", ".", "class", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Override", "<|nl|>", "<|4-s|>", "<|2-s|>", "protected", "<|s|>", "boolean", "<|s|>", "is", "Matching", "(", "JButton", "<|s|>", "button", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "text", ".", "equals", "(", "button", ".", "get", "Text", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 95, "base_patch_number": 10, "changed_patch_number": 11, "code_file_name": "android_53", "comment_id": "79b2845d_ae656e6d", "class_list": ["NewProjectWizardFixture"], "func_list": ["public static NewProjectWizardFixture find(@NotNull Robot robot)", "protected boolean isMatching(JDialog dialog)", "private NewProjectWizardFixture(@NotNull Robot robot, @NotNull JDialog target)", "public ConfigureAndroidProjectStepFixture configureAndroidProjectStep()", "public ConfigureFormFactorStepFixture configureFormFactorStep()", "public ChooseOptionsForNewFileStepFixture chooseOptionsForNewFileStep()", "private JRootPane findStepWithTitle(@NotNull final String title)", "public boolean test()", "public NewProjectWizardFixture clickNext()", "public NewProjectWizardFixture clickFinish()", "private JButton findButtonByText(@NotNull final String text)"], "prime_var_dic": {}}, {"idx": 74740, "status": "update", "global_index": 21693, "project_name": "android_", "written_on": "2013-12-12 17:14:52", "tufano_target": "void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . METHOD_2 ( ) , VAR_1 ) ; VAR_2 . put ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) , VAR_1 ) ; VAR_2 . put ( VAR_1 . METHOD_4 ( ) , VAR_1 ) ; }", "comment": "s/get/be", "tokenized_comment": ["s", "/", "get", "/", "be"], "tufano_code": "void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . METHOD_2 ( ) , VAR_1 ) ; VAR_2 . put ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) , VAR_1 ) ; VAR_2 . put ( VAR_1 . METHOD_4 ( ) , VAR_1 ) ; }", "our_target": "        // references in project.properties can be relative and can be made canonical;\n", "our_code": "    void registerProject(@NonNull EclipseProject project) {\n        // Register not just this directory but the canonical versions too, since library\n<|startfocus|>\n        // references in project.properties can be relative and can get made canonical;\n<|endfocus|>\n        // we want to make sure that a project known by any of these versions of the paths\n        // are treated as the same\n        mProjectMap.put(project.getDir(), project);\n        mProjectMap.put(project.getDir().getAbsoluteFile(), project);\n        mProjectMap.put(project.getCanonicalDir(), project);\n    }", "tokenized_code": ["<|4-s|>", "void", "<|s|>", "register", "Project", "(", "@", "Non", "Null", "<|s|>", "Eclipse", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Register", "<|s|>", "not", "<|s|>", "just", "<|s|>", "this", "<|s|>", "directory", "<|s|>", "but", "<|s|>", "the", "<|s|>", "canonical", "<|s|>", "versions", "<|s|>", "too", ",", "<|s|>", "since", "<|s|>", "library", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "references", "<|s|>", "in", "<|s|>", "project", ".", "properties", "<|s|>", "can", "<|s|>", "be", "<|s|>", "relative", "<|s|>", "and", "<|s|>", "can", "<|s|>", "get", "<|s|>", "made", "<|s|>", "canonical", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "we", "<|s|>", "want", "<|s|>", "to", "<|s|>", "make", "<|s|>", "sure", "<|s|>", "that", "<|s|>", "a", "<|s|>", "project", "<|s|>", "known", "<|s|>", "by", "<|s|>", "any", "<|s|>", "of", "<|s|>", "these", "<|s|>", "versions", "<|s|>", "of", "<|s|>", "the", "<|s|>", "paths", "<|nl|>", "<|8-s|>", "//", "<|s|>", "are", "<|s|>", "treated", "<|s|>", "as", "<|s|>", "the", "<|s|>", "same", "<|nl|>", "<|8-s|>", "m", "Project", "Map", ".", "put", "(", "project", ".", "get", "Dir", "(", ")", ",", "<|s|>", "project", ");", "<|nl|>", "<|8-s|>", "m", "Project", "Map", ".", "put", "(", "project", ".", "get", "Dir", "(", ")", ".", "get", "Absolute", "File", "(", ")", ",", "<|s|>", "project", ");", "<|nl|>", "<|8-s|>", "m", "Project", "Map", ".", "put", "(", "project", ".", "get", "Canonical", "Dir", "(", ")", ",", "<|s|>", "project", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 631, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_1995", "comment_id": "08abe757_abcb4d59", "class_list": ["GradleImport"], "func_list": ["public GradleImport()", "public static boolean isEclipseProjectDir(@Nullable File file)", "public static boolean isAdtProjectDir(@Nullable File file)", "public GradleImport setGradleWrapperLocation(@NonNull File gradleWrapper)", "public GradleImport setSdkLocation(@NonNull File sdkLocation)", "public File getSdkLocation()", "public GradleImport setEclipseWorkspace(@NonNull File workspace)", "public GradleImport setReplaceJars(boolean replaceJars)", "public boolean isReplaceJars()", "public boolean isReplaceLibs()", "public void setReplaceLibs(boolean replaceLibs)", "public GradleImport setGradleNameStyle(boolean lowerCase)", "public boolean isGradleNameStyle()", "public boolean needEclipseWorkspace()", "private void guessWorkspace(@NonNull File projectDir)", "private static boolean isEclipseWorkspaceDir(@NonNull File file)", "private static String generateProguardFileList(List<File> localRules, List<File> sdkRules)", "private static void appendRepositories(@NonNull StringBuilder sb, boolean needAndroidPlugin)", "public List<String> getWarnings()", "public List<String> getErrors()", "public void reportWarning(", "private static String formatMessage(", "private File getSettingsFile()", "private File getWorkspaceLocation()", "public ImportSummary getSummary()", "void registerProject(@NonNull EclipseProject project)", "void registerModule(@NonNull ImportModule module)", "int getModuleCount()", "void markJarHandled(@NonNull File file)", "boolean isJarHandled(@NonNull File file)", "boolean isMissingSupportRepository()"], "prime_var_dic": {"int": 1, "String": 5, "libraries": 1, "sub": 1, "IOException": 1}}, {"idx": 15947, "status": "insert", "global_index": 11107, "project_name": "android_", "written_on": "2015-06-05 17:37:05", "tufano_target": "public boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( ) ; } else { TYPE_2 . METHOD_4 ( ) ; } return super . METHOD_1 ( ) ; }", "comment": "Perhaps add a comment:\nThis was code was supposed to be called from LafManager.initComponent().\nBut our Welcome wizard is started AFTER this call.", "tokenized_comment": ["Perhaps", "<|s|>", "add", "<|s|>", "a", "<|s|>", "comment", ":", "<|nl|>", "This", "<|s|>", "was", "<|s|>", "code", "<|s|>", "was", "<|s|>", "supposed", "<|s|>", "to", "<|s|>", "be", "<|s|>", "called", "<|s|>", "from", "<|s|>", "Laf", "Manager", ".", "init", "Component", "(", ")", ".", "<|nl|>", "But", "<|s|>", "our", "<|s|>", "Welcome", "<|s|>", "wizard", "<|s|>", "is", "<|s|>", "started", "<|s|>", "AFTER", "<|s|>", "this", "<|s|>", "call", "."], "tufano_code": "public boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( ) ; } else { TYPE_2 . METHOD_4 ( ) ; } return super . METHOD_1 ( ) ; }", "our_target": "  public boolean commitStep() {\n    // This code is duplicated from LafManager.initComponent(). But our Welcome Wizard is started\n    // AFTER that call so we repeat it here.\n", "our_code": "<|startfocus|>\n  public boolean commitStep() {\n<|endfocus|>\n    if (UIUtil.isUnderDarcula()) {\n      DarculaInstaller.install();\n    }\n    else {\n      DarculaInstaller.uninstall();\n    }\n\n    return super.commitStep();\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "commit", "Step", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "UIUtil", ".", "is", "Under", "Darcula", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Darcula", "Installer", ".", "install", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Darcula", "Installer", ".", "uninstall", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "super", ".", "commit", "Step", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 47, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_635", "comment_id": "d9df0c22_389bd952", "class_list": ["SelectThemeStep"], "func_list": ["public SelectThemeStep(@NotNull ScopedStateStore.Key<Boolean> keyCustomInstall)", "public void init()", "public boolean commitStep()", "public boolean isStepVisible()", "public JLabel getMessageLabel()", "public JComponent getPreferredFocusedComponent()"], "prime_var_dic": {"themePanel": 1}}, {"idx": 95341, "status": "update", "global_index": 17879, "project_name": "android_", "written_on": "2009-01-14 20:20:45", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 + STRING_3 ) ; }", "comment": "Line to long", "tokenized_comment": ["Line", "<|s|>", "to", "<|s|>", "long"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; }", "our_target": "        // This function should be overridden by the class CDMAPhone.\n        // It is not implemented in the class GSMPhone.\n        Log.e(LOG_TAG, \"Error! This function should never be executed, because we have an \" +\n                \"inactive CDMAPhone then.\");\n", "our_code": "    public void queryTTYModeEnabled(Message onComplete) {\n<|startfocus|>\n        // This function should be overridden by the class CDMAPhone. It is not implemented in the class GSMPhone.\n        Log.e(LOG_TAG, \"Error! This function should never be executed, because we have an inactive CDMAPhone then.\");\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "query", "TTYMode", "Enabled", "(", "Message", "<|s|>", "on", "Complete", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "This", "<|s|>", "function", "<|s|>", "should", "<|s|>", "be", "<|s|>", "overridden", "<|s|>", "by", "<|s|>", "the", "<|s|>", "class", "<|s|>", "CDMAPhone", ".", "<|s|>", "It", "<|s|>", "is", "<|s|>", "not", "<|s|>", "implemented", "<|s|>", "in", "<|s|>", "the", "<|s|>", "class", "<|s|>", "GSMPhone", ".", "<|nl|>", "<|8-s|>", "Log", ".", "e", "(", "LOG", "_", "TAG", ",", "<|s|>", "\"", "Error", "!", "<|s|>", "This", "<|s|>", "function", "<|s|>", "should", "<|s|>", "never", "<|s|>", "be", "<|s|>", "executed", ",", "<|s|>", "because", "<|s|>", "we", "<|s|>", "have", "<|s|>", "an", "<|s|>", "inactive", "<|s|>", "CDMAPhone", "<|s|>", "then", ".", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 460, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4956", "comment_id": "zed975211eac5054937961dd93e9aa810", "class_list": ["PhoneBase", "CDMAPhone.", "GSMPhone.", "CDMAPhone.", "GSMPhone.", "CDMAPhone.", "GSMPhone.", "CDMAPhone.", "GSMPhone."], "func_list": ["protected PhoneBase(PhoneNotifier notifier, Context context)", "public Context getContext()", "public void registerForPhoneStateChanged(Handler h, int what, Object obj)", "public void unregisterForPhoneStateChanged(Handler h)", "protected void notifyCallStateChangedP()", "public void registerForUnknownConnection(Handler h, int what, Object obj)", "public void unregisterForUnknownConnection(Handler h)", "public void registerForNewRingingConnection(", "public void unregisterForNewRingingConnection(Handler h)", "protected void notifyNewRingingConnectionP(Connection cn)", "public void registerForIncomingRing(", "public void unregisterForIncomingRing(Handler h)", "public void registerForDisconnect(Handler h, int what, Object obj)", "public void unregisterForDisconnect(Handler h)", "public void registerForSuppServiceFailed(Handler h, int what, Object obj)", "public void unregisterForSuppServiceFailed(Handler h)", "public void registerForMmiInitiate(Handler h, int what, Object obj)", "public void unregisterForMmiInitiate(Handler h)", "public void registerForMmiComplete(Handler h, int what, Object obj)", "public void unregisterForMmiComplete(Handler h)", "private String getSavedNetworkSelection()", "public void restoreSavedNetworkSelection(Message response)", "public void setUnitTestMode(boolean f)", "public boolean getUnitTestMode()", "protected void notifyDisconnectP(Connection cn)", "public void registerForServiceStateChanged(", "public void unregisterForServiceStateChanged(Handler h)", "protected void notifyServiceStateChangedP(ServiceState ss)", "public SimulatedRadioControl getSimulatedRadioControl()", "private void checkCorrectThread(Handler h)", "public void queryCdmaRoamingPreference(Message response)", "public void setCdmaRoamingPreference(int cdmaRoamingType, Message response)", "public void setCdmaSubscription(int cdmaSubscriptionType, Message response)", "public void setPreferredNetworkType(int networkType, Message response)", "public void getPreferredNetworkType(Message response)", "public void setTTYModeEnabled(boolean enable, Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "protected  boolean isValidCommandInterfaceCFReason (int commandInterfaceCFReason)", "protected  boolean isValidCommandInterfaceCFAction (int commandInterfaceCFAction)", "protected  boolean isCfEnable(int action)", "protected  void syncClirSetting()", "public void getCallForwardingOption(int commandInterfaceCFReason, Message onComplete)", "public  void saveClirSetting(int commandInterfaceCLIRMode)", "public void setCallForwardingOption(int commandInterfaceCFAction,", "public void enableEnhancedVoicePrivacy(boolean enable, Message onComplete)", "public void getEnhancedVoicePrivacy(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)"], "prime_var_dic": {}}, {"idx": 44146, "status": "update", "global_index": 12346, "project_name": "android_", "written_on": "2014-08-18 16:17:24", "tufano_target": "protected synchronized TYPE_1 METHOD_1 ( ) { TYPE_1 result = METHOD_1 ( METHOD_2 ( ) ) ; if ( result == VAR_1 || result == VAR_2 ) { TYPE_2 . METHOD_4 ( ) ; VAR_3 = null ; } return result ; }", "comment": "I get a compile error here since this is package private. Do you have a chance in ddmlib?", "tokenized_comment": ["I", "<|s|>", "get", "<|s|>", "a", "<|s|>", "compile", "<|s|>", "error", "<|s|>", "here", "<|s|>", "since", "<|s|>", "this", "<|s|>", "is", "<|s|>", "package", "<|s|>", "private", ".", "<|s|>", "Do", "<|s|>", "you", "<|s|>", "have", "<|s|>", "a", "<|s|>", "chance", "<|s|>", "in", "<|s|>", "ddmlib", "?"], "tufano_code": "protected synchronized TYPE_1 METHOD_1 ( ) { TYPE_1 result = METHOD_1 ( METHOD_2 ( ) ) ; if ( result == VAR_1 || result == VAR_2 ) { VAR_3 . METHOD_3 ( ) ; VAR_3 = null ; } return result ; }", "our_target": "        AndroidDebugBridge.disconnectBridge();\n", "our_code": "    protected synchronized ShouldResume timeoutPrompt() {\n      ShouldResume result = timeoutPrompt(getProject());\n      if (result == ShouldResume.RETRY || result == ShouldResume.CANCEL) {\n<|startfocus|>\n        myBridge.stop();\n<|endfocus|>\n        myBridge = null;\n      }\n      return result;\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "synchronized", "<|s|>", "Should", "Resume", "<|s|>", "timeout", "Prompt", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Should", "Resume", "<|s|>", "result", "<|s|>", "=", "<|s|>", "timeout", "Prompt", "(", "get", "Project", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "result", "<|s|>", "==", "<|s|>", "Should", "Resume", ".", "RETRY", "<|s|>", "||", "<|s|>", "result", "<|s|>", "==", "<|s|>", "Should", "Resume", ".", "CANCEL", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "my", "Bridge", ".", "stop", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "my", "Bridge", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "result", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 152, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_767", "comment_id": "7637f3c3_b2f4e668", "class_list": ["AndroidDebugBridgeService", "InitializationMonitorTask"], "func_list": ["private AndroidDebugBridgeService(@NotNull String adbPath)", "private static String combine(@NotNull String[] strs)", "public void initializeInBackground(final Project project, final Function<AndroidDebugBridge, ?> callback)", "public void run()", "public boolean waitForInitialization(Project project)", "public InitializationMonitorTask(Project project)", "protected boolean isComplete()", "protected synchronized ShouldResume timeoutPrompt()", "else if (r == 1)", "private AndroidDebugBridgeService(@NotNull String adbPath)"], "prime_var_dic": {}}, {"idx": 52828, "status": "update", "global_index": 14420, "project_name": "android_", "written_on": "2014-03-07 23:58:21", "tufano_target": "int METHOD_2 ( ) { return VAR_2 ; }", "comment": "What does this location represent?", "tokenized_comment": ["What", "<|s|>", "does", "<|s|>", "this", "<|s|>", "location", "<|s|>", "represent", "?"], "tufano_code": "int METHOD_1 ( ) { return VAR_1 ; }", "our_target": "    @VisibleForTesting\n    int getPixelLocation() {\n        return mPixelLocation;\n", "our_code": "<|startfocus|>\n    int getLocation() {\n        return mLocation;\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "get", "Location", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Location", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 41, "base_patch_number": 8, "changed_patch_number": 10, "code_file_name": "android_1015", "comment_id": "fc4c9db4_9c1b1a59", "class_list": ["TickException"], "func_list": ["int getLocation()"], "prime_var_dic": {"mLocation": 1}}, {"idx": 39155, "status": "update", "global_index": 3304, "project_name": "android_", "written_on": "2017-02-09 00:34:43", "tufano_target": "public boolean METHOD_1 ( ) { if ( ! VAR_1 ) { return true ; } if ( ! VAR_2 . METHOD_2 ( ) ) { return false ; } return VAR_3 . METHOD_2 ( ) ; }", "comment": "Do we need this null check here? mSupplicantP2pIfaceHal should already be created in WifiInjector when we beging using WifiNative.", "tokenized_comment": ["Do", "<|s|>", "we", "<|s|>", "need", "<|s|>", "this", "<|s|>", "null", "<|s|>", "check", "<|s|>", "here", "?", "<|s|>", "m", "Supplicant", "P", "2", "p", "Iface", "Hal", "<|s|>", "should", "<|s|>", "already", "<|s|>", "be", "<|s|>", "created", "<|s|>", "in", "<|s|>", "Wifi", "Injector", "<|s|>", "when", "<|s|>", "we", "<|s|>", "beging", "<|s|>", "using", "<|s|>", "Wifi", "Native", "."], "tufano_code": "public boolean METHOD_1 ( ) { if ( ! VAR_1 ) { return true ; } if ( VAR_2 != null ) { if ( ! VAR_2 . METHOD_2 ( ) ) { return false ; } } return VAR_3 . METHOD_2 ( ) ; }", "our_target": "        if (!mSupplicantP2pIfaceHal.initialize()) {\n            return false;\n", "our_code": "    public boolean initializeSupplicantHal() {\n        if (!HIDL_ENABLE) {\n            return true;\n        }\n\n<|startfocus|>\n        if (mSupplicantP2pIfaceHal != null) {\n            if (!mSupplicantP2pIfaceHal.initialize()) {\n                return false;\n            }\n<|endfocus|>\n        }\n\n        return mSupplicantStaIfaceHal.initialize();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "initialize", "Supplicant", "Hal", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "HIDL", "_", "ENABLE", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Supplicant", "P", "2", "p", "Iface", "Hal", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "m", "Supplicant", "P", "2", "p", "Iface", "Hal", ".", "initialize", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Supplicant", "Sta", "Iface", "Hal", ".", "initialize", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 210, "base_patch_number": 26, "changed_patch_number": 29, "code_file_name": "android_4067", "comment_id": "baceb938_190ec6a5", "class_list": ["WifiNative", "MonitorThread", "ScanCapabilities", "ChannelSettings", "BucketSettings", "HiddenNetwork", "ScanSettings", "PnoNetwork", "PnoSettings", "WifiChannelInfo", "TdlsEventHandler", "definition", "TdlsStatus", "definition", "TdlsCapabilities", "RingBufferStatus{", "FateReport", "TxFateReport", "RxFateReport", "RoamingCapabilities", "RoamingConfig"], "func_list": ["public static WifiNative getWlanNativeInterface()", "public static WifiNative getP2pNativeInterface()", "public void initContext(Context context)", "public void setSupplicantStaIfaceHal(SupplicantStaIfaceHal wifiSupplicantHal)", "public void setSupplicantP2pIfaceHal(SupplicantP2pIfaceHal wifiSupplicantHal)", "public void setWifiVendorHal(WifiVendorHal wifiVendorHal)", "private WifiNative(String interfaceName,", "public boolean initializeVendorHal()", "public boolean initializeSupplicantHal()", "public String getInterfaceName()", "void enableVerboseLogging(int verbose)", "private void localLog(String s)", "private native static boolean connectToSupplicantNative();", "private native static void closeSupplicantConnectionNative();", "private native static String waitForEventNative();", "private native boolean doBooleanCommandNative(String command);", "private boolean doBooleanCommandWithoutLogging(String command)", "private native int doIntCommandNative(String command);", "private native String doStringCommandNative(String command);", "private String doStringCommandWithoutLogging(String command)", "public String doCustomSupplicantCommand(String command)", "public boolean ping()", "public void setSupplicantLogLevel(String level)", "public static String encodeSSID(String ssid)", "public boolean scan(Set<Integer> freqs, Set<String> hiddenNetworkSSIDs)", "private boolean scanWithParams(String freqList, String hiddenNetworkSSIDList)", "public boolean stopSupplicant()", "public String listNetworks()", "public int addNetwork()", "public boolean setNetworkExtra(int netId, String name, Map<String, String> values)", "public static String createNetworkExtra(Map<String, String> values)", "public boolean setNetworkVariable(int netId, String name, String value)", "public String getNetworkVariable(int netId, String name)", "public boolean removeNetwork(int netId)", "public boolean removeAllNetworks()", "private void logDbg(String debug)", "public boolean enableNetwork(int netId)", "public boolean enableNetworkWithoutConnect(int netId)", "public boolean disableNetwork(int netId)", "public boolean selectNetwork(int netId)", "public boolean reconnect()", "public boolean reassociate()", "public boolean disconnect()", "public String status()", "public String getMacAddress()", "private String getRawScanResults(String range)", "public ArrayList<ScanDetail> getScanResults()", "public String scanResult(String bssid)", "public boolean startFilteringMulticastV4Packets()", "public boolean stopFilteringMulticastV4Packets()", "public boolean startFilteringMulticastV6Packets()", "public boolean stopFilteringMulticastV6Packets()", "public boolean setBluetoothCoexistenceMode(int mode)", "public boolean setBluetoothCoexistenceScanMode(boolean setCoexScanMode)", "public void enableSaveConfig()", "public boolean saveConfig()", "public boolean addToBlacklist(String bssid)", "public boolean clearBlacklist()", "public boolean setSuspendOptimizations(boolean enabled)", "public boolean setCountryCode(String countryCode)", "public boolean setPnoScan(boolean enable)", "public void enableAutoConnect(boolean enable)", "public void setScanInterval(int scanInterval)", "public void setHs20(boolean hs20)", "public void startTdls(String macAddr, boolean enable)", "public boolean startWpsPbc(String bssid)", "public boolean startWpsPinKeypad(String pin)", "public String startWpsPinDisplay(String bssid)", "public boolean setExternalSim(boolean external)", "public boolean simAuthResponse(int id, String type, String response)", "public boolean simAuthFailedResponse(int id)", "public boolean umtsAuthFailedResponse(int id)", "public boolean simIdentityResponse(int id, String response)", "public boolean startWpsRegistrar(String bssid, String pin)", "public boolean cancelWps()", "public boolean setPersistentReconnect(boolean enabled)", "public boolean setDeviceName(String name)", "public boolean setDeviceType(String type)", "public boolean setConfigMethods(String cfg)", "public boolean setManufacturer(String value)", "public boolean setModelName(String value)", "public boolean setModelNumber(String value)", "public boolean setSerialNumber(String value)", "public boolean setP2pSsidPostfix(String postfix)", "public boolean setP2pGroupIdle(String iface, int time)", "public void setPowerSave(boolean enabled)", "public boolean setP2pPowerSave(String iface, boolean enabled)", "public boolean setWfdEnable(boolean enable)", "public boolean setWfdDeviceInfo(String hex)", "public boolean setConcurrencyPriority(String s)", "public boolean p2pFind()", "public boolean p2pStopFind()", "public boolean p2pListen()", "public boolean p2pExtListen(boolean enable, int period, int interval)", "public boolean p2pSetChannel(int lc, int oc)", "public boolean p2pFlush()", "public String p2pConnect(WifiP2pConfig config, boolean joinExistingGroup)", "public boolean p2pCancelConnect()", "public boolean p2pProvisionDiscovery(WifiP2pConfig config)", "public boolean p2pGroupAdd(boolean persistent)", "public boolean p2pGroupRemove(String iface)", "public boolean p2pReject(String deviceAddress)", "public boolean p2pInvite(WifiP2pGroup group, String deviceAddress)", "public boolean p2pReinvoke(int netId, String deviceAddress)", "public String p2pGetSsid(String deviceAddress)", "public String p2pGetDeviceAddress()", "public int getGroupCapability(String deviceAddress)", "public String p2pPeer(String deviceAddress)", "private String p2pGetParam(String deviceAddress, String key)", "public boolean p2pServiceAdd(WifiP2pServiceInfo servInfo)", "public boolean p2pServiceDel(WifiP2pServiceInfo servInfo)", "public boolean p2pServiceFlush()", "public String p2pServDiscReq(String addr, String query)", "public boolean p2pServDiscCancelReq(String id)", "public void setMiracastMode(int mode)", "public String getNfcWpsConfigurationToken(int netId)", "public String getNfcHandoverRequest()", "public String getNfcHandoverSelect()", "public boolean initiatorReportNfcHandover(String selectMessage)", "public boolean responderReportNfcHandover(String requestMessage)", "synchronized public String readKernelLog()", "private static int getNewCmdIdLocked()", "public void run()", "private static native boolean startHalNative();", "private static native void stopHalNative();", "public boolean isHalStarted()", "public int queryInterfaceIndex(String interfaceName)", "public boolean getScanCapabilities(ScanCapabilities capabilities)", "public boolean equals(Object otherObj)", "void onScanStatus(int event);", "public static  WifiSsid createWifiSsid(byte[] rawSsid)", "public static String ssidConvert(byte[] rawSsid)", "public static boolean setSsid(byte[] rawSsid, ScanResult result)", "private static void populateScanResult(ScanResult result, int beaconCap, String dbg)", "void onFullScanResult(ScanResult fullScanResult, int bucketsScanned);", "private static native boolean startScanNative(int iface, int id, ScanSettings settings);", "public void stopScan()", "public void pauseScan()", "public void restartScan()", "private native static boolean setHotlistNative(int iface, int id,", "public void resetHotlist()", "void onHotlistApFound (ScanResult[] result);", "void onHotlistApLost  (ScanResult[] result);", "private static native boolean trackSignificantWifiChangeNative(", "public void untrackSignificantWifiChange()", "private static void onSignificantWifiChange(int id, ScanResult[] results)", "private static native WifiLinkLayerStats getWifiLinkLayerStatsNative(int iface);", "private static native void setWifiLinkLayerStatsNative(int iface, int enable);", "public static native int getSupportedFeatureSetNative(int iface);", "void onRttResults(RttManager.RttResult[] result);", "public boolean requestRtt(", "public boolean cancelRtt(RttManager.RttParams[] params)", "private static native ResponderConfig enableRttResponderNative(int iface, int commandId,", "private static native boolean disableRttResponderNative(int iface, int commandId);", "private static native boolean setScanningMacOuiNative(int iface, byte[] oui);", "private static native boolean isGetChannelsForBandSupportedNative();", "private static native boolean setDfsFlagNative(int iface, boolean dfsOn);", "private static native ApfCapabilities getApfCapabilitiesNative(int iface);", "private static native boolean installPacketFilterNative(int iface, byte[] filter);", "private static native boolean setCountryCodeHalNative(int iface, String CountryCode);", "private static native boolean enableDisableTdlsNative(int iface, boolean enable,", "private static native TdlsStatus getTdlsStatusNative(int iface, String macAddr);", "private static native TdlsCapabilities getTdlsCapabilitiesNative(int iface);", "private static boolean onTdlsStatus(String macAddr, int status, int reason)", "void onRingBufferData(RingBufferStatus status, byte[] buffer);", "void onWifiAlert(int errorCode, byte[] buffer);", "private static native boolean setLoggingEventHandlerNative(int iface, int id);", "private static native boolean startLoggingRingBufferNative(int iface, int verboseLevel,", "private static native int getSupportedLoggerFeatureSetNative(int iface);", "private static native boolean resetLogHandlerNative(int iface, int id);", "private static native String getDriverVersionNative(int iface);", "private static native String getFirmwareVersionNative(int iface);", "public String toString()", "private static native RingBufferStatus[] getRingBufferStatusNative(int iface);", "private static native boolean getRingBufferDataNative(int iface, String ringName);", "private static void onWifiFwMemoryAvailable(byte[] buffer)", "public byte[] getFwMemoryDump()", "private static native byte[] getDriverStateDumpNative(int iface);", "public String toTableRowString()", "public String toVerboseStringWithPiiAllowed()", "public static String getTableHeader()", "private static String frameTypeToString(byte frameType)", "private static long convertDriverTimestampUSecToWallclockMSec(long driverTimestampUSec)", "protected abstract String directionToString();", "protected abstract String fateToString();", "public boolean startPktFateMonitoring()", "public boolean getTxPktFates(TxFateReport[] reportBufs)", "public boolean getRxPktFates(RxFateReport[] reportBufs)", "private static native boolean setPnoListNative(int iface, int id, PnoSettings settings);", "private static native boolean resetPnoListNative(int iface, int id);", "void onPnoNetworkFound(ScanResult[] results);", "void onRssiThresholdBreached(byte curRssi);", "private native static int startRssiMonitoringNative(int iface, int id,", "private native static int stopRssiMonitoringNative(int iface, int idx);", "private static native WifiWakeReasonAndCounts getWlanWakeReasonCountNative(int iface);", "public boolean configureNeighborDiscoveryOffload(boolean enabled)", "public boolean getRoamingCapabilities(RoamingCapabilities capabilities)", "public int enableFirmwareRoaming(int state)", "public boolean configureRoaming(RoamingConfig config)", "void legacyHalWarning()", "public void run()", "public boolean equals(Object otherObj)", "public boolean equals(Object otherObj)", "private static native boolean enableDisableTdlsNative(int iface, boolean enable,", "public String toString()", "public String toTableRowString()", "public String toVerboseStringWithPiiAllowed()", "public static String getTableHeader()", "private static String frameTypeToString(byte frameType)", "private static long convertDriverTimestampUSecToWallclockMSec(long driverTimestampUSec)", "protected String directionToString()", "protected String fateToString()", "protected String directionToString()", "protected String fateToString()"], "prime_var_dic": {"RoamingConfig": 1}}, {"idx": 87453, "status": "update", "global_index": 20658, "project_name": "android_", "written_on": "2013-05-14 05:08:50", "tufano_target": "private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) != TYPE_1 . METHOD_3 ( ) ) { throw new TYPE_2 ( STRING_2 ) ; } }", "comment": "\"ImageLoader must be invoked from the main thread\"", "tokenized_comment": ["\"", "Image", "Loader", "<|s|>", "must", "<|s|>", "be", "<|s|>", "invoked", "<|s|>", "from", "<|s|>", "the", "<|s|>", "main", "<|s|>", "thread", "\""], "tufano_code": "private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) != TYPE_1 . METHOD_3 ( ) ) { throw new TYPE_2 ( STRING_1 ) ; } }", "our_target": "            throw new IllegalStateException(\"ImageLoader must be invoked from the main thread.\");\n", "our_code": "    private void throwIfNotOnMainThread() {\n        if (Looper.myLooper() != Looper.getMainLooper()) {\n<|startfocus|>\n            throw new IllegalStateException(\"ImageLoader was invoked\");\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "throw", "If", "Not", "On", "Main", "Thread", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "Looper", ".", "my", "Looper", "(", ")", "<|s|>", "!=", "<|s|>", "Looper", ".", "get", "Main", "Looper", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "\"", "Image", "Loader", "<|s|>", "was", "<|s|>", "invoked", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 434, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4508", "comment_id": "Ui2v8yfM", "class_list": ["is", "must", "ImageLoader", "ImageContainer", "used", "BatchedImageRequest"], "func_list": ["public ImageLoader(RequestQueue queue, ImageCache imageCache)", "public static ImageListener getImageListener(final ImageView view,", "public void onErrorResponse(VolleyError error)", "public void onResponse(ImageContainer response, boolean isImmediate)", "public ImageContainer get(String requestUrl, final ImageListener listener)", "new ImageRequest(requestUrl, new Listener<Bitmap>()", "public void setBatchedResponseDelayInMs(int newBatchedResponseDelayMs)", "private void onGetImageSuccess(String cacheKey, Bitmap response)", "private void onGetImageError(String cacheKey, VolleyError error)", "public ImageContainer get(String requestUrl, final ImageListener listener)", "public void cancelRequest()", "public Bitmap getBitmap(String url);", "public String getRequestUrl()", "public BatchedImageRequest(Request<?> request, ImageContainer container)", "public void addHandler(ImageContainer container)", "public boolean removeHandlerAndCancelIfNecessary(ImageContainer container)", "private void batchResponse(String cacheKey, BatchedImageRequest request,", "public void run()", "private void throwIfNotOnMainThread()", "private static String getCacheKey(String url, int maxWidth, int maxHeight)", "public void onResponse(ImageContainer response, boolean isImmediate)"], "prime_var_dic": {"main": 1, "response": 1}}, {"idx": 86409, "status": "update", "global_index": 13924, "project_name": "android_", "written_on": "2015-01-21 14:02:50", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { super ( STRING_1 + VAR_2 . METHOD_1 ( ) + STRING_4 + VAR_3 . METHOD_1 ( ) + STRING_3 + VAR_4 . METHOD_2 ( ) ) ; }", "comment": "in?", "tokenized_comment": ["in", "?"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { super ( STRING_1 + VAR_2 . METHOD_1 ( ) + STRING_2 + VAR_3 . METHOD_1 ( ) + STRING_3 + VAR_4 . METHOD_2 ( ) ) ; }", "our_target": "    super(\"'\" + vfs.getDescription() + \"' VFS format in \" + location.getDescription()\n", "our_code": "  public WrongVFSFormatException(@Nonnull VFS vfs, @Nonnull Location location,\n      @Nonnull Throwable cause) {\n<|startfocus|>\n    super(\"'\" + vfs.getDescription() + \"' VFS format at \" + location.getDescription()\n<|endfocus|>\n        + \" is wrong: \" + cause.getMessage());\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Wrong", "VFSFormat", "Exception", "(", "@", "Nonnull", "<|s|>", "VFS", "<|s|>", "vfs", ",", "<|s|>", "@", "Nonnull", "<|s|>", "Location", "<|s|>", "location", ",", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Nonnull", "<|s|>", "Throwable", "<|s|>", "cause", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "\"", "'", "\"", "<|s|>", "+", "<|s|>", "vfs", ".", "get", "Description", "(", ")", "<|s|>", "+", "<|s|>", "\"", "'", "<|s|>", "VFS", "<|s|>", "format", "<|s|>", "at", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "location", ".", "get", "Description", "(", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "+", "<|s|>", "\"", "<|s|>", "is", "<|s|>", "wrong", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "cause", ".", "get", "Message", "(", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 33, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3825", "comment_id": "4bc24f1f_1cc8a184", "class_list": ["WrongVFSFormatException"], "func_list": ["public WrongVFSFormatException(@Nonnull VFS vfs, @Nonnull Location location,"], "prime_var_dic": {"long": 1}}, {"idx": 73752, "status": "insert", "global_index": 21678, "project_name": "android_", "written_on": "2013-12-19 20:09:25", "tufano_target": "protected void METHOD_1 ( ) { if ( VAR_1 == null ) return ; if ( VAR_1 . isEmpty ( ) ) { VAR_1 = null ; return ; } VAR_2 = ( VAR_2 + 1 ) % VAR_1 . size ( ) ; METHOD_2 ( ) ; }", "comment": "check for empty", "tokenized_comment": ["check", "<|s|>", "for", "<|s|>", "empty"], "tufano_code": "protected void METHOD_1 ( ) { if ( VAR_1 == null ) return ; VAR_2 = ( VAR_2 + 1 ) % VAR_1 . size ( ) ; METHOD_2 ( ) ; }", "our_target": "            return;\n        if(mSearchResult.isEmpty()){\n            mSearchResult = null;\n            return;\n        }\n", "our_code": "    protected void nextSearchResult() {\n        if (mSearchResult == null)\n<|startfocus|>\n            return;\n<|endfocus|>\n        mSearchResultIndex = (mSearchResultIndex + 1) % mSearchResult.size();\n        updateSearchResultSelection();\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "next", "Search", "Result", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Search", "Result", "<|s|>", "==", "<|s|>", "null", ")", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Search", "Result", "Index", "<|s|>", "=", "<|s|>", "(", "m", "Search", "Result", "Index", "<|s|>", "+", "<|s|>", "1", ")", "<|s|>", "%", "<|s|>", "m", "Search", "Result", ".", "size", "(", ");", "<|nl|>", "<|8-s|>", "update", "Search", "Result", "Selection", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 486, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_5628", "comment_id": "e871338d_f70c9a07", "class_list": ["UiAutomatorView", "AttributeTableEditingSupport"], "func_list": ["public UiAutomatorView(Composite parent, int style)", "public void handleEvent(Event arg0)", "public void mouseUp(MouseEvent e)", "public void paintControl(PaintEvent e)", "public void mouseMove(MouseEvent e)", "public void widgetSelected(SelectionEvent arg0)", "public void keyReleased(KeyEvent arg0)", "public void keyPressed(KeyEvent arg0)", "public void widgetDefaultSelected(SelectionEvent arg0)", "public void selectionChanged(SelectionChangedEvent event)", "public String getText(Object element)", "protected void prevSearchResult()", "protected void nextSearchResult()", "private void updateSearchResultSelection()", "private int getScaledSize(int size)", "private int getInverseScaledSize(int size)", "private void updateScreenshotTransformation()", "public AttributeTableEditingSupport(TableViewer viewer)", "protected boolean canEdit(Object arg0)", "protected CellEditor getCellEditor(Object arg0)", "protected Object getValue(Object o)", "protected void setValue(Object arg0, Object arg1)", "public void redrawScreenshot()", "public void setInputHierarchy(Object input)", "public void loadAttributeTable()", "public void expandAll()", "public void updateTreeSelection(BasicTreeNode node)", "public void setModel(UiAutomatorModel model, File modelBackingFile, Image screenshot)", "public boolean shouldShowNafNodes()", "public void toggleShowNaf()", "public Image getScreenShot()", "public File getModelFile()", "public String getText(Object element)"], "prime_var_dic": {}}, {"idx": 94467, "status": "update", "global_index": 1945, "project_name": "android_", "written_on": "2017-05-05 16:12:14", "tufano_target": "public static void METHOD_1 ( int [ ] a , float [ ] b ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { b [ i ] = ( float ) a [ i ] ; } }", "comment": "space after this cast (also below)", "tokenized_comment": ["space", "<|s|>", "after", "<|s|>", "this", "<|s|>", "cast", "<|s|>", "(", "also", "<|s|>", "below", ")"], "tufano_code": "public static void METHOD_1 ( int [ ] a , float [ ] b ) { for ( int i = 0 ; i < INT_1 ; i ++ ) { b [ i ] = ( float ) a [ i ] ; } }", "our_target": "      b[i] = (float) a[i];\n", "our_code": "  public static void checkInt2Float(int[] a, float[] b) {\n    for (int i = 0; i < 128; i++) {\n<|startfocus|>\n      b[i] = (float)a[i];\n<|endfocus|>\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "check", "Int", "2", "Float", "(", "int", "[", "]", "<|s|>", "a", ",", "<|s|>", "float", "[", "]", "<|s|>", "b", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "128", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "b", "[", "i", "]", "<|s|>", "=", "<|s|>", "(", "float", ")", "a", "[", "i", "];", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 197, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5089", "comment_id": "e8b93366_9e43f4d5", "class_list": ["Main"], "func_list": ["public static void assertIntEquals(int expected, int result)", "public static void checkIntCase(int[] a)", "public static void checkByteCase(byte[] a)", "public static void checkSingleAccess(int[] a)", "public static void checkInt2Float(int[] a, float[] b)", "public static int calcArraySum(int[] a, byte[] b, float[] c)", "public static void main(String[] args)"], "prime_var_dic": {"int": 1}}, {"idx": 89077, "status": "update", "global_index": 4809, "project_name": "android_", "written_on": "2016-12-15 22:08:45", "tufano_target": "public void start ( TYPE_3 VAR_5 , TYPE_4 VAR_6 ) { TYPE_2 . i ( VAR_2 , STRING_1 ) ; VAR_3 = VAR_1 . METHOD_1 ( ) ; VAR_3 . start ( VAR_4 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }", "comment": "the objects should be passed in instead of handing in WifiInjector.", "tokenized_comment": ["the", "<|s|>", "objects", "<|s|>", "should", "<|s|>", "be", "<|s|>", "passed", "<|s|>", "in", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "handing", "<|s|>", "in", "<|s|>", "Wifi", "Injector", "."], "tufano_code": "public void start ( TYPE_1 VAR_1 ) { TYPE_2 . i ( VAR_2 , STRING_1 ) ; VAR_3 = VAR_1 . METHOD_1 ( ) ; VAR_3 . start ( VAR_4 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }", "our_target": "    public void start(HandlerThread handlerThread, WifiAwareStateManager awareStateManager) {\n", "our_code": "<|startfocus|>\n    public void start(WifiInjector wifiInjector) {\n<|endfocus|>\n        Log.i(TAG, \"Starting Wi-Fi Aware service\");\n\n        mStateManager = wifiInjector.getWifiAwareStateManager();\n        mStateManager.start(mContext, wifiInjector.getmWifiAwareHandlerThread().getLooper());\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "start", "(", "Wifi", "Injector", "<|s|>", "wifi", "Injector", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Log", ".", "i", "(", "TAG", ",", "<|s|>", "\"", "Starting", "<|s|>", "Wi", "-", "Fi", "<|s|>", "Aware", "<|s|>", "service", "\"", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "m", "State", "Manager", "<|s|>", "=", "<|s|>", "wifi", "Injector", ".", "get", "Wifi", "Aware", "State", "Manager", "(", ");", "<|nl|>", "<|8-s|>", "m", "State", "Manager", ".", "start", "(", "m", "Context", ",", "<|s|>", "wifi", "Injector", ".", "getm", "Wifi", "Aware", "Handler", "Thread", "(", ")", ".", "get", "Looper", "(", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 80, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_4016", "comment_id": "ba845725_293aad27", "class_list": ["WifiAwareServiceImpl"], "func_list": ["public WifiAwareServiceImpl(Context context)", "public int getMockableCallingUid()", "public void start(WifiInjector wifiInjector)", "public void startLate()", "public void enableUsage()", "public void disableUsage()", "public boolean isUsageEnabled()", "public WifiAwareCharacteristics getCharacteristics()", "public void connect(final IBinder binder, String callingPackage,", "public void binderDied()", "public void disconnect(int clientId, IBinder binder)", "public void terminateSession(int clientId, int sessionId)", "public void publish(int clientId, PublishConfig publishConfig,", "public void updatePublish(int clientId, int sessionId, PublishConfig publishConfig)", "public void subscribe(int clientId, SubscribeConfig subscribeConfig,", "public void updateSubscribe(int clientId, int sessionId, SubscribeConfig subscribeConfig)", "public void sendMessage(int clientId, int sessionId, int peerId, byte[] message, int messageId,", "public int startRanging(int clientId, int sessionId, RttManager.ParcelableRttParams params)", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private void enforceClientValidity(int uid, int clientId)", "private void enforceAccessPermission()", "private void enforceChangePermission()", "private void enforceLocationPermission()", "private void enforceConnectivityInternalPermission()"], "prime_var_dic": {"String": 1, "boolean": 1, "the": 1}}, {"idx": 70892, "status": "update", "global_index": 16525, "project_name": "android_", "written_on": "2015-06-11 16:25:43", "tufano_target": "public VAR_1 ( TYPE_1 < ? , ? , ? > VAR_2 ) { this . VAR_2 = METHOD_2 ( VAR_2 ) ; this . VAR_3 = TYPE_2 . METHOD_1 ( ) ; }", "comment": "doesn't this use AOSP code conventions -> mTestVariantConfig", "tokenized_comment": ["doesn", "'", "t", "<|s|>", "this", "<|s|>", "use", "<|s|>", "AOSP", "<|s|>", "code", "<|s|>", "conventions", "<|s|>", "->", "<|s|>", "m", "Test", "Variant", "Config"], "tufano_code": "public VAR_1 ( TYPE_1 < ? , ? , ? > VAR_2 ) { this . VAR_2 = VAR_2 ; this . VAR_3 = TYPE_2 . METHOD_1 ( ) ; }", "our_target": "        this.testVariantConfig = checkNotNull(testVariantConfig);\n", "our_code": "    public AbstractTestDataImpl(@NonNull VariantConfiguration<?, ?, ?> testVariantConfig) {\n<|startfocus|>\n        this.testVariantConfig = testVariantConfig;\n<|endfocus|>\n        this.extraInstrumentationTestRunnerArgs = Maps.newHashMap();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Abstract", "Test", "Data", "Impl", "(", "@", "Non", "Null", "<|s|>", "Variant", "Configuration", "<", "?", ",", "<|s|>", "?", ",", "<|s|>", "?", ">", "<|s|>", "test", "Variant", "Config", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "this", ".", "test", "Variant", "Config", "<|s|>", "=", "<|s|>", "test", "Variant", "Config", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "this", ".", "extra", "Instrumentation", "Test", "Runner", "Args", "<|s|>", "=", "<|s|>", "Maps", ".", "new", "Hash", "Map", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 42, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1072", "comment_id": "b95978ea_456d6a29", "class_list": ["AbstractTestDataImpl"], "func_list": ["public AbstractTestDataImpl(@NonNull VariantConfiguration<?, ?, ?> testVariantConfig)", "public String getInstrumentationRunner()", "public void setExtraInstrumentationTestRunnerArgs(", "public boolean isTestCoverageEnabled()", "public ApiVersion getMinSdkVersion()", "public String getFlavorName()"], "prime_var_dic": {}}, {"idx": 23394, "status": "update", "global_index": 21206, "project_name": "android_", "written_on": "2013-10-05 01:04:50", "tufano_target": "public VAR_1 ( String VAR_2 , String VAR_3 , TYPE_1 ... VAR_4 ) { this ( VAR_2 , VAR_3 , TYPE_2 . METHOD_1 ( VAR_4 ) ) ; }", "comment": "Maybe add @NonNull on these?", "tokenized_comment": ["Maybe", "<|s|>", "add", "<|s|>", "@", "Non", "Null", "<|s|>", "on", "<|s|>", "these", "?"], "tufano_code": "public VAR_1 ( String VAR_2 , String VAR_3 , TYPE_1 ... VAR_4 ) { this ( VAR_2 , VAR_3 , TYPE_2 . METHOD_1 ( VAR_4 ) ) ; }", "our_target": "  public GradleCoordinate(@NonNull String groupId, @NonNull String artifactId, @NonNull Integer... revisions) {\n", "our_code": "<|startfocus|>\n  public GradleCoordinate(String groupId, String artifactId, Integer... revisions) {\n<|endfocus|>\n    this(groupId, artifactId, Arrays.asList(revisions));\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Gradle", "Coordinate", "(", "String", "<|s|>", "group", "Id", ",", "<|s|>", "String", "<|s|>", "artifact", "Id", ",", "<|s|>", "Integer", "...", "<|s|>", "revisions", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "this", "(", "group", "Id", ",", "<|s|>", "artifact", "Id", ",", "<|s|>", "Arrays", ".", "as", "List", "(", "revisions", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 60, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_3838", "comment_id": "81109196_e6472051", "class_list": ["represents", "GradleCoordinate"], "func_list": ["public GradleCoordinate(String groupId, String artifactId, Integer... revisions)", "public static GradleCoordinate parseCoordinateString(@NonNull String coordinateString)", "public String toString()", "public String getGroupId()", "public String getArtifactId()", "public String getId()", "public boolean acceptsGreaterRevisions()", "public String getFullRevision()", "public boolean isSameArtifact(@NonNull GradleCoordinate o)", "public boolean equals(@NonNull Object o)", "public int hashCode()", "public int compareTo(@NonNull GradleCoordinate that)", "public GradleCoordinate(String groupId, String artifactId, Integer... revisions)", "public static GradleCoordinate parseCoordinateString(@NonNull String coordinateString)", "public String toString()", "public String getGroupId()", "public String getArtifactId()", "public String getId()", "public boolean acceptsGreaterRevisions()", "public String getFullRevision()", "public boolean isSameArtifact(@NonNull GradleCoordinate o)", "public boolean equals(@NonNull Object o)", "public int hashCode()", "public int compareTo(@NonNull GradleCoordinate that)"], "prime_var_dic": {"implements": 1, "alphanumeric": 1, "a": 1, "int": 1, "myGroupId": 1, "myArtifactId": 1, "myIsAnyRevision": 1}}, {"idx": 55724, "status": "update", "global_index": 14443, "project_name": "android_", "written_on": "2014-03-20 15:26:01", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( ) ; return VAR_2 . isEmpty ( ) ? null : VAR_2 . iterator ( ) . METHOD_3 ( ) ; }", "comment": "nit - you could just turn this into \"return javaDirectories.iterator().next()\" and then you can get rid of the javaDir local variable and just return null (and at that point I bet you can just make this\nreturn !javaDirectories.isEmpty() ? javaDirectories().iterator().next() : null;", "tokenized_comment": ["nit", "<|s|>", "-", "<|s|>", "you", "<|s|>", "could", "<|s|>", "just", "<|s|>", "turn", "<|s|>", "this", "<|s|>", "into", "<|s|>", "\"", "return", "<|s|>", "java", "Directories", ".", "iterator", "(", ")", ".", "next", "(", ")", "\"", "<|s|>", "and", "<|s|>", "then", "<|s|>", "you", "<|s|>", "can", "<|s|>", "get", "<|s|>", "rid", "<|s|>", "of", "<|s|>", "the", "<|s|>", "java", "Dir", "<|s|>", "local", "<|s|>", "variable", "<|s|>", "and", "<|s|>", "just", "<|s|>", "return", "<|s|>", "null", "<|s|>", "(", "and", "<|s|>", "at", "<|s|>", "that", "<|s|>", "point", "<|s|>", "I", "<|s|>", "bet", "<|s|>", "you", "<|s|>", "can", "<|s|>", "just", "<|s|>", "make", "<|s|>", "this", "<|nl|>", "return", "<|s|>", "!", "java", "Directories", ".", "is", "Empty", "(", ")", "<|s|>", "?", "<|s|>", "java", "Directories", "(", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", "<|s|>", ":", "<|s|>", "null", ";"], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_3 = null ; if ( ! VAR_2 . isEmpty ( ) ) { VAR_3 = VAR_2 . iterator ( ) . METHOD_3 ( ) ; } return VAR_3 ; }", "our_target": "    return javaDirectories.isEmpty() ? null : javaDirectories.iterator().next();\n", "our_code": "  public static File findSrcDirectory(@NotNull SourceProvider sourceProvider) {\n    Collection<File> javaDirectories = sourceProvider.getJavaDirectories();\n<|startfocus|>\n    File javaDir = null;\n    if (!javaDirectories.isEmpty()) {\n      javaDir = javaDirectories.iterator().next();\n    }\n    return javaDir;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "File", "<|s|>", "find", "Src", "Directory", "(", "@", "Not", "Null", "<|s|>", "Source", "Provider", "<|s|>", "source", "Provider", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Collection", "<", "File", ">", "<|s|>", "java", "Directories", "<|s|>", "=", "<|s|>", "source", "Provider", ".", "get", "Java", "Directories", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "File", "<|s|>", "java", "Dir", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "java", "Directories", ".", "is", "Empty", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "java", "Dir", "<|s|>", "=", "<|s|>", "java", "Directories", ".", "iterator", "(", ")", ".", "next", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "java", "Dir", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 257, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_684", "comment_id": "9c21e133_c8509725", "class_list": ["for", "NewTemplateObjectWizard"], "func_list": ["public NewTemplateObjectWizard(@Nullable Project project,", "protected void init()", "private void selectSourceProvider(@NotNull SourceProvider sourceProvider, @NotNull IdeaAndroidProject gradleProject)", "public static File findSrcDirectory(@NotNull SourceProvider sourceProvider)", "public static File findResDirectory(@NotNull SourceProvider sourceProvider)", "public static File findManifestDirectory(@NotNull SourceProvider sourceProvider)", "public static String getPackageFromDirectory(@NotNull File directory, @NotNull SourceProvider sourceProvider,", "public void exclude(String templateName)", "public void createTemplateObject(final boolean openEditors)", "public void run()", "public void templateChanged(String templateName)", "private static String getDebugKeystorePath(@NotNull AndroidFacet facet)", "public void sourceProviderSelected(@NotNull SourceProvider sourceProvider)", "public NewTemplateObjectWizard(@Nullable Project project,", "protected void init()", "private void selectSourceProvider(@NotNull SourceProvider sourceProvider, @NotNull IdeaAndroidProject gradleProject)", "public static File findSrcDirectory(@NotNull SourceProvider sourceProvider)", "public static File findResDirectory(@NotNull SourceProvider sourceProvider)", "public static File findManifestDirectory(@NotNull SourceProvider sourceProvider)", "public static String getPackageFromDirectory(@NotNull File directory, @NotNull SourceProvider sourceProvider,", "public void exclude(String templateName)", "public void createTemplateObject(final boolean openEditors)", "public void run()", "public void templateChanged(String templateName)", "private static String getDebugKeystorePath(@NotNull AndroidFacet facet)", "public void sourceProviderSelected(@NotNull SourceProvider sourceProvider)"], "prime_var_dic": {"keystore": 1}}, {"idx": 56778, "status": "update", "global_index": 21481, "project_name": "android_", "written_on": "2013-11-18 22:15:06", "tufano_target": "private static boolean METHOD_4 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; for ( TYPE_3 VAR_3 : VAR_2 . METHOD_3 ( ) ) { if ( TYPE_4 . METHOD_2 ( VAR_3 ) != null ) { return true ; } } return false ; }", "comment": "isBuiltByGradle ?", "tokenized_comment": ["is", "Built", "By", "Gradle", "<|s|>", "?"], "tufano_code": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; for ( TYPE_3 VAR_3 : VAR_2 . METHOD_3 ( ) ) { if ( TYPE_4 . METHOD_2 ( VAR_3 ) != null ) { return true ; } } return false ; }", "our_target": "  private static boolean isBuildByGradle(@NotNull Project project) {\n", "our_code": "<|startfocus|>\n  private static boolean canGradleBuild(@NotNull Project project) {\n<|endfocus|>\n    ModuleManager moduleManager = ModuleManager.getInstance(project);\n    for (Module module : moduleManager.getModules()) {\n      if (AndroidGradleFacet.getInstance(module) != null) {\n        return true;\n      }\n    }\n    return false;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "can", "Gradle", "Build", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Module", "Manager", "<|s|>", "module", "Manager", "<|s|>", "=", "<|s|>", "Module", "Manager", ".", "get", "Instance", "(", "project", ");", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Module", "<|s|>", "module", "<|s|>", ":", "<|s|>", "module", "Manager", ".", "get", "Modules", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "Android", "Gradle", "Facet", ".", "get", "Instance", "(", "module", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 123, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_337", "comment_id": "9e08f1da_ce53a32f", "class_list": ["AndroidGradleBuildProcessParametersProvider"], "func_list": ["public AndroidGradleBuildProcessParametersProvider(@NotNull Project project)", "public List<String> getClassPath()", "private static List<String> getGradleClassPath()", "public List<String> getVMArguments()", "private static boolean canGradleBuild(@NotNull Project project)", "void populateJvmArgs(@NotNull GradleExecutionSettings executionSettings, @NotNull List<String> jvmArgs)", "private static void addHttpProxySettings(@NotNull List<String> jvmArgs)", "static void populateHttpProxyProperties(List<String> jvmArgs, List<KeyValue<String, String>> properties)", "void populateModulesToBuild(@NotNull List<String> jvmArgs)"], "prime_var_dic": {"Project": 1}}, {"idx": 39446, "status": "update", "global_index": 13432, "project_name": "android_", "written_on": "2014-12-02 21:27:44", "tufano_target": "public boolean METHOD_1 ( ) { return ! VAR_2 . METHOD_2 ( ) && VAR_5 . METHOD_3 ( VAR_6 , true ) ; }", "comment": "Here's this pattern again.\n\nIt makes me worried that InstallerData.get() apparently has this sensitive contextual information we need to know about before calling get() but it's not documented anywhere. I feel like either I want to call get() and use it, or it doesn't exist and I don't. Now, I'm nervous I can call it and it returns something but I really shouldn't be using it and just don't know it.\n\nIs there a use-case I'm missing? Perhaps there are times where I can call InstallerData.get() when I'm not in install handoff mode?", "tokenized_comment": ["Here", "'", "s", "<|s|>", "this", "<|s|>", "pattern", "<|s|>", "again", ".", "<|nl|>", "<|nl|>", "It", "<|s|>", "makes", "<|s|>", "me", "<|s|>", "worried", "<|s|>", "that", "<|s|>", "Installer", "Data", ".", "get", "(", ")", "<|s|>", "apparently", "<|s|>", "has", "<|s|>", "this", "<|s|>", "sensitive", "<|s|>", "contextual", "<|s|>", "information", "<|s|>", "we", "<|s|>", "need", "<|s|>", "to", "<|s|>", "know", "<|s|>", "about", "<|s|>", "before", "<|s|>", "calling", "<|s|>", "get", "(", ")", "<|s|>", "but", "<|s|>", "it", "'", "s", "<|s|>", "not", "<|s|>", "documented", "<|s|>", "anywhere", ".", "<|s|>", "I", "<|s|>", "feel", "<|s|>", "like", "<|s|>", "either", "<|s|>", "I", "<|s|>", "want", "<|s|>", "to", "<|s|>", "call", "<|s|>", "get", "(", ")", "<|s|>", "and", "<|s|>", "use", "<|s|>", "it", ",", "<|s|>", "or", "<|s|>", "it", "<|s|>", "doesn", "'", "t", "<|s|>", "exist", "<|s|>", "and", "<|s|>", "I", "<|s|>", "don", "'", "t", ".", "<|s|>", "Now", ",", "<|s|>", "I", "'", "m", "<|s|>", "nervous", "<|s|>", "I", "<|s|>", "can", "<|s|>", "call", "<|s|>", "it", "<|s|>", "and", "<|s|>", "it", "<|s|>", "returns", "<|s|>", "something", "<|s|>", "but", "<|s|>", "I", "<|s|>", "really", "<|s|>", "shouldn", "'", "t", "<|s|>", "be", "<|s|>", "using", "<|s|>", "it", "<|s|>", "and", "<|s|>", "just", "<|s|>", "don", "'", "t", "<|s|>", "know", "<|s|>", "it", ".", "<|nl|>", "<|nl|>", "Is", "<|s|>", "there", "<|s|>", "a", "<|s|>", "use", "-", "case", "<|s|>", "I", "'", "m", "<|s|>", "missing", "?", "<|s|>", "Perhaps", "<|s|>", "there", "<|s|>", "are", "<|s|>", "times", "<|s|>", "where", "<|s|>", "I", "<|s|>", "can", "<|s|>", "call", "<|s|>", "Installer", "Data", ".", "get", "(", ")", "<|s|>", "when", "<|s|>", "I", "'", "m", "<|s|>", "not", "<|s|>", "in", "<|s|>", "install", "<|s|>", "handoff", "<|s|>", "mode", "?"], "tufano_code": "public boolean METHOD_1 ( ) { boolean VAR_1 = VAR_2 == VAR_3 && TYPE_1 . get ( ) . METHOD_2 ( ) ; boolean VAR_4 = VAR_5 . METHOD_3 ( VAR_6 , true ) ; return ! VAR_1 && VAR_4 ; }", "our_target": "    return !myMode.hasValidSdkLocation() && myState.getNotNull(myKeyCustomInstall, true);\n", "our_code": "  public boolean isStepVisible() {\n<|startfocus|>\n    boolean hasSdk = myMode == FirstRunWizardMode.INSTALL_HANDOFF && InstallerData.get().hasValidSdkLocation();\n    boolean customizeLocation = myState.getNotNull(myKeyCustomInstall, true);\n    return !hasSdk && customizeLocation;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Step", "Visible", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "has", "Sdk", "<|s|>", "=", "<|s|>", "my", "Mode", "<|s|>", "==", "<|s|>", "First", "Run", "Wizard", "Mode", ".", "INSTALL", "_", "HANDOFF", "<|s|>", "&&", "<|s|>", "Installer", "Data", ".", "get", "(", ")", ".", "has", "Valid", "Sdk", "Location", "(", ");", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "customize", "Location", "<|s|>", "=", "<|s|>", "my", "State", ".", "get", "Not", "Null", "(", "my", "Key", "Custom", "Install", ",", "<|s|>", "true", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "!", "has", "Sdk", "<|s|>", "&&", "<|s|>", "customize", "Location", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 306, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_629", "comment_id": "1fcb3196_598a0379", "class_list": ["SdkComponentsStep", "SdkComponentRenderer"], "func_list": ["public SdkComponentsStep(@NotNull InstallableComponent[] components,", "public void setValueAt(Object aValue, int row, int column)", "public void valueChanged(ListSelectionEvent e)", "private static boolean isChild(@Nullable InstallableComponent child, @NotNull InstallableComponent installableComponent)", "private static File getExistingParentFile(@Nullable String path)", "private static String getDiskSpace(@Nullable String path)", "private static File getTargetFilesystem(@Nullable String path)", "public boolean validate()", "private static boolean isNonEmptyNonSdk(@Nullable String path)", "public void deriveValues(Set<ScopedStateStore.Key> modified)", "private long getComponentsSize()", "private void deselect(InstallableComponent installableComponent)", "private Iterable<InstallableComponent> getChildren(final InstallableComponent installableComponent)", "public boolean apply(@Nullable InstallableComponent input)", "private void select(InstallableComponent installableComponent)", "public void init()", "public JLabel getMessageLabel()", "public JComponent getPreferredFocusedComponent()", "boolean isSelected = ((Boolean)aValue);", "public boolean isStepVisible()", "public SdkComponentRenderer()", "public void actionPerformed(ActionEvent e)", "public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)", "private void setupControl(JTable table, Object value, boolean isSelected, boolean hasFocus)", "private Border getCellBorder(JTable table, boolean isSelectedFocus)", "public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)", "public Object getCellEditorValue()", "private static boolean isChild(@Nullable InstallableComponent child, @NotNull InstallableComponent installableComponent)"], "prime_var_dic": {}}, {"idx": 6414, "status": "update", "global_index": 5099, "project_name": "android_", "written_on": "2016-09-06 23:12:28", "tufano_target": "VAR_1 ( String key , TYPE_1 VAR_2 , boolean VAR_3 , TYPE_5 < TYPE_3 , TYPE_1 > VAR_4 ) { VAR_5 = key ; VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = TYPE_4 . METHOD_1 ( VAR_4 ) ; }", "comment": "Map?", "tokenized_comment": ["Map", "?"], "tufano_code": "public VAR_1 ( String key , TYPE_1 VAR_2 , boolean VAR_3 , TYPE_2 < TYPE_3 , TYPE_1 > VAR_4 ) { VAR_5 = key ; VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = TYPE_4 . METHOD_1 ( VAR_4 ) ; }", "our_target": "  StringResource(@NotNull String key, @Nullable ResourceItem defaultValue, boolean translatable,\n                 @NotNull Map<Locale, ResourceItem> localeToTranslationMap) {\n", "our_code": "<|startfocus|>\n  public StringResource(@NotNull String key, @Nullable ResourceItem defaultValue, boolean translatable,\n                        @NotNull SortedMap<Locale, ResourceItem> localeToTranslationMap) {\n<|endfocus|>\n    myKey = key;\n    myDefaultValue = defaultValue;\n    myTranslatable = translatable;\n    myLocaleToTranslationMap = Maps.newTreeMap(localeToTranslationMap);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "String", "Resource", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "key", ",", "<|s|>", "@", "Nullable", "<|s|>", "Resource", "Item", "<|s|>", "default", "Value", ",", "<|s|>", "boolean", "<|s|>", "translatable", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "@", "Not", "Null", "<|s|>", "Sorted", "Map", "<", "Locale", ",", "<|s|>", "Resource", "Item", ">", "<|s|>", "locale", "To", "Translation", "Map", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Key", "<|s|>", "=", "<|s|>", "key", ";", "<|nl|>", "<|4-s|>", "my", "Default", "Value", "<|s|>", "=", "<|s|>", "default", "Value", ";", "<|nl|>", "<|4-s|>", "my", "Translatable", "<|s|>", "=", "<|s|>", "translatable", ";", "<|nl|>", "<|4-s|>", "my", "Locale", "To", "Translation", "Map", "<|s|>", "=", "<|s|>", "Maps", ".", "new", "Tree", "Map", "(", "locale", "To", "Translation", "Map", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 37, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_223", "comment_id": "f6efbfc0_b038b68c", "class_list": ["StringResource"], "func_list": ["public StringResource(@NotNull String key, @Nullable ResourceItem defaultValue, boolean translatable,", "public String getKey()", "public ResourceItem getDefaultValue()", "public boolean isTranslatable()", "public void addTranslation(@NotNull Locale locale, @NotNull ResourceItem item)", "public ResourceItem getTranslation(@NotNull Locale locale)", "public void removeTranslation(@NotNull Locale locale)"], "prime_var_dic": {"StringResource": 1, "myKey": 1, "myDefaultValue": 1, "myTranslatable": 1}}, {"idx": 55292, "status": "update", "global_index": 4386, "project_name": "android_", "written_on": "2016-11-07 20:04:33", "tufano_target": "public void METHOD_1 ( ) { assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }", "comment": "should this assert a specific value, like all the other test_get* assertions on contents of the specific test .zip file do? \n\n(FWIW I'm not a huge fan of the test_get*() methods being both separated from the test_set*() method and also not being properly grouped together as documentation on the contents of the provided .zip file used for testing).", "tokenized_comment": ["should", "<|s|>", "this", "<|s|>", "assert", "<|s|>", "a", "<|s|>", "specific", "<|s|>", "value", ",", "<|s|>", "like", "<|s|>", "all", "<|s|>", "the", "<|s|>", "other", "<|s|>", "test", "_", "get", "*", "<|s|>", "assertions", "<|s|>", "on", "<|s|>", "contents", "<|s|>", "of", "<|s|>", "the", "<|s|>", "specific", "<|s|>", "test", "<|s|>", ".", "zip", "<|s|>", "file", "<|s|>", "do", "?", "<|s|>", "<|nl|>", "<|nl|>", "(", "FWIW", "<|s|>", "I", "'", "m", "<|s|>", "not", "<|s|>", "a", "<|s|>", "huge", "<|s|>", "fan", "<|s|>", "of", "<|s|>", "the", "<|s|>", "test", "_", "get", "*", "(", ")", "<|s|>", "methods", "<|s|>", "being", "<|s|>", "both", "<|s|>", "separated", "<|s|>", "from", "<|s|>", "the", "<|s|>", "test", "_", "set", "*", "(", ")", "<|s|>", "method", "<|s|>", "and", "<|s|>", "also", "<|s|>", "not", "<|s|>", "being", "<|s|>", "properly", "<|s|>", "grouped", "<|s|>", "together", "<|s|>", "as", "<|s|>", "documentation", "<|s|>", "on", "<|s|>", "the", "<|s|>", "contents", "<|s|>", "of", "<|s|>", "the", "<|s|>", "provided", "<|s|>", ".", "zip", "<|s|>", "file", "<|s|>", "used", "<|s|>", "for", "<|s|>", "testing", ")", "."], "tufano_code": "public void METHOD_1 ( ) { assertTrue ( 0 < VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( VAR_1 . getTime ( ) , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; }", "our_target": "        assertEquals(orgTime, zentry.getLastModifiedTime().toMillis());\n", "our_code": "    public void test_getLastModifiedTime() {\n<|startfocus|>\n        assertTrue(0 < zentry.getLastModifiedTime().toMillis());\n        assertEquals(zentry.getTime(), zentry.getLastModifiedTime().toMillis());\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "get", "Last", "Modified", "Time", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "assert", "True", "(", "0", "<|s|>", "<", "<|s|>", "zentry", ".", "get", "Last", "Modified", "Time", "(", ")", ".", "to", "Millis", "(", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "zentry", ".", "get", "Time", "(", ")", ",", "<|s|>", "zentry", ".", "get", "Last", "Modified", "Time", "(", ")", ".", "to", "Millis", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 183, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2067", "comment_id": "4b454b83_3e0ac904", "class_list": ["ZipEntryTest"], "func_list": ["public void test_ConstructorLjava_lang_String()", "public void test_getComment()", "public void test_getCompressedSize()", "public void test_getCrc()", "public void test_getExtra()", "public void test_getMethod()", "public void test_getName()", "public void test_getSize()", "public void test_getTime()", "public void test_getCreationTime()", "public void test_getLastAccessTime()", "public void test_getLastModifiedTime()", "public void test_isDirectory()", "public void test_setCommentLjava_lang_String()", "public void test_setCompressedSizeJ()", "public void test_setCrcJ()", "public void test_setMethodI()", "public void test_setSizeJ()", "public void test_setTimeJ()", "public void test_setLastModifiedTime()", "public void test_setCreationTime()", "public void test_setLastAccessTime()", "public void test_toString()", "public void test_ConstructorLjava_util_zip_ZipEntry()", "public void test_clone()", "protected void tearDown()"], "prime_var_dic": {}}, {"idx": 96113, "status": "update", "global_index": 11997, "project_name": "android_", "written_on": "2014-09-23 19:36:23", "tufano_target": "public TYPE_1 METHOD_2 ( ) { return new TYPE_1 ( this ) ; }", "comment": "Remove \"Fixture\" from method name.", "tokenized_comment": ["Remove", "<|s|>", "\"", "Fixture", "\"", "<|s|>", "from", "<|s|>", "method", "<|s|>", "name", "."], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this ) ; }", "our_target": "  public DebugToolWindowFixture getDebugToolWindow() {\n", "our_code": "<|startfocus|>\n  public DebugToolWindowFixture getDebugToolWindowFixture() {\n<|endfocus|>\n    return new DebugToolWindowFixture(this);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Debug", "Tool", "Window", "Fixture", "<|s|>", "get", "Debug", "Tool", "Window", "Fixture", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "new", "<|s|>", "Debug", "Tool", "Window", "Fixture", "(", "this", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 294, "base_patch_number": 33, "changed_patch_number": 34, "code_file_name": "android_42", "comment_id": "30bca331_3e253511", "class_list": ["IdeFrameFixture", "NoOpDisposable"], "func_list": ["public static IdeFrameFixture find(@NotNull final Robot robot, @NotNull final File projectPath, @Nullable final String projectName)", "protected boolean isMatching(IdeFrameImpl frame)", "public boolean test()", "public IdeFrameFixture(@NotNull Robot robot, @NotNull IdeFrameImpl target, @NotNull File projectPath)", "public File getProjectPath()", "public IdeFrameFixture requireModuleCount(int expected)", "public IdeaAndroidProject getAndroidProjectForModule(@NotNull String name)", "public Module getModule(@NotNull String name)", "private ModuleManager getModuleManager()", "public Project getProject()", "public EditorFixture getEditor()", "public GradleInvocationResult invokeProjectMake()", "public void execute(@NotNull GradleInvocationResult result)", "public boolean execute(CompileContext context)", "public CompileContext invokeProjectMakeUsingJps()", "public void compilationFinished(boolean aborted, int errors, int warnings, CompileContext compileContext)", "public void fileGenerated(String outputRoot, String relativePath)", "public ActionButtonFixture findRunApplicationButton()", "public ChooseDeviceDialogFixture findChooseDeviceDialog()", "public RunToolWindowFixture getRunToolWindowFixture()", "public DebugToolWindowFixture getDebugToolWindowFixture()", "public void toFront()", "protected void selectProjectMakeAction()", "private JMenuItem findActionMenuItem(@NotNull String... path)", "private void waitForBuildToFinish(@NotNull final BuildMode buildMode)", "public FileFixture findExistingFileByRelativePath(@NotNull String relativePath)", "public VirtualFile findFileByRelativePath(@NotNull String relativePath, boolean requireExists)", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture requestProjectSyncAndSimulateFailure(@NotNull final String failure)", "public void runApp(@NotNull String appName) throws ClassNotFoundException", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture waitForGradleProjectSyncToFail()", "public IdeFrameFixture waitForGradleProjectSyncToFinish()", "private void waitForGradleProjectSyncToFinish(final boolean expectSyncFailure)", "public IdeFrameFixture waitForBackgroundTasksToFinish()", "private ActionButtonFixture findActionButtonByActionId(String actionId)", "public MessagesToolWindowFixture getMessagesToolWindow()", "public void requireEditorNotification(@Nullable String message)", "private EditorNotificationPanel findPanel(@Nullable String message)", "private String getEditorNotificationLabel(@NotNull EditorNotificationPanel panel)", "public void clickEditorNotification(@NotNull String message, @NotNull final String linkText)", "public IdeSettingsDialogFixture openIdeSettings()", "public IdeFrameFixture deleteGradleWrapper()", "public IdeFrameFixture requireGradleWrapperSet()", "public static void deleteWrapper(@NotNull File projectDirPath)", "private static File getGradleWrapperDirPath(@NotNull File projectDirPath)", "public IdeFrameFixture useLocalGradleDistribution(@NotNull String gradleHome)", "public GradleProjectSettings getGradleSettings()", "public void dispose()", "public File getProjectPath()"], "prime_var_dic": {}}, {"idx": 94696, "status": "update", "global_index": 19914, "project_name": "android_", "written_on": "2012-09-04 21:31:56", "tufano_target": "private void METHOD_1 ( ) { METHOD_4 ( false ) ; }", "comment": "instead call updateSearchEngine(false);", "tokenized_comment": ["instead", "<|s|>", "call", "<|s|>", "update", "Search", "Engine", "(", "false", ");"], "tufano_code": "private void METHOD_1 ( ) { VAR_1 = null ; METHOD_2 ( null , null ) ; VAR_2 . METHOD_3 ( ) ; }", "our_target": "        updateSearchEngine(false);\n", "our_code": "    private void resetCachedValues() {\n<|startfocus|>\n        mSearchEngine = null;\n        setAutoFillProfile(null, null);\n        mCustomUserAgents.clear();\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "reset", "Cached", "Values", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Search", "Engine", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "set", "Auto", "Fill", "Profile", "(", "null", ",", "<|s|>", "null", ");", "<|nl|>", "<|8-s|>", "m", "Custom", "User", "Agents", ".", "clear", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 514, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4270", "comment_id": "AAAI63%2F%2F7VI%3D", "class_list": ["BrowserSettings"], "func_list": ["public static void initialize(final Context context)", "public static BrowserSettings getInstance()", "private BrowserSettings(Context context)", "public void setController(Controller controller)", "public void startManagingSettings(WebSettings settings)", "public void stopManagingSettings(WebSettings settings)", "public void run()", "private static void requireInitialization()", "private void syncSetting(WebSettingsClassic settings)", "private void syncStaticSettings(WebSettingsClassic settings)", "private void syncSharedSettings()", "private void syncManagedSettings()", "public void onSharedPreferenceChanged(", "public static String getFactoryResetHomeUrl(Context context)", "public LayoutAlgorithm getLayoutAlgorithm()", "public int getPageCacheCapacity()", "public WebStorageSizeManager getWebStorageSizeManager()", "private String getAppCachePath()", "private void updateSearchEngine(boolean force)", "public SearchEngine getSearchEngine()", "public boolean isDebugEnabled()", "public void setDebugEnabled(boolean value)", "public void clearCache()", "public void clearCookies()", "public void clearHistory()", "public void clearFormData()", "public void clearPasswords()", "public void clearDatabases()", "public void clearLocationAccess()", "public void resetDefaultPreferences()", "private void resetCachedValues()", "public AutoFillProfile getAutoFillProfile()", "public void setAutoFillProfile(AutoFillProfile profile, Message msg)", "public void toggleDebugSettings()", "public boolean hasDesktopUseragent(WebView view)", "public void toggleDesktopUseragent(WebView view)", "public static int getAdjustedMinimumFontSize(int rawValue)", "public int getAdjustedTextZoom(int rawValue)", "static int getRawTextZoom(int percent)", "public int getAdjustedDoubleTapZoom(int rawValue)", "static int getRawDoubleTapZoom(int percent)", "public SharedPreferences getPreferences()", "public void updateConnectionType()", "private TextSize getTextSize()", "public int getMinimumFontSize()", "public boolean forceEnableUserScalable()", "public int getTextZoom()", "public void setTextZoom(int percent)", "public int getDoubleTapZoom()", "public void setDoubleTapZoom(int percent)", "public String getSearchEngineName()", "public boolean allowAppTabs()", "public boolean openInBackground()", "public boolean enableJavascript()", "public PluginState getPluginState()", "public ZoomDensity getDefaultZoom()", "public boolean loadPageInOverviewMode()", "public boolean autofitPages()", "public boolean blockPopupWindows()", "public boolean loadImages()", "public String getDefaultTextEncoding()", "public String getHomePage()", "public void setHomePage(String value)", "public boolean isAutofillEnabled()", "public void setAutofillEnabled(boolean value)", "public boolean isHardwareAccelerated()", "public boolean isSkiaHardwareAccelerated()", "public int getUserAgent()", "public boolean enableVisualIndicator()", "public boolean enableCpuUploadPath()", "public boolean enableJavascriptConsole()", "public boolean isSmallScreen()", "public boolean isWideViewport()", "public boolean isNormalLayout()", "public boolean isTracing()", "public boolean enableLightTouch()", "public boolean enableNavDump()", "public String getJsEngineFlags()", "public boolean useQuickControls()", "public boolean useMostVisitedHomepage()", "public boolean useFullscreen()", "public boolean useInvertedRendering()", "public float getInvertedContrast()", "public boolean showSecurityWarnings()", "public boolean acceptCookies()", "public boolean saveFormdata()", "public boolean enableGeolocation()", "public boolean rememberPasswords()", "public static String getPreloadOnWifiOnlyPreferenceString(Context context)", "public static String getPreloadAlwaysPreferenceString(Context context)", "public String getDefaultPreloadSetting()", "public String getPreloadEnabled()", "public static String getLinkPrefetchOnWifiOnlyPreferenceString(Context context)", "public static String getLinkPrefetchAlwaysPreferenceString(Context context)", "public String getDefaultLinkPrefetchSetting()", "public String getLinkPrefetchEnabled()", "public long getLastRecovered()", "public void setLastRecovered(long time)", "public boolean wasLastRunPaused()", "public void setLastRunPaused(boolean isPaused)"], "prime_var_dic": {"implements": 1, "String": 3, "font": 1, "int": 5, "sInstance": 1, "sInitialized": 1, "sFactoryResetUrl": 1, "options": 1, "recovery": 1, "is": 1}}, {"idx": 3008, "status": "update", "global_index": 12053, "project_name": "android_", "written_on": "2014-08-20 18:29:19", "tufano_target": "private TYPE_1 METHOD_1 ( ) { return ( TYPE_1 ) VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }", "comment": "make method private.", "tokenized_comment": ["make", "<|s|>", "method", "<|s|>", "private", "."], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return ( TYPE_1 ) VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }", "our_target": "  private JPanel getContentPanel() {\n", "our_code": "<|startfocus|>\n  public JPanel getContentPanel() {\n<|endfocus|>\n    return (JPanel)myToolWindow.getContentManager().getComponent();\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "JPanel", "<|s|>", "get", "Content", "Panel", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "(", "JPanel", ")", "my", "Tool", "Window", ".", "get", "Content", "Manager", "(", ")", ".", "get", "Component", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 124, "base_patch_number": 11, "changed_patch_number": 12, "code_file_name": "android_40", "comment_id": "b32fbd8b_5f7b9b3e", "class_list": ["LogcatToolWindowFixture", "ProcessListInitializationCondition", "ProcessListProcessWaitCondition", "ProcessListFixture"], "func_list": ["public boolean test()", "private ProcessListProcessWaitCondition(String description, @NotNull JList processList, @NotNull String packageName)", "public void waitForProcess(@NotNull String packageName)", "public ProcessListFixture selectItem(@NotNull String packageName)", "public LogcatToolWindowFixture(@NotNull String toolWindowId, @NotNull Project project, @NotNull Robot robot)", "public JTabbedPane getTabs()", "public JPanel getContentPanel()", "public ProcessListFixture getProcessList()", "public ActionButtonFixture findAction(@NotNull String text)", "public boolean test()", "private ProcessListProcessWaitCondition(String description, @NotNull JList processList, @NotNull String packageName)", "public boolean test()", "public void waitForProcess(@NotNull String packageName)", "public ProcessListFixture selectItem(@NotNull String packageName)"], "prime_var_dic": {}}, {"idx": 27570, "status": "update", "global_index": 10330, "project_name": "android_", "written_on": "2015-04-22 19:36:57", "tufano_target": "public int METHOD_1 ( ) { int result = 0 ; TYPE_1 VAR_1 = this ; while ( VAR_1 != null ) { result += VAR_1 . METHOD_3 ( ) . length ; VAR_1 = VAR_1 . METHOD_4 ( ) ; } return result ; }", "comment": "shouldn't this be this?\n\nAdd unit tests for this.", "tokenized_comment": ["shouldn", "'", "t", "<|s|>", "this", "<|s|>", "be", "<|s|>", "this", "?", "<|nl|>", "<|nl|>", "Add", "<|s|>", "unit", "<|s|>", "tests", "<|s|>", "for", "<|s|>", "this", "."], "tufano_code": "public int METHOD_1 ( ) { int result = 0 ; TYPE_1 VAR_1 = METHOD_2 ( ) ; while ( VAR_1 != null ) { result += VAR_1 . METHOD_3 ( ) . length ; VAR_1 = VAR_1 . METHOD_4 ( ) ; } return result ; }", "our_target": "        ClassObj clazz = this;\n", "our_code": "    public int getAllFieldsCount() {\n        int result = 0;\n<|startfocus|>\n        ClassObj clazz = getClassObj();\n<|endfocus|>\n        while (clazz != null) {\n            result += clazz.getFields().length;\n            clazz = clazz.getSuperClassObj();\n        }\n        return result;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "get", "All", "Fields", "Count", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "result", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Class", "Obj", "<|s|>", "clazz", "<|s|>", "=", "<|s|>", "get", "Class", "Obj", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "while", "<|s|>", "(", "clazz", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "result", "<|s|>", "+=", "<|s|>", "clazz", ".", "get", "Fields", "(", ")", ".", "length", ";", "<|nl|>", "<|12-s|>", "clazz", "<|s|>", "=", "<|s|>", "clazz", ".", "get", "Super", "Class", "Obj", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "result", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 94, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3601", "comment_id": "9070061a_cdedc108", "class_list": ["ClassObj", ":"], "func_list": ["public ClassObj(long id, @NonNull StackTrace stack, @NonNull String className,", "public int getAllFieldsCount()", "public Field[] getFields()", "public void setFields(@NonNull Field[] fields)", "public void setStaticFields(@NonNull Field[] staticFields)", "public void setInstanceSize(int size)", "public int getInstanceSize()", "public int hashCode()", "Object getStaticField(Type type, String name)", "public ClassObj getSuperClassObj()", "public Instance getClassLoader()", "public Collection<Instance> getInstances()", "public ClassObj(long id, @NonNull StackTrace stack, @NonNull String className,", "public int getAllFieldsCount()", "public Field[] getFields()", "public void setFields(@NonNull Field[] fields)", "public void setStaticFields(@NonNull Field[] staticFields)", "public void setInstanceSize(int size)", "public int getInstanceSize()", "public int hashCode()", "Object getStaticField(Type type, String name)", "public ClassObj getSuperClassObj()", "public Instance getClassLoader()", "public Collection<Instance> getInstances()"], "prime_var_dic": {"License": 1, "mStaticFieldsOffset": 1}}, {"idx": 88409, "status": "update", "global_index": 11388, "project_name": "android_", "written_on": "2014-11-21 19:03:09", "tufano_target": "private static boolean METHOD_1 ( byte [ ] VAR_1 ) { int c = 0 ; for ( byte b : VAR_1 ) { c |= b ; } return true ; }", "comment": "No need for \"c\".\n\nif (b != 0) { return false; }", "tokenized_comment": ["No", "<|s|>", "need", "<|s|>", "for", "<|s|>", "\"", "c", "\"", ".", "<|nl|>", "<|nl|>", "if", "<|s|>", "(", "b", "<|s|>", "!=", "<|s|>", "0", ")", "<|s|>", "{", "<|s|>", "return", "<|s|>", "false", ";", "<|s|>", "}"], "tufano_code": "private static boolean METHOD_1 ( byte [ ] VAR_1 ) { int c = 0 ; for ( byte b : VAR_1 ) { c |= b ; } return c == 0 ; }", "our_target": "        return true;\n", "our_code": "    private static boolean allZeros(byte[] pt) {\n        int c = 0;\n        for(byte b : pt) {\n            c |= b;\n        }\n<|startfocus|>\n        return c == 0;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "all", "Zeros", "(", "byte", "[", "]", "<|s|>", "pt", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "c", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|8-s|>", "for", "(", "byte", "<|s|>", "b", "<|s|>", ":", "<|s|>", "pt", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "c", "<|s|>", "|=", "<|s|>", "b", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "c", "<|s|>", "==", "<|s|>", "0", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 2263, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_5362", "comment_id": "bf3f85b4_7390dab2", "class_list": ["AndroidKeyStoreTest"], "func_list": ["private static boolean allZeros(byte[] pt)"], "prime_var_dic": {"String": 3, "byte": 2, "dsaparam": 1, "long": 1, "CA": 5, "Exception": 1, "Certificate": 12, "of": 1, "separate": 1, "with": 1}}, {"idx": 94839, "status": "update", "global_index": 3721, "project_name": "android_", "written_on": "2017-01-31 03:47:06", "tufano_target": "private VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = VAR_2 . METHOD_1 ( ) ; int VAR_4 = VAR_2 . METHOD_2 ( ) ; VAR_5 = VAR_2 . METHOD_4 ( ) ; VAR_6 = VAR_2 . METHOD_2 ( ) ; return ; }", "comment": "Consider making it static.", "tokenized_comment": ["Consider", "<|s|>", "making", "<|s|>", "it", "<|s|>", "static", "."], "tufano_code": "private VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = VAR_2 . METHOD_1 ( ) ; int VAR_4 = VAR_2 . METHOD_2 ( ) ; VAR_5 = new byte [ VAR_4 ] ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_6 = VAR_2 . METHOD_2 ( ) ; return ; }", "our_target": "        mKey = in.createByteArray();\n", "our_code": "    private IpSecAlgorithm(Parcel in) {\n        mAlgorithm = in.readString();\n        int len = in.readInt();\n<|startfocus|>\n        mKey = new byte[len];\n        in.readByteArray(mKey);\n<|endfocus|>\n        mTruncLenBits = in.readInt();\n        return;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Ip", "Sec", "Algorithm", "(", "Parcel", "<|s|>", "in", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Algorithm", "<|s|>", "=", "<|s|>", "in", ".", "read", "String", "(", ");", "<|nl|>", "<|8-s|>", "int", "<|s|>", "len", "<|s|>", "=", "<|s|>", "in", ".", "read", "Int", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Key", "<|s|>", "=", "<|s|>", "new", "<|s|>", "byte", "[", "len", "];", "<|nl|>", "<|8-s|>", "in", ".", "read", "Byte", "Array", "(", "m", "Key", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Trunc", "Len", "Bits", "<|s|>", "=", "<|s|>", "in", ".", "read", "Int", "(", ");", "<|nl|>", "<|8-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 69, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1361", "comment_id": "c9cf86e8_2e7cbae0", "class_list": ["IpSecAlgorithm"], "func_list": ["public IpSecAlgorithm(String algorithm, byte[] key)", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public IpSecAlgorithm createFromParcel(Parcel in)", "public IpSecAlgorithm[] newArray(int size)", "private IpSecAlgorithm(Parcel in)"], "prime_var_dic": {"implements": 1, "mAlgorithm": 1, "mTruncLenBits": 1, "Parcelable": 1}}, {"idx": 95321, "status": "update", "global_index": 20969, "project_name": "android_", "written_on": "2013-11-11 17:29:50", "tufano_target": "public TYPE_1 < String > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }", "comment": "Please add: (1) javax.crypto.Signature (ideally only if used to generate signatures -- i.e., invokes \"initSign\" methods), (2) javax.crypto.Cipher (ideally only if init invoked with opmode WRAP_MODE or ENCRYPT_MODE), (3) javax.net.ssl.SSLEngine.", "tokenized_comment": ["Please", "<|s|>", "add", ":", "<|s|>", "(", "1", ")", "<|s|>", "javax", ".", "crypto", ".", "Signature", "<|s|>", "(", "ideally", "<|s|>", "only", "<|s|>", "if", "<|s|>", "used", "<|s|>", "to", "<|s|>", "generate", "<|s|>", "signatures", "<|s|>", "--", "<|s|>", "i", ".", "e", ".", ",", "<|s|>", "invokes", "<|s|>", "\"", "init", "Sign", "\"", "<|s|>", "methods", ")", ",", "<|s|>", "(", "2", ")", "<|s|>", "javax", ".", "crypto", ".", "Cipher", "<|s|>", "(", "ideally", "<|s|>", "only", "<|s|>", "if", "<|s|>", "init", "<|s|>", "invoked", "<|s|>", "with", "<|s|>", "opmode", "<|s|>", "WRAP", "_", "MODE", "<|s|>", "or", "<|s|>", "ENCRYPT", "_", "MODE", ")", ",", "<|s|>", "(", "3", ")", "<|s|>", "javax", ".", "net", ".", "ssl", ".", "SSLEngine", "."], "tufano_code": "public TYPE_1 < String > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }", "our_target": "                OWNER_SECURE_RANDOM,\n                JAVAX_NET_SSL_SSLENGINE,\n                JAVAX_CRYPTO_SIGNATURE,\n                JAVAX_CRYPTO_CIPHER\n", "our_code": "    public List<String> getApplicableCallOwners() {\n        return Arrays.asList(\n                JAVAX_CRYPTO_KEY_GENERATOR,\n                JAVA_SECURITY_KEY_PAIR_GENERATOR,\n                JAVAX_CRYPTO_KEY_AGREEMENT,\n<|startfocus|>\n                OWNER_SECURE_RANDOM\n<|endfocus|>\n        );\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "List", "<", "String", ">", "<|s|>", "get", "Applicable", "Call", "Owners", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "Arrays", ".", "as", "List", "(", "<|nl|>", "<|16-s|>", "JAVAX", "_", "CRYPTO", "_", "KEY", "_", "GENERATOR", ",", "<|nl|>", "<|16-s|>", "JAVA", "_", "SECURITY", "_", "KEY", "_", "PAIR", "_", "GENERATOR", ",", "<|nl|>", "<|16-s|>", "JAVAX", "_", "CRYPTO", "_", "KEY", "_", "AGREEMENT", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "OWNER", "_", "SECURE", "_", "RANDOM", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 103, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2906", "comment_id": "de65092b_86df4c7d", "class_list": ["SecureRandomGeneratorDetector"], "func_list": ["public SecureRandomGeneratorDetector()", "public List<String> getApplicableCallOwners()", "public List<String> getApplicableCallNames()", "public void checkCall(@NonNull ClassContext context, @NonNull ClassNode classNode,", "public void afterCheckProject(@NonNull Context context)"], "prime_var_dic": {"String": 7, "in": 1, "issue": 1, "SecureRandomGeneratorDetector": 1, "correct": 1}}, {"idx": 4958, "status": "update", "global_index": 5081, "project_name": "android_", "written_on": "2016-09-08 20:02:14", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_4 < String , TYPE_3 > VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "comment": "Does this need to be sorted? Can we get away with a regular Map?", "tokenized_comment": ["Does", "<|s|>", "this", "<|s|>", "need", "<|s|>", "to", "<|s|>", "be", "<|s|>", "sorted", "?", "<|s|>", "Can", "<|s|>", "we", "<|s|>", "get", "<|s|>", "away", "<|s|>", "with", "<|s|>", "a", "<|s|>", "regular", "<|s|>", "Map", "?"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 < String , TYPE_3 > VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "our_target": "                            @NotNull Map<String, StringResource> keyToResourceMap) {\n", "our_code": "  public StringResourceData(@NotNull AndroidFacet facet,\n<|startfocus|>\n                            @NotNull SortedMap<String, StringResource> keyToResourceMap) {\n<|endfocus|>\n    myFacet = facet;\n    myKeyToResourceMap = keyToResourceMap;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "Resource", "Data", "(", "@", "Not", "Null", "<|s|>", "Android", "Facet", "<|s|>", "facet", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "@", "Not", "Null", "<|s|>", "Sorted", "Map", "<", "String", ",", "<|s|>", "String", "Resource", ">", "<|s|>", "key", "To", "Resource", "Map", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Facet", "<|s|>", "=", "<|s|>", "facet", ";", "<|nl|>", "<|4-s|>", "my", "Key", "To", "Resource", "Map", "<|s|>", "=", "<|s|>", "key", "To", "Resource", "Map", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 39, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_224", "comment_id": "1691b3ce_b24868b3", "class_list": ["StringResourceData"], "func_list": ["public StringResourceData(@NotNull AndroidFacet facet,", "public void changeKeyName(@NotNull String oldKey, @NotNull String newKey)", "public boolean setTranslatable(String key, boolean translatable)", "public boolean setTranslation(@NotNull String key, @Nullable Locale locale, @NotNull String value)", "else if (changed)", "public String validateKey(@NotNull String key)", "public String validateTranslation(@NotNull String key, @Nullable Locale locale)", "Collection<Locale> getMissingTranslations(@NotNull String key)", "static String summarizeLocales(@NotNull Collection<Locale> locales)", "private static List<Locale> getLowest(Collection<Locale> locales, int n)", "public int compare(Locale l1, Locale l2)", "private static String getLabels(Iterable<Locale> locales)", "public String apply(Locale locale)", "private static String getLabels(Iterable<Locale> locales)", "public StringResource getStringResource(@NotNull String key)", "public Collection<StringResource> getResources()", "public List<String> getKeys()", "public List<Locale> getLocales()"], "prime_var_dic": {"myFacet": 1}}, {"idx": 91410, "status": "update", "global_index": 1698, "project_name": "android_", "written_on": "2017-04-10 14:33:19", "tufano_target": "private static void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_1 . add ( new TYPE_2 ( true ) ) ; } }", "comment": "Nit: space between `for` and `(`.", "tokenized_comment": ["Nit", ":", "<|s|>", "space", "<|s|>", "between", "<|s|>", "`", "for", "`", "<|s|>", "and", "<|s|>", "`", "(", "`", "."], "tufano_code": "private static void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_1 . add ( new TYPE_2 ( true ) ) ; } }", "our_target": "\t    for (int i = 0; i < reachableObjNum; i++) {\n", "our_code": "\tprivate static void allocateReachableObjects(ArrayList<MockClass> reachableObjs) {\n<|startfocus|>\n\t    for(int i = 0; i < reachableObjNum; i++) {\n<|endfocus|>\n            reachableObjs.add(new MockClass(true));\n        }\n\t}", "tokenized_code": ["<|t|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "allocate", "Reachable", "Objects", "(", "Array", "List", "<", "Mock", "Class", ">", "<|s|>", "reachable", "Objs", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|t|>", "<|4-s|>", "for", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "reachable", "Obj", "Num", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "reachable", "Objs", ".", "add", "(", "new", "<|s|>", "Mock", "Class", "(", "true", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|t|>", "}"], "base_code_line_number": 55, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2765", "comment_id": "19497c2d_53176d64", "class_list": ["InstancesDebuggee", "MockClass"], "func_list": ["public void run()", "private static void allocateReachableObjects(ArrayList<MockClass> reachableObjs)", "private static void allocateUnreachableObjects()", "public static void main(String[] args)", "private static void allocateReachableObjects(ArrayList<MockClass> reachableObjs)"], "prime_var_dic": {}}, {"idx": 58228, "status": "update", "global_index": 10571, "project_name": "android_", "written_on": "2015-05-08 14:27:11", "tufano_target": "public static double METHOD_1 ( ) { long VAR_1 = INT_2 ; return ( double ) VAR_1 ; }", "comment": "Ditto.", "tokenized_comment": ["Ditto", "."], "tufano_code": "public static double METHOD_1 ( ) { long VAR_1 = INT_1 ; return ( double ) VAR_1 ; }", "our_target": "    long imm = 34L;\n", "our_code": "  public static double ReturnDouble34() {\n<|startfocus|>\n    long imm = 34;\n<|endfocus|>\n    return (double) imm;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "double", "<|s|>", "Return", "Double", "34", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "long", "<|s|>", "imm", "<|s|>", "=", "<|s|>", "34", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "(", "double", ")", "<|s|>", "imm", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 572, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_5044", "comment_id": "2d62a1ee_5d927ba7", "class_list": ["Main"], "func_list": ["public static void assertIntEquals(int expected, int result)", "public static void assertLongEquals(long expected, long result)", "public static void assertFloatEquals(float expected, float result)", "public static void assertDoubleEquals(double expected, double result)", "public static int IntNegation()", "public static int IntAddition1()", "public static int IntAddition2()", "public static int IntSubtraction()", "public static long LongAddition()", "public static long LongSubtraction()", "public static int StaticCondition()", "public static int JumpsAndConditionals(boolean cond)", "public static int And0(int arg)", "public static long Mul0(long arg)", "public static int OrAllOnes(int arg)", "public static long Rem0(long arg)", "public static int Rem1(int arg)", "public static long RemN1(long arg)", "public static int Shl0(int arg)", "public static long Shr0(int arg)", "public static long SubSameLong(long arg)", "public static int UShr0(int arg)", "public static int XorSameInt(int arg)", "public static int ReturnInt33()", "public static int ReturnIntMax()", "public static int ReturnInt0()", "public static long ReturnLong33()", "public static long ReturnLong34()", "public static long ReturnLong0()", "public static float ReturnFloat33()", "public static float ReturnFloat34()", "public static float ReturnFloat99P25()", "public static double ReturnDouble33()", "public static double ReturnDouble34()", "public static double ReturnDouble99P25()", "public static void main(String[] args)"], "prime_var_dic": {}}, {"idx": 1164, "status": "update", "global_index": 18025, "project_name": "android_", "written_on": "2010-07-29 22:49:35", "tufano_target": "public void METHOD_1 ( ) { assertEquals ( VAR_2 , TYPE_1 . size ( ) ) ; }", "comment": "heh, this isn't quite in the spirit of the request :)\n\nI'd move the declarations up to the static section, and comment them clearly as coming from the spec (not just an artifact of the test code)", "tokenized_comment": ["heh", ",", "<|s|>", "this", "<|s|>", "isn", "'", "t", "<|s|>", "quite", "<|s|>", "in", "<|s|>", "the", "<|s|>", "spirit", "<|s|>", "of", "<|s|>", "the", "<|s|>", "request", "<|s|>", ":)", "<|nl|>", "<|nl|>", "I", "'", "d", "<|s|>", "move", "<|s|>", "the", "<|s|>", "declarations", "<|s|>", "up", "<|s|>", "to", "<|s|>", "the", "<|s|>", "static", "<|s|>", "section", ",", "<|s|>", "and", "<|s|>", "comment", "<|s|>", "them", "<|s|>", "clearly", "<|s|>", "as", "<|s|>", "coming", "<|s|>", "from", "<|s|>", "the", "<|s|>", "spec", "<|s|>", "(", "not", "<|s|>", "just", "<|s|>", "an", "<|s|>", "artifact", "<|s|>", "of", "<|s|>", "the", "<|s|>", "test", "<|s|>", "code", ")"], "tufano_code": "public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; assertEquals ( VAR_1 , TYPE_1 . size ( ) ) ; }", "our_target": "        assertEquals(WSP_DEFINED_SHORT_MIME_TYPE_COUNT, WELL_KNOWN_SHORT_MIME_TYPES.size());\n", "our_code": "    public void testHasExpectedNumberOfShortMimeTypes() {\n<|startfocus|>\n        final int EXPECTED_NUMBER_OF_SHORT_MIME_TYPES = 85;\n        assertEquals(EXPECTED_NUMBER_OF_SHORT_MIME_TYPES, WELL_KNOWN_SHORT_MIME_TYPES.size());\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Has", "Expected", "Number", "Of", "Short", "Mime", "Types", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "int", "<|s|>", "EXPECTED", "_", "NUMBER", "_", "OF", "_", "SHORT", "_", "MIME", "_", "TYPES", "<|s|>", "=", "<|s|>", "85", ";", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "EXPECTED", "_", "NUMBER", "_", "OF", "_", "SHORT", "_", "MIME", "_", "TYPES", ",", "<|s|>", "WELL", "_", "KNOWN", "_", "SHORT", "_", "MIME", "_", "TYPES", ".", "size", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 211, "base_patch_number": 10, "changed_patch_number": 11, "code_file_name": "android_4968", "comment_id": "AAAA3n%2F%2F%2FtE%3D", "class_list": ["Wap230WspContentTypeTest"], "func_list": ["public void testHasExpectedNumberOfShortMimeTypes()", "public void testHasExpectedNumberOfLongMimeTypes()", "public void testWellKnownShortIntegerMimeTypeValues()", "public void testWellKnownLongIntegerMimeTypeValues()"], "prime_var_dic": {"Map": 3, "byte": 11, "short": 2, "String": 1}}, {"idx": 95242, "status": "update", "global_index": 17847, "project_name": "android_", "written_on": "2009-01-14 10:28:16", "tufano_target": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; }", "comment": "ok, fixed with the next upload\n\n", "tokenized_comment": ["ok", ",", "<|s|>", "fixed", "<|s|>", "with", "<|s|>", "the", "<|s|>", "next", "<|s|>", "upload", "<|nl|>", "<|nl|>"], "tufano_code": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; }", "our_target": "        addPreferencesFromResource(R.xml.gsm_umts_options);\n", "our_code": "    protected void onCreate(Bundle icicle) {\n     super.onCreate(icicle);\n        \n<|startfocus|>\n     addPreferencesFromResource(R.xml.gsm_umts_options);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "on", "Create", "(", "Bundle", "<|s|>", "icicle", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|s|>", "super", ".", "on", "Create", "(", "icicle", ");", "<|nl|>", "<|8-s|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|s|>", "add", "Preferences", "From", "Resource", "(", "R", ".", "xml", ".", "gsm", "_", "umts", "_", "options", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 41, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4380", "comment_id": "z98aab7084b43183241cc2f4697c9e3f8", "class_list": ["GsmUmtsOptions"], "func_list": ["protected void onCreate(Bundle icicle)"], "prime_var_dic": {}}, {"idx": 95969, "status": "update", "global_index": 11928, "project_name": "android_", "written_on": "2014-07-24 15:13:49", "tufano_target": "public void METHOD_3 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; }", "comment": "Can you confirm that syncEnded will be called precisely when sync finished AND didn't fail? In fact if that's the semantics, you may want to rename syncEnded to syncSucceeded (to match the corresponding syncFailed method)", "tokenized_comment": ["Can", "<|s|>", "you", "<|s|>", "confirm", "<|s|>", "that", "<|s|>", "sync", "Ended", "<|s|>", "will", "<|s|>", "be", "<|s|>", "called", "<|s|>", "precisely", "<|s|>", "when", "<|s|>", "sync", "<|s|>", "finished", "<|s|>", "AND", "<|s|>", "didn", "'", "t", "<|s|>", "fail", "?", "<|s|>", "In", "<|s|>", "fact", "<|s|>", "if", "<|s|>", "that", "'", "s", "<|s|>", "the", "<|s|>", "semantics", ",", "<|s|>", "you", "<|s|>", "may", "<|s|>", "want", "<|s|>", "to", "<|s|>", "rename", "<|s|>", "sync", "Ended", "<|s|>", "to", "<|s|>", "sync", "Succeeded", "<|s|>", "(", "to", "<|s|>", "match", "<|s|>", "the", "<|s|>", "corresponding", "<|s|>", "sync", "Failed", "<|s|>", "method", ")"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) ; }", "our_target": "      public void syncSucceeded(@NotNull Project project) {\n", "our_code": "<|startfocus|>\n      public void syncEnded(@NotNull Project project) {\n<|endfocus|>\n        repository.updateRoots();\n      }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "sync", "Ended", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "repository", ".", "update", "Roots", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}"], "base_code_line_number": 101, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_512", "comment_id": "193d089f_0bd49227", "class_list": ["AppResourceRepository"], "func_list": ["protected AppResourceRepository(@NotNull AndroidFacet facet,", "public static AppResourceRepository getAppResources(@NotNull Module module, boolean createIfNecessary)", "public static AppResourceRepository create(@NotNull final AndroidFacet facet)", "public void syncEnded(@NotNull Project project)", "private static List<LocalResourceRepository> computeRepositories(@NotNull final AndroidFacet facet,", "private static List<LocalResourceRepository> computeLibraries(@NotNull final AndroidFacet facet)", "private static List<File> findAarLibraries(AndroidFacet facet, List<AndroidFacet> dependentFacets)", "private static List<File> findAarLibrariesFromIntelliJ(AndroidFacet facet, List<AndroidFacet> dependentFacets)", "private static List<File> findAarLibrariesFromGradle(List<AndroidFacet> dependentFacets, List<AndroidLibrary> libraries)", "private static void addGradleLibraries(List<AndroidLibrary> list, AndroidFacet facet)", "private static void addGradleLibrary(List<AndroidLibrary> list, AndroidLibrary library, Set<File> unique)", "public List<LocalResourceRepository> getLibraries()", "void updateRoots()", "static AppResourceRepository createForTest(AndroidFacet facet,", "public FileResourceRepository findRepositoryFor(@NotNull File aarDirectory)", "public String resolveStyleable(int[] id)", "public Integer getResourceId(ResourceType type, String name)", "private int getDynamicId(ResourceType type, String name)", "public void setCompiledResources(TIntObjectHashMap<Pair<ResourceType, String>> id2res,"], "prime_var_dic": {"myFacet": 1, "fine": 1, "int": 1}}, {"idx": 94332, "status": "update", "global_index": 11603, "project_name": "android_", "written_on": "2014-06-30 20:32:01", "tufano_target": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_3 != null ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; } }", "comment": "mTriggerListener will never be null", "tokenized_comment": ["m", "Trigger", "Listener", "<|s|>", "will", "<|s|>", "never", "<|s|>", "be", "<|s|>", "null"], "tufano_code": "protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_2 != null && VAR_3 != null ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; } }", "our_target": "        if (mSensorManager != null && mSensorSignificantMotion != null) {\n", "our_code": "    protected void onResume() {\n        super.onResume();\n\n<|startfocus|>\n        if (mSensorManager != null && mTriggeredListener != null\n                && mSensorSignificantMotion != null) {\n<|endfocus|>\n            mSensorManager.requestTriggerSensor(mTriggeredListener,\n                    mSensorSignificantMotion);\n        }\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "on", "Resume", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Resume", "(", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Sensor", "Manager", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "m", "Triggered", "Listener", "<|s|>", "!=", "<|s|>", "null", "<|nl|>", "<|16-s|>", "&&", "<|s|>", "m", "Sensor", "Significant", "Motion", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "m", "Sensor", "Manager", ".", "request", "Trigger", "Sensor", "(", "m", "Triggered", "Listener", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "m", "Sensor", "Significant", "Motion", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 211, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_892", "comment_id": "c429c520_2e611b8f", "class_list": ["TriggerListener", "SignificantMotionTestActivity"], "func_list": ["public TriggerListener(Activity parentActivity)", "public void onTrigger(TriggerEvent event)", "public boolean wasEventTriggered()", "public void reset()", "public void beep()", "private void vibrateDevice(int timeInMs)", "protected void onResume()", "protected void onPause()"], "prime_var_dic": {"MIN_TEST_TIME_MILLIS": 1, "VIBRATE_DURATION_MILLIS": 1, "numPassedTests": 1, "not": 1, "chair": 1}}, {"idx": 90976, "status": "update", "global_index": 4889, "project_name": "android_", "written_on": "2014-12-19 15:06:01", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 . METHOD_4 ( new TYPE_3 [ VAR_2 . size ( ) ] ) , VAR_1 ) ; } }", "comment": "List?", "tokenized_comment": ["List", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 , VAR_1 ) ; } }", "our_target": "      report(extras.toArray(new CategorizedProblem[extras.size()]), currentMain);\n", "our_code": "  public void loggingExtraProblems(Main currentMain) {\n    ArrayList<CategorizedProblem> extras = jackBatchCompiler.getExtraProblems();\n    if (extras != null) {\n<|startfocus|>\n      report(extras, currentMain);\n<|endfocus|>\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "logging", "Extra", "Problems", "(", "Main", "<|s|>", "current", "Main", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Array", "List", "<", "Categorized", "Problem", ">", "<|s|>", "extras", "<|s|>", "=", "<|s|>", "jack", "Batch", "Compiler", ".", "get", "Extra", "Problems", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "extras", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "report", "(", "extras", ",", "<|s|>", "current", "Main", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 85, "base_patch_number": 1, "changed_patch_number": 5, "code_file_name": "android_2268", "comment_id": "4144f0e8_5d5bfbc8", "class_list": ["EcjLogger"], "func_list": ["public EcjLogger(Main main, PrintWriter out, PrintWriter err,", "public int logProblems(CategorizedProblem[] problems, char[] unitSource, Main currentMain)", "private int report(Iterable<CategorizedProblem> problems, Main currentMain)", "public void logProblemsSummary(int globalProblemsCount, int globalErrorsCount,", "public void loggingExtraProblems(Main currentMain)"], "prime_var_dic": {"jackBatchCompiler": 1}}, {"idx": 35334, "status": "update", "global_index": 2275, "project_name": "android_", "written_on": "2017-02-14 19:56:58", "tufano_target": "private void METHOD_1 ( String message ) { new TYPE_1 ( this ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( getString ( VAR_2 , message ) ) . show ( ) ; }", "comment": "Nit: put a placeholder %$s (or whatever the syntax is for strings.xml, I forget) so it's \"<current string>:\\n%$s\" and then have getString(R.string.intent_not_resolved_info, message)", "tokenized_comment": ["Nit", ":", "<|s|>", "put", "<|s|>", "a", "<|s|>", "placeholder", "<|s|>", "%", "$", "s", "<|s|>", "(", "or", "<|s|>", "whatever", "<|s|>", "the", "<|s|>", "syntax", "<|s|>", "is", "<|s|>", "for", "<|s|>", "strings", ".", "xml", ",", "<|s|>", "I", "<|s|>", "forget", ")", "<|s|>", "so", "<|s|>", "it", "'", "s", "<|s|>", "\"", "<", "current", "<|s|>", "string", ">:\\", "n", "%", "$", "s", "\"", "<|s|>", "and", "<|s|>", "then", "<|s|>", "have", "<|s|>", "get", "String", "(", "R", ".", "string", ".", "intent", "_", "not", "_", "resolved", "_", "info", ",", "<|s|>", "message", ")"], "tufano_code": "private void METHOD_1 ( String message ) { new TYPE_1 ( this ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( getString ( VAR_2 ) + STRING_1 + message ) . show ( ) ; }", "our_target": "                .setMessage(getString(R.string.intent_not_resolved_info, message))\n", "our_code": "    private void showFailedIntentResolution(String message) {\n        new AlertDialog.Builder(this)\n                .setTitle(R.string.intent_not_resolved)\n<|startfocus|>\n                .setMessage(getString(R.string.intent_not_resolved_info) + \":\\n\" + message)\n<|endfocus|>\n                .show();\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "show", "Failed", "Intent", "Resolution", "(", "String", "<|s|>", "message", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "new", "<|s|>", "Alert", "Dialog", ".", "Builder", "(", "this", ")", "<|nl|>", "<|16-s|>", ".", "set", "Title", "(", "R", ".", "string", ".", "intent", "_", "not", "_", "resolved", ")", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", ".", "set", "Message", "(", "get", "String", "(", "R", ".", "string", ".", "intent", "_", "not", "_", "resolved", "_", "info", ")", "<|s|>", "+", "<|s|>", "\"", ":\\", "n", "\"", "<|s|>", "+", "<|s|>", "message", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", ".", "show", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 124, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_867", "comment_id": "2c50b88c_c68e3d06", "class_list": ["name", "IntentDrivenTestActivity", "TestInfo", "ButtonInfo"], "func_list": ["protected void onCreate(Bundle savedInstanceState)", "protected void onResume()", "public void onClick(View v)", "private void showFailedIntentResolution(String message)", "public String getTestId()", "public TestInfo(String testId,  int title, int infoText, ButtonInfo... buttons)", "public int getTitle()", "public int getInfoText()", "public ButtonInfo[] getButtons()", "public ButtonInfo[] getButtons()", "public int getButtonText()", "public Intent[] getIntents()", "public String getIntentFactoryClassName()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public ButtonInfo createFromParcel(Parcel source)", "public ButtonInfo[] newArray(int size)", "public TestInfo(String testId,  int title, int infoText, ButtonInfo... buttons)", "public String getTestId()", "public int getTitle()", "public int getInfoText()", "public ButtonInfo[] getButtons()", "protected void onCreate(Bundle savedInstanceState)"], "prime_var_dic": {}}, {"idx": 65250, "status": "insert", "global_index": 2486, "project_name": "android_", "written_on": "2017-03-14 06:04:36", "tufano_target": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( true ) ; METHOD_4 ( VAR_1 ) . METHOD_1 ( ) ; }", "comment": "a more accurate name here would be helpful.  verifyGetFirmwareRoamingInfoIsCalledWhenWifiEnabled()\n\n(it is long, but you get the point - otherwise this might be a helper of some sort)", "tokenized_comment": ["a", "<|s|>", "more", "<|s|>", "accurate", "<|s|>", "name", "<|s|>", "here", "<|s|>", "would", "<|s|>", "be", "<|s|>", "helpful", ".", "<|2-s|>", "verify", "Get", "Firmware", "Roaming", "Info", "Is", "Called", "When", "Wifi", "Enabled", "(", ")", "<|nl|>", "<|nl|>", "(", "it", "<|s|>", "is", "<|s|>", "long", ",", "<|s|>", "but", "<|s|>", "you", "<|s|>", "get", "<|s|>", "the", "<|s|>", "point", "<|s|>", "-", "<|s|>", "otherwise", "<|s|>", "this", "<|s|>", "might", "<|s|>", "be", "<|s|>", "a", "<|s|>", "helper", "<|s|>", "of", "<|s|>", "some", "<|s|>", "sort", ")"], "tufano_code": "public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( true ) ; METHOD_4 ( VAR_1 ) . METHOD_1 ( ) ; }", "our_target": "        reset(mWifiConnectivityHelper);\n        // WifiConnectivityManager is on by default\n", "our_code": "    public void getFirmwareRoamingInfo() {\n<|startfocus|>\n        reset(mWifiConnectivityHelper);\n<|endfocus|>\n        mWifiConnectivityManager.setWifiEnabled(true);\n        verify(mWifiConnectivityHelper).getFirmwareRoamingInfo();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "get", "Firmware", "Roaming", "Info", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "reset", "(", "m", "Wifi", "Connectivity", "Helper", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Wifi", "Connectivity", "Manager", ".", "set", "Wifi", "Enabled", "(", "true", ");", "<|nl|>", "<|8-s|>", "verify", "(", "m", "Wifi", "Connectivity", "Helper", ")", ".", "get", "Firmware", "Roaming", "Info", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1079, "base_patch_number": 14, "changed_patch_number": 16, "code_file_name": "android_5527", "comment_id": "7b03b6b0_83eb0f08", "class_list": ["WifiConnectivityManagerTest"], "func_list": ["public void cleanup()", "Resources mockResource()", "Context mockContext()", "ScanData mockScanData()", "WifiScanner mockWifiScanner()", "WifiConnectivityHelper mockWifiConnectivityHelper()", "WifiStateMachine mockWifiStateMachine()", "WifiNetworkSelector mockWifiNetworkSelector()", "WifiInfo getWifiInfo()", "WifiConfigManager mockWifiConfigManager()", "WifiConnectivityManager createConnectivityManager()", "public void enterWifiDisconnectedStateWhenScreenOn()", "public void enterWifiConnectedStateWhenScreenOn()", "public void turnScreenOnWhenWifiInDisconnectedState()", "public void turnScreenOnWhenWifiInConnectedState()", "public void turnScreenOnWhenWifiInConnectedStateRoamingDisabled()", "public void connectionAttemptRateLimitedWhenScreenOff()", "public void connectionAttemptNotRateLimitedWhenScreenOff()", "public void connectionAttemptNotRateLimitedWhenScreenOffAfterUserSelection()", "public void pnoRetryForLowRssiNetwork()", "public void watchdogBitePnoBadIncrementsMetrics()", "public void watchdogBitePnoGoodIncrementsMetrics()", "public void checkPeriodicScanIntervalWhenDisconnected()", "public void checkPeriodicScanIntervalWhenConnected()", "public void checkMinimumPeriodicScanIntervalWhenScreenOn()", "public void checkMinimumPeriodicScanIntervalNotEnforced()", "public void checkSingleScanSettingsWhenConnectedWithLowDataRate()", "public void checkSingleScanSettingsWhenConnectedWithHighDataRate()", "public void checkSingleScanSettingsWhenConnectedWithHighDataRateNotInCache()", "public void checkMaximumScanRetry()", "public void listenToAllSingleScanResults()", "public void waitForFullBandScanResults()", "public void blacklistAndReenableBssid()", "public void blacklistNetworkImmediatelyIfApHasNoCapacityForNewStation()", "public void freeBlacklistedBssidAfterTimeout()", "public void getFirmwareRoamingInfo()", "public void useAnyBssidForConnectionIfFirmwareControlsRoaming()", "public void frameworkInitiatedRoaming()", "public void noFrameworkRoamingIfFirmwareControlRoaming()"], "prime_var_dic": {"test": 2, "mFrameworkFacade": 1, "mNetworkScoreManager": 1, "mClock": 1, "mWifiLastResortWatchdog": 1, "mWifiMetrics": 1, "mScoreCache": 1, "int": 1, "String": 2, "long": 1, "calls": 7, "disabled": 1, "doubles": 2, "available": 1, "blacklist": 1, "stations": 1, "roaming": 2, "the": 1, "invokes": 1}}, {"idx": 92490, "status": "update", "global_index": 19685, "project_name": "android_", "written_on": "2012-08-02 20:41:34", "tufano_target": "public void METHOD_1 ( TYPE_1 listener ) { VAR_1 . add ( listener ) ; }", "comment": "micro-nit: space between keyword and (", "tokenized_comment": ["micro", "-", "nit", ":", "<|s|>", "space", "<|s|>", "between", "<|s|>", "keyword", "<|s|>", "and", "<|s|>", "("], "tufano_code": "public void METHOD_1 ( TYPE_1 listener ) { synchronized ( VAR_1 ) { VAR_1 . add ( listener ) ; } }", "our_target": "        listeners.add(listener);\n", "our_code": "    public void registerListener(DevicesChangeListener listener) {\n<|startfocus|>\n        synchronized(listeners) {\n            listeners.add(listener);\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "register", "Listener", "(", "Devices", "Change", "Listener", "<|s|>", "listener", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "synchronized", "(", "listeners", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "listeners", ".", "add", "(", "listener", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 99, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3928", "comment_id": "AAAH%2FH%2F%2F%2Fa0%3D", "class_list": ["for", "DeviceManager"], "func_list": ["public DeviceManager(ISdkLog log)", "public void registerListener(DevicesChangeListener listener)", "public void unregisterListener(DevicesChangeListener listener)", "public List<Device> getDevices(String sdkLocation)", "public List<Device> getDefaultDevices()", "public List<Device> getVendorDevices(String sdkLocation)", "public List<Device> getUserDevices()", "public void addUserDevice(Device d)", "public void removeUserDevice(Device d)", "public void replaceUserDevice(Device d)", "public void saveUserDevices()", "private static String getBooleanVal(boolean bool)", "private Collection<Device> loadDevices(File deviceXml)", "private void notifyListeners()", "private List<File> getExtraDirs(File extrasFolder)", "private boolean isDevicesExtra(File item)"], "prime_var_dic": {"String": 1, "List": 1, "DevicesChangeListener": 1}}, {"idx": 96214, "status": "update", "global_index": 5751, "project_name": "android_", "written_on": "2016-06-21 08:23:00", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_3 . add ( VAR_5 class ) ; return VAR_3 ; }", "comment": ".booleanValue()", "tokenized_comment": [".", "boolean", "Value", "(", ")"], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 . get ( VAR_4 ) ) { VAR_3 . add ( VAR_5 class ) ; } return VAR_3 ; }", "our_target": "    productionSet.add(StructurePrinting.class);\n", "our_code": "  public ProductionSet getProductions(@Nonnull Config config, @Nonnull Scheduler scheduler) {\n    ProductionSet productionSet = scheduler.createProductionSet();\n<|startfocus|>\n    if (config.get(StructurePrinter.STRUCTURE_PRINTING)) {\n      productionSet.add(StructurePrinting.class);\n    }\n<|endfocus|>\n    return productionSet;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Production", "Set", "<|s|>", "get", "Productions", "(", "@", "Nonnull", "<|s|>", "Config", "<|s|>", "config", ",", "<|s|>", "@", "Nonnull", "<|s|>", "Scheduler", "<|s|>", "scheduler", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Production", "Set", "<|s|>", "production", "Set", "<|s|>", "=", "<|s|>", "scheduler", ".", "create", "Production", "Set", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "config", ".", "get", "(", "Structure", "Printer", ".", "STRUCTURE", "_", "PRINTING", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "production", "Set", ".", "add", "(", "Structure", "Printing", ".", "class", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "production", "Set", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 79, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2164", "comment_id": "291ac803_f7ca200c", "class_list": ["that", "StructurePrintingSamplePlugin"], "func_list": ["public String getCanonicalName()", "public String getFriendlyName()", "public String getDescription()", "public Version getVersion()", "public boolean isCompatibileWithJack(@Nonnull Version version)", "public FeatureSet getFeatures(@Nonnull Config config, @Nonnull Scheduler scheduler)", "public ProductionSet getProductions(@Nonnull Config config, @Nonnull Scheduler scheduler)", "public String getCanonicalName()", "public String getFriendlyName()", "public String getDescription()", "public Version getVersion()", "public boolean isCompatibileWithJack(@Nonnull Version version)", "public FeatureSet getFeatures(@Nonnull Config config, @Nonnull Scheduler scheduler)", "public ProductionSet getProductions(@Nonnull Config config, @Nonnull Scheduler scheduler)"], "prime_var_dic": {}}, {"idx": 88598, "status": "update", "global_index": 7797, "project_name": "android_", "written_on": "2015-11-24 12:29:54", "tufano_target": "public static void METHOD_3 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; long result = VAR_1 . get ( ) ; VAR_2 . METHOD_2 ( STRING_1 + result ) ; }", "comment": "Please name this $opt$noinline$testGetLong. This way, we will get a dex2oat-time failure if the compiler manages to inline it.", "tokenized_comment": ["Please", "<|s|>", "name", "<|s|>", "this", "<|s|>", "$", "opt", "$", "noinline", "$", "test", "Get", "Long", ".", "<|s|>", "This", "<|s|>", "way", ",", "<|s|>", "we", "<|s|>", "will", "<|s|>", "get", "<|s|>", "a", "<|s|>", "dex", "2", "oat", "-", "time", "<|s|>", "failure", "<|s|>", "if", "<|s|>", "the", "<|s|>", "compiler", "<|s|>", "manages", "<|s|>", "to", "<|s|>", "inline", "<|s|>", "it", "."], "tufano_code": "public static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; long result = VAR_1 . get ( ) ; VAR_2 . METHOD_2 ( STRING_1 + result ) ; }", "our_target": "  public static void $opt$noinline$testGetLong() {\n", "our_code": "<|startfocus|>\n  public static void testGetLong() {\n<|endfocus|>\n    TestCase tc = new TestCase();\n    long result = tc.get();\n    System.out.println(\"Shouldn't see this! result = \" + result);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "test", "Get", "Long", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Test", "Case", "<|s|>", "tc", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Test", "Case", "(", ");", "<|nl|>", "<|4-s|>", "long", "<|s|>", "result", "<|s|>", "=", "<|s|>", "tc", ".", "get", "(", ");", "<|nl|>", "<|4-s|>", "System", ".", "out", ".", "println", "(", "\"", "Shouldn", "'", "t", "<|s|>", "see", "<|s|>", "this", "!", "<|s|>", "result", "<|s|>", "=", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "result", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 32, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_5116", "comment_id": "5bc96b78_997b1fd0", "class_list": ["Main"], "func_list": ["public static void main(String args[])", "public static void testGetLong()", "public static void testPutLong()"], "prime_var_dic": {}}, {"idx": 54954, "status": "update", "global_index": 7386, "project_name": "android_", "written_on": "2016-04-01 16:06:56", "tufano_target": "private static int METHOD_3 ( boolean x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } return TYPE_1 . METHOD_2 ( x ? 1 : 0 ) ; }", "comment": "You could make these $noinline$ to guarantee the CHECKed code will be the one we run.", "tokenized_comment": ["You", "<|s|>", "could", "<|s|>", "make", "<|s|>", "these", "<|s|>", "$", "noinline", "$", "<|s|>", "to", "<|s|>", "guarantee", "<|s|>", "the", "<|s|>", "CHECKed", "<|s|>", "code", "<|s|>", "will", "<|s|>", "be", "<|s|>", "the", "<|s|>", "one", "<|s|>", "we", "<|s|>", "run", "."], "tufano_code": "private static int METHOD_1 ( boolean x ) { return TYPE_1 . METHOD_2 ( x ? 1 : 0 ) ; }", "our_target": "  private static int $noinline$BitCountBoolean(boolean x) {\n    if (doThrow) { throw new Error(); }  // Try defeating inlining.\n", "our_code": "<|startfocus|>\n  private static int bitCountBoolean(boolean x) {\n<|endfocus|>\n    return Integer.bitCount(x ? 1 : 0);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "static", "<|s|>", "int", "<|s|>", "bit", "Count", "Boolean", "(", "boolean", "<|s|>", "x", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "Integer", ".", "bit", "Count", "(", "x", "<|s|>", "?", "<|s|>", "1", "<|s|>", ":", "<|s|>", "0", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 27, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5128", "comment_id": "ee198873_f69b9e3e", "class_list": ["Main"], "func_list": ["private static int bitCountBoolean(boolean x)", "private static int bitCountByte(byte x)", "private static int bitCountShort(short x)", "private static int bitCountChar(char x)", "private static int bitCountInt(int x)", "private static int bitCountLong(long x)", "public static void testBitCountBoolean()", "public static void testBitCountByte()", "public static void testBitCountShort()", "public static void testBitCountChar()", "public static void testBitCountInt()", "public static void testBitCountLong()", "public static void main(String args[])", "private static void expectEqualsInt(int expected, int result)"], "prime_var_dic": {}}, {"idx": 91875, "status": "update", "global_index": 3637, "project_name": "android_", "written_on": "2017-01-26 20:10:05", "tufano_target": "long METHOD_2 ( ) { return VAR_2 ; }", "comment": "Please rename to better match its purpose - as is, the name is ambiguous. Also, it would help if there is a Javadoc description of the method. Same comment applies to the other \"lastDiscovering()\" methods elsewhere.", "tokenized_comment": ["Please", "<|s|>", "rename", "<|s|>", "to", "<|s|>", "better", "<|s|>", "match", "<|s|>", "its", "<|s|>", "purpose", "<|s|>", "-", "<|s|>", "as", "<|s|>", "is", ",", "<|s|>", "the", "<|s|>", "name", "<|s|>", "is", "<|s|>", "ambiguous", ".", "<|s|>", "Also", ",", "<|s|>", "it", "<|s|>", "would", "<|s|>", "help", "<|s|>", "if", "<|s|>", "there", "<|s|>", "is", "<|s|>", "a", "<|s|>", "Javadoc", "<|s|>", "description", "<|s|>", "of", "<|s|>", "the", "<|s|>", "method", ".", "<|s|>", "Same", "<|s|>", "comment", "<|s|>", "applies", "<|s|>", "to", "<|s|>", "the", "<|s|>", "other", "<|s|>", "\"", "last", "Discovering", "(", ")", "\"", "<|s|>", "methods", "<|s|>", "elsewhere", "."], "tufano_code": "long METHOD_1 ( ) { return VAR_1 ; }", "our_target": "    long discoveryEndMillis() {\n        return mDiscoveryEndMs;\n", "our_code": "<|startfocus|>\n    long lastDiscovering() {\n        return mDiscoveryEnded;\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "long", "<|s|>", "last", "Discovering", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Discovery", "Ended", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 356, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4217", "comment_id": "6e63b46b_693fcc28", "class_list": ["AdapterProperties", ""], "func_list": ["public void onReceive(Context context, Intent intent)", "public AdapterProperties(AdapterService service)", "public void init(RemoteDevices remoteDevices)", "public void cleanup()", "String getName()", "boolean setName(String name)", "int getBluetoothClass()", "int getScanMode()", "boolean setScanMode(int scanMode)", "ParcelUuid[] getUuids()", "boolean setUuids(ParcelUuid[] uuids)", "byte[] getAddress()", "void setConnectionState(int mConnectionState)", "int getConnectionState()", "void setState(int mState)", "int getState()", "int getNumOfAdvertisementInstancesSupported()", "boolean isRpaOffloadSupported()", "int getNumOfOffloadedIrkSupported()", "int getNumOfOffloadedScanFilterSupported()", "int getOffloadedScanResultStorage()", "boolean isActivityAndEnergyReportingSupported()", "int getTotalNumOfTrackableAdvertisements()", "BluetoothDevice[] getBondedDevices()", "int getDiscoverableTimeout()", "boolean setDiscoverableTimeout(int timeout)", "int getProfileConnectionState(int profile)", "long lastDiscovering()", "boolean isDiscovering()", "private void sendConnectionStateChange(int profile, Intent connIntent)", "private boolean validateProfileConnectionState(int state)", "private int convertToAdapterState(int state)", "private boolean updateCountersAndCheckForConnectionStateChange(int state, int prevState)", "private void updateProfileConnectionState(int profile, int newState, int oldState)", "void adapterPropertyChangedCallback(int[] types, byte[][] values)", "void updateFeatureSupport(byte[] val)", "void onBluetoothReady()", "void onBleDisable()", "void onBluetoothDisable()", "void discoveryStateChangeCallback(int state)", "private void infoLog(String msg)", "private void debugLog(String msg)", "private void errorLog(String msg)", "public void onReceive(Context context, Intent intent)", "public AdapterProperties(AdapterService service)", "public void init(RemoteDevices remoteDevices)", "public void cleanup()", "String getName()", "boolean setName(String name)", "int getBluetoothClass()", "int getScanMode()", "boolean setScanMode(int scanMode)", "ParcelUuid[] getUuids()", "boolean setUuids(ParcelUuid[] uuids)", "byte[] getAddress()", "void setConnectionState(int mConnectionState)", "int getConnectionState()", "void setState(int mState)", "int getState()", "int getNumOfAdvertisementInstancesSupported()", "boolean isRpaOffloadSupported()", "int getNumOfOffloadedIrkSupported()", "int getNumOfOffloadedScanFilterSupported()", "int getOffloadedScanResultStorage()", "boolean isActivityAndEnergyReportingSupported()", "int getTotalNumOfTrackableAdvertisements()", "BluetoothDevice[] getBondedDevices()", "int getDiscoverableTimeout()", "boolean setDiscoverableTimeout(int timeout)", "int getProfileConnectionState(int profile)", "long lastDiscovering()", "boolean isDiscovering()", "private void sendConnectionStateChange(int profile, Intent connIntent)", "private boolean validateProfileConnectionState(int state)", "private int convertToAdapterState(int state)", "private boolean updateCountersAndCheckForConnectionStateChange(int state, int prevState)", "private void updateProfileConnectionState(int profile, int newState, int oldState)", "void adapterPropertyChangedCallback(int[] types, byte[][] values)", "void updateFeatureSupport(byte[] val)", "void onBluetoothReady()", "void onBleDisable()", "void onBluetoothDisable()", "void discoveryStateChangeCallback(int state)", "private void infoLog(String msg)", "private void debugLog(String msg)", "private void errorLog(String msg)"], "prime_var_dic": {"License": 1, "boolean": 2, "String": 1, "long": 1, "mName": 1, "mBluetoothClass": 1, "mScanMode": 1, "mDiscoverableTimeout": 1, "mConnectionState": 1, "mState": 1, "here": 1, "adapter": 2, "UUIDs": 1, "list": 1}}, {"idx": 93398, "status": "update", "global_index": 5322, "project_name": "android_", "written_on": "2016-09-16 17:29:37", "tufano_target": "public void METHOD_1 ( int VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != VAR_3 && METHOD_4 ( ) ) { VAR_3 = VAR_1 ; if ( VAR_4 > 0 ) { METHOD_2 ( METHOD_3 ( ) ) ; } } }", "comment": "why don't we just set the mIndentDirection here and leave the other layout creation as it is?", "tokenized_comment": ["why", "<|s|>", "don", "'", "t", "<|s|>", "we", "<|s|>", "just", "<|s|>", "set", "<|s|>", "the", "<|s|>", "m", "Indent", "Direction", "<|s|>", "here", "<|s|>", "and", "<|s|>", "leave", "<|s|>", "the", "<|s|>", "other", "<|s|>", "layout", "<|s|>", "creation", "<|s|>", "as", "<|s|>", "it", "<|s|>", "is", "?"], "tufano_code": "public void METHOD_1 ( int VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 != VAR_2 ) { METHOD_2 ( METHOD_3 ( ) ) ; } }", "our_target": "        if (layoutDirection != mLayoutDirection && isLayoutDirectionResolved()) {\n            mLayoutDirection = layoutDirection;\n            if (mIndentLines > 0) {\n                // Invalidate layout.\n                setHint(getHint());\n            }\n", "our_code": "    public void onRtlPropertiesChanged(int layoutDirection) {\n        super.onRtlPropertiesChanged(layoutDirection);\n\n<|startfocus|>\n        if (layoutDirection != mIndentDirection) {\n            // Invalidate layout.\n            setHint(getHint());\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Rtl", "Properties", "Changed", "(", "int", "<|s|>", "layout", "Direction", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Rtl", "Properties", "Changed", "(", "layout", "Direction", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "layout", "Direction", "<|s|>", "!=", "<|s|>", "m", "Indent", "Direction", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Invalidate", "<|s|>", "layout", ".", "<|nl|>", "<|12-s|>", "set", "Hint", "(", "get", "Hint", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 103, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1525", "comment_id": "cb1db24e_10eda1b5", "class_list": ["ImageFloatingTextView"], "func_list": ["public ImageFloatingTextView(Context context)", "protected Layout makeSingleLayout(int wantWidth, BoringLayout.Metrics boring, int ellipsisWidth,", "public void onRtlPropertiesChanged(int layoutDirection)", "public void setHasImage(boolean hasImage)", "public boolean setNumIndentLines(int lines)"], "prime_var_dic": {"on": 1}}, {"idx": 87554, "status": "update", "global_index": 15897, "project_name": "android_", "written_on": "2015-03-02 23:31:41", "tufano_target": "public String METHOD_4 ( ) { return VAR_3 ; }", "comment": "why do we need this member var? why cant we just return mySelectedStyle.getName() here?", "tokenized_comment": ["why", "<|s|>", "do", "<|s|>", "we", "<|s|>", "need", "<|s|>", "this", "<|s|>", "member", "<|s|>", "var", "?", "<|s|>", "why", "<|s|>", "cant", "<|s|>", "we", "<|s|>", "just", "<|s|>", "return", "<|s|>", "my", "Selected", "Style", ".", "get", "Name", "(", ")", "<|s|>", "here", "?"], "tufano_code": "public TYPE_1 < String > METHOD_1 ( ) { TYPE_2 < String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_3 item : VAR_2 ) { VAR_1 . add ( item . METHOD_3 ( ) ) ; } return VAR_1 . build ( ) ; }", "our_target": "  public String getParentName() {\n    return myParentName;\n", "our_code": "<|startfocus|>\n  public ImmutableSet<String> getDefinedAttributes() {\n    ImmutableSet.Builder<String> builder = ImmutableSet.builder();\n\n    for (EditedStyleItem item : myAttributes) {\n      builder.add(item.getQualifiedName());\n    }\n\n    return builder.build();\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Immutable", "Set", "<", "String", ">", "<|s|>", "get", "Defined", "Attributes", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Immutable", "Set", ".", "Builder", "<", "String", ">", "<|s|>", "builder", "<|s|>", "=", "<|s|>", "Immutable", "Set", ".", "builder", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Edited", "Style", "Item", "<|s|>", "item", "<|s|>", ":", "<|s|>", "my", "Attributes", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "builder", ".", "add", "(", "item", ".", "get", "Qualified", "Name", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "builder", ".", "build", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 71, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_242", "comment_id": "b2c50a26_91d9de1c", "class_list": ["AttributesTableModel", "ParentAttribute", ":", "LabelContents", "AttributeContents"], "func_list": ["public void addThemePropertyChangedListener(final ThemePropertyChangedListener listener)", "public ImmutableSet<String> getDefinedAttributes()", "public AttributesTableModel(@NotNull Configuration configuration,", "private void reloadContent()", "public RowContents getRowContents(final int rowIndex)", "else if (labelRowIndex == rowIndex)", "public boolean isThemeParentRow(int row)", "public int getRowCount()", "public int getColumnCount()", "public Object getValueAt(int rowIndex, int columnIndex)", "public void setValueAt(Object aValue, int rowIndex, int columnIndex)", "public int getColumnSpan(int row, int column)", "public boolean isCellEditable(int rowIndex, int columnIndex)", "public int getRowSpan(int row, int column)", "public ThemeEditorStyle getSelectedStyle()", "private LabelContents(TableLabel label)", "public TableLabel getValueAt(int column)", "public AttributeContents(int rowIndex)", "public int getRowIndex()", "public EditedStyleItem getValueAt(int column)", "private boolean setAttributeValue(@NotNull String strValue)", "public void addThemePropertyChangedListener(final ThemePropertyChangedListener listener)", "public ImmutableSet<String> getDefinedAttributes()", "public AttributesTableModel(@NotNull Configuration configuration,", "private void reloadContent()", "public RowContents getRowContents(final int rowIndex)", "else if (labelRowIndex == rowIndex)", "public boolean isThemeParentRow(int row)", "public int getRowCount()", "public int getColumnCount()", "public Object getValueAt(int rowIndex, int columnIndex)", "public void setValueAt(Object aValue, int rowIndex, int columnIndex)", "public int getColumnSpan(int row, int column)", "public boolean isCellEditable(int rowIndex, int columnIndex)", "public int getRowSpan(int row, int column)", "public ThemeEditorStyle getSelectedStyle()", "private LabelContents(TableLabel label)", "public TableLabel getValueAt(int column)", "public AttributeContents(int rowIndex)", "public int getRowIndex()", "public EditedStyleItem getValueAt(int column)", "private boolean setAttributeValue(@NotNull String strValue)", "public boolean isThemeParentRow(int row)", "public int getRowCount()", "public int getColumnCount()", "public Object getValueAt(int rowIndex, int columnIndex)", "public void setValueAt(Object aValue, int rowIndex, int columnIndex)", "public int getColumnSpan(int row, int column)", "public boolean isCellEditable(int rowIndex, int columnIndex)", "public int getRowSpan(int row, int column)", "public ThemeEditorStyle getSelectedStyle()"], "prime_var_dic": {"type": 1}}, {"idx": 17746, "status": "update", "global_index": 18152, "project_name": "android_", "written_on": "2009-02-12 00:53:10", "tufano_target": "protected void METHOD_3 ( ) { if ( VAR_1 ) TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 ) ; }", "comment": "Promote to base class?", "tokenized_comment": ["Promote", "<|s|>", "to", "<|s|>", "base", "<|s|>", "class", "?"], "tufano_code": "protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , this ) ; }", "our_target": "    protected void finalize() {\n        if(DBG) Log.d(LOG_TAG, \"SimPhoneBookInterfaceManager finalized\");\n", "our_code": "<|startfocus|>\n    protected void publish() {\n        ServiceManager.addService(\"simphonebook\", this);\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "publish", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Service", "Manager", ".", "add", "Service", "(", "\"", "simphonebook", "\"", ",", "<|s|>", "this", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 84, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4943", "comment_id": "AAAADn%2F%2F%2F3I%3D", "class_list": ["SimPhoneBookInterfaceManager"], "func_list": ["public void handleMessage(Message msg)", "public SimPhoneBookInterfaceManager(GSMPhone phone)", "public void dispose()", "protected void publish()", "public int[] getAdnRecordsSize(int efid)", "protected void logd(String msg)", "protected void loge(String msg)"], "prime_var_dic": {"SIM": 1, "LOG_TAG": 1}}, {"idx": 81382, "status": "update", "global_index": 10875, "project_name": "android_", "written_on": "2015-05-21 21:45:13", "tufano_target": "public boolean METHOD_1 ( TYPE_1 file ) { return false ; }", "comment": "nullable", "tokenized_comment": ["nullable"], "tufano_code": "public boolean METHOD_1 ( TYPE_1 file ) { return false ; }", "our_target": "  public boolean accept(@NotNull VirtualFile file) {\n", "our_code": "<|startfocus|>\n  public boolean accept(VirtualFile file) {\n<|endfocus|>\n    return false;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "accept", "(", "Virtual", "File", "<|s|>", "file", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 39, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_236", "comment_id": "cd1ca521_452774e1", "class_list": ["SystemInfoCaptureType"], "func_list": ["protected SystemInfoCaptureType()", "public FileEditor createEditor(@NotNull Project project, @NotNull VirtualFile file)", "public boolean accept(VirtualFile file)"], "prime_var_dic": {}}, {"idx": 46037, "status": "update", "global_index": 11265, "project_name": "android_", "written_on": "2014-12-18 17:19:47", "tufano_target": "public VAR_1 ( String VAR_2 , int VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "comment": "@NotNull?", "tokenized_comment": ["@", "Not", "Null", "?"], "tufano_code": "public VAR_1 ( String VAR_2 , int VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "our_target": "  public TableLabel(@NotNull String labelName, int rowPosition) {\n", "our_code": "<|startfocus|>\n  public TableLabel(String labelName, int rowPosition) {\n<|endfocus|>\n    myLabelName = labelName;\n    myRowPosition = rowPosition;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Table", "Label", "(", "String", "<|s|>", "label", "Name", ",", "<|s|>", "int", "<|s|>", "row", "Position", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Label", "Name", "<|s|>", "=", "<|s|>", "label", "Name", ";", "<|nl|>", "<|4-s|>", "my", "Row", "Position", "<|s|>", "=", "<|s|>", "row", "Position", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 22, "base_patch_number": 72, "changed_patch_number": 76, "code_file_name": "android_305", "comment_id": "c19e206c_91f67c6c", "class_list": ["TableLabel"], "func_list": ["public TableLabel(String labelName, int rowPosition)", "public String getLabelName()", "public int getRowPosition()", "public String toString()"], "prime_var_dic": {"myLabelName": 1, "myRowPosition": 1}}, {"idx": 74710, "status": "update", "global_index": 10798, "project_name": "android_", "written_on": "2015-05-19 00:46:22", "tufano_target": "public VAR_1 ( TYPE_1 < ? > list ) { super ( list ) ; VAR_2 = list ; }", "comment": "@NotNull", "tokenized_comment": ["@", "Not", "Null"], "tufano_code": "public VAR_1 ( TYPE_1 < ? > list ) { super ( list ) ; VAR_2 = list ; }", "our_target": "  public SizeExpression(@NotNull ObservableList<?> list) {\n", "our_code": "<|startfocus|>\n  public SizeExpression(ObservableList<?> list) {\n<|endfocus|>\n    super(list);\n    myList = list;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Size", "Expression", "(", "Observable", "List", "<?>", "<|s|>", "list", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "list", ");", "<|nl|>", "<|4-s|>", "my", "List", "<|s|>", "=", "<|s|>", "list", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 13, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_609", "comment_id": "4dc1956b_5ddc2f0c", "class_list": ["SizeExpression"], "func_list": ["public SizeExpression(ObservableList<?> list)", "public Integer get()"], "prime_var_dic": {}}, {"idx": 58679, "status": "update", "global_index": 1523, "project_name": "android_", "written_on": "2017-03-15 09:15:08", "tufano_target": "public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 == VAR_3 ) { if ( VAR_4 ) { TYPE_2 . METHOD_2 ( VAR_5 , STRING_2 + VAR_7 ) ; } return VAR_6 ; } VAR_2 = VAR_3 ; return METHOD_3 ( VAR_1 , true ) ; }", "comment": "Nit: \"Local hotspot already started\"?", "tokenized_comment": ["Nit", ":", "<|s|>", "\"", "Local", "<|s|>", "hotspot", "<|s|>", "already", "<|s|>", "started", "\"", "?"], "tufano_code": "public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 == VAR_3 ) { if ( VAR_4 ) { TYPE_2 . METHOD_2 ( VAR_5 , STRING_1 ) ; } return VAR_6 ; } VAR_2 = VAR_3 ; return METHOD_3 ( VAR_1 , true ) ; }", "our_target": "                Log.e(TAG, \"Already in mode: \" + current.description);\n", "our_code": "    public int startLocalOnlyWifiHotspot(WifiConfiguration cfg) {\n        if (mMode == Mode.LOCAL_HOTSPOT) {\n            if (VDBG) {\n<|startfocus|>\n                Log.e(TAG, \"Attempt to startLocalOnlyWifiHotspot absent corresponding stop.\");\n<|endfocus|>\n            }\n            return ConnectivityManager.TETHER_ERROR_SERVICE_UNAVAIL;\n        }\n        mMode = Mode.LOCAL_HOTSPOT;\n        return setWifiTethering(cfg, true);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "start", "Local", "Only", "Wifi", "Hotspot", "(", "Wifi", "Configuration", "<|s|>", "cfg", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Mode", "<|s|>", "==", "<|s|>", "Mode", ".", "LOCAL", "_", "HOTSPOT", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "VDBG", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "Attempt", "<|s|>", "to", "<|s|>", "start", "Local", "Only", "Wifi", "Hotspot", "<|s|>", "absent", "<|s|>", "corresponding", "<|s|>", "stop", ".", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "return", "<|s|>", "Connectivity", "Manager", ".", "TETHER", "_", "ERROR", "_", "SERVICE", "_", "UNAVAIL", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "m", "Mode", "<|s|>", "=", "<|s|>", "Mode", ".", "LOCAL", "_", "HOTSPOT", ";", "<|nl|>", "<|8-s|>", "return", "<|s|>", "set", "Wifi", "Tethering", "(", "cfg", ",", "<|s|>", "true", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 322, "base_patch_number": 16, "changed_patch_number": 17, "code_file_name": "android_4099", "comment_id": "9b099e6e_c2a91726", "class_list": ["holds", "Tethering", "", "TetherState", "StateReceiver", "TetherMasterSM", "TetherMasterUtilState", "SimChangeListener", "SimChangeBroadcastReceiver", "InitialState", "TetherModeAliveState", "ErrorState", "SetIpForwardingEnabledErrorState", "SetIpForwardingDisabledErrorState", "StartTetheringErrorState", "StopTetheringErrorState", "SetDnsForwardersErrorState"], "func_list": ["public TetherState(TetherInterfaceStateMachine sm)", "public Tethering(Context context, INetworkManagementService nmService,", "private ConnectivityManager getConnectivityManager()", "private void updateConfiguration()", "public void interfaceStatusChanged(String iface, boolean up)", "public void interfaceLinkStateChanged(String iface, boolean up)", "private int ifaceNameToType(String iface)", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "public void startTethering(int type, ResultReceiver receiver, boolean showProvisioningUi)", "public void stopTethering(int type)", "public int startLocalOnlyWifiHotspot(WifiConfiguration cfg)", "public void stopLocalOnlyWifiHotspot()", "protected boolean isTetherProvisioningRequired()", "private void enableTetheringInternal(int type, boolean enable, ResultReceiver receiver)", "private void sendTetherResult(ResultReceiver receiver, int result)", "private int setWifiTethering(WifiConfiguration cfg, final boolean enable)", "private void setBluetoothTethering(final boolean enable, final ResultReceiver receiver)", "public void onServiceDisconnected(int profile)  }", "public void onServiceConnected(int profile, BluetoothProfile proxy)", "private void runUiTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendUiTetherProvisionIntent(int type, ResultReceiver receiver)", "private ResultReceiver getProxyReceiver(final int type, final ResultReceiver receiver)", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void scheduleProvisioningRechecks(int type)", "private void runSilentTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendSilentTetherProvisionIntent(int type, ResultReceiver receiver)", "private void cancelTetherProvisioningRechecks(int type)", "public int tether(String iface)", "public int untether(String iface)", "public void untetherAll()", "public int getLastTetherError(String iface)", "private void sendTetherStateChangedBroadcast()", "private void showTetheredNotification(int icon)", "private void clearTetheredNotification()", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void handleConnectivityAction(Intent intent)", "private void handleUsbAction(Intent intent)", "private void handleWifiApAction(Intent intent)", "private void tetherMatchingInterfaces(boolean enable, int interfaceType)", "public TetheringConfiguration getTetheringConfiguration()", "public boolean hasTetherableConfiguration()", "public String[] getTetherableUsbRegexs()", "public String[] getTetherableWifiRegexs()", "public String[] getTetherableBluetoothRegexs()", "public int setUsbTethering(boolean enable)", "public String[] getTetheredIfaces()", "public String[] getTetherableIfaces()", "public String[] getTetheredDhcpRanges()", "public String[] getErroredIfaces()", "private void maybeLogMessage(State state, int what)", "boolean pertainsToCurrentUpstream(NetworkState ns)", "public boolean processMessage(Message m)", "protected void requestUpstreamMobileConnection()", "protected void unrequestUpstreamMobileConnection()", "private boolean startIpServices(Mode mode, String[] dhcpRanges)", "private boolean stopIpServices()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected int findPreferredUpstreamType(boolean tryCell)", "protected void setUpstreamByType(int upType)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)", "public int generationNumber()", "public void startListening()", "public void stopListening()", "public boolean hasMobileHotspotProvisionApp()", "private boolean isSimCardAbsent(String state)", "private boolean isSimCardLoaded(String state)", "private void startProvisionIntent(int tetherType)", "public SimChangeBroadcastReceiver(int generationNumber)", "public void enter()", "public void exit()", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public void notifyInterfaceStateChange(String iface, TetherInterfaceStateMachine who,", "private void trackNewTetherableInterface(String iface, int interfaceType)", "private static String[] copy(String[] strarray)", "private static String asString(Mode m)", "public TetherState(TetherInterfaceStateMachine sm)", "public Tethering(Context context, INetworkManagementService nmService,", "private ConnectivityManager getConnectivityManager()", "private void updateConfiguration()", "public void interfaceStatusChanged(String iface, boolean up)", "public void interfaceLinkStateChanged(String iface, boolean up)", "private int ifaceNameToType(String iface)", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "public void startTethering(int type, ResultReceiver receiver, boolean showProvisioningUi)", "public void stopTethering(int type)", "public int startLocalOnlyWifiHotspot(WifiConfiguration cfg)", "public void stopLocalOnlyWifiHotspot()", "protected boolean isTetherProvisioningRequired()", "private void enableTetheringInternal(int type, boolean enable, ResultReceiver receiver)", "private void sendTetherResult(ResultReceiver receiver, int result)", "private int setWifiTethering(WifiConfiguration cfg, final boolean enable)", "private void setBluetoothTethering(final boolean enable, final ResultReceiver receiver)", "public void onServiceDisconnected(int profile)  }", "public void onServiceConnected(int profile, BluetoothProfile proxy)", "private void runUiTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendUiTetherProvisionIntent(int type, ResultReceiver receiver)", "private ResultReceiver getProxyReceiver(final int type, final ResultReceiver receiver)", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void scheduleProvisioningRechecks(int type)", "private void runSilentTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendSilentTetherProvisionIntent(int type, ResultReceiver receiver)", "private void cancelTetherProvisioningRechecks(int type)", "public int tether(String iface)", "public int untether(String iface)", "public void untetherAll()", "public int getLastTetherError(String iface)", "private void sendTetherStateChangedBroadcast()", "private void showTetheredNotification(int icon)", "private void clearTetheredNotification()", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void handleConnectivityAction(Intent intent)", "private void handleUsbAction(Intent intent)", "private void handleWifiApAction(Intent intent)", "private void tetherMatchingInterfaces(boolean enable, int interfaceType)", "public TetheringConfiguration getTetheringConfiguration()", "public boolean hasTetherableConfiguration()", "public String[] getTetherableUsbRegexs()", "public String[] getTetherableWifiRegexs()", "public String[] getTetherableBluetoothRegexs()", "public int setUsbTethering(boolean enable)", "public String[] getTetheredIfaces()", "public String[] getTetherableIfaces()", "public String[] getTetheredDhcpRanges()", "public String[] getErroredIfaces()", "private void maybeLogMessage(State state, int what)", "boolean pertainsToCurrentUpstream(NetworkState ns)", "public boolean processMessage(Message m)", "protected void requestUpstreamMobileConnection()", "protected void unrequestUpstreamMobileConnection()", "private boolean startIpServices(Mode mode, String[] dhcpRanges)", "private boolean stopIpServices()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected int findPreferredUpstreamType(boolean tryCell)", "protected void setUpstreamByType(int upType)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)", "public int generationNumber()", "public void startListening()", "public void stopListening()", "public boolean hasMobileHotspotProvisionApp()", "private boolean isSimCardAbsent(String state)", "private boolean isSimCardLoaded(String state)", "private void startProvisionIntent(int tetherType)", "public SimChangeBroadcastReceiver(int generationNumber)", "public void enter()", "public void exit()", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public void notifyInterfaceStateChange(String iface, TetherInterfaceStateMachine who,", "private void trackNewTetherableInterface(String iface, int interfaceType)", "private static String[] copy(String[] strarray)", "private static String asString(Mode m)", "public TetherState(TetherInterfaceStateMachine sm)", "public Tethering(Context context, INetworkManagementService nmService,", "private ConnectivityManager getConnectivityManager()", "private void updateConfiguration()", "public void interfaceStatusChanged(String iface, boolean up)", "public void interfaceLinkStateChanged(String iface, boolean up)", "private int ifaceNameToType(String iface)", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "public void startTethering(int type, ResultReceiver receiver, boolean showProvisioningUi)", "public void stopTethering(int type)", "public int startLocalOnlyWifiHotspot(WifiConfiguration cfg)", "public void stopLocalOnlyWifiHotspot()", "protected boolean isTetherProvisioningRequired()", "private void enableTetheringInternal(int type, boolean enable, ResultReceiver receiver)", "private void sendTetherResult(ResultReceiver receiver, int result)", "private int setWifiTethering(WifiConfiguration cfg, final boolean enable)", "private void setBluetoothTethering(final boolean enable, final ResultReceiver receiver)", "public void onServiceDisconnected(int profile)  }", "public void onServiceConnected(int profile, BluetoothProfile proxy)", "private void runUiTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendUiTetherProvisionIntent(int type, ResultReceiver receiver)", "private ResultReceiver getProxyReceiver(final int type, final ResultReceiver receiver)", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void scheduleProvisioningRechecks(int type)", "private void runSilentTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendSilentTetherProvisionIntent(int type, ResultReceiver receiver)", "private void cancelTetherProvisioningRechecks(int type)", "public int tether(String iface)", "public int untether(String iface)", "public void untetherAll()", "public int getLastTetherError(String iface)", "private void sendTetherStateChangedBroadcast()", "private void showTetheredNotification(int icon)", "private void clearTetheredNotification()", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void handleConnectivityAction(Intent intent)", "private void handleUsbAction(Intent intent)", "private void handleWifiApAction(Intent intent)", "private void tetherMatchingInterfaces(boolean enable, int interfaceType)", "public TetheringConfiguration getTetheringConfiguration()", "public boolean hasTetherableConfiguration()", "public String[] getTetherableUsbRegexs()", "public String[] getTetherableWifiRegexs()", "public String[] getTetherableBluetoothRegexs()", "public int setUsbTethering(boolean enable)", "public String[] getTetheredIfaces()", "public String[] getTetherableIfaces()", "public String[] getTetheredDhcpRanges()", "public String[] getErroredIfaces()", "private void maybeLogMessage(State state, int what)", "boolean pertainsToCurrentUpstream(NetworkState ns)", "public boolean processMessage(Message m)", "protected void requestUpstreamMobileConnection()", "protected void unrequestUpstreamMobileConnection()", "private boolean startIpServices(Mode mode, String[] dhcpRanges)", "private boolean stopIpServices()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected int findPreferredUpstreamType(boolean tryCell)", "protected void setUpstreamByType(int upType)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)", "public int generationNumber()", "public void startListening()", "public void stopListening()", "public boolean hasMobileHotspotProvisionApp()", "private boolean isSimCardAbsent(String state)", "private boolean isSimCardLoaded(String state)", "private void startProvisionIntent(int tetherType)", "public SimChangeBroadcastReceiver(int generationNumber)", "public void enter()", "public void exit()", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public void notifyInterfaceStateChange(String iface, TetherInterfaceStateMachine who,", "private void trackNewTetherableInterface(String iface, int interfaceType)", "private static String[] copy(String[] strarray)", "private static String asString(Mode m)", "public TetherState(TetherInterfaceStateMachine sm)", "public boolean processMessage(Message m)", "protected void requestUpstreamMobileConnection()", "protected void unrequestUpstreamMobileConnection()", "private boolean startIpServices(Mode mode, String[] dhcpRanges)", "private boolean stopIpServices()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected int findPreferredUpstreamType(boolean tryCell)", "protected void setUpstreamByType(int upType)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)", "public int generationNumber()", "public void startListening()", "public void stopListening()", "public boolean hasMobileHotspotProvisionApp()", "private boolean isSimCardAbsent(String state)", "private boolean isSimCardLoaded(String state)", "private void startProvisionIntent(int tetherType)", "public SimChangeBroadcastReceiver(int generationNumber)", "public void onReceive(Context context, Intent intent)", "public void stopListening()"], "prime_var_dic": {"down": 1, "mIPv6TetheringCoordinator": 1, "int": 1}}, {"idx": 89655, "status": "update", "global_index": 8681, "project_name": "android_", "written_on": "2015-07-24 10:02:26", "tufano_target": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . getName ( ) . startsWith ( VAR_3 ) ; }", "comment": "nit: No really needed", "tokenized_comment": ["nit", ":", "<|s|>", "No", "<|s|>", "really", "<|s|>", "needed"], "tufano_code": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = VAR_1 . getName ( ) ; return VAR_2 . startsWith ( VAR_3 ) ; }", "our_target": "    return cls.getName().startsWith(SyntheticSwitchmapClassNamePrefix);\n", "our_code": "  public static boolean isSyntheticSwitchMapClass(@Nonnull JDefinedClass cls) {\n<|startfocus|>\n    String shortName = cls.getName();\n    return shortName.startsWith(SyntheticSwitchmapClassNamePrefix);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "is", "Synthetic", "Switch", "Map", "Class", "(", "@", "Nonnull", "<|s|>", "JDefined", "Class", "<|s|>", "cls", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "String", "<|s|>", "short", "Name", "<|s|>", "=", "<|s|>", "cls", ".", "get", "Name", "(", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "short", "Name", ".", "starts", "With", "(", "Synthetic", "Switchmap", "Class", "Name", "Prefix", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 228, "base_patch_number": 11, "changed_patch_number": 16, "code_file_name": "android_2526", "comment_id": "0da5e2c6_df05db4d", "class_list": ["is", "is", "SyntheticClassManager", "", "", "created", "created\",", "at", "cannot", "is", "is", "only", "like", "is", "only", "like", "is", "only", "like", "will", "is", "to", "at", "is", "is", "under", "overhead", "existed,", "will", "must", "created", "is", "to", "is", "", "which", "is", "name", "", "", "exists", "is", "", "cannot", "and", "as", "full", "", "since", "", "", "exists", "doesn't", "and", "name", "", "", "name", "name:", "name", "under", "under", "", "", "name", "under", "if"], "func_list": ["public SyntheticClassManager(@Nonnull OptimizationUtil supportUtil, int optimizeThreshold)", "public JDefinedClass getOrCreateRelatedSyntheticClass(@Nonnull JDefinedEnum enumType,", "public static boolean isSyntheticSwitchMapClass(@Nonnull JDefinedClass cls)", "private JDefinedClass checkAndInitializeSyntheticClass(@Nonnull String syntheticClassFullName)", "private JDefinedClass initializeSyntheticClass(@Nonnull String syntheticClassFullName)", "private JDefinedClass createSyntheticClass(@Nonnull String syntheticClassFullName)", "private boolean isOptimizationWorthwhile(int uses, @Nonnull Set<JDefinedEnum> enumsType)", "private Set<JDefinedEnum> getPredefinedEnumsType(", "private String getSyntheticClassUUID(@Nonnull Set<JDefinedEnum> enumsType)", "public int compare(JDefinedEnum enum1, JDefinedEnum enum2)", "private JDefinedClass getSyntheticClassUnderPackage(@Nonnull JPackage syntheticClassPackage)", "private void initEnumOptimizationMarkers(@Nonnull Set<JDefinedEnum> enumsType)", "private JDefinedClass checkAndInitializeSyntheticClass(@Nonnull String syntheticClassFullName)", "private JDefinedClass checkAndInitializeSyntheticClass(@Nonnull String syntheticClassFullName)", "private JDefinedClass checkAndInitializeSyntheticClass(@Nonnull String syntheticClassFullName)"], "prime_var_dic": {"License": 1}}, {"idx": 58162, "status": "insert", "global_index": 3425, "project_name": "android_", "written_on": "2017-01-16 09:59:30", "tufano_target": "public VAR_1 ( TYPE_1 < TYPE_2 > VAR_2 ) { this . VAR_2 = VAR_2 ; this . VAR_4 = 0 ; this . VAR_3 = false ; }", "comment": "can all be final.", "tokenized_comment": ["can", "<|s|>", "all", "<|s|>", "be", "<|s|>", "final", "."], "tufano_code": "public VAR_1 ( TYPE_1 < TYPE_2 > VAR_2 ) { this . VAR_2 = VAR_2 ; this . VAR_3 = false ; }", "our_target": "            this.expectedKind = expectedKind;\n            this.expectedCount = 0;\n", "our_code": "        public WatchEventResult(WatchEvent.Kind<Path> expectedKind) {\n<|startfocus|>\n            this.expectedKind = expectedKind;\n<|endfocus|>\n            this.testCount = false;\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "Watch", "Event", "Result", "(", "Watch", "Event", ".", "Kind", "<", "Path", ">", "<|s|>", "expected", "Kind", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "this", ".", "expected", "Kind", "<|s|>", "=", "<|s|>", "expected", "Kind", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "this", ".", "test", "Count", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 64, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3251", "comment_id": "4328d982_365b5e99", "class_list": ["WatchServiceTest", "WatchEventResult"], "func_list": ["public WatchEventResult(WatchEvent.Kind<Path> expectedKind)", "public WatchEventResult(WatchEvent.Kind<Path> expectedKind)"], "prime_var_dic": {}}, {"idx": 6202, "status": "update", "global_index": 9065, "project_name": "android_", "written_on": "2015-09-04 13:00:31", "tufano_target": "public TYPE_1 METHOD_4 ( String VAR_1 ) { long VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; return new TYPE_1 ( VAR_2 ) ; }", "comment": "I wonder whether \"withDeletedExtension\" or \"copyWithDeletedExtension\" is a better name given the semantics...", "tokenized_comment": ["I", "<|s|>", "wonder", "<|s|>", "whether", "<|s|>", "\"", "with", "Deleted", "Extension", "\"", "<|s|>", "or", "<|s|>", "\"", "copy", "With", "Deleted", "Extension", "\"", "<|s|>", "is", "<|s|>", "a", "<|s|>", "better", "<|s|>", "name", "<|s|>", "given", "<|s|>", "the", "<|s|>", "semantics", "..."], "tufano_code": "public TYPE_1 METHOD_1 ( String VAR_1 ) { long VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; return new TYPE_1 ( VAR_2 ) ; }", "our_target": "    public OpenSSLX509Certificate withDeletedExtension(String oid) {\n", "our_code": "<|startfocus|>\n    public OpenSSLX509Certificate deleteExtension(String oid) {\n<|endfocus|>\n        long copy = NativeCrypto.X509_dup(mContext);\n        NativeCrypto.X509_delete_ext(copy, oid);\n        return new OpenSSLX509Certificate(copy);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Open", "SSLX", "509", "Certificate", "<|s|>", "delete", "Extension", "(", "String", "<|s|>", "oid", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "long", "<|s|>", "copy", "<|s|>", "=", "<|s|>", "Native", "Crypto", ".", "X", "509", "_", "dup", "(", "m", "Context", ");", "<|nl|>", "<|8-s|>", "Native", "Crypto", ".", "X", "509", "_", "delete", "_", "ext", "(", "copy", ",", "<|s|>", "oid", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "Open", "SSLX", "509", "Certificate", "(", "copy", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 532, "base_patch_number": 5, "changed_patch_number": 7, "code_file_name": "android_4765", "comment_id": "c4d56a01_a0217aaf", "class_list": ["OpenSSLX509Certificate"], "func_list": ["public static OpenSSLX509Certificate fromX509DerInputStream(InputStream is)", "public Set<String> getCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)", "public Set<String> getNonCriticalExtensionOIDs()", "public boolean hasUnsupportedCriticalExtension()", "public int getVersion()", "public BigInteger getSerialNumber()", "public Principal getIssuerDN()", "public Principal getSubjectDN()", "public Date getNotBefore()", "public Date getNotAfter()", "public byte[] getSignature()", "public String getSigAlgName()", "public String getSigAlgOID()", "public byte[] getSigAlgParams()", "public boolean[] getIssuerUniqueID()", "public boolean[] getSubjectUniqueID()", "public boolean[] getKeyUsage()", "public int getBasicConstraints()", "public String toString()", "public PublicKey getPublicKey()", "public X500Principal getIssuerX500Principal()", "public X500Principal getSubjectX500Principal()", "public boolean equals(Object other)", "public int hashCode()", "public long getContext()", "public OpenSSLX509Certificate deleteExtension(String oid)"], "prime_var_dic": {"mContext": 1}}, {"idx": 21542, "status": "update", "global_index": 10253, "project_name": "android_", "written_on": "2015-04-21 19:40:46", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , null ) ; TYPE_1 . METHOD_4 ( VAR_3 ) ; }", "comment": "I'd prefer to make this a mandatory property, to avoid randomness as much as possible. WDYT?", "tokenized_comment": ["I", "'", "d", "<|s|>", "prefer", "<|s|>", "to", "<|s|>", "make", "<|s|>", "this", "<|s|>", "a", "<|s|>", "mandatory", "<|s|>", "property", ",", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "randomness", "<|s|>", "as", "<|s|>", "much", "<|s|>", "as", "<|s|>", "possible", ".", "<|s|>", "WDYT", "?"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , null ) ; if ( ! TYPE_2 . METHOD_3 ( VAR_2 ) ) { TYPE_1 . METHOD_4 ( new TYPE_3 ( VAR_2 ) ) ; } }", "our_target": "            IdeSdks.setJdkPath(jdkPath);\n", "our_code": "          public void run() {\n            IdeSdks.setAndroidSdkPath(androidSdkPath, null);\n<|startfocus|>\n            // Prefer the requested JDK.\n            if (!Strings.isNullOrEmpty(jdkHome)) {\n              IdeSdks.setJdkPath(new File(jdkHome));\n            }\n<|endfocus|>\n          }", "tokenized_code": ["<|8-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Ide", "Sdks", ".", "set", "Android", "Sdk", "Path", "(", "android", "Sdk", "Path", ",", "<|s|>", "null", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Prefer", "<|s|>", "the", "<|s|>", "requested", "<|s|>", "JDK", ".", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "Strings", ".", "is", "Null", "Or", "Empty", "(", "jdk", "Home", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "<|2-s|>", "Ide", "Sdks", ".", "set", "Jdk", "Path", "(", "new", "<|s|>", "File", "(", "jdk", "Home", ")", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "}"], "base_code_line_number": 110, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_70", "comment_id": "90fba685_e080aafa", "class_list": ["GuiTests", "IntentionActionWithTextCaching", "MyProjectManagerListener"], "func_list": ["public static void setUpDefaultGeneralSettings()", "public void run()", "public static void setUpDefaultProjectCreationLocationPath()", "public static void waitForIdeToStart()", "protected boolean isMatching(Frame frame)", "public boolean test()", "public static File getProjectCreationDirPath()", "public static File getTestProjectsRootDirPath()", "private GuiTests()", "public static void deleteFile(@Nullable final VirtualFile file)", "public static JBList waitForPopup(@NotNull Robot robot)", "return waitUntilFound(robot, null, new GenericTypeMatcher<JBList>(JBList.class)", "public static void clickPopupMenuItem(@NotNull String labelPrefix, @NotNull Component component, @NotNull Robot robot)", "public static Container getRootContainer(@NotNull final Component component)", "return execute(new GuiQuery<Container>()", "public static void findAndClickOkButton(@NotNull ComponentFixture<? extends Container> container)", "public static void findAndClickCancelButton(@NotNull ComponentFixture<? extends Container> container)", "public static void findAndClickButton(@NotNull ComponentFixture<? extends Container> container, @NotNull String text)", "public static File getTestDataDir()", "public static File getAospSourceDir()", "public void projectOpened(Project project)", "protected boolean isMatching(Frame frame)"], "prime_var_dic": {}}, {"idx": 32555, "status": "update", "global_index": 13353, "project_name": "android_", "written_on": "2014-11-21 17:17:53", "tufano_target": "private boolean METHOD_3 ( TYPE_4 VAR_4 ) { for ( TYPE_2 VAR_2 : VAR_4 . METHOD_4 ( ) ) { if ( VAR_2 instanceof TYPE_3 && ( ( ( TYPE_3 ) VAR_2 ) . METHOD_2 ( ) == VAR_3 ) ) { return true ; } } return false ; }", "comment": "isAnnotatedByRuntimeAnnotation", "tokenized_comment": ["is", "Annotated", "By", "Runtime", "Annotation"], "tufano_code": "private boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 ) { if ( VAR_2 instanceof TYPE_3 && ( ( ( TYPE_3 ) VAR_2 ) . METHOD_2 ( ) == VAR_3 ) ) { return true ; } } return false ; }", "our_target": "  private boolean isAnnotatedByRuntimeAnnotation(@Nonnull Annotable annotable) {\n    for (JAnnotation annotation: annotable.getAnnotationTypes()) {\n", "our_code": "<|startfocus|>\n  private boolean containsRuntimeAnnotation(@Nonnull Collection<JAnnotation> annotationTypes) {\n    for (JAnnotation annotation: annotationTypes) {\n<|endfocus|>\n      if (annotation instanceof JDefinedAnnotation\n          && (((JDefinedAnnotation) annotation).getRetentionPolicy() == JRetentionPolicy.RUNTIME)) {\n        return true;\n      }\n    }\n    return false;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "boolean", "<|s|>", "contains", "Runtime", "Annotation", "(", "@", "Nonnull", "<|s|>", "Collection", "<", "JAnnotation", ">", "<|s|>", "annotation", "Types", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "JAnnotation", "<|s|>", "annotation", ":", "<|s|>", "annotation", "Types", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "annotation", "<|s|>", "instanceof", "<|s|>", "JDefined", "Annotation", "<|nl|>", "<|8-s|>", "<|2-s|>", "&&", "<|s|>", "(", "(", "(", "JDefined", "Annotation", ")", "<|s|>", "annotation", ")", ".", "get", "Retention", "Policy", "(", ")", "<|s|>", "==", "<|s|>", "JRetention", "Policy", ".", "RUNTIME", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 81, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_2232", "comment_id": "df3a79c4_14af3a77", "class_list": ["AnnotatedFinder"], "func_list": ["private boolean hasRuntimeAnnotation(@Nonnull JDefinedClassOrInterface type)", "private boolean containsRuntimeAnnotation(@Nonnull Collection<JAnnotation> annotationTypes)"], "prime_var_dic": {"implements": 1}}, {"idx": 90768, "status": "update", "global_index": 2653, "project_name": "android_", "written_on": "2017-03-09 21:34:23", "tufano_target": "public boolean METHOD_1 ( String VAR_1 , String fileName ) { if ( VAR_1 == null || fileName == null ) { TYPE_1 . METHOD_3 ( VAR_3 , STRING_1 ) ; return false ; } return VAR_2 . METHOD_2 ( VAR_1 , fileName ) ; }", "comment": "should have an error message", "tokenized_comment": ["should", "<|s|>", "have", "<|s|>", "an", "<|s|>", "error", "<|s|>", "message"], "tufano_code": "public boolean METHOD_1 ( String VAR_1 , String fileName ) { if ( VAR_1 == null || fileName == null ) return false ; return VAR_2 . METHOD_2 ( VAR_1 , fileName ) ; }", "our_target": "        if (bssid == null || fileName == null) {\n            Log.e(mTAG, \"Invalid arguments for Icon request.\");\n            return false;\n        }\n", "our_code": "    public boolean requestIcon(String  bssid, String fileName) {\n<|startfocus|>\n        if (bssid == null || fileName == null) return false;\n<|endfocus|>\n        return mSupplicantStaIfaceHal.initiateHs20IconQuery(bssid, fileName);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "request", "Icon", "(", "String", "<|2-s|>", "bssid", ",", "<|s|>", "String", "<|s|>", "file", "Name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "bssid", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "file", "Name", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Supplicant", "Sta", "Iface", "Hal", ".", "initiate", "Hs", "20", "Icon", "Query", "(", "bssid", ",", "<|s|>", "file", "Name", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 768, "base_patch_number": 15, "changed_patch_number": 16, "code_file_name": "android_4067", "comment_id": "82ac7506_bf66039d", "class_list": ["WifiNative", "SignalPollResult", "TxPacketCounters", "since", "(180).", "describing", "ScanCapabilities", "ChannelSettings", "BucketSettings", "HiddenNetwork", "ScanSettings", "PnoNetwork", "PnoSettings", "RingBufferStatus{", "FateReport", "TxFateReport", "RxFateReport", "RoamingCapabilities", "RoamingConfig"], "func_list": ["public WifiNative(String interfaceName, WifiVendorHal vendorHal,", "public String getInterfaceName()", "public void enableVerboseLogging(int verbose)", "public IClientInterface setupForClientMode()", "public IApInterface setupForSoftApMode()", "public boolean tearDown()", "public boolean disableSupplicant()", "public boolean enableSupplicant()", "public SignalPollResult signalPoll()", "public TxPacketCounters getTxPacketCounters()", "public boolean scan(Set<Integer> freqs, Set<String> hiddenNetworkSSIDs)", "public ArrayList<ScanDetail> getScanResults()", "public boolean startPnoScan(PnoSettings pnoSettings)", "public boolean stopPnoScan()", "public boolean connectToStaSupplicant()", "public boolean connectToP2pSupplicant()", "public void closeSupplicantConnection()", "public void setSupplicantLogLevel(boolean turnOnVerbose)", "public boolean reconnect()", "public boolean reassociate()", "public boolean disconnect()", "public String getMacAddress()", "public boolean startFilteringMulticastV4Packets()", "public boolean stopFilteringMulticastV4Packets()", "public boolean startFilteringMulticastV6Packets()", "public boolean stopFilteringMulticastV6Packets()", "public boolean setBluetoothCoexistenceMode(int mode)", "public boolean setBluetoothCoexistenceScanMode(boolean setCoexScanMode)", "public boolean setSuspendOptimizations(boolean enabled)", "public boolean setCountryCode(String countryCode)", "public void startTdls(String macAddr, boolean enable)", "public boolean startWpsPbc(String bssid)", "public boolean startWpsPinKeypad(String pin)", "public String startWpsPinDisplay(String bssid)", "public boolean setExternalSim(boolean external)", "public boolean simAuthResponse(int id, String type, String response)", "public boolean simAuthFailedResponse(int id)", "public boolean umtsAuthFailedResponse(int id)", "public boolean simIdentityResponse(int id, String response)", "public boolean startWpsRegistrar(String bssid, String pin)", "public boolean cancelWps()", "public boolean setDeviceName(String name)", "public boolean setDeviceType(String type)", "public boolean setConfigMethods(String cfg)", "public boolean setManufacturer(String value)", "public boolean setModelName(String value)", "public boolean setModelNumber(String value)", "public boolean setSerialNumber(String value)", "public void setPowerSave(boolean enabled)", "public boolean setConcurrencyPriority(boolean isStaHigherPriority)", "public boolean migrateNetworksFromSupplicant(Map<String, WifiConfiguration> configs,", "public boolean connectToNetwork(WifiConfiguration configuration, boolean shouldDisconnect)", "public boolean roamToNetwork(WifiConfiguration configuration)", "public int getFrameworkNetworkId(int supplicantNetworkId)", "public boolean removeAllNetworks()", "public boolean setConfiguredNetworkBSSID(String bssid)", "public boolean requestAnqp(String bssid, Set<Integer> anqpIds, Set<Integer> hs20Subtypes)", "public boolean requestIcon(String  bssid, String fileName)", "public String getNfcWpsConfigurationToken(int netId)", "public boolean p2pListNetworks(WifiP2pGroupList groups)", "public boolean removeP2pNetwork(int netId)", "public boolean setP2pDeviceName(String name)", "public boolean setP2pDeviceType(String type)", "public boolean setP2pSsidPostfix(String postfix)", "public boolean setP2pGroupIdle(String iface, int time)", "public boolean setP2pPowerSave(String iface, boolean enabled)", "public boolean setWfdEnable(boolean enable)", "public boolean setWfdDeviceInfo(String hex)", "public boolean p2pFind()", "public boolean p2pStopFind()", "public boolean p2pExtListen(boolean enable, int period, int interval)", "public boolean p2pSetChannel(int lc, int oc)", "public boolean p2pFlush()", "public String p2pConnect(WifiP2pConfig config, boolean joinExistingGroup)", "public boolean p2pCancelConnect()", "public boolean p2pProvisionDiscovery(WifiP2pConfig config)", "public boolean p2pGroupAdd(boolean persistent)", "public boolean p2pGroupRemove(String iface)", "public boolean p2pReject(String deviceAddress)", "public boolean p2pInvite(WifiP2pGroup group, String deviceAddress)", "public boolean p2pReinvoke(int netId, String deviceAddress)", "public String p2pGetSsid(String deviceAddress)", "public String p2pGetDeviceAddress()", "public int getGroupCapability(String deviceAddress)", "public boolean p2pServiceAdd(WifiP2pServiceInfo servInfo)", "public boolean p2pServiceDel(WifiP2pServiceInfo servInfo)", "public boolean p2pServiceFlush()", "public String p2pServDiscReq(String addr, String query)", "public boolean p2pServDiscCancelReq(String id)", "public void setMiracastMode(int mode)", "public String getNfcHandoverRequest()", "public String getNfcHandoverSelect()", "public boolean initiatorReportNfcHandover(String selectMessage)", "public boolean responderReportNfcHandover(String requestMessage)", "public String getP2pClientList(int netId)", "public boolean setP2pClientList(int netId, String list)", "public boolean saveConfig()", "public boolean initializeVendorHal()", "public boolean startHal(boolean isStaMode)", "public void stopHal()", "public boolean isHalStarted()", "public boolean getScanCapabilities(ScanCapabilities capabilities)", "public boolean equals(Object otherObj)", "public int hashCode()", "public boolean startScan(ScanSettings settings, ScanEventHandler eventHandler)", "public void stopScan()", "public void pauseScan()", "public void restartScan()", "public boolean setHotlist(WifiScanner.HotlistSettings settings,", "public void resetHotlist()", "public boolean trackSignificantWifiChange(", "public void untrackSignificantWifiChange()", "public WifiLinkLayerStats getWifiLinkLayerStats(String iface)", "public void setWifiLinkLayerStats(String iface, int enable)", "public int getSupportedFeatureSet()", "public boolean requestRtt(", "public boolean cancelRtt(RttManager.RttParams[] params)", "public ResponderConfig enableRttResponder(int timeoutSeconds)", "public boolean disableRttResponder()", "public boolean setScanningMacOui(byte[] oui)", "public boolean isGetChannelsForBandSupported()", "public boolean setDfsFlag(boolean dfsOn)", "public ApfCapabilities getApfCapabilities()", "public boolean installPacketFilter(byte[] filter)", "public boolean setCountryCodeHal(String countryCode)", "public boolean setLoggingEventHandler(WifiLoggerEventHandler handler)", "public boolean startLoggingRingBuffer(int verboseLevel, int flags, int maxInterval,", "public int getSupportedLoggerFeatureSet()", "public boolean resetLogHandler()", "public String getDriverVersion()", "public String getFirmwareVersion()", "public String toString()", "public RingBufferStatus[] getRingBufferStatus()", "public boolean getRingBufferData(String ringName)", "public byte[] getFwMemoryDump()", "public byte[] getDriverStateDump()", "public String toTableRowString()", "public String toVerboseStringWithPiiAllowed()", "public static String getTableHeader()", "private static String frameTypeToString(byte frameType)", "private static long convertDriverTimestampUSecToWallclockMSec(long driverTimestampUSec)", "protected abstract String directionToString();", "protected abstract String fateToString();", "public boolean startPktFateMonitoring()", "public boolean getTxPktFates(TxFateReport[] reportBufs)", "public boolean getRxPktFates(RxFateReport[] reportBufs)", "public boolean setPnoList(PnoSettings settings, PnoEventHandler eventHandler)", "public boolean resetPnoList()", "public int startSendingOffloadedPacket(int slot, KeepalivePacketData keepAlivePacket,", "public int stopSendingOffloadedPacket(int slot)", "public int startRssiMonitoring(byte maxRssi, byte minRssi,", "public int stopRssiMonitoring()", "public WifiWakeReasonAndCounts getWlanWakeReasonCount()", "public boolean configureNeighborDiscoveryOffload(boolean enabled)", "public boolean getRoamingCapabilities(RoamingCapabilities capabilities)", "public int enableFirmwareRoaming(int state)", "public boolean configureRoaming(RoamingConfig config)", "public boolean resetRoamingConfiguration()", "public boolean p2pSetChannel(int lc, int oc)", "public boolean p2pSetChannel(int lc, int oc)", "public boolean p2pProvisionDiscovery(WifiP2pConfig config)", "public boolean equals(Object otherObj)", "public int hashCode()", "public boolean equals(Object otherObj)", "public int hashCode()", "public boolean startPnoScan(PnoSettings pnoSettings)", "public String toString()", "public String toTableRowString()", "public String toVerboseStringWithPiiAllowed()", "public static String getTableHeader()", "private static String frameTypeToString(byte frameType)", "private static long convertDriverTimestampUSecToWallclockMSec(long driverTimestampUSec)", "protected String directionToString()", "protected String fateToString()", "protected String directionToString()", "protected String fateToString()"], "prime_var_dic": {"RoamingConfig": 1}}, {"idx": 10706, "status": "update", "global_index": 14120, "project_name": "android_", "written_on": "2014-02-08 23:11:08", "tufano_target": "public TYPE_1 METHOD_1 ( String VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } synchronized ( VAR_3 ) { return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; } }", "comment": "nit: line length", "tokenized_comment": ["nit", ":", "<|s|>", "line", "<|s|>", "length"], "tufano_code": "public TYPE_1 METHOD_1 ( String VAR_1 , int VAR_2 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } synchronized ( VAR_3 ) { return VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; } }", "our_target": "    @Override // Binder call\n    public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor) {\n", "our_code": "<|startfocus|>\n    public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation) {\n<|endfocus|>\n        if (inputDeviceDescriptor == null) {\n            throw new IllegalArgumentException(\"inputDeviceDescriptor must not be null\");\n        }\n\n        synchronized (mDataStore) {\n            return mDataStore.getTouchCalibration(inputDeviceDescriptor, surfaceRotation);\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Touch", "Calibration", "<|s|>", "get", "Touch", "Calibration", "For", "Input", "Device", "(", "String", "<|s|>", "input", "Device", "Descriptor", ",", "<|s|>", "int", "<|s|>", "surface", "Rotation", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "input", "Device", "Descriptor", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "input", "Device", "Descriptor", "<|s|>", "must", "<|s|>", "not", "<|s|>", "be", "<|s|>", "null", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Data", "Store", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "m", "Data", "Store", ".", "get", "Touch", "Calibration", "(", "input", "Device", "Descriptor", ",", "<|s|>", "surface", "Rotation", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 697, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4152", "comment_id": "af83c5c3_420872f2", "class_list": ["InputManagerService", "input", "input", "input", "input", "InputManagerHandler", "InputFilterHost", "KeyboardLayoutDescriptor", "InputDevicesChangedListenerRecord", "VibratorToken"], "func_list": ["public InputManagerService(Context context, Handler handler)", "public void setWindowManagerCallbacks(WindowManagerCallbacks callbacks)", "public void setWiredAccessoryCallbacks(WiredAccessoryCallbacks callbacks)", "public void start()", "public void onReceive(Context context, Intent intent)", "public void systemRunning()", "private void reloadKeyboardLayouts()", "private void reloadDeviceAliases()", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public int getKeyCodeState(int deviceId, int sourceMask, int keyCode)", "public int getScanCodeState(int deviceId, int sourceMask, int scanCode)", "public int getSwitchState(int deviceId, int sourceMask, int switchCode)", "public boolean hasKeys(int deviceId, int sourceMask, int[] keyCodes, boolean[] keyExists)", "public InputChannel monitorInput(String inputChannelName)", "public void registerInputChannel(InputChannel inputChannel,", "public void unregisterInputChannel(InputChannel inputChannel)", "public void setInputFilter(IInputFilter filter)", "public boolean injectInputEvent(InputEvent event, int mode)", "public InputDevice getInputDevice(int deviceId)", "public int[] getInputDeviceIds()", "public InputDevice[] getInputDevices()", "public void registerInputDevicesChangedListener(IInputDevicesChangedListener listener)", "private void onInputDevicesChangedListenerDied(int pid)", "private void deliverInputDevicesChanged(InputDevice[] oldInputDevices)", "public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation)", "public void setTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation,", "private void showMissingKeyboardLayoutNotification()", "private void hideMissingKeyboardLayoutNotification()", "private void updateKeyboardLayouts()", "public void visitKeyboardLayout(Resources resources,", "private static boolean containsInputDeviceWithDescriptor(InputDevice[] inputDevices,", "public KeyboardLayout[] getKeyboardLayouts()", "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)", "private void visitAllKeyboardLayouts(KeyboardLayoutVisitor visitor)", "private void visitKeyboardLayoutsInPackage(PackageManager pm, ActivityInfo receiver,", "public String getCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor)", "public void setCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public String[] getKeyboardLayoutsForInputDevice(String inputDeviceDescriptor)", "public void addKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void removeKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void switchKeyboardLayout(int deviceId, int direction)", "private void handleSwitchKeyboardLayout(int deviceId, int direction)", "public void setInputWindows(InputWindowHandle[] windowHandles)", "public void setFocusedApplication(InputApplicationHandle application)", "public void setInputDispatchMode(boolean enabled, boolean frozen)", "public void setSystemUiVisibility(int visibility)", "public boolean transferTouchFocus(InputChannel fromChannel, InputChannel toChannel)", "public void tryPointerSpeed(int speed)", "public void updatePointerSpeedFromSettings()", "private void setPointerSpeedUnchecked(int speed)", "private void registerPointerSpeedSettingObserver()", "new ContentObserver(mHandler)", "public void onChange(boolean selfChange)", "private int getPointerSpeedSetting()", "public void updateShowTouchesFromSettings()", "private void registerShowTouchesSettingObserver()", "private int getShowTouchesSetting(int defaultValue)", "public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token)", "public void cancelVibrate(int deviceId, IBinder token)", "void onVibratorTokenDied(VibratorToken v)", "private void cancelVibrateIfNeeded(VibratorToken v)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean checkCallingPermission(String permission, String func)", "public void monitor()", "private void notifyConfigurationChanged(long whenNanos)", "private void notifyInputDevicesChanged(InputDevice[] inputDevices)", "private void notifySwitch(long whenNanos, int switchValues, int switchMask)", "private void notifyInputChannelBroken(InputWindowHandle inputWindowHandle)", "private long notifyANR(InputApplicationHandle inputApplicationHandle,", "private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn)", "private int interceptMotionBeforeQueueingWhenScreenOff(int policyFlags)", "private long interceptKeyBeforeDispatching(InputWindowHandle focus,", "private KeyEvent dispatchUnhandledKey(InputWindowHandle focus,", "private boolean checkInjectEventsPermission(int injectorPid, int injectorUid)", "private int getVirtualKeyQuietTimeMillis()", "private String[] getExcludedDeviceNames()", "private int getKeyRepeatTimeout()", "private int getKeyRepeatDelay()", "private int getHoverTapTimeout()", "private int getHoverTapSlop()", "private int getDoubleTapTimeout()", "private int getLongPressTimeout()", "private int getPointerLayer()", "private PointerIcon getPointerIcon()", "private String[] getKeyboardLayoutOverlay(String inputDeviceDescriptor)", "private String getDeviceAlias(String uniqueId)", "public InputManagerHandler(Looper looper)", "public void handleMessage(Message msg)", "public void disconnectLocked()", "public void sendInputEvent(InputEvent event, int policyFlags)", "public static String format(String packageName,", "public static KeyboardLayoutDescriptor parse(String descriptor)", "public InputDevicesChangedListenerRecord(int pid, IInputDevicesChangedListener listener)", "public void binderDied()", "public VibratorToken(int deviceId, IBinder token, int tokenValue)", "public InputManagerService(Context context, Handler handler)", "public void setWindowManagerCallbacks(WindowManagerCallbacks callbacks)", "public void setWiredAccessoryCallbacks(WiredAccessoryCallbacks callbacks)", "public void start()", "public void onReceive(Context context, Intent intent)", "public void systemRunning()", "private void reloadKeyboardLayouts()", "private void reloadDeviceAliases()", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public int getKeyCodeState(int deviceId, int sourceMask, int keyCode)", "public int getScanCodeState(int deviceId, int sourceMask, int scanCode)", "public int getSwitchState(int deviceId, int sourceMask, int switchCode)", "public boolean hasKeys(int deviceId, int sourceMask, int[] keyCodes, boolean[] keyExists)", "public InputChannel monitorInput(String inputChannelName)", "public void registerInputChannel(InputChannel inputChannel,", "public void unregisterInputChannel(InputChannel inputChannel)", "public void setInputFilter(IInputFilter filter)", "public boolean injectInputEvent(InputEvent event, int mode)", "public InputDevice getInputDevice(int deviceId)", "public int[] getInputDeviceIds()", "public InputDevice[] getInputDevices()", "public void registerInputDevicesChangedListener(IInputDevicesChangedListener listener)", "private void onInputDevicesChangedListenerDied(int pid)", "private void deliverInputDevicesChanged(InputDevice[] oldInputDevices)", "public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation)", "public void setTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation,", "private void showMissingKeyboardLayoutNotification()", "private void hideMissingKeyboardLayoutNotification()", "private void updateKeyboardLayouts()", "public void visitKeyboardLayout(Resources resources,", "private static boolean containsInputDeviceWithDescriptor(InputDevice[] inputDevices,", "public KeyboardLayout[] getKeyboardLayouts()", "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)", "private void visitAllKeyboardLayouts(KeyboardLayoutVisitor visitor)", "private void visitKeyboardLayoutsInPackage(PackageManager pm, ActivityInfo receiver,", "public String getCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor)", "public void setCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public String[] getKeyboardLayoutsForInputDevice(String inputDeviceDescriptor)", "public void addKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void removeKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void switchKeyboardLayout(int deviceId, int direction)", "private void handleSwitchKeyboardLayout(int deviceId, int direction)", "public void setInputWindows(InputWindowHandle[] windowHandles)", "public void setFocusedApplication(InputApplicationHandle application)", "public void setInputDispatchMode(boolean enabled, boolean frozen)", "public void setSystemUiVisibility(int visibility)", "public boolean transferTouchFocus(InputChannel fromChannel, InputChannel toChannel)", "public void tryPointerSpeed(int speed)", "public void updatePointerSpeedFromSettings()", "private void setPointerSpeedUnchecked(int speed)", "private void registerPointerSpeedSettingObserver()", "new ContentObserver(mHandler)", "public void onChange(boolean selfChange)", "private int getPointerSpeedSetting()", "public void updateShowTouchesFromSettings()", "private void registerShowTouchesSettingObserver()", "private int getShowTouchesSetting(int defaultValue)", "public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token)", "public void cancelVibrate(int deviceId, IBinder token)", "void onVibratorTokenDied(VibratorToken v)", "private void cancelVibrateIfNeeded(VibratorToken v)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean checkCallingPermission(String permission, String func)", "public void monitor()", "private void notifyConfigurationChanged(long whenNanos)", "private void notifyInputDevicesChanged(InputDevice[] inputDevices)", "private void notifySwitch(long whenNanos, int switchValues, int switchMask)", "private void notifyInputChannelBroken(InputWindowHandle inputWindowHandle)", "private long notifyANR(InputApplicationHandle inputApplicationHandle,", "private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn)", "private int interceptMotionBeforeQueueingWhenScreenOff(int policyFlags)", "private long interceptKeyBeforeDispatching(InputWindowHandle focus,", "private KeyEvent dispatchUnhandledKey(InputWindowHandle focus,", "private boolean checkInjectEventsPermission(int injectorPid, int injectorUid)", "private int getVirtualKeyQuietTimeMillis()", "private String[] getExcludedDeviceNames()", "private int getKeyRepeatTimeout()", "private int getKeyRepeatDelay()", "private int getHoverTapTimeout()", "private int getHoverTapSlop()", "private int getDoubleTapTimeout()", "private int getLongPressTimeout()", "private int getPointerLayer()", "private PointerIcon getPointerIcon()", "private String[] getKeyboardLayoutOverlay(String inputDeviceDescriptor)", "private String getDeviceAlias(String uniqueId)", "public InputManagerHandler(Looper looper)", "public void handleMessage(Message msg)", "public void disconnectLocked()", "public void sendInputEvent(InputEvent event, int policyFlags)", "public static String format(String packageName,", "public static KeyboardLayoutDescriptor parse(String descriptor)", "public InputDevicesChangedListenerRecord(int pid, IInputDevicesChangedListener listener)", "public void binderDied()", "public VibratorToken(int deviceId, IBinder token, int tokenValue)", "public InputManagerService(Context context, Handler handler)", "public void setWindowManagerCallbacks(WindowManagerCallbacks callbacks)", "public void setWiredAccessoryCallbacks(WiredAccessoryCallbacks callbacks)", "public void start()", "public void onReceive(Context context, Intent intent)", "public void systemRunning()", "private void reloadKeyboardLayouts()", "private void reloadDeviceAliases()", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public int getKeyCodeState(int deviceId, int sourceMask, int keyCode)", "public int getScanCodeState(int deviceId, int sourceMask, int scanCode)", "public int getSwitchState(int deviceId, int sourceMask, int switchCode)", "public boolean hasKeys(int deviceId, int sourceMask, int[] keyCodes, boolean[] keyExists)", "public InputChannel monitorInput(String inputChannelName)", "public void registerInputChannel(InputChannel inputChannel,", "public void unregisterInputChannel(InputChannel inputChannel)", "public void setInputFilter(IInputFilter filter)", "public boolean injectInputEvent(InputEvent event, int mode)", "public InputDevice getInputDevice(int deviceId)", "public int[] getInputDeviceIds()", "public InputDevice[] getInputDevices()", "public void registerInputDevicesChangedListener(IInputDevicesChangedListener listener)", "private void onInputDevicesChangedListenerDied(int pid)", "private void deliverInputDevicesChanged(InputDevice[] oldInputDevices)", "public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation)", "public void setTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation,", "private void showMissingKeyboardLayoutNotification()", "private void hideMissingKeyboardLayoutNotification()", "private void updateKeyboardLayouts()", "public void visitKeyboardLayout(Resources resources,", "private static boolean containsInputDeviceWithDescriptor(InputDevice[] inputDevices,", "public KeyboardLayout[] getKeyboardLayouts()", "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)", "private void visitAllKeyboardLayouts(KeyboardLayoutVisitor visitor)", "private void visitKeyboardLayoutsInPackage(PackageManager pm, ActivityInfo receiver,", "public String getCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor)", "public void setCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public String[] getKeyboardLayoutsForInputDevice(String inputDeviceDescriptor)", "public void addKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void removeKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void switchKeyboardLayout(int deviceId, int direction)", "private void handleSwitchKeyboardLayout(int deviceId, int direction)", "public void setInputWindows(InputWindowHandle[] windowHandles)", "public void setFocusedApplication(InputApplicationHandle application)", "public void setInputDispatchMode(boolean enabled, boolean frozen)", "public void setSystemUiVisibility(int visibility)", "public boolean transferTouchFocus(InputChannel fromChannel, InputChannel toChannel)", "public void tryPointerSpeed(int speed)", "public void updatePointerSpeedFromSettings()", "private void setPointerSpeedUnchecked(int speed)", "private void registerPointerSpeedSettingObserver()", "new ContentObserver(mHandler)", "public void onChange(boolean selfChange)", "private int getPointerSpeedSetting()", "public void updateShowTouchesFromSettings()", "private void registerShowTouchesSettingObserver()", "private int getShowTouchesSetting(int defaultValue)", "public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token)", "public void cancelVibrate(int deviceId, IBinder token)", "void onVibratorTokenDied(VibratorToken v)", "private void cancelVibrateIfNeeded(VibratorToken v)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean checkCallingPermission(String permission, String func)", "public void monitor()", "private void notifyConfigurationChanged(long whenNanos)", "private void notifyInputDevicesChanged(InputDevice[] inputDevices)", "private void notifySwitch(long whenNanos, int switchValues, int switchMask)", "private void notifyInputChannelBroken(InputWindowHandle inputWindowHandle)", "private long notifyANR(InputApplicationHandle inputApplicationHandle,", "private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn)", "private int interceptMotionBeforeQueueingWhenScreenOff(int policyFlags)", "private long interceptKeyBeforeDispatching(InputWindowHandle focus,", "private KeyEvent dispatchUnhandledKey(InputWindowHandle focus,", "private boolean checkInjectEventsPermission(int injectorPid, int injectorUid)", "private int getVirtualKeyQuietTimeMillis()", "private String[] getExcludedDeviceNames()", "private int getKeyRepeatTimeout()", "private int getKeyRepeatDelay()", "private int getHoverTapTimeout()", "private int getHoverTapSlop()", "private int getDoubleTapTimeout()", "private int getLongPressTimeout()", "private int getPointerLayer()", "private PointerIcon getPointerIcon()", "private String[] getKeyboardLayoutOverlay(String inputDeviceDescriptor)", "private String getDeviceAlias(String uniqueId)", "public InputManagerHandler(Looper looper)", "public void handleMessage(Message msg)", "public void disconnectLocked()", "public void sendInputEvent(InputEvent event, int policyFlags)", "public static String format(String packageName,", "public static KeyboardLayoutDescriptor parse(String descriptor)", "public InputDevicesChangedListenerRecord(int pid, IInputDevicesChangedListener listener)", "public void binderDied()", "public VibratorToken(int deviceId, IBinder token, int tokenValue)", "public InputManagerService(Context context, Handler handler)", "public void setWindowManagerCallbacks(WindowManagerCallbacks callbacks)", "public void setWiredAccessoryCallbacks(WiredAccessoryCallbacks callbacks)", "public void start()", "public void onReceive(Context context, Intent intent)", "public void systemRunning()", "private void reloadKeyboardLayouts()", "private void reloadDeviceAliases()", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public int getKeyCodeState(int deviceId, int sourceMask, int keyCode)", "public int getScanCodeState(int deviceId, int sourceMask, int scanCode)", "public int getSwitchState(int deviceId, int sourceMask, int switchCode)", "public boolean hasKeys(int deviceId, int sourceMask, int[] keyCodes, boolean[] keyExists)", "public InputChannel monitorInput(String inputChannelName)", "public void registerInputChannel(InputChannel inputChannel,", "public void unregisterInputChannel(InputChannel inputChannel)", "public void setInputFilter(IInputFilter filter)", "public boolean injectInputEvent(InputEvent event, int mode)", "public InputDevice getInputDevice(int deviceId)", "public int[] getInputDeviceIds()", "public InputDevice[] getInputDevices()", "public void registerInputDevicesChangedListener(IInputDevicesChangedListener listener)", "private void onInputDevicesChangedListenerDied(int pid)", "private void deliverInputDevicesChanged(InputDevice[] oldInputDevices)", "public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation)", "public void setTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation,", "private void showMissingKeyboardLayoutNotification()", "private void hideMissingKeyboardLayoutNotification()", "private void updateKeyboardLayouts()", "public void visitKeyboardLayout(Resources resources,", "private static boolean containsInputDeviceWithDescriptor(InputDevice[] inputDevices,", "public KeyboardLayout[] getKeyboardLayouts()", "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)", "private void visitAllKeyboardLayouts(KeyboardLayoutVisitor visitor)", "private void visitKeyboardLayoutsInPackage(PackageManager pm, ActivityInfo receiver,", "public String getCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor)", "public void setCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public String[] getKeyboardLayoutsForInputDevice(String inputDeviceDescriptor)", "public void addKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void removeKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void switchKeyboardLayout(int deviceId, int direction)", "private void handleSwitchKeyboardLayout(int deviceId, int direction)", "public void setInputWindows(InputWindowHandle[] windowHandles)", "public void setFocusedApplication(InputApplicationHandle application)", "public void setInputDispatchMode(boolean enabled, boolean frozen)", "public void setSystemUiVisibility(int visibility)", "public boolean transferTouchFocus(InputChannel fromChannel, InputChannel toChannel)", "public void tryPointerSpeed(int speed)", "public void updatePointerSpeedFromSettings()", "private void setPointerSpeedUnchecked(int speed)", "private void registerPointerSpeedSettingObserver()", "new ContentObserver(mHandler)", "public void onChange(boolean selfChange)", "private int getPointerSpeedSetting()", "public void updateShowTouchesFromSettings()", "private void registerShowTouchesSettingObserver()", "private int getShowTouchesSetting(int defaultValue)", "public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token)", "public void cancelVibrate(int deviceId, IBinder token)", "void onVibratorTokenDied(VibratorToken v)", "private void cancelVibrateIfNeeded(VibratorToken v)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean checkCallingPermission(String permission, String func)", "public void monitor()", "private void notifyConfigurationChanged(long whenNanos)", "private void notifyInputDevicesChanged(InputDevice[] inputDevices)", "private void notifySwitch(long whenNanos, int switchValues, int switchMask)", "private void notifyInputChannelBroken(InputWindowHandle inputWindowHandle)", "private long notifyANR(InputApplicationHandle inputApplicationHandle,", "private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn)", "private int interceptMotionBeforeQueueingWhenScreenOff(int policyFlags)", "private long interceptKeyBeforeDispatching(InputWindowHandle focus,", "private KeyEvent dispatchUnhandledKey(InputWindowHandle focus,", "private boolean checkInjectEventsPermission(int injectorPid, int injectorUid)", "private int getVirtualKeyQuietTimeMillis()", "private String[] getExcludedDeviceNames()", "private int getKeyRepeatTimeout()", "private int getKeyRepeatDelay()", "private int getHoverTapTimeout()", "private int getHoverTapSlop()", "private int getDoubleTapTimeout()", "private int getLongPressTimeout()", "private int getPointerLayer()", "private PointerIcon getPointerIcon()", "private String[] getKeyboardLayoutOverlay(String inputDeviceDescriptor)", "private String getDeviceAlias(String uniqueId)", "public InputManagerHandler(Looper looper)", "public void handleMessage(Message msg)", "public void disconnectLocked()", "public void sendInputEvent(InputEvent event, int policyFlags)", "public static String format(String packageName,", "public static KeyboardLayoutDescriptor parse(String descriptor)", "public InputDevicesChangedListenerRecord(int pid, IInputDevicesChangedListener listener)", "public void binderDied()", "public VibratorToken(int deviceId, IBinder token, int tokenValue)", "public InputManagerService(Context context, Handler handler)", "public void setWindowManagerCallbacks(WindowManagerCallbacks callbacks)", "public void setWiredAccessoryCallbacks(WiredAccessoryCallbacks callbacks)", "public void start()", "public void onReceive(Context context, Intent intent)", "public void systemRunning()", "private void reloadKeyboardLayouts()", "private void reloadDeviceAliases()", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public int getKeyCodeState(int deviceId, int sourceMask, int keyCode)", "public int getScanCodeState(int deviceId, int sourceMask, int scanCode)", "public int getSwitchState(int deviceId, int sourceMask, int switchCode)", "public boolean hasKeys(int deviceId, int sourceMask, int[] keyCodes, boolean[] keyExists)", "public InputChannel monitorInput(String inputChannelName)", "public void registerInputChannel(InputChannel inputChannel,", "public void unregisterInputChannel(InputChannel inputChannel)", "public void setInputFilter(IInputFilter filter)", "public boolean injectInputEvent(InputEvent event, int mode)", "public InputDevice getInputDevice(int deviceId)", "public int[] getInputDeviceIds()", "public InputDevice[] getInputDevices()", "public void registerInputDevicesChangedListener(IInputDevicesChangedListener listener)", "private void onInputDevicesChangedListenerDied(int pid)", "private void deliverInputDevicesChanged(InputDevice[] oldInputDevices)", "public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation)", "public void setTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation,", "private void showMissingKeyboardLayoutNotification()", "private void hideMissingKeyboardLayoutNotification()", "private void updateKeyboardLayouts()", "public void visitKeyboardLayout(Resources resources,", "private static boolean containsInputDeviceWithDescriptor(InputDevice[] inputDevices,", "public KeyboardLayout[] getKeyboardLayouts()", "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)", "private void visitAllKeyboardLayouts(KeyboardLayoutVisitor visitor)", "private void visitKeyboardLayoutsInPackage(PackageManager pm, ActivityInfo receiver,", "public String getCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor)", "public void setCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public String[] getKeyboardLayoutsForInputDevice(String inputDeviceDescriptor)", "public void addKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void removeKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void switchKeyboardLayout(int deviceId, int direction)", "private void handleSwitchKeyboardLayout(int deviceId, int direction)", "public void setInputWindows(InputWindowHandle[] windowHandles)", "public void setFocusedApplication(InputApplicationHandle application)", "public void setInputDispatchMode(boolean enabled, boolean frozen)", "public void setSystemUiVisibility(int visibility)", "public boolean transferTouchFocus(InputChannel fromChannel, InputChannel toChannel)", "public void tryPointerSpeed(int speed)", "public void updatePointerSpeedFromSettings()", "private void setPointerSpeedUnchecked(int speed)", "private void registerPointerSpeedSettingObserver()", "new ContentObserver(mHandler)", "public void onChange(boolean selfChange)", "private int getPointerSpeedSetting()", "public void updateShowTouchesFromSettings()", "private void registerShowTouchesSettingObserver()", "private int getShowTouchesSetting(int defaultValue)", "public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token)", "public void cancelVibrate(int deviceId, IBinder token)", "void onVibratorTokenDied(VibratorToken v)", "private void cancelVibrateIfNeeded(VibratorToken v)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean checkCallingPermission(String permission, String func)", "public void monitor()", "private void notifyConfigurationChanged(long whenNanos)", "private void notifyInputDevicesChanged(InputDevice[] inputDevices)", "private void notifySwitch(long whenNanos, int switchValues, int switchMask)", "private void notifyInputChannelBroken(InputWindowHandle inputWindowHandle)", "private long notifyANR(InputApplicationHandle inputApplicationHandle,", "private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn)", "private int interceptMotionBeforeQueueingWhenScreenOff(int policyFlags)", "private long interceptKeyBeforeDispatching(InputWindowHandle focus,", "private KeyEvent dispatchUnhandledKey(InputWindowHandle focus,", "private boolean checkInjectEventsPermission(int injectorPid, int injectorUid)", "private int getVirtualKeyQuietTimeMillis()", "private String[] getExcludedDeviceNames()", "private int getKeyRepeatTimeout()", "private int getKeyRepeatDelay()", "private int getHoverTapTimeout()", "private int getHoverTapSlop()", "private int getDoubleTapTimeout()", "private int getLongPressTimeout()", "private int getPointerLayer()", "private PointerIcon getPointerIcon()", "private String[] getKeyboardLayoutOverlay(String inputDeviceDescriptor)", "private String getDeviceAlias(String uniqueId)", "public InputManagerHandler(Looper looper)", "public void handleMessage(Message msg)", "public void disconnectLocked()", "public void sendInputEvent(InputEvent event, int policyFlags)", "public static String format(String packageName,", "public static KeyboardLayoutDescriptor parse(String descriptor)", "public InputDevicesChangedListenerRecord(int pid, IInputDevicesChangedListener listener)", "public void binderDied()", "public VibratorToken(int deviceId, IBinder token, int tokenValue)", "public InputManagerService(Context context, Handler handler)", "public InputManagerService(Context context, Handler handler)", "public void setWindowManagerCallbacks(WindowManagerCallbacks callbacks)", "public void setWiredAccessoryCallbacks(WiredAccessoryCallbacks callbacks)", "public void start()", "public void onReceive(Context context, Intent intent)", "public void systemRunning()", "private void reloadKeyboardLayouts()", "private void reloadDeviceAliases()", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public void setDisplayViewports(DisplayViewport defaultViewport,", "public int getKeyCodeState(int deviceId, int sourceMask, int keyCode)", "public int getScanCodeState(int deviceId, int sourceMask, int scanCode)", "public int getSwitchState(int deviceId, int sourceMask, int switchCode)", "public boolean hasKeys(int deviceId, int sourceMask, int[] keyCodes, boolean[] keyExists)", "public InputChannel monitorInput(String inputChannelName)", "public void registerInputChannel(InputChannel inputChannel,", "public void unregisterInputChannel(InputChannel inputChannel)", "public void setInputFilter(IInputFilter filter)", "public boolean injectInputEvent(InputEvent event, int mode)", "public InputDevice getInputDevice(int deviceId)", "public int[] getInputDeviceIds()", "public InputDevice[] getInputDevices()", "public void registerInputDevicesChangedListener(IInputDevicesChangedListener listener)", "private void onInputDevicesChangedListenerDied(int pid)", "private void deliverInputDevicesChanged(InputDevice[] oldInputDevices)", "public TouchCalibration getTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation)", "public void setTouchCalibrationForInputDevice(String inputDeviceDescriptor, int surfaceRotation,", "private void showMissingKeyboardLayoutNotification()", "private void hideMissingKeyboardLayoutNotification()", "private void updateKeyboardLayouts()", "public void visitKeyboardLayout(Resources resources,", "private static boolean containsInputDeviceWithDescriptor(InputDevice[] inputDevices,", "public KeyboardLayout[] getKeyboardLayouts()", "public KeyboardLayout getKeyboardLayout(String keyboardLayoutDescriptor)", "private void visitAllKeyboardLayouts(KeyboardLayoutVisitor visitor)", "private void visitKeyboardLayoutsInPackage(PackageManager pm, ActivityInfo receiver,", "public String getCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor)", "public void setCurrentKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public String[] getKeyboardLayoutsForInputDevice(String inputDeviceDescriptor)", "public void addKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void removeKeyboardLayoutForInputDevice(String inputDeviceDescriptor,", "public void switchKeyboardLayout(int deviceId, int direction)", "private void handleSwitchKeyboardLayout(int deviceId, int direction)", "public void setInputWindows(InputWindowHandle[] windowHandles)", "public void setFocusedApplication(InputApplicationHandle application)", "public void setInputDispatchMode(boolean enabled, boolean frozen)", "public void setSystemUiVisibility(int visibility)", "public boolean transferTouchFocus(InputChannel fromChannel, InputChannel toChannel)", "public void tryPointerSpeed(int speed)", "public void updatePointerSpeedFromSettings()", "private void setPointerSpeedUnchecked(int speed)", "private void registerPointerSpeedSettingObserver()", "new ContentObserver(mHandler)", "public void onChange(boolean selfChange)", "private int getPointerSpeedSetting()", "public void updateShowTouchesFromSettings()", "private void registerShowTouchesSettingObserver()", "private int getShowTouchesSetting(int defaultValue)", "public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token)", "public void cancelVibrate(int deviceId, IBinder token)", "void onVibratorTokenDied(VibratorToken v)", "private void cancelVibrateIfNeeded(VibratorToken v)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean checkCallingPermission(String permission, String func)", "public void monitor()", "private void notifyConfigurationChanged(long whenNanos)", "private void notifyInputDevicesChanged(InputDevice[] inputDevices)", "private void notifySwitch(long whenNanos, int switchValues, int switchMask)", "private void notifyInputChannelBroken(InputWindowHandle inputWindowHandle)", "private long notifyANR(InputApplicationHandle inputApplicationHandle,", "private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn)", "private int interceptMotionBeforeQueueingWhenScreenOff(int policyFlags)", "private long interceptKeyBeforeDispatching(InputWindowHandle focus,", "private KeyEvent dispatchUnhandledKey(InputWindowHandle focus,", "private boolean checkInjectEventsPermission(int injectorPid, int injectorUid)", "private int getVirtualKeyQuietTimeMillis()", "private String[] getExcludedDeviceNames()", "private int getKeyRepeatTimeout()", "private int getKeyRepeatDelay()", "private int getHoverTapTimeout()", "private int getHoverTapSlop()", "private int getDoubleTapTimeout()", "private int getLongPressTimeout()", "private int getPointerLayer()", "private PointerIcon getPointerIcon()", "private String[] getKeyboardLayoutOverlay(String inputDeviceDescriptor)", "private String getDeviceAlias(String uniqueId)", "public InputManagerHandler(Looper looper)", "public void handleMessage(Message msg)", "public void disconnectLocked()", "public void sendInputEvent(InputEvent event, int policyFlags)", "public static String format(String packageName,", "public static KeyboardLayoutDescriptor parse(String descriptor)", "public InputDevicesChangedListenerRecord(int pid, IInputDevicesChangedListener listener)", "public void binderDied()", "public VibratorToken(int deviceId, IBinder token, int tokenValue)", "public InputManagerService(Context context, Handler handler)", "public InputManagerService(Context context, Handler handler)"], "prime_var_dic": {"by": 2, "messageQueue": 1, "rotation": 1, "deviceHeight": 1, "sourceMask": 1, "monitor": 1, "toChannel": 1, "token": 1, "int": 21, "up": 1, "down": 1, "button": 1}}, {"idx": 8573, "status": "update", "global_index": 16091, "project_name": "android_", "written_on": "2015-03-12 17:31:15", "tufano_target": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { synchronized ( VAR_1 ) { return TYPE_4 . METHOD_3 ( ( TYPE_1 < TYPE_2 > ) VAR_1 . METHOD_4 ( ) ) ; } }", "comment": "you should do mCollectedEvents.clone(), it's more efficient.", "tokenized_comment": ["you", "<|s|>", "should", "<|s|>", "do", "<|s|>", "m", "Collected", "Events", ".", "clone", "(", ")", ",", "<|s|>", "it", "'", "s", "<|s|>", "more", "<|s|>", "efficient", "."], "tufano_code": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { synchronized ( VAR_1 ) { TYPE_1 < TYPE_2 > VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return TYPE_4 . METHOD_3 ( VAR_2 ) ; } }", "our_target": "            return Collections.unmodifiableList((List<TestSensorEvent>) mCollectedEvents.clone());\n", "our_code": "    public List<TestSensorEvent> getCollectedEvents() {\n        synchronized (mCollectedEvents){\n<|startfocus|>\n            List<TestSensorEvent> collectedEventsList = new ArrayList();\n            collectedEventsList.addAll(mCollectedEvents);\n            return Collections.unmodifiableList(collectedEventsList);\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "List", "<", "Test", "Sensor", "Event", ">", "<|s|>", "get", "Collected", "Events", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Collected", "Events", ")", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "List", "<", "Test", "Sensor", "Event", ">", "<|s|>", "collected", "Events", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "(", ");", "<|nl|>", "<|12-s|>", "collected", "Events", "List", ".", "add", "All", "(", "m", "Collected", "Events", ");", "<|nl|>", "<|12-s|>", "return", "<|s|>", "Collections", ".", "unmodifiable", "List", "(", "collected", "Events", "List", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 159, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5354", "comment_id": "a1c5bace_652ba67f", "class_list": ["performs", "TestSensorEventListener"], "func_list": ["public TestSensorEventListener()", "public void onSensorChanged(SensorEvent event)", "public void onAccuracyChanged(Sensor sensor, int accuracy)", "public CountDownLatch getLatchForSensorEvents(int eventCount)", "public CountDownLatch getLatchForFlushCompleteEvent()", "public void onFlushCompleted(Sensor sensor)", "public Handler getHandler()", "public List<TestSensorEvent> getCollectedEvents()", "public void clearEvents()", "public void assertEventsReceivedInHandler()", "private void checkHandler()"], "prime_var_dic": {"implements": 1, "String": 1, "mHandler": 1, "mEnvironment": 1, "TestSensorEventListener": 3, "instance": 1}}, {"idx": 31700, "status": "update", "global_index": 2254, "project_name": "android_", "written_on": "2017-02-17 08:54:55", "tufano_target": "public VAR_1 ( TYPE_1 context , TYPE_5 VAR_5 ) { VAR_3 = METHOD_2 ( context , STRING_2 ) ; VAR_4 = TYPE_4 . METHOD_3 ( b ) ; }", "comment": "Don't construct this manually; obtain it from another Manager, such as a new ConnectivityManager.getIpSecManager() API.\n\nOr maybe just fold these two methods into ConnectivityManager?", "tokenized_comment": ["Don", "'", "t", "<|s|>", "construct", "<|s|>", "this", "<|s|>", "manually", ";", "<|s|>", "obtain", "<|s|>", "it", "<|s|>", "from", "<|s|>", "another", "<|s|>", "Manager", ",", "<|s|>", "such", "<|s|>", "as", "<|s|>", "a", "<|s|>", "new", "<|s|>", "Connectivity", "Manager", ".", "get", "Ip", "Sec", "Manager", "(", ")", "<|s|>", "API", ".", "<|nl|>", "<|nl|>", "Or", "<|s|>", "maybe", "<|s|>", "just", "<|s|>", "fold", "<|s|>", "these", "<|s|>", "two", "<|s|>", "methods", "<|s|>", "into", "<|s|>", "Connectivity", "Manager", "?"], "tufano_code": "public VAR_1 ( TYPE_1 context ) { TYPE_2 b = TYPE_3 . METHOD_1 ( VAR_2 ) ; METHOD_2 ( b , STRING_1 ) ; VAR_3 = METHOD_2 ( context , STRING_2 ) ; VAR_4 = TYPE_4 . METHOD_3 ( b ) ; }", "our_target": "    public IpSecManager(Context context, INetworkManagementService service) {\n", "our_code": "<|startfocus|>\n    public IpSecManager(Context context) {\n        IBinder b = ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);\n        checkNotNull(b, \"missing NetworkManagementService\");\n<|endfocus|>\n        mContext = checkNotNull(context, \"missing context\");\n        mService = INetworkManagementService.Stub.asInterface(b);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Ip", "Sec", "Manager", "(", "Context", "<|s|>", "context", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "IBinder", "<|s|>", "b", "<|s|>", "=", "<|s|>", "Service", "Manager", ".", "get", "Service", "(", "Context", ".", "NETWORKMANAGEMENT", "_", "SERVICE", ");", "<|nl|>", "<|8-s|>", "check", "Not", "Null", "(", "b", ",", "<|s|>", "\"", "missing", "<|s|>", "Network", "Management", "Service", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Context", "<|s|>", "=", "<|s|>", "check", "Not", "Null", "(", "context", ",", "<|s|>", "\"", "missing", "<|s|>", "context", "\"", ");", "<|nl|>", "<|8-s|>", "m", "Service", "<|s|>", "=", "<|s|>", "INetwork", "Management", "Service", ".", "Stub", ".", "as", "Interface", "(", "b", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 109, "base_patch_number": 22, "changed_patch_number": 24, "code_file_name": "android_1363", "comment_id": "a014e522_d9b38fc7", "class_list": ["contains", "IpSecManager", "TransformCollisionException"], "func_list": ["public void removeTransform(IpSecTransform transform)", "public IpSecManager(Context context)", "public void removeTransform(IpSecTransform transform)", "public IpSecManager(Context context)"], "prime_var_dic": {}}, {"idx": 28824, "status": "update", "global_index": 7186, "project_name": "android_", "written_on": "2016-03-08 11:24:53", "tufano_target": "private static TYPE_1 METHOD_3 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( double value : VAR_2 ) { VAR_1 . METHOD_2 ( value ) ; } return VAR_1 ; }", "comment": "private static", "tokenized_comment": ["private", "<|s|>", "static"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( double value : VAR_2 ) { VAR_1 . METHOD_2 ( value ) ; } return VAR_1 ; }", "our_target": "    private static DoubleSummaryStatistics getDoubleSummaryStatisticsData2() {\n", "our_code": "<|startfocus|>\n    public DoubleSummaryStatistics getDoubleSummaryStatistics2() {\n<|endfocus|>\n        DoubleSummaryStatistics dss = new DoubleSummaryStatistics();\n        for (double value : data2) {\n            dss.accept(value);\n        }\n        return dss;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Double", "Summary", "Statistics", "<|s|>", "get", "Double", "Summary", "Statistics", "2", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Double", "Summary", "Statistics", "<|s|>", "dss", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Double", "Summary", "Statistics", "(", ");", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "double", "<|s|>", "value", "<|s|>", ":", "<|s|>", "data", "2", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "dss", ".", "accept", "(", "value", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "dss", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 134, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3293", "comment_id": "d761b920_331848ba", "class_list": ["DoubleSummaryStatisticsTest"], "func_list": ["public void test_constructor()", "public void test_accept()", "public void test_combine()", "public void test_getCount()", "public void test_getSum()", "public void test_getMin()", "public void test_getMax()", "public void test_getAverage()", "public void test_toString()", "public DoubleSummaryStatistics getDoubleSummaryStatistics1()", "public DoubleSummaryStatistics getDoubleSummaryStatistics2()"], "prime_var_dic": {}}, {"idx": 15387, "status": "update", "global_index": 6130, "project_name": "android_", "written_on": "2016-06-08 13:40:08", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , int line ) { assert line != VAR_4 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; }", "comment": "nit line", "tokenized_comment": ["nit", "<|s|>", "line"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , int VAR_3 ) { assert VAR_3 != VAR_4 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; }", "our_target": "  public ColumnAndLineLocation(@Nonnull Location parentLocation, int line) {\n    assert line != UNKNOWN;\n", "our_code": "<|startfocus|>\n  public ColumnAndLineLocation(@Nonnull Location parentLocation, int startLine) {\n    assert startLine != UNKNOWN;\n<|endfocus|>\n    this.parentLocation = parentLocation;\n    this.startLine = startLine;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Column", "And", "Line", "Location", "(", "@", "Nonnull", "<|s|>", "Location", "<|s|>", "parent", "Location", ",", "<|s|>", "int", "<|s|>", "start", "Line", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "start", "Line", "<|s|>", "!=", "<|s|>", "UNKNOWN", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "this", ".", "parent", "Location", "<|s|>", "=", "<|s|>", "parent", "Location", ";", "<|nl|>", "<|4-s|>", "this", ".", "start", "Line", "<|s|>", "=", "<|s|>", "start", "Line", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 41, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3773", "comment_id": "a36b3469_6a3b97b2", "class_list": ["ColumnAndLineLocation"], "func_list": ["public ColumnAndLineLocation(@Nonnull Location parentLocation, int startLine)", "public String getDescription()", "public Location getParentLocation()", "public int getStartLine()", "public int getEndLine()", "public int getStartColumn()", "public int getEndColumn()", "public boolean hasStartLine()", "public boolean hasEndLine()", "public boolean hasStartColumn()", "public boolean hasEndColumn()"], "prime_var_dic": {"implements": 1, "int": 1, "startLine": 1, "parentLocation": 1}}, {"idx": 87427, "status": "update", "global_index": 8591, "project_name": "android_", "written_on": "2015-07-15 11:56:27", "tufano_target": "public VAR_1 ( TYPE_1 context , TYPE_2 VAR_2 ) { super ( context ) ; VAR_3 = new TYPE_3 ( ) ; VAR_4 . METHOD_1 ( VAR_3 ) ; VAR_5 = VAR_2 ; }", "comment": "@NotNull for both arguments", "tokenized_comment": ["@", "Not", "Null", "<|s|>", "for", "<|s|>", "both", "<|s|>", "arguments"], "tufano_code": "public VAR_1 ( TYPE_1 context , TYPE_2 VAR_2 ) { super ( context ) ; VAR_3 = new TYPE_3 ( ) ; VAR_4 . METHOD_1 ( VAR_3 ) ; VAR_5 = VAR_2 ; }", "our_target": "  public StyleListPaletteCellRenderer(@NotNull ThemeEditorContext context, @NotNull ThemeEditorComponent.ThemeChangedListener themeChangedListener) {\n", "our_code": "<|startfocus|>\n  public StyleListPaletteCellRenderer(ThemeEditorContext context, ThemeEditorComponent.ThemeChangedListener themeChangedListener) {\n<|endfocus|>\n    super(context);\n    myColorPaletteComponent = new ColorPaletteComponent();\n    myStyleNameLabel.setIcon(myColorPaletteComponent);\n    myThemeChangedListener = themeChangedListener;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Style", "List", "Palette", "Cell", "Renderer", "(", "Theme", "Editor", "Context", "<|s|>", "context", ",", "<|s|>", "Theme", "Editor", "Component", ".", "Theme", "Changed", "Listener", "<|s|>", "theme", "Changed", "Listener", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "context", ");", "<|nl|>", "<|4-s|>", "my", "Color", "Palette", "Component", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Color", "Palette", "Component", "(", ");", "<|nl|>", "<|4-s|>", "my", "Style", "Name", "Label", ".", "set", "Icon", "(", "my", "Color", "Palette", "Component", ");", "<|nl|>", "<|4-s|>", "my", "Theme", "Changed", "Listener", "<|s|>", "=", "<|s|>", "theme", "Changed", "Listener", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 42, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_264", "comment_id": "38e906fb_510794d0", "class_list": ["StyleListPaletteCellRenderer"], "func_list": ["public StyleListPaletteCellRenderer(ThemeEditorContext context, ThemeEditorComponent.ThemeChangedListener themeChangedListener)", "public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)"], "prime_var_dic": {"String": 3, "myThemeChangedListener": 1}}, {"idx": 47568, "status": "update", "global_index": 9508, "project_name": "android_", "written_on": "2015-10-15 08:19:39", "tufano_target": "public int METHOD_3 ( ) { if ( METHOD_2 ( ) ) { return INT_1 ; } return 1 ; }", "comment": "And here?", "tokenized_comment": ["And", "<|s|>", "here", "?"], "tufano_code": "public int METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return INT_1 ; } return 1 ; }", "our_target": "  public int getWordCount() {\n", "our_code": "<|startfocus|>\n  public int getWordSize() {\n<|endfocus|>\n    if (isCategory2()) {\n      return 2;\n    }\n    return 1;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "int", "<|s|>", "get", "Word", "Size", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "is", "Category", "2", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "2", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "1", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 854, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_1722", "comment_id": "f913064a_b9be3fe8", "class_list": ["are", "Type", "name", "name", "names,", "this", "name"], "func_list": ["public static Type intern(String descriptor)", "private static void validateClassName(@Nonnull String descriptor)", "public static Type internReturnType(String descriptor)", "private Type arrayType;", "public boolean equals(Object other)", "public int hashCode()", "public int compareTo(Type other)", "public String toString()", "public String toHuman()", "public Type getType()", "public Type getFrameType()", "public int getBasicType()", "public int getBasicFrameType()", "public boolean isConstant()", "public String getDescriptor()", "public String getClassName()", "public int getCategory()", "public boolean isCategory1()", "public boolean isCategory2()", "public boolean isIntlike()", "public boolean isPrimitive()", "public boolean isReference()", "public boolean isClosure()", "public boolean isArray()", "public boolean isArrayOrKnownNull()", "public boolean isUninitialized()", "public int getNewAt()", "public Type getInitializedType()", "public Type getArrayType()", "public Type getComponentType()", "public Type asUninitialized(int newAt)", "public int getWordSize()", "private static Type putIntern(Type type)", "private static void validateClassName(@Nonnull String descriptor)"], "prime_var_dic": {"type": 1}}, {"idx": 4785, "status": "update", "global_index": 5079, "project_name": "android_", "written_on": "2016-09-08 20:02:14", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 ) { VAR_4 = VAR_2 ; VAR_6 = string ; }", "comment": "string", "tokenized_comment": ["string"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "our_target": "      myString = string;\n", "our_code": "    public ResourceItemEntry(@NotNull ResourceItem resourceItem, @NotNull String stringRepresentation) {\n      myResourceItem = resourceItem;\n<|startfocus|>\n      myStringRepresentation = stringRepresentation;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Resource", "Item", "Entry", "(", "@", "Not", "Null", "<|s|>", "Resource", "Item", "<|s|>", "resource", "Item", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "string", "Representation", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Resource", "Item", "<|s|>", "=", "<|s|>", "resource", "Item", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "String", "Representation", "<|s|>", "=", "<|s|>", "string", "Representation", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 133, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_223", "comment_id": "1691b3ce_92bfeca8", "class_list": ["StringResource", "ResourceItemEntry"], "func_list": ["String getKey()", "void setKey(@NotNull String key)", "ResourceItem getDefaultValue()", "String getDefaultValueAsString()", "void setDefaultValue(@NotNull ResourceItem defaultValue, @NotNull String defaultValueString)", "void removeDefaultValue()", "public boolean isTranslatable()", "void setTranslatable(boolean translatable)", "void setTranslation(@NotNull Locale locale, @NotNull ResourceItem translation, @NotNull String translationString)", "ResourceItem getTranslation(@NotNull Locale locale)", "String getTranslationAsString(@NotNull Locale locale)", "void removeTranslation(@NotNull Locale locale)", "Collection<Locale> getTranslatedLocales()", "boolean isTranslationMissing(@NotNull Locale locale)", "public String resourceToString()", "public ResourceItemEntry(@NotNull ResourceItem resourceItem, @NotNull String stringRepresentation)"], "prime_var_dic": {}}, {"idx": 94318, "status": "update", "global_index": 2852, "project_name": "android_", "written_on": "2017-03-20 18:17:20", "tufano_target": "public int [ ] METHOD_1 ( int VAR_3 ) { if ( METHOD_2 ( VAR_3 ) ) { return null ; } return VAR_2 [ VAR_1 ] ; }", "comment": "rename", "tokenized_comment": ["rename"], "tufano_code": "public int [ ] METHOD_1 ( int VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { return null ; } return VAR_2 [ VAR_1 ] ; }", "our_target": "    public int[] getSubId(int slotIndex) {\n        if (isInvalidSlotId(slotIndex)) {\n", "our_code": "<|startfocus|>\n    public int[] getSubId(int slotIdx) {\n        if (isInvalidSlotId(slotIdx)) {\n<|endfocus|>\n            return null;\n        }\n        return mSlotIdxToSubId[slotIdx];\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "int", "[", "]", "<|s|>", "get", "Sub", "Id", "(", "int", "<|s|>", "slot", "Idx", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "is", "Invalid", "Slot", "Id", "(", "slot", "Idx", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Slot", "Idx", "To", "Sub", "Id", "[", "slot", "Idx", "];", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 187, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5314", "comment_id": "a1f45473_05de22f7", "class_list": ["SubscriptionControllerMock"], "func_list": ["public static SubscriptionController init(Phone phone)", "public static SubscriptionController getInstance()", "public SubscriptionControllerMock(Context c, ITelephonyRegistry.Stub tr, int phoneCount)", "protected void init(Context c)", "public int getDefaultDataSubId()", "public void setDefaultDataSubId(int subId)", "private void broadcastDefaultDataSubIdChanged(int subId)", "public int getSubIdUsingPhoneId(int phoneId)", "public void notifySubscriptionInfoChanged()", "public SubscriptionInfo getActiveSubscriptionInfo(int subId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForIccId(String iccId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIdx, String cp)", "public List<SubscriptionInfo> getAllSubInfoList(String callingPackage)", "public List<SubscriptionInfo> getActiveSubscriptionInfoList(String callingPackage)", "public int getActiveSubInfoCount(String callingPackage)", "public int getAllSubInfoCount(String callingPackage)", "public int getActiveSubInfoCountMax()", "public int addSubInfoRecord(String iccId, int slotId)", "public boolean setPlmnSpn(int slotId, boolean showPlmn, String plmn, boolean showSpn,", "public int setIconTint(int tint, int subId)", "public int setDisplayName(String displayName, int subId)", "public int setDisplayNameUsingSrc(String displayName, int subId, long nameSource)", "public int setDisplayNumber(String number, int subId)", "public int setDataRoaming(int roaming, int subId)", "public int setMccMnc(String mccMnc, int subId)", "public int getSlotId(int subId)", "private boolean isInvalidSlotId(int slotIdx)", "public int[] getSubId(int slotIdx)", "public void setSlotSubId(int slotIdx, int subId)", "public int getPhoneId(int subId)", "public int clearSubInfo()", "public int getDefaultSubId()", "public void setDefaultSmsSubId(int subId)", "public int getDefaultSmsSubId()", "public void setDefaultVoiceSubId(int subId)", "public int getDefaultVoiceSubId()", "public void clearDefaultsForInactiveSubIds()", "public int[] getSubIdUsingSlotId(int slotId)", "public List<SubscriptionInfo> getSubInfoUsingSlotIdWithCheck(int slotId, boolean needCheck,", "public void updatePhonesAvailability(Phone[] phones)", "public int[] getActiveSubIdList()", "public boolean isActiveSubId(int subId)", "public int getSimStateForSlotIndex(int slotIndex)", "public void setSubscriptionProperty(int subId, String propKey, String propValue)", "public String getSubscriptionProperty(int subId, String propKey, String callingPackage)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {"mTelephonyRegistry": 1}}, {"idx": 80741, "status": "update", "global_index": 13805, "project_name": "android_", "written_on": "2015-01-13 18:18:36", "tufano_target": "public void METHOD_1 ( String VAR_1 ) { METHOD_3 ( VAR_1 == VAR_3 || VAR_1 == VAR_4 ) ; VAR_5 = VAR_1 ; }", "comment": "A set with 2 elements is an overkill. Just check if the artifact name is either of those 2 constants.", "tokenized_comment": ["A", "<|s|>", "set", "<|s|>", "with", "<|s|>", "2", "<|s|>", "elements", "<|s|>", "is", "<|s|>", "an", "<|s|>", "overkill", ".", "<|s|>", "Just", "<|s|>", "check", "<|s|>", "if", "<|s|>", "the", "<|s|>", "artifact", "<|s|>", "name", "<|s|>", "is", "<|s|>", "either", "<|s|>", "of", "<|s|>", "those", "<|s|>", "2", "<|s|>", "constants", "."], "tufano_code": "public void METHOD_1 ( String VAR_1 ) { TYPE_1 < String > VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_4 ) ; METHOD_3 ( VAR_2 . contains ( VAR_1 ) , STRING_1 , VAR_1 ) ; VAR_5 = VAR_1 ; }", "our_target": "    checkArgument(selectedTestArtifactName == AndroidProject.ARTIFACT_ANDROID_TEST\n                  || selectedTestArtifactName == AndroidProject.ARTIFACT_UNIT_TEST);\n", "our_code": "  public void setSelectedTestArtifactName(@NotNull String selectedTestArtifactName) {\n<|startfocus|>\n    ImmutableSet<String> knownArtifacts = ImmutableSet.of(AndroidProject.ARTIFACT_ANDROID_TEST, AndroidProject.ARTIFACT_UNIT_TEST);\n    checkArgument(knownArtifacts.contains(selectedTestArtifactName), \"Unknown test artifact %s.\", selectedTestArtifactName);\n<|endfocus|>\n    mySelectedTestArtifactName = selectedTestArtifactName;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Selected", "Test", "Artifact", "Name", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "selected", "Test", "Artifact", "Name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Immutable", "Set", "<", "String", ">", "<|s|>", "known", "Artifacts", "<|s|>", "=", "<|s|>", "Immutable", "Set", ".", "of", "(", "Android", "Project", ".", "ARTIFACT", "_", "ANDROID", "_", "TEST", ",", "<|s|>", "Android", "Project", ".", "ARTIFACT", "_", "UNIT", "_", "TEST", ");", "<|nl|>", "<|4-s|>", "check", "Argument", "(", "known", "Artifacts", ".", "contains", "(", "selected", "Test", "Artifact", "Name", ")", ",", "<|s|>", "\"", "Unknown", "<|s|>", "test", "<|s|>", "artifact", "<|s|>", "%", "s", ".", "\"", ",", "<|s|>", "selected", "Test", "Artifact", "Name", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Selected", "Test", "Artifact", "Name", "<|s|>", "=", "<|s|>", "selected", "Test", "Artifact", "Name", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 226, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_356", "comment_id": "ae53d9fb_70d430cb", "class_list": ["IdeaAndroidProject"], "func_list": ["public IdeaAndroidProject(@NotNull ProjectSystemId projectSystemId,", "private void populateBuildTypesByName()", "private void populateProductFlavorsByName()", "private void populateVariantsByName()", "public ProjectSystemId getProjectSystemId()", "public BuildTypeContainer findBuildType(@NotNull String name)", "public Set<String> getBuildTypes()", "public Set<String> getProductFlavors()", "public ProductFlavorContainer findProductFlavor(@NotNull String name)", "public AndroidArtifact findInstrumentationTestArtifactInSelectedVariant()", "public BaseArtifact findSelectedTestArtifact(@NotNull Variant variant)", "public AndroidArtifact findInstrumentationTestArtifactInSelectedVariant()", "public String getModuleName()", "public VirtualFile getRootDir()", "public AndroidProject getDelegate()", "public Variant getSelectedVariant()", "public void setSelectedVariantName(@NotNull String name)", "public void setSelectedTestArtifactName(@NotNull String selectedTestArtifactName)", "public String getSelectedTestArtifactName()", "public Collection<String> getVariantNames()", "public Collection<String> getBuildTypeNames()", "public Collection<String> getProductFlavorNames()", "public LanguageLevel getJavaLanguageLevel()", "public String computePackageName()", "public boolean isLibrary()", "public boolean overridesManifestPackage()"], "prime_var_dic": {"implements": 1, "ProjectSystemId": 1, "String": 1, "VirtualFile": 1, "AndroidProject": 1, "mySelectedVariantName": 1, "mySelectedTestArtifactName": 1, "myOverridesManifestPackage": 1, "myMinSdkVersion": 1, "IdeaAndroidProject": 1, "alphabetical": 1, "new": 1}}, {"idx": 96112, "status": "update", "global_index": 11996, "project_name": "android_", "written_on": "2014-09-23 19:36:23", "tufano_target": "public TYPE_1 METHOD_2 ( ) { return new TYPE_1 ( this ) ; }", "comment": "Remove \"Fixture\" from method name.", "tokenized_comment": ["Remove", "<|s|>", "\"", "Fixture", "\"", "<|s|>", "from", "<|s|>", "method", "<|s|>", "name", "."], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this ) ; }", "our_target": "  public RunToolWindowFixture getRunToolWindow() {\n", "our_code": "<|startfocus|>\n  public RunToolWindowFixture getRunToolWindowFixture() {\n<|endfocus|>\n    return new RunToolWindowFixture(this);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Run", "Tool", "Window", "Fixture", "<|s|>", "get", "Run", "Tool", "Window", "Fixture", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "new", "<|s|>", "Run", "Tool", "Window", "Fixture", "(", "this", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 289, "base_patch_number": 33, "changed_patch_number": 34, "code_file_name": "android_42", "comment_id": "30bca331_fe0a8d85", "class_list": ["IdeFrameFixture", "NoOpDisposable"], "func_list": ["public static IdeFrameFixture find(@NotNull final Robot robot, @NotNull final File projectPath, @Nullable final String projectName)", "protected boolean isMatching(IdeFrameImpl frame)", "public boolean test()", "public IdeFrameFixture(@NotNull Robot robot, @NotNull IdeFrameImpl target, @NotNull File projectPath)", "public File getProjectPath()", "public IdeFrameFixture requireModuleCount(int expected)", "public IdeaAndroidProject getAndroidProjectForModule(@NotNull String name)", "public Module getModule(@NotNull String name)", "private ModuleManager getModuleManager()", "public Project getProject()", "public EditorFixture getEditor()", "public GradleInvocationResult invokeProjectMake()", "public void execute(@NotNull GradleInvocationResult result)", "public boolean execute(CompileContext context)", "public CompileContext invokeProjectMakeUsingJps()", "public void compilationFinished(boolean aborted, int errors, int warnings, CompileContext compileContext)", "public void fileGenerated(String outputRoot, String relativePath)", "public ActionButtonFixture findRunApplicationButton()", "public ChooseDeviceDialogFixture findChooseDeviceDialog()", "public RunToolWindowFixture getRunToolWindowFixture()", "public DebugToolWindowFixture getDebugToolWindowFixture()", "public void toFront()", "protected void selectProjectMakeAction()", "private JMenuItem findActionMenuItem(@NotNull String... path)", "private void waitForBuildToFinish(@NotNull final BuildMode buildMode)", "public FileFixture findExistingFileByRelativePath(@NotNull String relativePath)", "public VirtualFile findFileByRelativePath(@NotNull String relativePath, boolean requireExists)", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture requestProjectSyncAndSimulateFailure(@NotNull final String failure)", "public void runApp(@NotNull String appName) throws ClassNotFoundException", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture waitForGradleProjectSyncToFail()", "public IdeFrameFixture waitForGradleProjectSyncToFinish()", "private void waitForGradleProjectSyncToFinish(final boolean expectSyncFailure)", "public IdeFrameFixture waitForBackgroundTasksToFinish()", "private ActionButtonFixture findActionButtonByActionId(String actionId)", "public MessagesToolWindowFixture getMessagesToolWindow()", "public void requireEditorNotification(@Nullable String message)", "private EditorNotificationPanel findPanel(@Nullable String message)", "private String getEditorNotificationLabel(@NotNull EditorNotificationPanel panel)", "public void clickEditorNotification(@NotNull String message, @NotNull final String linkText)", "public IdeSettingsDialogFixture openIdeSettings()", "public IdeFrameFixture deleteGradleWrapper()", "public IdeFrameFixture requireGradleWrapperSet()", "public static void deleteWrapper(@NotNull File projectDirPath)", "private static File getGradleWrapperDirPath(@NotNull File projectDirPath)", "public IdeFrameFixture useLocalGradleDistribution(@NotNull String gradleHome)", "public GradleProjectSettings getGradleSettings()", "public void dispose()", "public File getProjectPath()"], "prime_var_dic": {}}, {"idx": 31149, "status": "update", "global_index": 20144, "project_name": "android_", "written_on": "2012-12-18 15:38:40", "tufano_target": "public VAR_1 ( TYPE_1 view ) { VAR_3 = view ; }", "comment": "tv -> mTextView", "tokenized_comment": ["tv", "<|s|>", "->", "<|s|>", "m", "Text", "View"], "tufano_code": "public VAR_1 ( TYPE_1 view ) { VAR_2 = view ; }", "our_target": "            mView = view;\n", "our_code": "        public ViewHolder(View view) {\n<|startfocus|>\n            v = view;\n<|endfocus|>\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "View", "Holder", "(", "View", "<|s|>", "view", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "v", "<|s|>", "=", "<|s|>", "view", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 42, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4339", "comment_id": "M9czpwg8", "class_list": ["IconListAdapter", "ViewHolder", "IconListItem"], "func_list": ["public ViewHolder(View view)", "public TextView getTextView()", "public ImageView getImageView()", "public IconListAdapter(Context context,", "public View getView(int position, View convertView, ViewGroup parent)", "public IconListItem(String title, int resource)", "public String getTitle()", "public int getResource()", "public ViewHolder(View view)", "public TextView getTextView()", "public ImageView getImageView()", "public ViewHolder(View view)", "public TextView getTextView()", "public ImageView getImageView()", "public IconListAdapter(Context context,", "public View getView(int position, View convertView, ViewGroup parent)", "public IconListItem(String title, int resource)", "public String getTitle()", "public int getResource()"], "prime_var_dic": {"int": 1, "IconListItem": 1, "mTitle": 1, "mResource": 1}}, {"idx": 85684, "status": "update", "global_index": 13898, "project_name": "android_", "written_on": "2015-03-27 14:14:20", "tufano_target": "public VAR_1 ( String VAR_2 , byte VAR_3 ) { this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; }", "comment": "One line? If not, the indentation seems off.", "tokenized_comment": ["One", "<|s|>", "line", "?", "<|s|>", "If", "<|s|>", "not", ",", "<|s|>", "the", "<|s|>", "indentation", "<|s|>", "seems", "<|s|>", "off", "."], "tufano_code": "public VAR_1 ( String VAR_2 , byte VAR_3 ) { this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; }", "our_target": "            public VariableNameAndTag(String testVariableName, byte testVariableJdwpTag) {\n", "our_code": "<|startfocus|>\n            public VariableNameAndTag(String testVariableName,\n                    byte testVariableJdwpTag) {\n<|endfocus|>\n                this.testVariableName = testVariableName;\n                this.testVariableJdwpTag = testVariableJdwpTag;\n            }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|12-s|>", "public", "<|s|>", "Variable", "Name", "And", "Tag", "(", "String", "<|s|>", "test", "Variable", "Name", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "byte", "<|s|>", "test", "Variable", "Jdwp", "Tag", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "this", ".", "test", "Variable", "Name", "<|s|>", "=", "<|s|>", "test", "Variable", "Name", ";", "<|nl|>", "<|16-s|>", "this", ".", "test", "Variable", "Jdwp", "Tag", "<|s|>", "=", "<|s|>", "test", "Variable", "Jdwp", "Tag", ";", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 227, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_2777", "comment_id": "63caea3a_eecabf98", "class_list": ["for", "JDWPStackFrameAccessTest", "VariableInfo", "MethodInfo", "StackFrameTester", "for", "StackFrameChecker", "VariableNameAndTag", "of", "of", "of"], "func_list": ["public String getVariableName()", "public Value getInitialValue()", "public Value getNewValue()", "public String getMethodName()", "public void addVariable(String variableName, Value initialValue, Value newValue)", "public StackFrameTester(String breakpointMethodName, String signalValue)", "public String getBreakpointMethodName()", "public String getSignalValue()", "public MethodInfo addTestMethod(String methodName)", "protected void runStackFrameTest(StackFrameTester tester)", "private void checkStackFrame(long classID, long eventThreadID, StackFrameTester tester,", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "protected StackFrameChecker(String breakpointMethodName, String testMethodName,", "public String getTestMethodName()", "public int addTestedVariable(String name, byte tag)", "protected VarInfo getVariableInfo(long classID, long methodID, String variableName)", "protected FrameInfo getFrameInfo(long threadID, long classID, long methodID)", "protected Value getVariableValue(long threadID, long frameID, int slot, byte tag)", "protected void setVariableValue(long threadID, long frameID, int slot, Value newValue)", "protected Value getStaticFieldValue(long classID, String fieldName)", "public String getVariableName()", "public Value getInitialValue()", "public Value getNewValue()", "public String getMethodName()", "public void addVariable(String variableName, Value initialValue, Value newValue)", "public StackFrameTester(String breakpointMethodName, String signalValue)", "public String getBreakpointMethodName()", "public String getSignalValue()", "public MethodInfo addTestMethod(String methodName)", "protected void runStackFrameTest(StackFrameTester tester)", "private void checkStackFrame(long classID, long eventThreadID, StackFrameTester tester,", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "protected StackFrameChecker(String breakpointMethodName, String testMethodName,", "public String getTestMethodName()", "public int addTestedVariable(String name, byte tag)", "protected VarInfo getVariableInfo(long classID, long methodID, String variableName)", "protected FrameInfo getFrameInfo(long threadID, long classID, long methodID)", "protected Value getVariableValue(long threadID, long frameID, int slot, byte tag)", "protected void setVariableValue(long threadID, long frameID, int slot, Value newValue)", "protected Value getStaticFieldValue(long classID, String fieldName)", "public String getVariableName()", "public Value getInitialValue()", "public Value getNewValue()", "public String getMethodName()", "public void addVariable(String variableName, Value initialValue, Value newValue)", "public StackFrameTester(String breakpointMethodName, String signalValue)", "public String getBreakpointMethodName()", "public String getSignalValue()", "public MethodInfo addTestMethod(String methodName)", "public String getVariableName()", "public Value getInitialValue()", "public Value getNewValue()", "public String getMethodName()", "public void addVariable(String variableName, Value initialValue, Value newValue)", "public StackFrameTester(String breakpointMethodName, String signalValue)", "public String getBreakpointMethodName()", "public String getSignalValue()", "public MethodInfo addTestMethod(String methodName)", "protected void runStackFrameTest(StackFrameTester tester)", "private void checkStackFrame(long classID, long eventThreadID, StackFrameTester tester,", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "protected StackFrameChecker(String breakpointMethodName, String testMethodName,", "public String getTestMethodName()", "public int addTestedVariable(String name, byte tag)", "protected VarInfo getVariableInfo(long classID, long methodID, String variableName)", "protected FrameInfo getFrameInfo(long threadID, long classID, long methodID)", "protected Value getVariableValue(long threadID, long frameID, int slot, byte tag)", "protected void setVariableValue(long threadID, long frameID, int slot, Value newValue)", "protected Value getStaticFieldValue(long classID, String fieldName)", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "protected StackFrameChecker(String breakpointMethodName, String testMethodName,", "public String getBreakpointMethodName()", "public String getTestMethodName()", "public int addTestedVariable(String name, byte tag)", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "public String getVariableName()", "public Value getInitialValue()", "public Value getNewValue()", "public String getMethodName()", "public void addVariable(String variableName, Value initialValue, Value newValue)", "public StackFrameTester(String breakpointMethodName, String signalValue)", "public String getBreakpointMethodName()", "public String getSignalValue()", "public MethodInfo addTestMethod(String methodName)", "protected void runStackFrameTest(StackFrameTester tester)", "private void checkStackFrame(long classID, long eventThreadID, StackFrameTester tester,", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "protected StackFrameChecker(String breakpointMethodName, String testMethodName,", "public String getTestMethodName()", "public int addTestedVariable(String name, byte tag)", "protected VarInfo getVariableInfo(long classID, long methodID, String variableName)", "protected FrameInfo getFrameInfo(long threadID, long classID, long methodID)", "protected Value getVariableValue(long threadID, long frameID, int slot, byte tag)", "protected void setVariableValue(long threadID, long frameID, int slot, Value newValue)", "protected Value getStaticFieldValue(long classID, String fieldName)", "public String getVariableName()", "public Value getInitialValue()", "public Value getNewValue()", "public String getMethodName()", "public void addVariable(String variableName, Value initialValue, Value newValue)", "public StackFrameTester(String breakpointMethodName, String signalValue)", "public String getBreakpointMethodName()", "public String getSignalValue()", "public MethodInfo addTestMethod(String methodName)", "protected void runStackFrameTest(StackFrameTester tester)", "private void checkStackFrame(long classID, long eventThreadID, StackFrameTester tester,", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "protected StackFrameChecker(String breakpointMethodName, String testMethodName,", "public String getTestMethodName()", "public int addTestedVariable(String name, byte tag)", "protected VarInfo getVariableInfo(long classID, long methodID, String variableName)", "protected FrameInfo getFrameInfo(long threadID, long classID, long methodID)", "protected Value getVariableValue(long threadID, long frameID, int slot, byte tag)", "protected void setVariableValue(long threadID, long frameID, int slot, Value newValue)", "protected Value getStaticFieldValue(long classID, String fieldName)", "public String getVariableName()", "public Value getInitialValue()", "public Value getNewValue()", "public String getMethodName()", "public void addVariable(String variableName, Value initialValue, Value newValue)", "public StackFrameTester(String breakpointMethodName, String signalValue)", "public String getBreakpointMethodName()", "public String getSignalValue()", "public MethodInfo addTestMethod(String methodName)", "protected void runStackFrameTest(StackFrameTester tester)", "private void checkStackFrame(long classID, long eventThreadID, StackFrameTester tester,", "public VariableNameAndTag(String testVariableName,", "public String getTestVariableName()", "public byte getTestVariableJdwpTag()", "protected StackFrameChecker(String breakpointMethodName, String testMethodName,", "public String getTestMethodName()", "public int addTestedVariable(String name, byte tag)", "protected VarInfo getVariableInfo(long classID, long methodID, String variableName)", "protected FrameInfo getFrameInfo(long threadID, long classID, long methodID)", "protected Value getVariableValue(long threadID, long frameID, int slot, byte tag)", "protected void setVariableValue(long threadID, long frameID, int slot, Value newValue)", "protected Value getStaticFieldValue(long classID, String fieldName)"], "prime_var_dic": {"License": 1, "variableName": 1, "initialValue": 1, "newValue": 1, "methodName": 1, "breakpointMethodName": 2, "signalValue": 1, "StackFrameChecker": 1, "testVariableName": 1, "testVariableJdwpTag": 1, "debuggee": 1, "testMethodName": 1, "the": 3, "to": 1}}, {"idx": 92402, "status": "update", "global_index": 8802, "project_name": "android_", "written_on": "2015-07-27 18:23:40", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_5 VAR_2 ) { if ( TYPE_6 . METHOD_3 ( VAR_2 ) ) { return TYPE_4 . METHOD_4 ( VAR_2 ) ; } return null ; }", "comment": "What do you think of not passing a module at all (and pass a project) and return GradleDependencyManager regardless? The API of this class takes a module anyway and the DependencyManager implementation can decide whether it can do something with that module or not.\nIf we go this route, you can use Projects#isBuildWithGradle(Project) to determine if the project is a Gradle project.", "tokenized_comment": ["What", "<|s|>", "do", "<|s|>", "you", "<|s|>", "think", "<|s|>", "of", "<|s|>", "not", "<|s|>", "passing", "<|s|>", "a", "<|s|>", "module", "<|s|>", "at", "<|s|>", "all", "<|s|>", "(", "and", "<|s|>", "pass", "<|s|>", "a", "<|s|>", "project", ")", "<|s|>", "and", "<|s|>", "return", "<|s|>", "Gradle", "Dependency", "Manager", "<|s|>", "regardless", "?", "<|s|>", "The", "<|s|>", "API", "<|s|>", "of", "<|s|>", "this", "<|s|>", "class", "<|s|>", "takes", "<|s|>", "a", "<|s|>", "module", "<|s|>", "anyway", "<|s|>", "and", "<|s|>", "the", "<|s|>", "Dependency", "Manager", "<|s|>", "implementation", "<|s|>", "can", "<|s|>", "decide", "<|s|>", "whether", "<|s|>", "it", "<|s|>", "can", "<|s|>", "do", "<|s|>", "something", "<|s|>", "with", "<|s|>", "that", "<|s|>", "module", "<|s|>", "or", "<|s|>", "not", ".", "<|nl|>", "If", "<|s|>", "we", "<|s|>", "go", "<|s|>", "this", "<|s|>", "route", ",", "<|s|>", "you", "<|s|>", "can", "<|s|>", "use", "<|s|>", "Projects", "#", "is", "Build", "With", "Gradle", "(", "Project", ")", "<|s|>", "to", "<|s|>", "determine", "<|s|>", "if", "<|s|>", "the", "<|s|>", "project", "<|s|>", "is", "<|s|>", "a", "<|s|>", "Gradle", "<|s|>", "project", "."], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 ) != null ) { return TYPE_4 . get ( ) ; } return null ; }", "our_target": "  @Nullable\n  public static DependencyManager getDependencyManager(@NotNull Project project) {\n    if (Projects.isBuildWithGradle(project)) {\n      return GradleDependencyManager.getInstance(project);\n", "our_code": "<|startfocus|>\n  public static DependencyManager getDependencyManager(@NonNull Module module) {\n    if (GradleUtil.getGradleBuildFile(module) != null) {\n      return GradleDependencyManager.get();\n<|endfocus|>\n    }\n    return null;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Dependency", "Manager", "<|s|>", "get", "Dependency", "Manager", "(", "@", "Non", "Null", "<|s|>", "Module", "<|s|>", "module", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "Gradle", "Util", ".", "get", "Gradle", "Build", "File", "(", "module", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Gradle", "Dependency", "Manager", ".", "get", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 36, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_162", "comment_id": "cd882a39_62b93c36", "class_list": ["holds", "DependencyManager"], "func_list": ["public static DependencyManager getDependencyManager(@NonNull Module module)", "public static DependencyManager getDependencyManager(@NonNull Module module)"], "prime_var_dic": {"and": 1, "DependencyManager": 1}}, {"idx": 78114, "status": "insert", "global_index": 14704, "project_name": "android_", "written_on": "2014-04-07 22:20:59", "tufano_target": "public String METHOD_1 ( TYPE_1 value ) { if ( value instanceof TYPE_2 ) { return new TYPE_3 ( ( ( TYPE_2 ) value ) . METHOD_2 ( ) ) . METHOD_3 ( ) ; } return null ; }", "comment": "would be cool to maybe show the module locations when hovering over modules here?", "tokenized_comment": ["would", "<|s|>", "be", "<|s|>", "cool", "<|s|>", "to", "<|s|>", "maybe", "<|s|>", "show", "<|s|>", "the", "<|s|>", "module", "<|s|>", "locations", "<|s|>", "when", "<|s|>", "hovering", "<|s|>", "over", "<|s|>", "modules", "<|s|>", "here", "?"], "tufano_code": "public String METHOD_1 ( TYPE_1 value ) { return null ; }", "our_target": "        public String getTooltipFor(Object value) {\n          if (value instanceof Module) {\n            return new File(((Module)value).getModuleFilePath()).getAbsolutePath();\n          }\n", "our_code": "<|startfocus|>\n        public String getTooltipFor(Object value) {\n<|endfocus|>\n          return null;\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Tooltip", "For", "(", "Object", "<|s|>", "value", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 464, "base_patch_number": 23, "changed_patch_number": 24, "code_file_name": "android_433", "comment_id": "59a69bd4_f950b79f", "class_list": ["AndroidProjectStructureConfigurable", "MainPanel", "SidePanel", "UiState", "AbstractAddGroup"], "func_list": ["public static AndroidProjectStructureConfigurable getInstance(@NotNull Project project)", "public boolean showDialogAndSelect(@NotNull final Module module)", "return doShowDialog(new Runnable()", "public void run()", "public boolean showDialogAndSelect(@NotNull final Module module)", "private boolean doShowDialog(@Nullable Runnable advanceInit)", "public AndroidProjectStructureConfigurable(@NotNull Project project)", "public void dispose()", "public String getDisplayName()", "public String getHelpTopic()", "public JComponent createComponent()", "public Color getBackground()", "private void initSidePanel()", "public boolean isModified()", "public void reset()", "private boolean addModule(@NotNull Module module)", "private void validateState()", "private static String getGradlePath(@NotNull Module module)", "private void selectSdkHomeConfigurable(boolean requestFocus)", "private void selectModuleConfigurable(@NotNull Module module)", "private AndroidModuleConfigurable getConfigurableFor(@NotNull Module module)", "private void selectConfigurable(@NotNull Configurable configurable, boolean requestFocus)", "public void disposeUIResources()", "public String getId()", "public Runnable enableSearch(String option)", "public JComponent getPreferredFocusedComponent()", "public void syncStarted(@NotNull Project project)", "public void syncEnded(@NotNull Project project)", "public void syncFailed(@NotNull Project project, @NotNull String errorMessage)", "private static void revalidateAndRepaint(@NotNull JComponent c)", "public Object getData(@NonNls final String dataId)", "public Dimension getPreferredSize()", "public String getTextFor(Object value)", "public String getTooltipFor(Object value)", "public Icon getIconFor(Object value)", "public boolean hasSeparatorAboveOf(Object value)", "public String getCaptionAboveOf(Object value)", "public void valueChanged(ListSelectionEvent e)", "private AbstractAddGroup createAddAction()", "public AnAction[] getChildren(@Nullable AnActionEvent e)", "public Dimension getMinimumSize()", "void removeModules()", "void add(@NotNull Module module)", "private void selectSdkHomeConfigurable(boolean requestFocus)", "private void selectSdkHomeConfigurable(boolean requestFocus)", "private static float toFloat(@Nullable String val)", "void storeValues(@NotNull Project project)", "public ActionGroup getActionGroup()", "public int getDefaultIndex()", "public Color getBackground()", "public static AndroidProjectStructureConfigurable getInstance(@NotNull Project project)", "public static AndroidProjectStructureConfigurable getInstance(@NotNull Project project)", "private AbstractAddGroup createAddAction()", "public AnAction[] getChildren(@Nullable AnActionEvent e)"], "prime_var_dic": {}}, {"idx": 55932, "status": "update", "global_index": 18353, "project_name": "android_", "written_on": "2010-04-20 17:55:29", "tufano_target": "private static void METHOD_1 ( ) { try { int VAR_1 = METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 ) ; VAR_4 = new TYPE_2 ( VAR_2 , VAR_1 ) ; } catch ( TYPE_3 VAR_5 ) { } }", "comment": "I would keep this private. There's no reason for any other class to use this. Since there's no UI to set the port (it's either default or coming from the env var), it should be totally transparent from the API point of view.", "tokenized_comment": ["I", "<|s|>", "would", "<|s|>", "keep", "<|s|>", "this", "<|s|>", "private", ".", "<|s|>", "There", "'", "s", "<|s|>", "no", "<|s|>", "reason", "<|s|>", "for", "<|s|>", "any", "<|s|>", "other", "<|s|>", "class", "<|s|>", "to", "<|s|>", "use", "<|s|>", "this", ".", "<|s|>", "Since", "<|s|>", "there", "'", "s", "<|s|>", "no", "<|s|>", "UI", "<|s|>", "to", "<|s|>", "set", "<|s|>", "the", "<|s|>", "port", "<|s|>", "(", "it", "'", "s", "<|s|>", "either", "<|s|>", "default", "<|s|>", "or", "<|s|>", "coming", "<|s|>", "from", "<|s|>", "the", "<|s|>", "env", "<|s|>", "var", ")", ",", "<|s|>", "it", "<|s|>", "should", "<|s|>", "be", "<|s|>", "totally", "<|s|>", "transparent", "<|s|>", "from", "<|s|>", "the", "<|s|>", "API", "<|s|>", "point", "<|s|>", "of", "<|s|>", "view", "."], "tufano_code": "public static void METHOD_1 ( ) { try { int VAR_1 = METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 ) ; VAR_4 = new TYPE_2 ( VAR_2 , VAR_1 ) ; } catch ( TYPE_3 VAR_5 ) { } }", "our_target": "    private static void initAdbSocketAddr() {\n", "our_code": "<|startfocus|>\n    public static void initAdbSocketAddr() {\n<|endfocus|>\n        try {\n            int adb_port = determineAndValidateAdbPort();\n            sHostAddr = InetAddress.getByName(ADB_HOST);\n            sSocketAddr = new InetSocketAddress(sHostAddr, adb_port);\n        } catch (UnknownHostException e) {\n            // localhost should always be known.\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "init", "Adb", "Socket", "Addr", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "int", "<|s|>", "adb", "_", "port", "<|s|>", "=", "<|s|>", "determine", "And", "Validate", "Adb", "Port", "(", ");", "<|nl|>", "<|12-s|>", "s", "Host", "Addr", "<|s|>", "=", "<|s|>", "Inet", "Address", ".", "get", "By", "Name", "(", "ADB", "_", "HOST", ");", "<|nl|>", "<|12-s|>", "s", "Socket", "Addr", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Inet", "Socket", "Address", "(", "s", "Host", "Addr", ",", "<|s|>", "adb", "_", "port", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Unknown", "Host", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "localhost", "<|s|>", "should", "<|s|>", "always", "<|s|>", "be", "<|s|>", "known", ".", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1057, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1644", "comment_id": "AAAAwn%2F%2F%2Fk0%3D", "class_list": ["AndroidDebugBridge", "to"], "func_list": ["public static void init(boolean clientSupport)", "public static void terminate()", "static boolean getClientSupport()", "public static InetSocketAddress getSocketAddress()", "public static AndroidDebugBridge createBridge()", "public static AndroidDebugBridge getBridge()", "public static void disconnectBridge()", "public static void addDebugBridgeChangeListener(IDebugBridgeChangeListener listener)", "public static void removeDebugBridgeChangeListener(IDebugBridgeChangeListener listener)", "public static void addDeviceChangeListener(IDeviceChangeListener listener)", "public static void removeDeviceChangeListener(IDeviceChangeListener listener)", "public static void addClientChangeListener(IClientChangeListener listener)", "public static void removeClientChangeListener(IClientChangeListener listener)", "public IDevice[] getDevices()", "public boolean hasInitialDeviceList()", "public void setSelectedClient(Client selectedClient)", "public boolean isConnected()", "public int getConnectionAttemptCount()", "public int getRestartAttemptCount()", "private AndroidDebugBridge(String osLocation) throws InvalidParameterException", "private void checkAdbVersion()", "private boolean scanVersionLine(String line)", "boolean start()", "boolean stop()", "public boolean restart()", "public void deviceConnected(IDevice device);", "public void deviceDisconnected(IDevice device);", "public void deviceChanged(IDevice device, int changeMask);", "public void clientChanged(Client client, int changeMask);", "DeviceMonitor getDeviceMonitor()", "public void run()", "static Object getLock()", "public static void initAdbSocketAddr()", "private static int determineAndValidateAdbPort()"], "prime_var_dic": {"License": 1}}, {"idx": 346, "status": "update", "global_index": 5013, "project_name": "android_", "written_on": "2016-09-20 15:18:50", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 < ? extends TYPE_3 > VAR_1 , String VAR_2 , TYPE_4 [ ] VAR_3 ) { return new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 ) ; }", "comment": "Too long.", "tokenized_comment": ["Too", "<|s|>", "long", "."], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 < ? extends TYPE_3 > VAR_1 , String VAR_2 , TYPE_4 [ ] VAR_3 ) { return new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 ) ; }", "our_target": "    public DescribableStatement createTest(\n            Class<? extends TestCase> testClass, String methodName, Annotation[] annotations) {\n", "our_code": "<|startfocus|>\n    public DescribableStatement createTest(Class<? extends TestCase> testClass, String methodName, Annotation[] annotations) {\n<|endfocus|>\n        return new RunTestCaseStatement(testClass, methodName, annotations);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Describable", "Statement", "<|s|>", "create", "Test", "(", "Class", "<", "?", "<|s|>", "extends", "<|s|>", "Test", "Case", ">", "<|s|>", "test", "Class", ",", "<|s|>", "String", "<|s|>", "method", "Name", ",", "<|s|>", "Annotation", "[", "]", "<|s|>", "annotations", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "Run", "Test", "Case", "Statement", "(", "test", "Class", ",", "<|s|>", "method", "Name", ",", "<|s|>", "annotations", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 74, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4810", "comment_id": "f050a71d_484cff26", "class_list": ["overrides", "TestCaseRunnerFactory", "RunTestCaseStatement", "just", "ThrowingStatement"], "func_list": ["public TestCaseRunnerFactory(RunnerParams runnerParams)", "public boolean eagerClassValidation()", "public DescribableStatement createTest(Class<? extends TestCase> testClass, String methodName, Annotation[] annotations)", "public DescribableStatement createFailingTest(", "public Runner createSuite(", "public RunTestCaseStatement(", "public ThrowingStatement(Description description, Throwable throwable)", "public DescribableStatement createFailingTest(", "public Runner createSuite("], "prime_var_dic": {}}, {"idx": 79564, "status": "update", "global_index": 21737, "project_name": "android_", "written_on": "2013-12-30 23:23:43", "tufano_target": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( TYPE_2 . message ( STRING_2 , VAR_1 ) ) ; }", "comment": "Use colon rather than semi colon here", "tokenized_comment": ["Use", "<|s|>", "colon", "<|s|>", "rather", "<|s|>", "than", "<|s|>", "semi", "<|s|>", "colon", "<|s|>", "here"], "tufano_code": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( STRING_1 + VAR_1 ) ; }", "our_target": "    showError(AndroidBundle.message(\"android.ddms.actions.dump.hprof.error.unsupported\", remoteFilePath));\n", "our_code": "  public void onSuccess(String remoteFilePath, Client client) {\n    // TODO: older devices don't stream back the heap dtaa. Instead they save results on the sdcard.\n    // We don't support this yet.\n<|startfocus|>\n    showError(\"Heap dump; Older devices aren't supported yet. Please manually retrieve the file from the device using\\n$ adb pull \" +\n              remoteFilePath);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Success", "(", "String", "<|s|>", "remote", "File", "Path", ",", "<|s|>", "Client", "<|s|>", "client", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "older", "<|s|>", "devices", "<|s|>", "don", "'", "t", "<|s|>", "stream", "<|s|>", "back", "<|s|>", "the", "<|s|>", "heap", "<|s|>", "dtaa", ".", "<|s|>", "Instead", "<|s|>", "they", "<|s|>", "save", "<|s|>", "results", "<|s|>", "on", "<|s|>", "the", "<|s|>", "sdcard", ".", "<|nl|>", "<|4-s|>", "//", "<|s|>", "We", "<|s|>", "don", "'", "t", "<|s|>", "support", "<|s|>", "this", "<|s|>", "yet", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "show", "Error", "(", "\"", "Heap", "<|s|>", "dump", ";", "<|s|>", "Older", "<|s|>", "devices", "<|s|>", "aren", "'", "t", "<|s|>", "supported", "<|s|>", "yet", ".", "<|s|>", "Please", "<|s|>", "manually", "<|s|>", "retrieve", "<|s|>", "the", "<|s|>", "file", "<|s|>", "from", "<|s|>", "the", "<|s|>", "device", "<|s|>", "using", "\\", "n", "$", "<|s|>", "adb", "<|s|>", "pull", "<|s|>", "\"", "<|s|>", "+", "<|nl|>", "<|12-s|>", "<|2-s|>", "remote", "File", "Path", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 61, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_157", "comment_id": "8dec497b_478ce21d", "class_list": ["SaveHprofHandler", "SaveAndRunHprofConvTask"], "func_list": ["public SaveHprofHandler(@NotNull Project project)", "public void onSuccess(String remoteFilePath, Client client)", "public void run()", "public void onEndFailure(Client client, final String message)", "private void showError(final String message)", "public SaveAndRunHprofConvTask(@Nullable Project project, @NotNull File destination, boolean runHprofConv, @NotNull byte[] data)", "public void onTextAvailable(ProcessEvent event, Key outputType)", "public void onEndFailure(Client client, final String message)", "private void showError(final String message)", "public void run()"], "prime_var_dic": {}}, {"idx": 23412, "status": "update", "global_index": 2146, "project_name": "android_", "written_on": "2017-01-27 07:35:12", "tufano_target": "private VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = VAR_2 . METHOD_1 ( ) ; int VAR_4 = VAR_2 . METHOD_2 ( ) ; VAR_5 = VAR_2 . METHOD_4 ( ) ; VAR_6 = VAR_2 . METHOD_2 ( ) ; return ; }", "comment": "So it works ?", "tokenized_comment": ["So", "<|s|>", "it", "<|s|>", "works", "<|s|>", "?"], "tufano_code": "private VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = VAR_2 . METHOD_1 ( ) ; int VAR_4 = VAR_2 . METHOD_2 ( ) ; VAR_5 = new byte [ VAR_4 ] ; VAR_2 . METHOD_3 ( VAR_5 ) ; VAR_6 = VAR_2 . METHOD_2 ( ) ; return ; }", "our_target": "        mKey = in.createByteArray();\n", "our_code": "    private IpSecAlgorithm(Parcel in) {\n        mAlgorithm = in.readString();\n        int len = in.readInt();\n<|startfocus|>\n        mKey = new byte[len];\n        in.readByteArray(mKey);\n<|endfocus|>\n        mTruncLenBits = in.readInt();\n        return;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Ip", "Sec", "Algorithm", "(", "Parcel", "<|s|>", "in", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Algorithm", "<|s|>", "=", "<|s|>", "in", ".", "read", "String", "(", ");", "<|nl|>", "<|8-s|>", "int", "<|s|>", "len", "<|s|>", "=", "<|s|>", "in", ".", "read", "Int", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Key", "<|s|>", "=", "<|s|>", "new", "<|s|>", "byte", "[", "len", "];", "<|nl|>", "<|8-s|>", "in", ".", "read", "Byte", "Array", "(", "m", "Key", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Trunc", "Len", "Bits", "<|s|>", "=", "<|s|>", "in", ".", "read", "Int", "(", ");", "<|nl|>", "<|8-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 70, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1361", "comment_id": "dd9e5888_a6ed0448", "class_list": ["IpSecAlgorithm"], "func_list": ["public IpSecAlgorithm(String algorithm, byte[] key)", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public IpSecAlgorithm createFromParcel(Parcel in)", "public IpSecAlgorithm[] newArray(int size)", "private IpSecAlgorithm(Parcel in)"], "prime_var_dic": {"implements": 1, "mAlgorithm": 1, "mTruncLenBits": 1, "Parcelable": 1}}, {"idx": 13974, "status": "update", "global_index": 14135, "project_name": "android_", "written_on": "2014-03-25 23:46:14", "tufano_target": "void METHOD_1 ( ) { int VAR_1 ; VAR_1 = VAR_2 + VAR_3 + VAR_4 ; VAR_5 . METHOD_2 ( VAR_6 , STRING_1 , VAR_1 , VAR_7 , VAR_8 . METHOD_3 ( VAR_9 ) ) ; }", "comment": "I think we can get by with package here not public.", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "we", "<|s|>", "can", "<|s|>", "get", "<|s|>", "by", "<|s|>", "with", "<|s|>", "package", "<|s|>", "here", "<|s|>", "not", "<|s|>", "public", "."], "tufano_code": "public void METHOD_1 ( ) { int VAR_1 ; VAR_1 = VAR_2 + VAR_3 + VAR_4 ; VAR_5 . METHOD_2 ( VAR_6 , STRING_1 , VAR_1 , VAR_7 , VAR_8 . METHOD_3 ( VAR_9 ) ) ; }", "our_target": "    void queryFdn() {\n", "our_code": "<|startfocus|>\n    public void queryFdn() {\n<|endfocus|>\n        //This shouldn't change run-time. So needs to be called only once.\n        int serviceClassX;\n\n        serviceClassX = CommandsInterface.SERVICE_CLASS_VOICE +\n                        CommandsInterface.SERVICE_CLASS_DATA +\n                        CommandsInterface.SERVICE_CLASS_FAX;\n        mCi.queryFacilityLockForApp (\n                CommandsInterface.CB_FACILITY_BA_FD, \"\", serviceClassX,\n                mAid, mHandler.obtainMessage(EVENT_QUERY_FACILITY_FDN_DONE));\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "query", "Fdn", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "This", "<|s|>", "shouldn", "'", "t", "<|s|>", "change", "<|s|>", "run", "-", "time", ".", "<|s|>", "So", "<|s|>", "needs", "<|s|>", "to", "<|s|>", "be", "<|s|>", "called", "<|s|>", "only", "<|s|>", "once", ".", "<|nl|>", "<|8-s|>", "int", "<|s|>", "service", "Class", "X", ";", "<|nl|>", "<|nl|>", "<|8-s|>", "service", "Class", "X", "<|s|>", "=", "<|s|>", "Commands", "Interface", ".", "SERVICE", "_", "CLASS", "_", "VOICE", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "Commands", "Interface", ".", "SERVICE", "_", "CLASS", "_", "DATA", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "Commands", "Interface", ".", "SERVICE", "_", "CLASS", "_", "FAX", ";", "<|nl|>", "<|8-s|>", "m", "Ci", ".", "query", "Facility", "Lock", "For", "App", "<|s|>", "(", "<|nl|>", "<|16-s|>", "Commands", "Interface", ".", "CB", "_", "FACILITY", "_", "BA", "_", "FD", ",", "<|s|>", "\"", "\"", ",", "<|s|>", "service", "Class", "X", ",", "<|nl|>", "<|16-s|>", "m", "Aid", ",", "<|s|>", "m", "Handler", ".", "obtain", "Message", "(", "EVENT", "_", "QUERY", "_", "FACILITY", "_", "FDN", "_", "DONE", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 195, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4707", "comment_id": "1c23318f_0e1cafc5", "class_list": ["UiccCardApplication"], "func_list": ["void update (IccCardApplicationStatus as, Context c, CommandsInterface ci)", "void dispose()", "private IccRecords createIccRecords(AppType type, Context c, CommandsInterface ci)", "private IccFileHandler createIccFileHandler(AppType type)", "public void queryFdn()", "private void onQueryFdnEnabled(AsyncResult ar)", "private void onChangeFdnDone(AsyncResult ar)", "private void queryPin1State()", "private void onQueryFacilityLock(AsyncResult ar)", "private void onChangeFacilityLock(AsyncResult ar)", "private int parsePinPukErrorResult(AsyncResult ar)", "public void handleMessage(Message msg)", "public void registerForReady(Handler h, int what, Object obj)", "public void unregisterForReady(Handler h)", "public void registerForLocked(Handler h, int what, Object obj)", "public void unregisterForLocked(Handler h)", "public void registerForNetworkLocked(Handler h, int what, Object obj)", "public void unregisterForNetworkLocked(Handler h)", "private void notifyReadyRegistrantsIfNeeded(Registrant r)", "private void notifyPinLockedRegistrantsIfNeeded(Registrant r)", "private void notifyNetworkLockedRegistrantsIfNeeded(Registrant r)", "public AppState getState()", "public AppType getType()", "public PersoSubState getPersoSubState()", "public String getAid()", "public PinState getPin1State()", "public IccFileHandler getIccFileHandler()", "public IccRecords getIccRecords()", "public void supplyPin (String pin, Message onComplete)", "public void supplyPuk (String puk, String newPin, Message onComplete)", "public void supplyPin2 (String pin2, Message onComplete)", "public void supplyPuk2 (String puk2, String newPin2, Message onComplete)", "public void supplyNetworkDepersonalization (String pin, Message onComplete)", "public boolean getIccLockEnabled()", "public boolean getIccFdnEnabled()", "public boolean getIccFdnAvailable()", "public void setIccLockEnabled (boolean enabled,", "public void setIccFdnEnabled (boolean enabled,", "public void changeIccLockPassword(String oldPassword, String newPassword,", "public void changeIccFdnPassword(String oldPassword, String newPassword,", "public boolean getIccPin2Blocked()", "public boolean getIccPuk2Blocked()", "private void log(String msg)", "private void loge(String msg)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {"String": 1, "boolean": 1, "int": 8, "is": 1, "held": 1, "an": 6, "locked": 1, "fdn": 1, "if": 1}}, {"idx": 85983, "status": "update", "global_index": 8558, "project_name": "android_", "written_on": "2015-07-06 14:26:56", "tufano_target": "public void METHOD_6 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( METHOD_4 ( VAR_3 ) . METHOD_5 ( VAR_1 ) ) ; }", "comment": "testWithInputType_ReturnsFalseIf_IncorrectInput", "tokenized_comment": ["test", "With", "Input", "Type", "_", "Returns", "False", "If", "_", "Incorrect", "Input"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( METHOD_4 ( VAR_3 ) . METHOD_5 ( VAR_1 ) ) ; }", "our_target": "  public void testWithInputType_ReturnsFalseIf_IncorrectInput() {\n", "our_code": "<|startfocus|>\n  public void testWithInputTypeReturnsFalseIfIncorrectInput() {\n<|endfocus|>\n    EditText editText = new EditText(context);\n    editText.setInputType(InputType.TYPE_CLASS_NUMBER);\n    assertFalse(withInputType(InputType.TYPE_CLASS_TEXT).matches(editText));\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "test", "With", "Input", "Type", "Returns", "False", "If", "Incorrect", "Input", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Edit", "Text", "<|s|>", "edit", "Text", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Edit", "Text", "(", "context", ");", "<|nl|>", "<|4-s|>", "edit", "Text", ".", "set", "Input", "Type", "(", "Input", "Type", ".", "TYPE", "_", "CLASS", "_", "NUMBER", ");", "<|nl|>", "<|4-s|>", "assert", "False", "(", "with", "Input", "Type", "(", "Input", "Type", ".", "TYPE", "_", "CLASS", "_", "TEXT", ")", ".", "matches", "(", "edit", "Text", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 626, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1983", "comment_id": "13b8a53c_36bd6023", "class_list": ["ViewMatchersTest"], "func_list": ["public void testIsAssignableFrom_notAnInstance()", "public void testIsAssignableFrom_plainView()", "public void testIsAssignableFrom_superclass()", "public void testWithContentDescriptionCharSequence()", "public void testWithContentDescriptionNull()", "public void testHasContentDescription()", "public void testWithContentDescriptionString()", "public void testWithContentDescriptionFromResourceId()", "public void testWithId()", "public void testWithId_describeWithNoResourceLookup()", "public void testWithId_describeWithFailedResourceLookup()", "public void testWithId_describeWithResourceLookup()", "public void testWithTagNull()", "public void testWithTagObject()", "public void testWithTagKey()", "public void testWithTagKeyObject()", "public void testWithTextNull()", "public void testCheckBoxMatchers()", "public boolean isChecked()  return true; }", "public void setChecked(boolean ignored) }", "public void toggle() }", "public void testWithTextString()", "public void testHasDescendant()", "public void testIsDescendantOfA()", "public void testIsVisible()", "public void testIsInvisible()", "public void testIsGone()", "public void testIsClickable()", "public void testIsEnabled()", "public void testIsFocusable()", "public void testIsSelected()", "public void testWithTextResourceId()", "public void testWithTextResourceId_charSequence()", "public void testWithHintString()", "public void testWithHintResourceId()", "public void testWithHintResourceId_charSequence()", "public void testWithParent()", "public void testWithChild()", "public void testIsRootView()", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "public void testHasSibling()", "public void testHasImeAction()", "public void testHasImeActionNoInputConnection()", "public void testSupportsInputMethods()", "public void testHasLinks()", "public void testWithSpinnerTextResourceId()", "public void testWithSpinnerTextString()", "public void testWithSpinnerTextNull()", "public void testWithInputTypeReturnsIfCorrectInput()", "public void testWithInputTypeReturnsFalseIfIncorrectInput()", "public void testWithInputTypeShouldNotCrashIfInputTypeIsNotRecognized()"], "prime_var_dic": {"int": 1}}, {"idx": 22373, "status": "update", "global_index": 11119, "project_name": "android_", "written_on": "2012-06-12 19:23:26", "tufano_target": "public boolean METHOD_5 ( ) { return VAR_2 != null ? VAR_2 . METHOD_3 ( ) . METHOD_6 ( ) : false ; }", "comment": "isIccCardValid", "tokenized_comment": ["is", "Icc", "Card", "Valid"], "tufano_code": "public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) { return VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; } else { return false ; } }", "our_target": "    public boolean isIccCardValid() {\n        return mIccCardStatus != null ? mIccCardStatus.getCardState().isCardValid() : false;\n", "our_code": "<|startfocus|>\n    public boolean isIccInvalidCard() {\n        if (mPhone.getPhoneName().equals(\"GSM\")) {\n            return mIccCardStatus.getCardState().isCardInvalid();\n        } else {\n            // TODO: Make work with a CDMA device with a RUIM card.\n            return false;\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Icc", "Invalid", "Card", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Phone", ".", "get", "Phone", "Name", "(", ")", ".", "equals", "(", "\"", "GSM", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "m", "Icc", "Card", "Status", ".", "get", "Card", "State", "(", ")", ".", "is", "Card", "Invalid", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "Make", "<|s|>", "work", "<|s|>", "with", "<|s|>", "a", "<|s|>", "CDMA", "<|s|>", "device", "<|s|>", "with", "<|s|>", "a", "<|s|>", "RUIM", "<|s|>", "card", ".", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 837, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4948", "comment_id": "AAAGe3%2F%2F%2Fiw%3D", "class_list": ["IccCard"], "func_list": ["public boolean isPinLocked()", "public boolean iccCardExist()", "public State getState()", "public IccCard(PhoneBase phone, String logTag, Boolean dbg)", "public void dispose()", "protected void finalize()", "public void registerForAbsent(Handler h, int what, Object obj)", "public void unregisterForAbsent(Handler h)", "public void registerForNetworkLocked(Handler h, int what, Object obj)", "public void unregisterForNetworkLocked(Handler h)", "public void registerForLocked(Handler h, int what, Object obj)", "public void unregisterForLocked(Handler h)", "public void supplyPin (String pin, Message onComplete)", "public void supplyPuk (String puk, String newPin, Message onComplete)", "public void supplyPin2 (String pin2, Message onComplete)", "public void supplyPuk2 (String puk2, String newPin2, Message onComplete)", "public void supplyNetworkDepersonalization (String pin, Message onComplete)", "public boolean getIccLockEnabled()", "public boolean getIccFdnEnabled()", "public void setIccLockEnabled (boolean enabled,", "public void setIccFdnEnabled (boolean enabled,", "public void changeIccLockPassword(String oldPassword, String newPassword,", "public void changeIccFdnPassword(String oldPassword, String newPassword,", "protected void updateStateProperty()", "private void getIccCardStatusDone(AsyncResult ar)", "private void handleIccCardStatus(IccCardStatus newCardStatus)", "private void onIccSwap(boolean isAdded)", "public void onClick(DialogInterface dialog, int which)", "private void onQueryFdnEnabled(AsyncResult ar)", "private void onQueryFacilityLock(AsyncResult ar)", "public void broadcastIccStateChangedIntent(String value, String reason)", "public void handleMessage(Message msg)", "public State getIccCardState()", "private State getAppState(int appIndex)", "private State getConsolidatedState(State left, State right, State preferredState)", "public boolean isApplicationOnIcc(IccCardApplication.AppType type)", "public boolean hasIccCard()", "private void log(String msg)", "public boolean isIccInvalidCard()"], "prime_var_dic": {"IccCard": 1, "to": 2, "when": 1, "String": 12, "is": 1, "int": 14, "an": 5, "locked": 1, "fdn": 1, "Android": 1}}, {"idx": 90461, "status": "update", "global_index": 21986, "project_name": "android_", "written_on": "2014-01-31 15:02:44", "tufano_target": "public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; METHOD_6 ( ) ; }", "comment": "that name is a bit too long I think; when writing unit tests it helps to use really long specific names for tests, but here I'd go with something like \"enforceExternalBuild\".", "tokenized_comment": ["that", "<|s|>", "name", "<|s|>", "is", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "too", "<|s|>", "long", "<|s|>", "I", "<|s|>", "think", ";", "<|s|>", "when", "<|s|>", "writing", "<|s|>", "unit", "<|s|>", "tests", "<|s|>", "it", "<|s|>", "helps", "<|s|>", "to", "<|s|>", "use", "<|s|>", "really", "<|s|>", "long", "<|s|>", "specific", "<|s|>", "names", "<|s|>", "for", "<|s|>", "tests", ",", "<|s|>", "but", "<|s|>", "here", "<|s|>", "I", "'", "d", "<|s|>", "go", "<|s|>", "with", "<|s|>", "something", "<|s|>", "like", "<|s|>", "\"", "enforce", "External", "Build", "\"", "."], "tufano_code": "public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; METHOD_6 ( ) ; }", "our_target": "    Projects.enforceExternalBuild(myProject);\n", "our_code": "  public void cleanUp() {\n    ensureAllModulesHaveSdk();\n<|startfocus|>\n    Projects.ensureExternalBuildIsEnabledForGradleProject(myProject);\n<|endfocus|>\n    AndroidGradleProjectComponent.getInstance(myProject).checkForSupportedModules();\n    generateSourcesOnly();\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "clean", "Up", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "ensure", "All", "Modules", "Have", "Sdk", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Projects", ".", "ensure", "External", "Build", "Is", "Enabled", "For", "Gradle", "Project", "(", "my", "Project", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Android", "Gradle", "Project", "Component", ".", "get", "Instance", "(", "my", "Project", ")", ".", "check", "For", "Supported", "Modules", "(", ");", "<|nl|>", "<|4-s|>", "generate", "Sources", "Only", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 46, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_400", "comment_id": "32d9fe6f_b1cb5a39", "class_list": ["ProjectStructureSanitizer"], "func_list": ["public static ProjectStructureSanitizer getInstance(@NotNull Project project)", "public ProjectStructureSanitizer(@NotNull Project project)", "public void cleanUp()", "private void ensureAllModulesHaveSdk()", "private void generateSourcesOnly()", "public void run()"], "prime_var_dic": {"Project": 1}}, {"idx": 84664, "status": "update", "global_index": 11362, "project_name": "android_", "written_on": "2014-12-16 15:22:20", "tufano_target": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; } return true ; }", "comment": "Unused.", "tokenized_comment": ["Unused", "."], "tufano_code": "private static boolean METHOD_1 ( String name , TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; } return true ; }", "our_target": "    private static boolean addClassToDex(ClassDefItem clazz) {\n", "our_code": "<|startfocus|>\n    private static boolean addClassToDex(String name, ClassDefItem clazz) {\n<|endfocus|>\n        synchronized (outputDex) {\n            outputDex.add(clazz);\n        }\n        return true;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "add", "Class", "To", "Dex", "(", "String", "<|s|>", "name", ",", "<|s|>", "Class", "Def", "Item", "<|s|>", "clazz", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "output", "Dex", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "output", "Dex", ".", "add", "(", "clazz", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 754, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1696", "comment_id": "211e1c5a_37d47252", "class_list": ["for", "file", "Main", "(java.*", "in", "translation.", "files", "is", "file,", "files.", "or", "it", "name", "name", "NotFilter", "MainDexListFilter", "BestEffortMainDexListFilter", "used", "StopProcessing", "Arguments", "file", "files", "ArgumentsParser", "to", "ParallelProcessor", "for", "FileBytesConsumer", "to", "bytes.", "ClassParserTask", "used", "is", "is", "DirectClassFileConsumer", "will", "will", "to", "to", "to", "ClassTranslatorTask", "used", "is", "ClassDefItemConsumer", "to", "DexWriter"], "func_list": ["private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private ParallelProcessor(ClassPathOpener classPathOpener)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private static void updateStatus(boolean res)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private ClassParserTask(String name, byte[] bytes)", "private Main()", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private ClassTranslatorTask(String name, byte[] bytes,", "private Main()", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private Main()", "public static String getTooManyIdsErrorMessage()", "private static String getDexFileName(int i)", "private static boolean processAllFiles()", "private static void createDexFile()", "private static void processOne(String pathname, FileNameFilter filter)", "private static void updateStatus(boolean res)", "private static boolean processFileBytes(String name, long lastModified, byte[] bytes)", "private static boolean processClass(String name, byte[] bytes)", "private static DirectClassFile parseClass(String name, byte[] bytes)", "private static ClassDefItem translateClass(String name, byte[] bytes,", "private static boolean addClassToDex(String name, ClassDefItem clazz)", "private static void checkClassName(String name)", "private static byte[] writeDex(DexFile outputDex)", "private static boolean createJar(String fileName)", "private static String fixPath(String path)", "private static void dumpMethod(DexFile dex, String fqName,", "private NotFilter(FileNameFilter filter)", "public boolean accept(String path)", "public BestEffortMainDexListFilter()", "private static String getSimpleName(String path)", "public ArgumentsParser(String[] arguments)", "public String getCurrent()", "public String getLastValue()", "public boolean getNext()", "private boolean getNextValue()", "public String[] getRemaining()", "public boolean isArg(String prefix)", "public void parse(String[] args)", "private void makeOptionsObjects()", "private ParallelProcessor(ClassPathOpener classPathOpener)", "public void onException(Exception ex)", "public void onProcessArchiveStart(File file)", "private ClassParserTask(String name, byte[] bytes)", "private DirectClassFileConsumer(String name, byte[] bytes,", "public Boolean call() throws Exception", "private ClassTranslatorTask(String name, byte[] bytes,", "public ClassDefItem call()", "private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,", "private DexWriter(DexFile outputDex)"], "prime_var_dic": {}}, {"idx": 78798, "status": "update", "global_index": 13777, "project_name": "android_", "written_on": "2015-01-08 17:11:14", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 < String , ? extends TYPE_3 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return METHOD_3 ( ) ; }", "comment": "addToEnvironment?", "tokenized_comment": ["add", "To", "Environment", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 < String , ? extends TYPE_3 > VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return ( TYPE_1 ) this ; }", "our_target": "        return thisAsT();\n", "our_code": "    public T addEnvironments(@NonNull Map<String, ? extends Object> map) {\n        mEnvironment.putAll(map);\n<|startfocus|>\n        //noinspection unchecked\n        return (T) this;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "T", "<|s|>", "add", "Environments", "(", "@", "Non", "Null", "<|s|>", "Map", "<", "String", ",", "<|s|>", "?", "<|s|>", "extends", "<|s|>", "Object", ">", "<|s|>", "map", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Environment", ".", "put", "All", "(", "map", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "noinspection", "<|s|>", "unchecked", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "T", ")", "<|s|>", "this", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 37, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3834", "comment_id": "eeb4f1df_3d2d9b84", "class_list": ["ProcessEnvBuilder<T"], "func_list": ["public T addEnvironments(@NonNull Map<String, ? extends Object> map)", "public T addEnvironments(@NonNull Map<String, ? extends Object> map)"], "prime_var_dic": {}}, {"idx": 68723, "status": "update", "global_index": 14591, "project_name": "android_", "written_on": "2014-03-19 19:24:52", "tufano_target": "public VAR_1 ( String VAR_2 , String VAR_3 ) { super ( VAR_3 , STRING_1 + VAR_3 , VAR_4 ) ; VAR_5 = VAR_2 ; VAR_6 = VAR_3 ; }", "comment": "probably don't need to wrap this line", "tokenized_comment": ["probably", "<|s|>", "don", "'", "t", "<|s|>", "need", "<|s|>", "to", "<|s|>", "wrap", "<|s|>", "this", "<|s|>", "line"], "tufano_code": "public VAR_1 ( String VAR_2 , String VAR_3 ) { super ( VAR_3 , STRING_1 + VAR_3 , VAR_4 ) ; VAR_5 = VAR_2 ; VAR_6 = VAR_3 ; }", "our_target": "    super(templateName, \"Create a new \" + templateName, AndroidIcons.Android);\n", "our_code": "  public NewAndroidComponentAction(@NotNull String templateCategory, @NotNull String templateName) {\n<|startfocus|>\n    super(templateName, \"Create a new \" + templateName,\n          AndroidIcons.Android);\n<|endfocus|>\n    myTemplateCategory = templateCategory;\n    myTemplateName = templateName;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "New", "Android", "Component", "Action", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "template", "Category", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "template", "Name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "template", "Name", ",", "<|s|>", "\"", "Create", "<|s|>", "a", "<|s|>", "new", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "template", "Name", ",", "<|nl|>", "<|8-s|>", "<|2-s|>", "Android", "Icons", ".", "Android", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Template", "Category", "<|s|>", "=", "<|s|>", "template", "Category", ";", "<|nl|>", "<|4-s|>", "my", "Template", "Name", "<|s|>", "=", "<|s|>", "template", "Name", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 49, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_110", "comment_id": "1cffb1b9_1f711b1f", "class_list": ["NewAndroidComponentAction"], "func_list": ["public NewAndroidComponentAction(@NotNull String templateCategory, @NotNull String templateName)", "public void update(AnActionEvent e)", "private static boolean isAvailable(DataContext dataContext)", "public void actionPerformed(AnActionEvent e)"], "prime_var_dic": {"myTemplateCategory": 1, "myTemplateName": 1}}, {"idx": 93106, "status": "update", "global_index": 16886, "project_name": "android_", "written_on": "2015-07-08 11:47:31", "tufano_target": "private TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) ; }", "comment": "please update it.", "tokenized_comment": ["please", "<|s|>", "update", "<|s|>", "it", "."], "tufano_code": "private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }", "our_target": "    return myConfiguration.getResourceResolver().getStyle(myStyleName, isFrameworkStyle);\n", "our_code": "  private StyleResourceValue getStyleResourceValue() {\n<|startfocus|>\n    return myStyleResourceValue;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "Style", "Resource", "Value", "<|s|>", "get", "Style", "Resource", "Value", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "my", "Style", "Resource", "Value", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 111, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_284", "comment_id": "18f28255_e6be5aad", "class_list": ["ThemeEditorStyle"], "func_list": ["public ThemeEditorStyle(final @NotNull Configuration configuration,", "public boolean isProjectStyle()", "private StyleResourceValue getStyleResourceValue()", "private List<ResourceItem> getStyleResourceItems()", "public void visitResourceFolder(@NotNull LocalResourceRepository resources, @NotNull String variantName, boolean isSourceSelected)", "private Module getModuleForAcquiringResources()", "public boolean isReadOnly()", "public String getQualifiedName()", "public String getName()", "private static Collection<FolderConfiguration> getFolderConfigurationsFromResourceItems(@NotNull Collection<ResourceItem> items)", "private static Collection<FolderConfiguration> getFolderConfigurationsFromResourceItems(@NotNull Collection<ResourceItem> items)", "public boolean hasItem(@Nullable EditedStyleItem item)", "public ThemeEditorStyle getParent()", "public Collection<ConfiguredElement<ThemeEditorStyle>> getAllParents(@NotNull ThemeResolver themeResolver)", "private XmlTag getValueTag(@NotNull XmlTag sourceTag, @NotNull final String attribute)", "public void visitElement(PsiElement element)", "private static Iterable<ResourceItem> filterStylesByApiLevel(final int minProjectApi, final int minAcceptableApi, @NotNull Iterable<ResourceItem> styleResourceItems)", "public boolean apply(@Nullable ResourceItem input)", "private static Iterable<ResourceItem> filterStylesByFolder(@NotNull Collection<FolderConfiguration> selectedFolders, @NotNull Iterable<ResourceItem> styleResourceItems)", "private static Iterable<XmlTag> getXmlTagsFromStyles(@NotNull final Project project, @NotNull Iterable<ResourceItem> styleResourceItems)", "public XmlTag apply(@Nullable ResourceItem input)", "private static PsiFile[] getPsiFilesFromXmlTags(@NotNull Iterable<XmlTag> stylesXmlTags)", "public PsiFile apply(@Nullable XmlTag input)", "public void setValue(@NotNull final String attribute, @NotNull final String value)", "protected void run()", "public void setParent(@NotNull final String newParent)", "public String toString()", "public boolean equals(Object obj)", "public int hashCode()", "public Configuration getConfiguration()", "public void removeAttribute(@NotNull final String attribute)", "public PsiElement getNamePsiElement()", "public Module getSourceModule()", "private static FolderConfiguration findAcceptableSourceFolderConfiguration(@NotNull Module module,", "public boolean isPublic()", "public boolean isFramework()", "public FolderConfiguration findBestConfiguration(@NotNull FolderConfiguration configuration)", "public Configurable apply(final FolderConfiguration input)", "public FolderConfiguration getConfiguration()"], "prime_var_dic": {"StyleResourceValue": 1, "Configuration": 1, "myProject": 1, "Module": 1, "current": 1, "style": 1, "ResourceItems": 1, "be": 1, "attribute": 3, "RANDOM": 1, "field": 1}}, {"idx": 12839, "status": "update", "global_index": 11084, "project_name": "android_", "written_on": "2015-06-15 16:14:36", "tufano_target": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 instanceof TYPE_2 || VAR_1 . getClass ( ) . METHOD_2 ( ) . equals ( STRING_1 ) ; }", "comment": "@NotNull/@Nullable missing", "tokenized_comment": ["@", "Not", "Null", "/", "@", "Nullable", "<|s|>", "missing"], "tufano_code": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 instanceof TYPE_2 || VAR_1 . getClass ( ) . METHOD_2 ( ) . equals ( STRING_1 ) ; }", "our_target": "  private static boolean isUnitTestConfiguration(@NotNull RunConfiguration runConfiguration) {\n", "our_code": "<|startfocus|>\n  private static boolean isUnitTestConfiguration(RunConfiguration runConfiguration) {\n<|endfocus|>\n    return runConfiguration instanceof JUnitConfiguration ||\n           // Avoid direct dependency on the TestNG plugin:\n           runConfiguration.getClass().getSimpleName().equals(\"TestNGConfiguration\");\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "is", "Unit", "Test", "Configuration", "(", "Run", "Configuration", "<|s|>", "run", "Configuration", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "run", "Configuration", "<|s|>", "instanceof", "<|s|>", "JUnit", "Configuration", "<|s|>", "||", "<|nl|>", "<|8-s|>", "<|2-s|>", "<|s|>", "//", "<|s|>", "Avoid", "<|s|>", "direct", "<|s|>", "dependency", "<|s|>", "on", "<|s|>", "the", "<|s|>", "Test", "NG", "<|s|>", "plugin", ":", "<|nl|>", "<|8-s|>", "<|2-s|>", "<|s|>", "run", "Configuration", ".", "get", "Class", "(", ")", ".", "get", "Simple", "Name", "(", ")", ".", "equals", "(", "\"", "Test", "NGConfiguration", "\"", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 133, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_405", "comment_id": "597cfc56_485bf3cc", "class_list": ["MakeBeforeRunTaskProvider"], "func_list": ["public MakeBeforeRunTaskProvider(@NotNull Project project)", "public Key<MakeBeforeRunTask> getId()", "public Icon getIcon()", "public Icon getTaskIcon(MakeBeforeRunTask task)", "public String getName()", "public String getDescription(MakeBeforeRunTask task)", "public boolean isConfigurable()", "public MakeBeforeRunTask createTask(RunConfiguration runConfiguration)", "private static boolean configurationTypeIsSupported(RunConfiguration runConfiguration)", "private static boolean isUnitTestConfiguration(RunConfiguration runConfiguration)", "public boolean configureTask(RunConfiguration runConfiguration, MakeBeforeRunTask task)", "private List<String> createAvailableTasks()", "public boolean canExecuteTask(RunConfiguration configuration, MakeBeforeRunTask task)", "public boolean executeTask(final DataContext context,", "public void syncFailed(@NotNull Project project, @NotNull String errorMessage)", "public void execute(@NotNull GradleInvocationResult result)", "public void run()", "private Module[] getAffectedModules(Module[] modules)", "private static TestCompileType getTestCompileType(@Nullable RunConfiguration runConfiguration)"], "prime_var_dic": {"Project": 1}}, {"idx": 81880, "status": "update", "global_index": 8497, "project_name": "android_", "written_on": "2015-06-29 14:41:38", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { this . VAR_3 = VAR_2 ; METHOD_1 ( ) ; }", "comment": "SImilar to my comment in the other suggestion, you could probably make this constant and use ImmutableMap.\nSince you have a large number of colors here, you'll probably need to use ImmutableMap.Builder to construct the attribute.", "tokenized_comment": ["SImilar", "<|s|>", "to", "<|s|>", "my", "<|s|>", "comment", "<|s|>", "in", "<|s|>", "the", "<|s|>", "other", "<|s|>", "suggestion", ",", "<|s|>", "you", "<|s|>", "could", "<|s|>", "probably", "<|s|>", "make", "<|s|>", "this", "<|s|>", "constant", "<|s|>", "and", "<|s|>", "use", "<|s|>", "Immutable", "Map", ".", "<|nl|>", "Since", "<|s|>", "you", "<|s|>", "have", "<|s|>", "a", "<|s|>", "large", "<|s|>", "number", "<|s|>", "of", "<|s|>", "colors", "<|s|>", "here", ",", "<|s|>", "you", "'", "ll", "<|s|>", "probably", "<|s|>", "need", "<|s|>", "to", "<|s|>", "use", "<|s|>", "Immutable", "Map", ".", "Builder", "<|s|>", "to", "<|s|>", "construct", "<|s|>", "the", "<|s|>", "attribute", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { this . VAR_2 = VAR_2 ; METHOD_1 ( ) ; }", "our_target": "    this.myPrimaryColor = primaryColor;\n", "our_code": "  public PrimaryDarkColorSuggestor(Color primaryColor) {\n<|startfocus|>\n    this.primaryColor = primaryColor;\n<|endfocus|>\n    initializeMap();\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Primary", "Dark", "Color", "Suggestor", "(", "Color", "<|s|>", "primary", "Color", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "this", ".", "primary", "Color", "<|s|>", "=", "<|s|>", "primary", "Color", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "initialize", "Map", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 27, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_297", "comment_id": "b367d930_151c1425", "class_list": ["PrimaryDarkColorSuggestor"], "func_list": ["public PrimaryDarkColorSuggestor(Color primaryColor)", "private static void initializeMap()"], "prime_var_dic": {"implements": 1}}, {"idx": 90092, "status": "update", "global_index": 21973, "project_name": "android_", "written_on": "2014-01-28 23:04:20", "tufano_target": "private long METHOD_1 ( ) { return VAR_4 ? VAR_2 . METHOD_2 ( ) : VAR_3 . METHOD_3 ( ) ; }", "comment": "since this is private it could just read myIsMerged directly", "tokenized_comment": ["since", "<|s|>", "this", "<|s|>", "is", "<|s|>", "private", "<|s|>", "it", "<|s|>", "could", "<|s|>", "just", "<|s|>", "read", "<|s|>", "my", "Is", "Merged", "<|s|>", "directly"], "tufano_code": "private long METHOD_1 ( boolean VAR_1 ) { return VAR_1 ? VAR_2 . METHOD_2 ( ) : VAR_3 . METHOD_3 ( ) ; }", "our_target": "  private long getLastModified() {\n    return myIsMerged ? myIoFile.lastModified() : myXmlFile.getModificationStamp();\n", "our_code": "<|startfocus|>\n  private long getLastModified(boolean isMerged) {\n    return isMerged ? myIoFile.lastModified() : myXmlFile.getModificationStamp();\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "long", "<|s|>", "get", "Last", "Modified", "(", "boolean", "<|s|>", "is", "Merged", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "return", "<|s|>", "is", "Merged", "<|s|>", "?", "<|s|>", "my", "Io", "File", ".", "last", "Modified", "(", ")", "<|s|>", ":", "<|s|>", "my", "Xml", "File", ".", "get", "Modification", "Stamp", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 110, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_463", "comment_id": "f2fa0681_bd76c0a9", "class_list": ["ManifestFile"], "func_list": ["private ManifestFile(@NotNull Module module, @NotNull VirtualFile file, boolean isMergedManifest)", "public static ManifestFile create(@NotNull Module module, boolean preferMergedManifest)", "private XmlFile parseManifest()", "public boolean refresh()", "private long getLastModified(boolean isMerged)", "public XmlFile getXmlFile()"], "prime_var_dic": {"myModule": 1, "myVFile": 1, "myIoFile": 1, "myIsMerged": 1}}, {"idx": 1542, "status": "update", "global_index": 3012, "project_name": "android_", "written_on": "2016-01-08 12:07:41", "tufano_target": "public void METHOD_2 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; }", "comment": "onForeground", "tokenized_comment": ["on", "Foreground"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; }", "our_target": "    public void onEnabledForegroundNfcFServiceChanged(ComponentName service) {\n        mT3tIdentifiersCache.onEnabledForegroundNfcFServiceChanged(service);\n        mHostNfcFEmulationManager.onEnabledForegroundNfcFServiceChanged(service);\n", "our_code": "<|startfocus|>\n    public void onPreferredForegroundNfcFServiceChanged(ComponentName service) {\n        mT3tIdentifiersCache.onPreferredForegroundNfcFServiceChanged(service);\n        mHostNfcFEmulationManager.onPreferredForegroundNfcFServiceChanged(service);\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Preferred", "Foreground", "Nfc", "FService", "Changed", "(", "Component", "Name", "<|s|>", "service", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "T", "3", "t", "Identifiers", "Cache", ".", "on", "Preferred", "Foreground", "Nfc", "FService", "Changed", "(", "service", ");", "<|nl|>", "<|8-s|>", "m", "Host", "Nfc", "FEmulation", "Manager", ".", "on", "Preferred", "Foreground", "Nfc", "FService", "Changed", "(", "service", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 567, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_4358", "comment_id": "6a5f3bcc_acf767b0", "class_list": ["CardEmulationManager", "implements", "CardEmulationInterface"], "func_list": ["public CardEmulationManager(Context context)", "public INfcCardEmulation getNfcCardEmulationInterface()", "public void onHostCardEmulationActivated(int type)", "public void onHostCardEmulationData(int type, byte[] data)", "public void onHostCardEmulationDeactivated(int type)", "public void onOffHostAidSelected()", "public void onUserSwitched(int userId)", "public void onNfcEnabled()", "public void onNfcDisabled()", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void onServicesUpdated(int userId, List<ApduServiceInfo> services)", "public void onNfcFServicesUpdated(int userId, List<NfcFServiceInfo> services)", "void verifyDefaults(int userId, List<ApduServiceInfo> services)", "ComponentName getDefaultServiceForCategory(int userId, String category,", "boolean setDefaultServiceForCategoryChecked(int userId, ComponentName service,", "boolean isServiceRegistered(int userId, ComponentName service)", "boolean isNfcFServiceInstalled(int userId, ComponentName service)", "public boolean packageHasPreferredService(String packageName)", "public boolean isDefaultServiceForCategory(int userId, ComponentName service,", "public void onPreferredPaymentServiceChanged(ComponentName service)", "public void onPreferredForegroundServiceChanged(ComponentName service)", "public void onPreferredForegroundNfcFServiceChanged(ComponentName service)", "public CardEmulationManager(Context context)", "public INfcCardEmulation getNfcCardEmulationInterface()", "public void onHostCardEmulationActivated(int type)", "public void onHostCardEmulationData(int type, byte[] data)", "public void onHostCardEmulationDeactivated(int type)", "public void onOffHostAidSelected()", "public void onUserSwitched(int userId)", "public void onNfcEnabled()", "public void onNfcDisabled()", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void onServicesUpdated(int userId, List<ApduServiceInfo> services)", "public void onNfcFServicesUpdated(int userId, List<NfcFServiceInfo> services)", "void verifyDefaults(int userId, List<ApduServiceInfo> services)", "ComponentName getDefaultServiceForCategory(int userId, String category,", "boolean setDefaultServiceForCategoryChecked(int userId, ComponentName service,", "boolean isServiceRegistered(int userId, ComponentName service)", "boolean isNfcFServiceInstalled(int userId, ComponentName service)", "public boolean packageHasPreferredService(String packageName)", "public boolean isDefaultServiceForCategory(int userId, ComponentName service,", "public void onPreferredPaymentServiceChanged(ComponentName service)", "public void onPreferredForegroundServiceChanged(ComponentName service)", "public void onPreferredForegroundNfcFServiceChanged(ComponentName service)", "public CardEmulationManager(Context context)"], "prime_var_dic": {}}, {"idx": 90758, "status": "update", "global_index": 11429, "project_name": "android_", "written_on": "2014-12-10 00:35:05", "tufano_target": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ! VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; METHOD_5 ( ) ; }", "comment": "Did you try it? (My comment to put them here was only a suggestion). If it works as expected with myChooserRunningDeviceRadioButton.setSelected(true); being there below that means that line 130 and 131 may be redundant, since the DeviceChooserListener is being notified even on startup.", "tokenized_comment": ["Did", "<|s|>", "you", "<|s|>", "try", "<|s|>", "it", "?", "<|s|>", "(", "My", "<|s|>", "comment", "<|s|>", "to", "<|s|>", "put", "<|s|>", "them", "<|s|>", "here", "<|s|>", "was", "<|s|>", "only", "<|s|>", "a", "<|s|>", "suggestion", ")", ".", "<|s|>", "If", "<|s|>", "it", "<|s|>", "works", "<|s|>", "as", "<|s|>", "expected", "<|s|>", "with", "<|s|>", "my", "Chooser", "Running", "Device", "Radio", "Button", ".", "set", "Selected", "(", "true", ");", "<|s|>", "being", "<|s|>", "there", "<|s|>", "below", "<|s|>", "that", "<|s|>", "means", "<|s|>", "that", "<|s|>", "line", "<|s|>", "130", "<|s|>", "and", "<|s|>", "131", "<|s|>", "may", "<|s|>", "be", "<|s|>", "redundant", ",", "<|s|>", "since", "<|s|>", "the", "<|s|>", "Device", "Chooser", "Listener", "<|s|>", "is", "<|s|>", "being", "<|s|>", "notified", "<|s|>", "even", "<|s|>", "on", "<|s|>", "startup", "."], "tufano_code": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ! VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; }", "our_target": "        updateEnabled();\n", "our_code": "      public void selectedDevicesChanged() {\n        myLaunchEmulatorRadioButton.setSelected(!myDeviceChooser.hasDevices());\n        myChooserRunningDeviceRadioButton.setSelected(myDeviceChooser.hasDevices());\n<|startfocus|>\n        updateOkButton();\n<|endfocus|>\n      }", "tokenized_code": ["<|4-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "selected", "Devices", "Changed", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "my", "Launch", "Emulator", "Radio", "Button", ".", "set", "Selected", "(", "!", "my", "Device", "Chooser", ".", "has", "Devices", "(", ")", ");", "<|nl|>", "<|8-s|>", "my", "Chooser", "Running", "Device", "Radio", "Button", ".", "set", "Selected", "(", "my", "Device", "Chooser", ".", "has", "Devices", "(", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "update", "Ok", "Button", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}"], "base_code_line_number": 86, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_760", "comment_id": "840c3679_2fcbc9b4", "class_list": ["ExtendedDeviceChooserDialog"], "func_list": ["public ExtendedDeviceChooserDialog(@NotNull final AndroidFacet facet,", "public void selectedDevicesChanged()", "public Module getModule()", "protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus)", "public void actionPerformed(ActionEvent e)", "private void updateOkButton()", "private void updateEnabled()", "public JComponent getPreferredFocusedComponent()", "protected void doOKAction()", "protected String getDimensionServiceKey()", "protected JComponent createCenterPanel()", "public IDevice[] getSelectedDevices()", "public String getSelectedAvd()", "public boolean isToLaunchEmulator()", "public boolean useSameDevicesAgain()"], "prime_var_dic": {"myProject": 1, "myDeviceChooser": 1, "myAvdCombo": 1}}, {"idx": 63677, "status": "update", "global_index": 6691, "project_name": "android_", "written_on": "2016-06-13 14:21:24", "tufano_target": "public static boolean METHOD_4 ( TYPE_1 expr ) { TYPE_2 VAR_1 = expr . METHOD_2 ( ) ; return ( VAR_1 instanceof TYPE_3 ) && ( ( ( TYPE_3 ) VAR_1 ) . METHOD_3 ( ) == expr ) ; }", "comment": "isAssigned?", "tokenized_comment": ["is", "Assigned", "?"], "tufano_code": "public static boolean METHOD_1 ( TYPE_1 expr ) { TYPE_2 VAR_1 = expr . METHOD_2 ( ) ; return ( VAR_1 instanceof TYPE_3 ) && ( ( ( TYPE_3 ) VAR_1 ) . METHOD_3 ( ) == expr ) ; }", "our_target": "  public static boolean isAssigned(@Nonnull JExpression expr) {\n", "our_code": "<|startfocus|>\n  public static boolean isInAssignmentPosition(@Nonnull JExpression expr) {\n<|endfocus|>\n    JNode parent = expr.getParent();\n    return (parent instanceof JAsgOperation) &&\n        (((JAsgOperation) parent).getLhs() == expr);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "is", "In", "Assignment", "Position", "(", "@", "Nonnull", "<|s|>", "JExpression", "<|s|>", "expr", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "JNode", "<|s|>", "parent", "<|s|>", "=", "<|s|>", "expr", ".", "get", "Parent", "(", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "(", "parent", "<|s|>", "instanceof", "<|s|>", "JAsg", "Operation", ")", "<|s|>", "&&", "<|nl|>", "<|8-s|>", "(", "(", "(", "JAsg", "Operation", ")", "<|s|>", "parent", ")", ".", "get", "Lhs", "(", ")", "<|s|>", "==", "<|s|>", "expr", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 48, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2416", "comment_id": "af75d8ba_f6613e25", "class_list": ["OptimizerUtils"], "func_list": ["public static boolean isConstructor(@Nonnull JMethod method)", "public static boolean isInAssignmentPosition(@Nonnull JExpression expr)", "public static boolean areSameValueLiterals(", "public static JValueLiteral cloneValueLiteral(@Nonnull JValueLiteral value)", "public static boolean isConstructorDelegation(", "private OptimizerUtils()"], "prime_var_dic": {"OptimizerUtils": 1}}, {"idx": 95469, "status": "update", "global_index": 17916, "project_name": "android_", "written_on": "2008-12-05 22:59:39", "tufano_target": "private boolean METHOD_1 ( ) { if ( ! TYPE_1 . get ( STRING_3 ) . equals ( STRING_2 ) ) { return false ; } return VAR_1 && VAR_2 ; }", "comment": "Name should be enable_google_location_features?\nWhy remove com.google?", "tokenized_comment": ["Name", "<|s|>", "should", "<|s|>", "be", "<|s|>", "enable", "_", "google", "_", "location", "_", "features", "?", "<|nl|>", "Why", "<|s|>", "remove", "<|s|>", "com", ".", "google", "?"], "tufano_code": "private boolean METHOD_1 ( ) { if ( ! TYPE_1 . get ( STRING_1 ) . equals ( STRING_2 ) ) { return false ; } return VAR_1 && VAR_2 ; }", "our_target": "        if (!SystemProperties.get(\"ro.com.google.locationfeatures\").equals(\"1\")) {\n", "our_code": "    private boolean isCollectionEnabled() {\n        // This class provides a Google-specific location feature, so it's enabled only\n        // when the system property ro.enable_google_location_feat is set.\n<|startfocus|>\n        if (!SystemProperties.get(\"ro.enable_google_location_feat\").equals(\"1\")) {\n<|endfocus|>\n            return false;\n        }\n        return mBatteryLevelIsHealthy && mNetworkProviderIsEnabled;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Collection", "Enabled", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "This", "<|s|>", "class", "<|s|>", "provides", "<|s|>", "a", "<|s|>", "Google", "-", "specific", "<|s|>", "location", "<|s|>", "feature", ",", "<|s|>", "so", "<|s|>", "it", "'", "s", "<|s|>", "enabled", "<|s|>", "only", "<|nl|>", "<|8-s|>", "//", "<|s|>", "when", "<|s|>", "the", "<|s|>", "system", "<|s|>", "property", "<|s|>", "ro", ".", "enable", "_", "google", "_", "location", "_", "feat", "<|s|>", "is", "<|s|>", "set", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "System", "Properties", ".", "get", "(", "\"", "ro", ".", "enable", "_", "google", "_", "location", "_", "feat", "\"", ")", ".", "equals", "(", "\"", "1", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Battery", "Level", "Is", "Healthy", "<|s|>", "&&", "<|s|>", "m", "Network", "Provider", "Is", "Enabled", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 360, "base_patch_number": 1, "changed_patch_number": 5, "code_file_name": "android_2945", "comment_id": "zbe8aac74b8994ee746f8217873caa1ff", "class_list": ["LocationCollector", "provides", "CellUploads"], "func_list": ["public LocationCollector(LocationMasfClient masfClient)", "public void updateNetworkProviderStatus(boolean enabled)", "public void updateBatteryState(int scale, int level, boolean plugged)", "private boolean isCollectionEnabled()", "private CellUploads mCellUploads = new CellUploads();", "private boolean contains(CellState cellState, Location loc)", "private void log(String string)", "public LocationCollector(LocationMasfClient masfClient)"], "prime_var_dic": {}}, {"idx": 16214, "status": "update", "global_index": 12147, "project_name": "android_", "written_on": "2014-08-04 23:43:29", "tufano_target": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; try { TYPE_1 . METHOD_4 ( VAR_2 ) ; } catch ( TYPE_2 VAR_3 ) { TYPE_3 . METHOD_5 ( VAR_4 , String . format ( STRING_1 ) , VAR_3 ) ; } }", "comment": "stopBatching? we should keep the operations symmetrical", "tokenized_comment": ["stop", "Batching", "?", "<|s|>", "we", "<|s|>", "should", "<|s|>", "keep", "<|s|>", "the", "<|s|>", "operations", "<|s|>", "symmetrical"], "tufano_code": "private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; }", "our_target": "        try {\n            Thread.sleep(TWO_SECOND_MILLIS);\n        } catch (InterruptedException e) {\n            Log.e(LOG_TAG, String.format(\"End of batching test was interrupted\"), e);\n        }\n\n", "our_code": "    private void stopDataCollection() {\n        mSensorManager.flush(this);\n<|startfocus|>\n        mSensorManager.unregisterListener(this);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "stop", "Data", "Collection", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Sensor", "Manager", ".", "flush", "(", "this", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Sensor", "Manager", ".", "unregister", "Listener", "(", "this", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 96, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_886", "comment_id": "3692db12_12b86dfe", "class_list": ["BatchingTestActivity", "SensorEventData"], "func_list": ["public SensorEventData(SensorEvent e)", "private void startBatching(int sensorType, String sensorName)", "private void stopDataCollection()", "private void analyzeData(int sensorType, String sensorName, boolean checkTimestamp)", "private void testSensorInBatchingMode(int sensorType, String sensorName, boolean checkTimestamp)", "protected void onCreate(Bundle savedInstanceState)", "public void onSensorChanged(SensorEvent sensorEvent)", "public void onAccuracyChanged(Sensor sensor, int accuracy)", "public void onFlushCompleted(Sensor sensor)", "public SensorEventData(SensorEvent e)"], "prime_var_dic": {}}, {"idx": 91492, "status": "update", "global_index": 4926, "project_name": "android_", "written_on": "2015-02-23 16:17:04", "tufano_target": "public String METHOD_1 ( String data ) { return data ; }", "comment": "JSR305", "tokenized_comment": ["JSR", "305"], "tufano_code": "public String METHOD_1 ( String data ) { return data ; }", "our_target": "  public String formatValue(@Nonnull String data) {\n", "our_code": "<|startfocus|>\n  public String formatValue(String data) {\n<|endfocus|>\n    return data;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "String", "<|s|>", "format", "Value", "(", "String", "<|s|>", "data", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "data", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 61, "base_patch_number": 15, "changed_patch_number": 16, "code_file_name": "android_3745", "comment_id": "688abe9e_bfa117b8", "class_list": ["StringValueCodec"], "func_list": ["public StringValueCodec(@Nonnull String usage)", "public String parseString(CodecContext context, String string)", "public String checkString(CodecContext context, String string)", "public String getUsage()", "public String formatValue(String data)", "public void checkValue(CodecContext context, String data)"], "prime_var_dic": {"implements": 1, "usage": 1}}, {"idx": 81548, "status": "update", "global_index": 13825, "project_name": "android_", "written_on": "2015-01-13 08:40:55", "tufano_target": "private static TYPE_1 METHOD_3 ( ) { try { return TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; } catch ( TYPE_2 VAR_1 ) { return null ; } }", "comment": "Rename getConvFile (same reason than above)", "tokenized_comment": ["Rename", "<|s|>", "get", "Conv", "File", "<|s|>", "(", "same", "<|s|>", "reason", "<|s|>", "than", "<|s|>", "above", ")"], "tufano_code": "private static TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; } catch ( TYPE_2 VAR_1 ) { return null ; } }", "our_target": "    private static File getConvFile() {\n", "our_code": "<|startfocus|>\n    private static File getConvFileName() {\n<|endfocus|>\n        try {\n            return File.createTempFile(\"test-130-hprof\", \"conv\");\n        } catch (Exception exc) {\n            return null;\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "static", "<|s|>", "File", "<|s|>", "get", "Conv", "File", "Name", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "File", ".", "create", "Temp", "File", "(", "\"", "test", "-", "130", "-", "hprof", "\"", ",", "<|s|>", "\"", "conv", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "exc", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 149, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_5012", "comment_id": "4ec7bdd5_8558624f", "class_list": ["Main", "});"], "func_list": ["private static boolean makeArray(int i)", "private static void fillArray(Object global[], Object local[], int i)", "public static void main(String[] args)", "private static File getHprofConf()", "private static File createDump()", "private static Method getDumpHprofDataMethod()", "private static File getDumpFileName()", "private static File getConvFileName()"], "prime_var_dic": {}}, {"idx": 93246, "status": "update", "global_index": 19745, "project_name": "android_", "written_on": "2012-09-07 16:36:07", "tufano_target": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { synchronized ( VAR_3 ) { if ( VAR_4 ) METHOD_2 ( STRING_2 ) ; VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }", "comment": "Maybe remove comment at least remove pin.", "tokenized_comment": ["Maybe", "<|s|>", "remove", "<|s|>", "comment", "<|s|>", "at", "<|s|>", "least", "<|s|>", "remove", "<|s|>", "pin", "."], "tufano_code": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { synchronized ( VAR_3 ) { if ( VAR_4 ) METHOD_2 ( STRING_1 + VAR_1 ) ; VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; } }", "our_target": "            if (DBG) log(\"supplyNetworkDepersonalization\");\n", "our_code": "    public void supplyNetworkDepersonalization (String pin, Message onComplete) {\n        synchronized (mLock) {\n<|startfocus|>\n            if (DBG) log(\"Network Despersonalization: \" + pin);\n<|endfocus|>\n            mCi.supplyNetworkDepersonalization(pin, onComplete);\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "supply", "Network", "Depersonalization", "<|s|>", "(", "String", "<|s|>", "pin", ",", "<|s|>", "Message", "<|s|>", "on", "Complete", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "DBG", ")", "<|s|>", "log", "(", "\"", "Network", "<|s|>", "Despersonalization", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "pin", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "m", "Ci", ".", "supply", "Network", "Depersonalization", "(", "pin", ",", "<|s|>", "on", "Complete", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 560, "base_patch_number": 21, "changed_patch_number": 22, "code_file_name": "android_4710", "comment_id": "AAAI9H%2F%2F%2Flk%3D", "class_list": ["UiccCardApplication"], "func_list": ["void update (IccCardApplicationStatus as, Context c, CommandsInterface ci)", "void dispose()", "private IccRecords createIccRecords(AppType type, Context c, CommandsInterface ci)", "private IccFileHandler createIccFileHandler(AppType type)", "private void queryFdn()", "private void onQueryFdnEnabled(AsyncResult ar)", "private void onChangeFdnDone(AsyncResult ar)", "private void queryPin1State()", "private void onQueryFacilityLock(AsyncResult ar)", "private void onChangeFacilityLock(AsyncResult ar)", "public void handleMessage(Message msg)", "public void registerForReady(Handler h, int what, Object obj)", "public void unregisterForReady(Handler h)", "public void registerForLocked(Handler h, int what, Object obj)", "public void unregisterForLocked(Handler h)", "public void registerForNetworkLocked(Handler h, int what, Object obj)", "public void unregisterForNetworkLocked(Handler h)", "private void notifyReadyRegistrantsIfNeeded(Registrant r)", "private void notifyPinLockedRegistrantsIfNeeded(Registrant r)", "private void notifyNetworkLockedRegistrantsIfNeeded(Registrant r)", "public AppState getState()", "public AppType getType()", "public PersoSubState getPersoSubState()", "public String getAid()", "public PinState getPin1State()", "public IccFileHandler getIccFileHandler()", "public IccRecords getIccRecords()", "public void supplyPin (String pin, Message onComplete)", "public void supplyPuk (String puk, String newPin, Message onComplete)", "public void supplyPin2 (String pin2, Message onComplete)", "public void supplyPuk2 (String puk2, String newPin2, Message onComplete)", "public void supplyNetworkDepersonalization (String pin, Message onComplete)", "public boolean getIccLockEnabled()", "public boolean getIccFdnEnabled()", "public void setIccLockEnabled (boolean enabled,", "public void setIccFdnEnabled (boolean enabled,", "public void changeIccLockPassword(String oldPassword, String newPassword,", "public void changeIccFdnPassword(String oldPassword, String newPassword,", "private void log(String msg)", "private void loge(String msg)"], "prime_var_dic": {"String": 1, "boolean": 1, "int": 4, "held": 1, "an": 5, "locked": 1, "fdn": 1}}, {"idx": 12411, "status": "update", "global_index": 21110, "project_name": "android_", "written_on": "2013-09-13 21:06:57", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_2 , STRING_1 , VAR_5 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_1 ( ) ; } }", "comment": "140 cols", "tokenized_comment": ["140", "<|s|>", "cols"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_2 , STRING_1 , VAR_3 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_1 ( ) ; } }", "our_target": "            AndroidAddStringResourceAction.doInvoke(myFixture.getProject(), myFixture.getEditor(), editedPsiFile, \"hello\", DIMEN);\n", "our_code": "          public void run() {\n<|startfocus|>\n            AndroidAddStringResourceAction.doInvoke(myFixture.getProject(), myFixture.getEditor(), editedPsiFile, \"hello\", ResourceType.DIMEN);\n<|endfocus|>\n            if (invokeAfterTemplate != null) {\n              invokeAfterTemplate.run();\n            }\n          }", "tokenized_code": ["<|8-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "Android", "Add", "String", "Resource", "Action", ".", "do", "Invoke", "(", "my", "Fixture", ".", "get", "Project", "(", ")", ",", "<|s|>", "my", "Fixture", ".", "get", "Editor", "(", ")", ",", "<|s|>", "edited", "Psi", "File", ",", "<|s|>", "\"", "hello", "\"", ",", "<|s|>", "Resource", "Type", ".", "DIMEN", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "invoke", "After", "Template", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "<|2-s|>", "invoke", "After", "Template", ".", "run", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "<|2-s|>", "}"], "base_code_line_number": 82, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_832", "comment_id": "c7eff930_9d89e3ec", "class_list": ["AndroidExtractDimensionActionTest"], "func_list": ["public AndroidExtractDimensionActionTest()", "public void testFromJava()", "private void doExtractAndCheckStringsXml(@NotNull String stringsXml,", "public void run()"], "prime_var_dic": {"String": 1}}, {"idx": 94073, "status": "update", "global_index": 2824, "project_name": "android_", "written_on": "2017-03-16 06:18:22", "tufano_target": "private boolean METHOD_1 ( ) { try { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_5 ( STRING_1 , VAR_5 ) ; return false ; } return true ; }", "comment": "[nit]\n\nIf you felt ambitious, you could in this change:\n\n   [1] airlift IPv6TetheringInterfaceServices' RFC7421_IP_PREFIX_LENGTH definition out of its file and into android.net.util.NetworkConstants (with s/IP/IPV6/ in the anem)\n\n   [2] import and use NetworkConstants.RFC7421_IPV6_PREFIX_LENGTH here.", "tokenized_comment": ["[", "nit", "]", "<|nl|>", "<|nl|>", "If", "<|s|>", "you", "<|s|>", "felt", "<|s|>", "ambitious", ",", "<|s|>", "you", "<|s|>", "could", "<|s|>", "in", "<|s|>", "this", "<|s|>", "change", ":", "<|nl|>", "<|nl|>", "<|2-s|>", "<|s|>", "[", "1", "]", "<|s|>", "airlift", "<|s|>", "IPv", "6", "Tethering", "Interface", "Services", "'", "<|s|>", "RFC", "7421", "_", "IP", "_", "PREFIX", "_", "LENGTH", "<|s|>", "definition", "<|s|>", "out", "<|s|>", "of", "<|s|>", "its", "<|s|>", "file", "<|s|>", "and", "<|s|>", "into", "<|s|>", "android", ".", "net", ".", "util", ".", "Network", "Constants", "<|s|>", "(", "with", "<|s|>", "s", "/", "IP", "/", "IPV", "6", "/", "<|s|>", "in", "<|s|>", "the", "<|s|>", "anem", ")", "<|nl|>", "<|nl|>", "<|2-s|>", "<|s|>", "[", "2", "]", "<|s|>", "import", "<|s|>", "and", "<|s|>", "use", "<|s|>", "Network", "Constants", ".", "RFC", "7421", "_", "IPV", "6", "_", "PREFIX", "_", "LENGTH", "<|s|>", "here", "."], "tufano_code": "private boolean METHOD_1 ( ) { try { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } catch ( TYPE_1 | TYPE_2 | TYPE_3 VAR_4 ) { METHOD_5 ( STRING_1 , VAR_4 ) ; return false ; } return true ; }", "our_target": "        } catch (RemoteException re) {\n            logError(\"Unable to change interface settings: %s\", re);\n", "our_code": "    private boolean startIPv6() {\n        try {\n            enableInterfaceIpv6PrivacyExtensions();\n            setInterfaceIpv6RaRtInfoMaxPlen(ACCEPT_RA_RT_INFO_MAX_PLEN);\n            mNwService.enableIpv6(mInterfaceName);\n<|startfocus|>\n        } catch (IllegalStateException|RemoteException|ServiceSpecificException e) {\n            logError(\"Unable to change interface settings: %s\", e);\n<|endfocus|>\n            return false;\n        }\n\n        return true;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "start", "IPv", "6", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "enable", "Interface", "Ipv", "6", "Privacy", "Extensions", "(", ");", "<|nl|>", "<|12-s|>", "set", "Interface", "Ipv", "6", "Ra", "Rt", "Info", "Max", "Plen", "(", "ACCEPT", "_", "RA", "_", "RT", "_", "INFO", "_", "MAX", "_", "PLEN", ");", "<|nl|>", "<|12-s|>", "m", "Nw", "Service", ".", "enable", "Ipv", "6", "(", "m", "Interface", "Name", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Illegal", "State", "Exception", "|", "Remote", "Exception", "|", "Service", "Specific", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "log", "Error", "(", "\"", "Unable", "<|s|>", "to", "<|s|>", "change", "<|s|>", "interface", "<|s|>", "settings", ":", "<|s|>", "%", "s", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1063, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4180", "comment_id": "a62a8ea0_672d31c7", "class_list": ["provides", "containing", "IpManager", "};", "Callback", "WaitForProvisioningCallback", "to", "LoggingCallbackWrapper", "encapsulates", "ProvisioningConfiguration", "Builder", "StoppedState", "StoppingState", "StartedState", "RunningState", "MessageHandlingLogger"], "func_list": ["public void onPreDhcpAction() }", "public void onPostDhcpAction() }", "public void onNewDhcpResults(DhcpResults dhcpResults) }", "public void onProvisioningSuccess(LinkProperties newLp) }", "public void onProvisioningFailure(LinkProperties newLp) }", "public void onLinkPropertiesChange(LinkProperties newLp) }", "public void onReachabilityLost(String logMsg) }", "public void onQuit() }", "public void installPacketFilter(byte[] filter) }", "public void setFallbackMulticastFilter(boolean enabled) }", "public void setNeighborDiscoveryOffload(boolean enable) }", "public LinkProperties waitForProvisioning()", "public LoggingCallbackWrapper(Callback callback)", "private void log(String msg)", "public Builder withoutIPv4()", "public Builder withoutIPv6()", "public Builder withoutIpReachabilityMonitor()", "public Builder withPreDhcpAction()", "public Builder withStaticConfiguration(StaticIpConfiguration staticConfig)", "public Builder withApfCapabilities(ApfCapabilities apfCapabilities)", "public Builder withProvisioningTimeoutMs(int timeoutMs)", "public ProvisioningConfiguration build()", "public ProvisioningConfiguration build()", "public String toString()", "public void update()", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "private void logMsg(String msg)", "private void configureAndStartStateMachine()", "private void startStateMachineUpdaters()", "protected void onQuitting()", "public void shutdown()", "public void startProvisioning(ProvisioningConfiguration req)", "public void stop()", "public void confirmConfiguration()", "public void completedPreDhcpAction()", "public void setTcpBufferSizes(String tcpBufferSizes)", "public void setHttpProxy(ProxyInfo proxyInfo)", "public void setMulticastFilter(boolean enabled)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "protected String getWhatToString(int what)", "protected String getLogRecString(Message msg)", "protected boolean recordLogRec(Message msg)", "private void logError(String fmt, Object... args)", "private void getNetworkInterface()", "private void resetLinkProperties()", "private void recordMetric(final int type)", "private static boolean isProvisioned(LinkProperties lp)", "private ProvisioningChange compareProvisioning(", "private void dispatchCallback(ProvisioningChange delta, LinkProperties newLp)", "private ProvisioningChange setLinkProperties(LinkProperties newLp)", "private boolean linkPropertiesUnchanged(LinkProperties newLp)", "private LinkProperties assembleLinkProperties()", "private static void addAllReachableDnsServers(", "private boolean handleLinkPropertiesUpdate(boolean sendCallbacks)", "private boolean setIPv4Address(LinkAddress address)", "private void clearIPv4Address()", "private void handleIPv4Success(DhcpResults dhcpResults)", "private void handleIPv4Failure()", "private void handleProvisioningFailure()", "private void doImmediateProvisioningFailure(int failureType)", "private boolean startIPv4()", "private void enableInterfaceIpv6PrivacyExtensions()", "private void setInterfaceIpv6RaRtInfoMaxPlen(int plen)", "private boolean startIPv6()", "private boolean startIpReachabilityMonitor()", "public void notifyLost(InetAddress ip, String logMsg)", "private void stopAllIP()", "public void enter()", "public boolean processMessage(Message msg)", "public void exit()", "boolean readyToProceed()", "private ConnectivityPacketTracker createPacketTracker()", "private void ensureDhcpAction()", "private void stopDhcpAction()", "private void resetLinkProperties()", "public void handled(State processedIn, IState receivedIn)", "public void onPreDhcpAction() }", "public void onPostDhcpAction() }", "public void onNewDhcpResults(DhcpResults dhcpResults) }", "public void onProvisioningSuccess(LinkProperties newLp) }", "public void onProvisioningFailure(LinkProperties newLp) }", "public void onLinkPropertiesChange(LinkProperties newLp) }", "public void onReachabilityLost(String logMsg) }", "public void onQuit() }", "public void installPacketFilter(byte[] filter) }", "public void setFallbackMulticastFilter(boolean enabled) }", "public void setNeighborDiscoveryOffload(boolean enable) }", "public LinkProperties waitForProvisioning()", "public LoggingCallbackWrapper(Callback callback)", "private void log(String msg)", "public Builder withoutIPv4()", "public Builder withoutIPv6()", "public Builder withoutIpReachabilityMonitor()", "public Builder withPreDhcpAction()", "public Builder withStaticConfiguration(StaticIpConfiguration staticConfig)", "public Builder withApfCapabilities(ApfCapabilities apfCapabilities)", "public Builder withProvisioningTimeoutMs(int timeoutMs)", "public ProvisioningConfiguration build()", "public ProvisioningConfiguration build()", "public String toString()", "public void update()", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "private void logMsg(String msg)", "private void configureAndStartStateMachine()", "private void startStateMachineUpdaters()", "protected void onQuitting()", "public void shutdown()", "public void startProvisioning(ProvisioningConfiguration req)", "public void stop()", "public void confirmConfiguration()", "public void completedPreDhcpAction()", "public void setTcpBufferSizes(String tcpBufferSizes)", "public void setHttpProxy(ProxyInfo proxyInfo)", "public void setMulticastFilter(boolean enabled)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "protected String getWhatToString(int what)", "protected String getLogRecString(Message msg)", "protected boolean recordLogRec(Message msg)", "private void logError(String fmt, Object... args)", "private void getNetworkInterface()", "private void resetLinkProperties()", "private void recordMetric(final int type)", "private static boolean isProvisioned(LinkProperties lp)", "private ProvisioningChange compareProvisioning(", "private void dispatchCallback(ProvisioningChange delta, LinkProperties newLp)", "private ProvisioningChange setLinkProperties(LinkProperties newLp)", "private boolean linkPropertiesUnchanged(LinkProperties newLp)", "private LinkProperties assembleLinkProperties()", "private static void addAllReachableDnsServers(", "private boolean handleLinkPropertiesUpdate(boolean sendCallbacks)", "private boolean setIPv4Address(LinkAddress address)", "private void clearIPv4Address()", "private void handleIPv4Success(DhcpResults dhcpResults)", "private void handleIPv4Failure()", "private void handleProvisioningFailure()", "private void doImmediateProvisioningFailure(int failureType)", "private boolean startIPv4()", "private void enableInterfaceIpv6PrivacyExtensions()", "private void setInterfaceIpv6RaRtInfoMaxPlen(int plen)", "private boolean startIPv6()", "private boolean startIpReachabilityMonitor()", "public void notifyLost(InetAddress ip, String logMsg)", "private void stopAllIP()", "public void enter()", "public boolean processMessage(Message msg)", "public void exit()", "boolean readyToProceed()", "private ConnectivityPacketTracker createPacketTracker()", "private void ensureDhcpAction()", "private void stopDhcpAction()", "private void resetLinkProperties()", "public void handled(State processedIn, IState receivedIn)", "public void onPreDhcpAction() }", "public void onPostDhcpAction() }", "public void onNewDhcpResults(DhcpResults dhcpResults) }", "public void onProvisioningSuccess(LinkProperties newLp) }", "public void onProvisioningFailure(LinkProperties newLp) }", "public void onLinkPropertiesChange(LinkProperties newLp) }", "public void onReachabilityLost(String logMsg) }", "public void onQuit() }", "public void installPacketFilter(byte[] filter) }", "public void setFallbackMulticastFilter(boolean enabled) }", "public void setNeighborDiscoveryOffload(boolean enable) }", "public LinkProperties waitForProvisioning()", "public LoggingCallbackWrapper(Callback callback)", "private void log(String msg)", "public Builder withoutIPv4()", "public Builder withoutIPv6()", "public Builder withoutIpReachabilityMonitor()", "public Builder withPreDhcpAction()", "public Builder withStaticConfiguration(StaticIpConfiguration staticConfig)", "public Builder withApfCapabilities(ApfCapabilities apfCapabilities)", "public Builder withProvisioningTimeoutMs(int timeoutMs)", "public ProvisioningConfiguration build()", "public ProvisioningConfiguration build()", "public String toString()", "public void update()", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "private void logMsg(String msg)", "private void configureAndStartStateMachine()", "private void startStateMachineUpdaters()", "protected void onQuitting()", "public void shutdown()", "public void startProvisioning(ProvisioningConfiguration req)", "public void stop()", "public void confirmConfiguration()", "public void completedPreDhcpAction()", "public void setTcpBufferSizes(String tcpBufferSizes)", "public void setHttpProxy(ProxyInfo proxyInfo)", "public void setMulticastFilter(boolean enabled)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "protected String getWhatToString(int what)", "protected String getLogRecString(Message msg)", "protected boolean recordLogRec(Message msg)", "private void logError(String fmt, Object... args)", "private void getNetworkInterface()", "private void resetLinkProperties()", "private void recordMetric(final int type)", "private static boolean isProvisioned(LinkProperties lp)", "private ProvisioningChange compareProvisioning(", "private void dispatchCallback(ProvisioningChange delta, LinkProperties newLp)", "private ProvisioningChange setLinkProperties(LinkProperties newLp)", "private boolean linkPropertiesUnchanged(LinkProperties newLp)", "private LinkProperties assembleLinkProperties()", "private static void addAllReachableDnsServers(", "private boolean handleLinkPropertiesUpdate(boolean sendCallbacks)", "private boolean setIPv4Address(LinkAddress address)", "private void clearIPv4Address()", "private void handleIPv4Success(DhcpResults dhcpResults)", "private void handleIPv4Failure()", "private void handleProvisioningFailure()", "private void doImmediateProvisioningFailure(int failureType)", "private boolean startIPv4()", "private void enableInterfaceIpv6PrivacyExtensions()", "private void setInterfaceIpv6RaRtInfoMaxPlen(int plen)", "private boolean startIPv6()", "private boolean startIpReachabilityMonitor()", "public void notifyLost(InetAddress ip, String logMsg)", "private void stopAllIP()", "public void enter()", "public boolean processMessage(Message msg)", "public void exit()", "boolean readyToProceed()", "private ConnectivityPacketTracker createPacketTracker()", "private void ensureDhcpAction()", "private void stopDhcpAction()", "private void resetLinkProperties()", "public void handled(State processedIn, IState receivedIn)", "public void onPreDhcpAction() }", "public void onPostDhcpAction() }", "public void onNewDhcpResults(DhcpResults dhcpResults) }", "public void onProvisioningSuccess(LinkProperties newLp) }", "public void onProvisioningFailure(LinkProperties newLp) }", "public void onLinkPropertiesChange(LinkProperties newLp) }", "public void onReachabilityLost(String logMsg) }", "public void onQuit() }", "public void installPacketFilter(byte[] filter) }", "public void setFallbackMulticastFilter(boolean enabled) }", "public void setNeighborDiscoveryOffload(boolean enable) }", "public LinkProperties waitForProvisioning()", "public void onProvisioningSuccess(LinkProperties newLp)", "public void onProvisioningFailure(LinkProperties newLp)", "public void onPreDhcpAction() }", "public void onPostDhcpAction() }", "public void onNewDhcpResults(DhcpResults dhcpResults) }", "public void onProvisioningSuccess(LinkProperties newLp) }", "public void onProvisioningFailure(LinkProperties newLp) }", "public void onLinkPropertiesChange(LinkProperties newLp) }", "public void onReachabilityLost(String logMsg) }", "public void onQuit() }", "public void installPacketFilter(byte[] filter) }", "public void setFallbackMulticastFilter(boolean enabled) }", "public void setNeighborDiscoveryOffload(boolean enable) }", "public LinkProperties waitForProvisioning()", "public LoggingCallbackWrapper(Callback callback)", "private void log(String msg)", "public Builder withoutIPv4()", "public Builder withoutIPv6()", "public Builder withoutIpReachabilityMonitor()", "public Builder withPreDhcpAction()", "public Builder withStaticConfiguration(StaticIpConfiguration staticConfig)", "public Builder withApfCapabilities(ApfCapabilities apfCapabilities)", "public Builder withProvisioningTimeoutMs(int timeoutMs)", "public ProvisioningConfiguration build()", "public ProvisioningConfiguration build()", "public String toString()", "public void update()", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "private void logMsg(String msg)", "private void configureAndStartStateMachine()", "private void startStateMachineUpdaters()", "protected void onQuitting()", "public void shutdown()", "public void startProvisioning(ProvisioningConfiguration req)", "public void stop()", "public void confirmConfiguration()", "public void completedPreDhcpAction()", "public void setTcpBufferSizes(String tcpBufferSizes)", "public void setHttpProxy(ProxyInfo proxyInfo)", "public void setMulticastFilter(boolean enabled)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "protected String getWhatToString(int what)", "protected String getLogRecString(Message msg)", "protected boolean recordLogRec(Message msg)", "private void logError(String fmt, Object... args)", "private void getNetworkInterface()", "private void resetLinkProperties()", "private void recordMetric(final int type)", "private static boolean isProvisioned(LinkProperties lp)", "private ProvisioningChange compareProvisioning(", "private void dispatchCallback(ProvisioningChange delta, LinkProperties newLp)", "private ProvisioningChange setLinkProperties(LinkProperties newLp)", "private boolean linkPropertiesUnchanged(LinkProperties newLp)", "private LinkProperties assembleLinkProperties()", "private static void addAllReachableDnsServers(", "private boolean handleLinkPropertiesUpdate(boolean sendCallbacks)", "private boolean setIPv4Address(LinkAddress address)", "private void clearIPv4Address()", "private void handleIPv4Success(DhcpResults dhcpResults)", "private void handleIPv4Failure()", "private void handleProvisioningFailure()", "private void doImmediateProvisioningFailure(int failureType)", "private boolean startIPv4()", "private void enableInterfaceIpv6PrivacyExtensions()", "private void setInterfaceIpv6RaRtInfoMaxPlen(int plen)", "private boolean startIPv6()", "private boolean startIpReachabilityMonitor()", "public void notifyLost(InetAddress ip, String logMsg)", "private void stopAllIP()", "public void enter()", "public boolean processMessage(Message msg)", "public void exit()", "boolean readyToProceed()", "private ConnectivityPacketTracker createPacketTracker()", "private void ensureDhcpAction()", "private void stopDhcpAction()", "private void resetLinkProperties()", "public void handled(State processedIn, IState receivedIn)", "public LoggingCallbackWrapper(Callback callback)", "private void log(String msg)", "public void onPreDhcpAction()", "public void onPostDhcpAction()", "public void onNewDhcpResults(DhcpResults dhcpResults)", "public void onProvisioningSuccess(LinkProperties newLp)", "public void onProvisioningFailure(LinkProperties newLp)", "public void onLinkPropertiesChange(LinkProperties newLp)", "public void onReachabilityLost(String logMsg)", "public void onQuit()", "public void installPacketFilter(byte[] filter)", "public void setFallbackMulticastFilter(boolean enabled)", "public void setNeighborDiscoveryOffload(boolean enable)", "public Builder withoutIPv4()", "public Builder withoutIPv6()", "public Builder withoutIpReachabilityMonitor()", "public Builder withPreDhcpAction()", "public Builder withStaticConfiguration(StaticIpConfiguration staticConfig)", "public Builder withApfCapabilities(ApfCapabilities apfCapabilities)", "public Builder withProvisioningTimeoutMs(int timeoutMs)", "public ProvisioningConfiguration build()", "public ProvisioningConfiguration build()", "public String toString()", "public void onPreDhcpAction() }", "public Builder withoutIPv4()", "public Builder withoutIPv6()", "public Builder withoutIpReachabilityMonitor()", "public Builder withPreDhcpAction()", "public Builder withStaticConfiguration(StaticIpConfiguration staticConfig)", "public Builder withApfCapabilities(ApfCapabilities apfCapabilities)", "public Builder withProvisioningTimeoutMs(int timeoutMs)", "public ProvisioningConfiguration build()"], "prime_var_dic": {"mMsgStateLogger": 1}}, {"idx": 96003, "status": "insert", "global_index": 3949, "project_name": "android_", "written_on": "2017-02-10 13:58:44", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 0L ) ; VAR_1 . METHOD_3 ( VAR_2 , INT_1 ) ; }", "comment": "FWIW, I'm not a fan of this syntax because it would incorrectly pass if the ISE was thrown in line 204 rather than 205. Up to you. (Same for line 215)", "tokenized_comment": ["FWIW", ",", "<|s|>", "I", "'", "m", "<|s|>", "not", "<|s|>", "a", "<|s|>", "fan", "<|s|>", "of", "<|s|>", "this", "<|s|>", "syntax", "<|s|>", "because", "<|s|>", "it", "<|s|>", "would", "<|s|>", "incorrectly", "<|s|>", "pass", "<|s|>", "if", "<|s|>", "the", "<|s|>", "ISE", "<|s|>", "was", "<|s|>", "thrown", "<|s|>", "in", "<|s|>", "line", "<|s|>", "204", "<|s|>", "rather", "<|s|>", "than", "<|s|>", "205", ".", "<|s|>", "Up", "<|s|>", "to", "<|s|>", "you", ".", "<|s|>", "(", "Same", "<|s|>", "for", "<|s|>", "line", "<|s|>", "215", ")"], "tufano_code": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0L ) ; VAR_1 . METHOD_3 ( VAR_2 , INT_1 ) ; }", "our_target": "    public void test_setFields_after_setInstant() {\n        Calendar.Builder builder = new Calendar.Builder();\n", "our_code": "<|startfocus|>\n    public void test_setFields_after_setInstant() {\n<|endfocus|>\n        builder.setInstant(0L);\n        builder.setFields(Calendar.YEAR, 2000);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "set", "Fields", "_", "after", "_", "set", "Instant", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "builder", ".", "set", "Instant", "(", "0", "L", ");", "<|nl|>", "<|8-s|>", "builder", ".", "set", "Fields", "(", "Calendar", ".", "YEAR", ",", "<|s|>", "2000", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 202, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3284", "comment_id": "7bcc5bb2_435b5719", "class_list": ["CalendarBuilderTest"], "func_list": ["public void createBuilderAndExpected()", "public void test_default_values()", "public void test_setCalendarType_iso8601()", "public void test_setCalendarType_invalid()", "public void test_setCalendarType_reset()", "public void test_setDate()", "public void test_setTimeOfDay()", "public void test_setWeekDate()", "public void test_setLenient()", "public void test_setLocale()", "public void test_setLocale_thTH()", "public void test_setCalendarType_iso8601()", "public void test_set_negative_field()", "public void test_set_field_too_high()", "public void test_set_after_setInstant()", "public void test_setFields()", "public void test_setFields_null()", "public void test_setFields_oddNumberOfArguments()", "public void test_setFields_after_setInstant()", "public void test_setInstant()", "public void test_setInstant_after_set()", "public void test_setInstant_Date()", "public void test_setInstant_Date_null()", "public void test_setTimeZone()", "public void test_setTimeZone_null()", "public void test_setWeekDefinition()", "public void test_setWeekDefinition_invalid_first_dow()", "public void test_setWeekDefinition_invalid_minimum_days()", "private void assertBuildsExpected()"], "prime_var_dic": {"builder": 1}}, {"idx": 75718, "status": "update", "global_index": 10816, "project_name": "android_", "written_on": "2015-05-19 15:39:42", "tufano_target": "public void METHOD_1 ( ) { if ( ! ( VAR_1 instanceof TYPE_2 || VAR_1 instanceof TYPE_1 || VAR_1 instanceof TYPE_3 || VAR_1 instanceof TYPE_4 || VAR_1 instanceof TYPE_5 ) ) { super . METHOD_1 ( ) ; } }", "comment": "I think checkValidity() in JLiteral is quite wrong. Why not be more precise in all checkValidity in JValueLiteral hierarchy.", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "check", "Validity", "(", ")", "<|s|>", "in", "<|s|>", "JLiteral", "<|s|>", "is", "<|s|>", "quite", "<|s|>", "wrong", ".", "<|s|>", "Why", "<|s|>", "not", "<|s|>", "be", "<|s|>", "more", "<|s|>", "precise", "<|s|>", "in", "<|s|>", "all", "<|s|>", "check", "Validity", "<|s|>", "in", "<|s|>", "JValue", "Literal", "<|s|>", "hierarchy", "."], "tufano_code": "public void METHOD_1 ( ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { super . METHOD_1 ( ) ; } }", "our_target": "    if (!(parent instanceof JExpression\n        || parent instanceof JThrowStatement\n        || parent instanceof JNameValuePair\n        || parent instanceof JReturnStatement\n        || parent instanceof JFieldInitializer)) {\n", "our_code": "  public void checkValidity() {\n<|startfocus|>\n    if (!(parent instanceof JThrowStatement)) {\n<|endfocus|>\n      super.checkValidity();\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "check", "Validity", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "(", "parent", "<|s|>", "instanceof", "<|s|>", "JThrow", "Statement", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "super", ".", "check", "Validity", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 60, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2297", "comment_id": "0d179dd9_3b8883f0", "class_list": ["JNullLiteral"], "func_list": ["public JNullLiteral(SourceInfo sourceInfo)", "public JType getType()", "public void traverse(@Nonnull JVisitor visitor)", "public void checkValidity()"], "prime_var_dic": {}}, {"idx": 41139, "status": "update", "global_index": 13452, "project_name": "android_", "written_on": "2014-11-27 21:24:22", "tufano_target": "public String METHOD_1 ( String VAR_1 ) { for ( TYPE_1 < String , TYPE_2 < String > > VAR_3 : VAR_4 . METHOD_2 ( ) ) { if ( VAR_3 . getValue ( ) . contains ( VAR_1 ) ) { return VAR_3 . METHOD_3 ( ) ; } } return null ; }", "comment": "Why not JType for typeName?", "tokenized_comment": ["Why", "<|s|>", "not", "<|s|>", "JType", "<|s|>", "for", "<|s|>", "type", "Name", "?"], "tufano_code": "public String METHOD_1 ( String VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }", "our_target": "    for (Map.Entry<String, Set<String>> entry : javaFileToTypes.entrySet()) {\n      if (entry.getValue().contains(typeName)) {\n        return entry.getKey();\n      }\n    }\n\n    return null;\n", "our_code": "  public String getJavaFileName(@Nonnull String typeName) {\n<|startfocus|>\n    return typeToJavaFile.get(typeName);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Java", "File", "Name", "(", "@", "Nonnull", "<|s|>", "String", "<|s|>", "type", "Name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "type", "To", "Java", "File", ".", "get", "(", "type", "Name", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 126, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2186", "comment_id": "1f633129_d97db308", "class_list": ["FileDependencies", "Computed"], "func_list": ["public void addMappingBetweenJavaFileAndType(@Nonnull String javaFileName,", "public Set<String> getTypeNames(@Nonnull String javaFileName)", "public String getJavaFileName(@Nonnull String typeName)", "public Set<String> getCompiledJavaFiles()"], "prime_var_dic": {}}, {"idx": 48791, "status": "update", "global_index": 9525, "project_name": "android_", "written_on": "2015-10-20 15:01:06", "tufano_target": "public String METHOD_1 ( ) { return STRING_6 + VAR_4 . METHOD_3 ( ) + STRING_3 + node . getName ( ) + STRING_4 + VAR_3 + STRING_5 ; }", "comment": "collision", "tokenized_comment": ["collision"], "tufano_code": "public String METHOD_1 ( ) { return STRING_1 + VAR_1 . METHOD_2 ( ) + STRING_2 + VAR_2 + STRING_3 + node . getName ( ) + STRING_4 + VAR_3 + STRING_5 ; }", "our_target": "    return \"Mapping collision: \" + location.getDescription() + \": \" + node.getName()\n", "our_code": "  public String getMessage() {\n<|startfocus|>\n    return \"Mapping collusion: \" + fileLocation.getPath() + \":\" + lineNumber + \": \" + node.getName()\n<|endfocus|>\n        + \" could not be renamed to \" + newName + \" since the name was already used\";\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Message", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "\"", "Mapping", "<|s|>", "collusion", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "file", "Location", ".", "get", "Path", "(", ")", "<|s|>", "+", "<|s|>", "\"", ":", "\"", "<|s|>", "+", "<|s|>", "line", "Number", "<|s|>", "+", "<|s|>", "\"", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "node", ".", "get", "Name", "(", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "+", "<|s|>", "\"", "<|s|>", "could", "<|s|>", "not", "<|s|>", "be", "<|s|>", "renamed", "<|s|>", "to", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "new", "Name", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "since", "<|s|>", "the", "<|s|>", "name", "<|s|>", "was", "<|s|>", "already", "<|s|>", "used", "\"", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 54, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_2483", "comment_id": "f936a66e_01618a8e", "class_list": ["MappingCollisionInfo"], "func_list": ["public MappingCollisionInfo(@Nonnull FileLocation fileLocation, @Nonnegative int lineNumber,", "public String getMessage()", "public ProblemLevel getDefaultProblemLevel()"], "prime_var_dic": {"implements": 1, "fileLocation": 1, "lineNumber": 1, "node": 1, "newName": 1}}, {"idx": 47165, "status": "update", "global_index": 3361, "project_name": "android_", "written_on": "2016-12-30 01:18:04", "tufano_target": "private boolean METHOD_1 ( boolean VAR_1 ) { synchronized ( VAR_4 ) { final String VAR_2 = STRING_2 ; if ( ! METHOD_2 ( VAR_2 ) ) return false ; TYPE_1 status = VAR_3 . METHOD_1 ( VAR_1 ) ; return METHOD_3 ( status , VAR_2 ) ; } }", "comment": "Wrong method name", "tokenized_comment": ["Wrong", "<|s|>", "method", "<|s|>", "name"], "tufano_code": "private boolean METHOD_1 ( boolean VAR_1 ) { final String VAR_2 = STRING_1 ; if ( ! METHOD_2 ( VAR_2 ) ) return false ; TYPE_1 status = VAR_3 . METHOD_1 ( VAR_1 ) ; return METHOD_3 ( status , VAR_2 ) ; }", "our_target": "        synchronized (mLock) {\n            final String methodStr = \"setBtCoexistenceScanModeEnabled\";\n            if (!checkSupplicantStaIfaceAndLogFailure(methodStr)) return false;\n            SupplicantStatus status = mHidlSupplicantStaIface.setBtCoexistenceScanModeEnabled(enable);\n            return checkStatusAndLogFailure(status, methodStr);\n        }\n", "our_code": "    private boolean setBtCoexistenceScanModeEnabled(boolean enable) {\n<|startfocus|>\n        final String methodStr = \"setBtCoexistenceMode\";\n        if (!checkSupplicantStaIfaceAndLogFailure(methodStr)) return false;\n        SupplicantStatus status = mHidlSupplicantStaIface.setBtCoexistenceScanModeEnabled(enable);\n        return checkStatusAndLogFailure(status, methodStr);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "set", "Bt", "Coexistence", "Scan", "Mode", "Enabled", "(", "boolean", "<|s|>", "enable", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "String", "<|s|>", "method", "Str", "<|s|>", "=", "<|s|>", "\"", "set", "Bt", "Coexistence", "Mode", "\"", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "check", "Supplicant", "Sta", "Iface", "And", "Log", "Failure", "(", "method", "Str", ")", ")", "<|s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "Supplicant", "Status", "<|s|>", "status", "<|s|>", "=", "<|s|>", "m", "Hidl", "Supplicant", "Sta", "Iface", ".", "set", "Bt", "Coexistence", "Scan", "Mode", "Enabled", "(", "enable", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "check", "Status", "And", "Log", "Failure", "(", "status", ",", "<|s|>", "method", "Str", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 279, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_4068", "comment_id": "d7c9e645_c2a42f5a", "class_list": ["WifiNativeNew"], "func_list": ["public boolean registerForSupplicantHidlServiceNotification()", "public void onRegistration(String fqName, String name, boolean preexisting)", "public boolean startHidlHal()", "public boolean startSupplicantHidl()", "public void onValues(SupplicantStatus status,", "private boolean reassociate()", "private boolean reconnect()", "private boolean disconnect()", "private boolean setPowerSave(boolean enable)", "private boolean initiateTdlsDiscover(byte[/* 6 */] macAddress)", "private boolean initiateTdlsSetup(byte[/* 6 */] macAddress)", "private boolean initiateTdlsTeardown(byte[/* 6 */] macAddress)", "private boolean initiateAnqpQuery(byte[/* 6 */] macAddress,", "private boolean initiateHs20IconQuery(byte[/* 6 */] macAddress, String fileName)", "private String getMacAddress()", "private boolean startRxFilter()", "private boolean stopRxFilter()", "private boolean addRxFilter(byte type)", "private boolean removeRxFilter(byte type)", "private boolean setBtCoexistenceMode(byte mode)", "private boolean setBtCoexistenceScanModeEnabled(boolean enable)", "private boolean setSuspendModeEnabled(boolean enable)", "private boolean setCountryCode(byte[/* 2 */] code)", "private boolean checkSupplicantStaIfaceAndLogFailure(final String methodStr)", "private boolean checkStatusAndLogFailure(SupplicantStatus status, final String methodStr)"], "prime_var_dic": {"boolean": 1, "String": 2, "interface": 1, "mWifiMonitorNew": 1, "Supplicant": 1}}, {"idx": 96215, "status": "update", "global_index": 5752, "project_name": "android_", "written_on": "2016-06-21 08:23:00", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_3 . add ( VAR_5 class ) ; return VAR_3 ; }", "comment": "Why making this conditional? It is the only thing done by this plugin.", "tokenized_comment": ["Why", "<|s|>", "making", "<|s|>", "this", "<|s|>", "conditional", "?", "<|s|>", "It", "<|s|>", "is", "<|s|>", "the", "<|s|>", "only", "<|s|>", "thing", "<|s|>", "done", "<|s|>", "by", "<|s|>", "this", "<|s|>", "plugin", "."], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 . get ( VAR_4 ) ) { VAR_3 . add ( VAR_5 class ) ; } return VAR_3 ; }", "our_target": "    productionSet.add(StructurePrinting.class);\n", "our_code": "  public ProductionSet getProductions(@Nonnull Config config, @Nonnull Scheduler scheduler) {\n    ProductionSet productionSet = scheduler.createProductionSet();\n<|startfocus|>\n    if (config.get(StructurePrinter.STRUCTURE_PRINTING)) {\n      productionSet.add(StructurePrinting.class);\n    }\n<|endfocus|>\n    return productionSet;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Production", "Set", "<|s|>", "get", "Productions", "(", "@", "Nonnull", "<|s|>", "Config", "<|s|>", "config", ",", "<|s|>", "@", "Nonnull", "<|s|>", "Scheduler", "<|s|>", "scheduler", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Production", "Set", "<|s|>", "production", "Set", "<|s|>", "=", "<|s|>", "scheduler", ".", "create", "Production", "Set", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "config", ".", "get", "(", "Structure", "Printer", ".", "STRUCTURE", "_", "PRINTING", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "production", "Set", ".", "add", "(", "Structure", "Printing", ".", "class", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "production", "Set", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 81, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2164", "comment_id": "291ac803_97bf2475", "class_list": ["that", "StructurePrintingSamplePlugin"], "func_list": ["public String getCanonicalName()", "public String getFriendlyName()", "public String getDescription()", "public Version getVersion()", "public boolean isCompatibileWithJack(@Nonnull Version version)", "public FeatureSet getFeatures(@Nonnull Config config, @Nonnull Scheduler scheduler)", "public ProductionSet getProductions(@Nonnull Config config, @Nonnull Scheduler scheduler)", "public String getCanonicalName()", "public String getFriendlyName()", "public String getDescription()", "public Version getVersion()", "public boolean isCompatibileWithJack(@Nonnull Version version)", "public FeatureSet getFeatures(@Nonnull Config config, @Nonnull Scheduler scheduler)", "public ProductionSet getProductions(@Nonnull Config config, @Nonnull Scheduler scheduler)"], "prime_var_dic": {}}, {"idx": 22539, "status": "update", "global_index": 11120, "project_name": "android_", "written_on": "2012-06-12 19:23:26", "tufano_target": "public boolean METHOD_5 ( ) { return VAR_2 != null ? VAR_2 . METHOD_3 ( ) . METHOD_6 ( ) : false ; }", "comment": "I prefer this to work without having to check phone name. Instead all cards including RUIM and NAV CDMA devices should handle this call.", "tokenized_comment": ["I", "<|s|>", "prefer", "<|s|>", "this", "<|s|>", "to", "<|s|>", "work", "<|s|>", "without", "<|s|>", "having", "<|s|>", "to", "<|s|>", "check", "<|s|>", "phone", "<|s|>", "name", ".", "<|s|>", "Instead", "<|s|>", "all", "<|s|>", "cards", "<|s|>", "including", "<|s|>", "RUIM", "<|s|>", "and", "<|s|>", "NAV", "<|s|>", "CDMA", "<|s|>", "devices", "<|s|>", "should", "<|s|>", "handle", "<|s|>", "this", "<|s|>", "call", "."], "tufano_code": "public boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) { return VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; } else { return false ; } }", "our_target": "    public boolean isIccCardValid() {\n        return mIccCardStatus != null ? mIccCardStatus.getCardState().isCardValid() : false;\n", "our_code": "<|startfocus|>\n    public boolean isIccInvalidCard() {\n        if (mPhone.getPhoneName().equals(\"GSM\")) {\n            return mIccCardStatus.getCardState().isCardInvalid();\n        } else {\n            // TODO: Make work with a CDMA device with a RUIM card.\n            return false;\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Icc", "Invalid", "Card", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Phone", ".", "get", "Phone", "Name", "(", ")", ".", "equals", "(", "\"", "GSM", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "m", "Icc", "Card", "Status", ".", "get", "Card", "State", "(", ")", ".", "is", "Card", "Invalid", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "Make", "<|s|>", "work", "<|s|>", "with", "<|s|>", "a", "<|s|>", "CDMA", "<|s|>", "device", "<|s|>", "with", "<|s|>", "a", "<|s|>", "RUIM", "<|s|>", "card", ".", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 839, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4948", "comment_id": "AAAGe3%2F%2F%2Fis%3D", "class_list": ["IccCard"], "func_list": ["public boolean isPinLocked()", "public boolean iccCardExist()", "public State getState()", "public IccCard(PhoneBase phone, String logTag, Boolean dbg)", "public void dispose()", "protected void finalize()", "public void registerForAbsent(Handler h, int what, Object obj)", "public void unregisterForAbsent(Handler h)", "public void registerForNetworkLocked(Handler h, int what, Object obj)", "public void unregisterForNetworkLocked(Handler h)", "public void registerForLocked(Handler h, int what, Object obj)", "public void unregisterForLocked(Handler h)", "public void supplyPin (String pin, Message onComplete)", "public void supplyPuk (String puk, String newPin, Message onComplete)", "public void supplyPin2 (String pin2, Message onComplete)", "public void supplyPuk2 (String puk2, String newPin2, Message onComplete)", "public void supplyNetworkDepersonalization (String pin, Message onComplete)", "public boolean getIccLockEnabled()", "public boolean getIccFdnEnabled()", "public void setIccLockEnabled (boolean enabled,", "public void setIccFdnEnabled (boolean enabled,", "public void changeIccLockPassword(String oldPassword, String newPassword,", "public void changeIccFdnPassword(String oldPassword, String newPassword,", "protected void updateStateProperty()", "private void getIccCardStatusDone(AsyncResult ar)", "private void handleIccCardStatus(IccCardStatus newCardStatus)", "private void onIccSwap(boolean isAdded)", "public void onClick(DialogInterface dialog, int which)", "private void onQueryFdnEnabled(AsyncResult ar)", "private void onQueryFacilityLock(AsyncResult ar)", "public void broadcastIccStateChangedIntent(String value, String reason)", "public void handleMessage(Message msg)", "public State getIccCardState()", "private State getAppState(int appIndex)", "private State getConsolidatedState(State left, State right, State preferredState)", "public boolean isApplicationOnIcc(IccCardApplication.AppType type)", "public boolean hasIccCard()", "private void log(String msg)", "public boolean isIccInvalidCard()"], "prime_var_dic": {"IccCard": 1, "to": 2, "when": 1, "String": 12, "is": 1, "int": 14, "an": 5, "locked": 1, "fdn": 1, "Android": 1}}, {"idx": 82406, "status": "update", "global_index": 8512, "project_name": "android_", "written_on": "2015-06-29 17:53:46", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = VAR_2 ; METHOD_1 ( ) ; }", "comment": "\"this.\"  not needed anymore.", "tokenized_comment": ["\"", "this", ".", "\"", "<|2-s|>", "not", "<|s|>", "needed", "<|s|>", "anymore", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { this . VAR_3 = VAR_2 ; METHOD_1 ( ) ; }", "our_target": "    myPrimaryColor = primaryColor;\n", "our_code": "  public PrimaryDarkColorSuggestor(Color primaryColor) {\n<|startfocus|>\n    this.myPrimaryColor = primaryColor;\n<|endfocus|>\n    initializeMap();\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Primary", "Dark", "Color", "Suggestor", "(", "Color", "<|s|>", "primary", "Color", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "this", ".", "my", "Primary", "Color", "<|s|>", "=", "<|s|>", "primary", "Color", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "initialize", "Map", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 32, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_297", "comment_id": "d3ae0d65_89453d68", "class_list": ["PrimaryDarkColorSuggestor"], "func_list": ["public PrimaryDarkColorSuggestor(Color primaryColor)", "private static void initializeMap()"], "prime_var_dic": {"implements": 1, "myPrimaryColor": 1}}, {"idx": 91563, "status": "update", "global_index": 17598, "project_name": "android_", "written_on": "2012-04-27 23:21:12", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = METHOD_1 ( ) ; if ( TYPE_2 . METHOD_2 ( STRING_1 ) != null ) { VAR_2 = VAR_4 ; } VAR_5 = VAR_3 == null ? VAR_4 : VAR_2 ; }", "comment": "nonnls", "tokenized_comment": ["nonnls"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = METHOD_1 ( ) ; if ( TYPE_2 . METHOD_2 ( STRING_1 ) != null ) { VAR_2 = VAR_4 ; } VAR_5 = VAR_3 == null ? VAR_4 : VAR_2 ; }", "our_target": "        if (System.getenv(\"SDKMAN_DISABLE_CACHE\") != null) {                 //$NON-NLS-1$\n", "our_code": "    public DownloadCache(Strategy strategy) {\n        mCacheRoot = initCacheRoot();\n\n        // If this is defined in the environment, never use the cache. Useful for testing.\n<|startfocus|>\n        if (System.getenv(\"SDKMAN_DISABLE_CACHE\") != null) {\n<|endfocus|>\n            strategy = Strategy.DIRECT;\n        }\n\n        mStrategy = mCacheRoot == null ? Strategy.DIRECT : strategy;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Download", "Cache", "(", "Strategy", "<|s|>", "strategy", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Cache", "Root", "<|s|>", "=", "<|s|>", "init", "Cache", "Root", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "If", "<|s|>", "this", "<|s|>", "is", "<|s|>", "defined", "<|s|>", "in", "<|s|>", "the", "<|s|>", "environment", ",", "<|s|>", "never", "<|s|>", "use", "<|s|>", "the", "<|s|>", "cache", ".", "<|s|>", "Useful", "<|s|>", "for", "<|s|>", "testing", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "System", ".", "getenv", "(", "\"", "SDKMAN", "_", "DISABLE", "_", "CACHE", "\"", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "strategy", "<|s|>", "=", "<|s|>", "Strategy", ".", "DIRECT", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "m", "Strategy", "<|s|>", "=", "<|s|>", "m", "Cache", "Root", "<|s|>", "==", "<|s|>", "null", "<|s|>", "?", "<|s|>", "Strategy", ".", "DIRECT", "<|s|>", ":", "<|s|>", "strategy", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 161, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_3942", "comment_id": "AAAFG3%2F%2F%2F88%3D", "class_list": ["DownloadCache"], "func_list": ["public DownloadCache(Strategy strategy)", "public Strategy getStrategy()", "protected File initCacheRoot()", "private Properties readInfo(File info)", "private String getCacheFilename(String urlString)", "private String getInfoFilename(String cacheFilename)"], "prime_var_dic": {"requests": 1, "String": 5, "minutes": 1, "long": 2, "hours": 1, "int": 1, "mStrategy": 1, "mCacheRoot": 1, "cached": 1, "necessary": 1, "its": 2, "code": 1, "length": 1, "retrying": 1, "not": 1, "below": 1, "timestamp": 1, "properties": 1, "download": 1}}, {"idx": 13309, "status": "insert", "global_index": 13134, "project_name": "android_", "written_on": "2014-10-24 19:42:03", "tufano_target": "public void METHOD_1 ( String message ) { VAR_1 . METHOD_2 ( STRING_1 + message ) ; }", "comment": "sys.out just like above?", "tokenized_comment": ["sys", ".", "out", "<|s|>", "just", "<|s|>", "like", "<|s|>", "above", "?"], "tufano_code": "public void METHOD_1 ( String message ) { }", "our_target": "  public void showWarning(String message) {\n    System.out.println(\"Warning: \" + message);\n", "our_code": "<|startfocus|>\n  public void showWarning(String message) {\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "show", "Warning", "(", "String", "<|s|>", "message", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 40, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5631", "comment_id": "7580cec4_5f536731", "class_list": ["ConsoleUpdaterUI"], "func_list": ["public void startProcess(String title)", "public void setProgress(int percentage)", "public void setProgressIndeterminate()", "public void setStatus(String status)", "public void showError(Throwable e)", "public void setDescription(String oldBuildDesc, String newBuildDesc)", "public void showWarning(String message)", "public String toString()"], "prime_var_dic": {"implements": 1}}, {"idx": 50173, "status": "insert", "global_index": 3389, "project_name": "android_", "written_on": "2017-01-07 01:31:51", "tufano_target": "private void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = null ; VAR_3 = null ; }", "comment": "Let's change every reference to Delete to Dismiss, so it's clearer that this means that user dismissed the notification. I realize the PendingIntent is called a deleteIntent, but even the documentation for it mentions user dismissal.", "tokenized_comment": ["Let", "'", "s", "<|s|>", "change", "<|s|>", "every", "<|s|>", "reference", "<|s|>", "to", "<|s|>", "Delete", "<|s|>", "to", "<|s|>", "Dismiss", ",", "<|s|>", "so", "<|s|>", "it", "'", "s", "<|s|>", "clearer", "<|s|>", "that", "<|s|>", "this", "<|s|>", "means", "<|s|>", "that", "<|s|>", "user", "<|s|>", "dismissed", "<|s|>", "the", "<|s|>", "notification", ".", "<|s|>", "I", "<|s|>", "realize", "<|s|>", "the", "<|s|>", "Pending", "Intent", "<|s|>", "is", "<|s|>", "called", "<|s|>", "a", "<|s|>", "delete", "Intent", ",", "<|s|>", "but", "<|s|>", "even", "<|s|>", "the", "<|s|>", "documentation", "<|s|>", "for", "<|s|>", "it", "<|s|>", "mentions", "<|s|>", "user", "<|s|>", "dismissal", "."], "tufano_code": "private void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = null ; }", "our_target": "        mRecommendedNetwork = null;\n        mNotificationBadgeBitmap = null;\n", "our_code": "    private void handleNotificationDeleted() {\n        mNotificationShown = false;\n<|startfocus|>\n        mRecommendedNetwork = null;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "handle", "Notification", "Deleted", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Notification", "Shown", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Recommended", "Network", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 373, "base_patch_number": 1, "changed_patch_number": 5, "code_file_name": "android_4354", "comment_id": "77e75a57_2f79606e", "class_list": ["WifiNotificationController", "NotificationEnabledSettingObserver"], "func_list": ["public void start()", "public void stop()", "public void onReceive(Context context, Intent intent)", "private void checkAndSetNotification(NetworkInfo networkInfo,", "private RecommendationResult getOpenNetworkRecommendation(List<ScanResult> scanResults)", "private void displayNotification()", "private void connectToRecommendedNetwork()", "private void updateNotificationOnConnect()", "private void handleNotificationDeleted()", "private void notify(Notification notification)", "private void resetNotification()", "private void removeNotification()", "void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void register()", "public void unregister()", "public void onChange(boolean selfChange)", "private boolean getValue()"], "prime_var_dic": {"mNotificationEnabledSettingObserver": 1}}, {"idx": 11872, "status": "update", "global_index": 12098, "project_name": "android_", "written_on": "2014-08-04 17:53:27", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) == null ) { TYPE_2 . METHOD_4 ( VAR_2 , - 1 ) ; } }", "comment": "odd indentation, (even though IJ doesn't correct it). I'd align it to the left.\n\nAlso, (for future), you want to be consistent in your style. I recommend using /** Javadoc style comments for class/methods/fields, and // comments otherwise, such as here.", "tokenized_comment": ["odd", "<|s|>", "indentation", ",", "<|s|>", "(", "even", "<|s|>", "though", "<|s|>", "IJ", "<|s|>", "doesn", "'", "t", "<|s|>", "correct", "<|s|>", "it", ")", ".", "<|s|>", "I", "'", "d", "<|s|>", "align", "<|s|>", "it", "<|s|>", "to", "<|s|>", "the", "<|s|>", "left", ".", "<|nl|>", "<|nl|>", "Also", ",", "<|s|>", "(", "for", "<|s|>", "future", ")", ",", "<|s|>", "you", "<|s|>", "want", "<|s|>", "to", "<|s|>", "be", "<|s|>", "consistent", "<|s|>", "in", "<|s|>", "your", "<|s|>", "style", ".", "<|s|>", "I", "<|s|>", "recommend", "<|s|>", "using", "<|s|>", "/*", "*", "<|s|>", "Javadoc", "<|s|>", "style", "<|s|>", "comments", "<|s|>", "for", "<|s|>", "class", "/", "methods", "/", "fields", ",", "<|s|>", "and", "<|s|>", "//", "<|s|>", "comments", "<|s|>", "otherwise", ",", "<|s|>", "such", "<|s|>", "as", "<|s|>", "here", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) == null ) { TYPE_2 . METHOD_4 ( VAR_2 , - 1 ) ; } }", "our_target": "    // If necessary, grows the table to fill the viewport.\n    // Does not trigger when the user drags a column to resize (taken care of by ColumnResizeListener).\n", "our_code": "  public void componentResized(ComponentEvent e) {\n<|startfocus|>\n        /* If necessary, grows the table to fill the viewport. Does not trigger when the user drags a column to resize\n         * (taken care of by ColumnResizeListener).\n         */\n<|endfocus|>\n    if (myTable.getTableHeader().getResizingColumn() == null) {\n      StringResourceTableUtil.expandToViewportWidthIfNecessary(myTable, -1);\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "component", "Resized", "(", "Component", "Event", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "/*", "<|s|>", "If", "<|s|>", "necessary", ",", "<|s|>", "grows", "<|s|>", "the", "<|s|>", "table", "<|s|>", "to", "<|s|>", "fill", "<|s|>", "the", "<|s|>", "viewport", ".", "<|s|>", "Does", "<|s|>", "not", "<|s|>", "trigger", "<|s|>", "when", "<|s|>", "the", "<|s|>", "user", "<|s|>", "drags", "<|s|>", "a", "<|s|>", "column", "<|s|>", "to", "<|s|>", "resize", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "(", "taken", "<|s|>", "care", "<|s|>", "of", "<|s|>", "by", "<|s|>", "Column", "Resize", "Listener", ")", ".", "<|nl|>", "<|8-s|>", "<|s|>", "*/", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Table", ".", "get", "Table", "Header", "(", ")", ".", "get", "Resizing", "Column", "(", ")", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "Resource", "Table", "Util", ".", "expand", "To", "Viewport", "Width", "If", "Necessary", "(", "my", "Table", ",", "<|s|>", "-", "1", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 31, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_235", "comment_id": "968387c4_9f000c27", "class_list": ["TableResizeListener"], "func_list": ["public TableResizeListener(JTable table)", "public void componentResized(ComponentEvent e)"], "prime_var_dic": {"myTable": 1}}, {"idx": 90107, "status": "update", "global_index": 12875, "project_name": "android_", "written_on": "2014-10-02 15:47:42", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { super ( TYPE_3 . METHOD_1 ( STRING_1 ) , TYPE_3 . METHOD_1 ( STRING_2 ) , null , VAR_3 ) ; VAR_4 = VAR_2 ; METHOD_2 ( VAR_5 ) ; }", "comment": "missing space after the ','. Remind me to setup a linter on this project somehow.", "tokenized_comment": ["missing", "<|s|>", "space", "<|s|>", "after", "<|s|>", "the", "<|s|>", "'", ",", "'", ".", "<|s|>", "Remind", "<|s|>", "me", "<|s|>", "to", "<|s|>", "setup", "<|s|>", "a", "<|s|>", "linter", "<|s|>", "on", "<|s|>", "this", "<|s|>", "project", "<|s|>", "somehow", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { super ( TYPE_3 . METHOD_1 ( STRING_1 ) , TYPE_3 . METHOD_1 ( STRING_2 ) , null , VAR_3 ) ; VAR_4 = VAR_2 ; METHOD_2 ( VAR_5 ) ; }", "our_target": "    super(GctBundle.samplesMsg(\"sample.browser.title\"), GctBundle.samplesMsg(\"sample.browser.subtitle\"), null, parentDisposable);\n", "our_code": "  public SampleBrowserStep(@NotNull SampleCollection sampleList, Disposable parentDisposable) {\n<|startfocus|>\n    super(GctBundle.samplesMsg(\"sample.browser.title\"),GctBundle.samplesMsg(\"sample.browser.subtitle\"), null, parentDisposable);\n<|endfocus|>\n    mySampleList = sampleList;\n    setBodyComponent(myPanel);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Sample", "Browser", "Step", "(", "@", "Not", "Null", "<|s|>", "Sample", "Collection", "<|s|>", "sample", "List", ",", "<|s|>", "Disposable", "<|s|>", "parent", "Disposable", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "Gct", "Bundle", ".", "samples", "Msg", "(", "\"", "sample", ".", "browser", ".", "title", "\"", ")", ",", "Gct", "Bundle", ".", "samples", "Msg", "(", "\"", "sample", ".", "browser", ".", "subtitle", "\"", ")", ",", "<|s|>", "null", ",", "<|s|>", "parent", "Disposable", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Sample", "List", "<|s|>", "=", "<|s|>", "sample", "List", ";", "<|nl|>", "<|4-s|>", "set", "Body", "Component", "(", "my", "Panel", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 72, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4583", "comment_id": "b052544f_f86eb19c", "class_list": ["SampleBrowserStep", "SampleSelectionListener", "SampleUrlValueDeriver", "DescriptionValueDeriver", "EditorPaneComponentBinding", "ImageListToStringDeriver"], "func_list": ["public SampleBrowserStep(@NotNull SampleCollection sampleList, Disposable parentDisposable)", "public void init()", "public void setValue(@Nullable String newValue, @NotNull HyperlinkLabel component)", "protected void textChanged(DocumentEvent e)", "public JComponent getPreferredFocusedComponent()", "public String getStepName()", "public boolean validate()", "protected void initSamplesTree()", "public Sample getValue(@NotNull Tree component)", "public void addActionListener(@NotNull ActionListener listener, @NotNull Tree component)", "public SampleSelectionListener(ActionListener externalListener)", "public void valueChanged(TreeSelectionEvent e)", "public String deriveValue(@NotNull ScopedStateStore state, Key changedKey, @Nullable String currentValue)", "public JLabel getDescriptionText()", "protected JComponent getHeader()", "public SampleSelectionListener(ActionListener externalListener)", "public void valueChanged(TreeSelectionEvent e)", "protected void textChanged(DocumentEvent e)", "protected void textChanged(DocumentEvent e)", "protected void textChanged(DocumentEvent e)", "protected void textChanged(DocumentEvent e)"], "prime_var_dic": {}}, {"idx": 78822, "status": "update", "global_index": 19452, "project_name": "android_", "written_on": "2011-03-09 22:01:35", "tufano_target": "public void METHOD_1 ( ) { try { METHOD_2 ( VAR_1 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) , message != null ? message + STRING_1 : STRING_2 ) ; } finally { METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; } }", "comment": "these 2 text lines should be merged in the same message.", "tokenized_comment": ["these", "<|s|>", "2", "<|s|>", "text", "<|s|>", "lines", "<|s|>", "should", "<|s|>", "be", "<|s|>", "merged", "<|s|>", "in", "<|s|>", "the", "<|s|>", "same", "<|s|>", "message", "."], "tufano_code": "public void METHOD_1 ( ) { try { METHOD_2 ( VAR_1 + VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) , message != null ? message + STRING_1 : STRING_2 ) ; } finally { METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; } }", "our_target": "                                Messages.DeviceView_Unable_Create_HPROF_For_Application,\n", "our_code": "                public void run() {\n                    try {\n                        displayErrorFromUiThread(\n<|startfocus|>\n                                Messages.DeviceView_Unable_Create_HPROF_For_Application +\n                                Messages.DeviceView_Check_Logcat_More_Information,\n<|endfocus|>\n                                client.getClientData().getClientDescription(),\n                                message != null ? message + \"\\n\\n\" : \"\"); //$NON-NLS-1$ //$NON-NLS-2$\n                    } finally {\n                        // this will make sure the dump hprof button is re-enabled for the\n                        // current selection. as the client is finished dumping an hprof file\n                        doSelectionChanged(mDeviceList.getSelectedClient());\n                    }\n                }", "tokenized_code": ["<|16-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "display", "Error", "From", "Ui", "Thread", "(", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "Messages", ".", "Device", "View", "_", "Unable", "_", "Create", "_", "HPROF", "_", "For", "_", "Application", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|16-s|>", "Messages", ".", "Device", "View", "_", "Check", "_", "Logcat", "_", "More", "_", "Information", ",", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "client", ".", "get", "Client", "Data", "(", ")", ".", "get", "Client", "Description", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "message", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "?", "<|s|>", "message", "<|s|>", "+", "<|s|>", "\"", "\\", "n", "\\", "n", "\"", "<|s|>", ":", "<|s|>", "\"", "\"", ");", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "1", "$", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "2", "$", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|s|>", "finally", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "this", "<|s|>", "will", "<|s|>", "make", "<|s|>", "sure", "<|s|>", "the", "<|s|>", "dump", "<|s|>", "hprof", "<|s|>", "button", "<|s|>", "is", "<|s|>", "re", "-", "enabled", "<|s|>", "for", "<|s|>", "the", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "current", "<|s|>", "selection", ".", "<|s|>", "as", "<|s|>", "the", "<|s|>", "client", "<|s|>", "is", "<|s|>", "finished", "<|s|>", "dumping", "<|s|>", "an", "<|s|>", "hprof", "<|s|>", "file", "<|nl|>", "<|16-s|>", "<|8-s|>", "do", "Selection", "Changed", "(", "m", "Device", "List", ".", "get", "Selected", "Client", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}"], "base_code_line_number": 125, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1933", "comment_id": "AAAA%2FH%2F%2F%2B64%3D", "class_list": ["DeviceView", "HProfHandler"], "func_list": ["protected String getDialogTitle()", "public void onEndFailure(final Client client, final String message)", "public void run()", "public void onSuccess(final String remoteFilePath, final Client client)", "public void close()", "public DeviceView()", "public static DeviceView getInstance()", "public void createPartControl(Composite parent)", "private void open(String path) throws IOException, InterruptedException, PartInitException", "public void setFocus()", "public void selectionChanged(IDevice selectedDevice, Client selectedClient)", "private void doSelectionChanged(Client selectedClient)", "public void clientChanged(final Client client, int changeMask)", "protected String getDialogTitle()", "public void onEndFailure(final Client client, final String message)", "public void run()", "public void onSuccess(final String remoteFilePath, final Client client)", "public void close()"], "prime_var_dic": {"String": 3, "tools": 1}}, {"idx": 2821, "status": "update", "global_index": 11042, "project_name": "android_", "written_on": "2015-06-02 16:23:43", "tufano_target": "public static long METHOD_2 ( boolean VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = VAR_4 ; VAR_5 = ( double ) VAR_3 ; return VAR_3 ; }", "comment": "ditto", "tokenized_comment": ["ditto"], "tufano_code": "public static long METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = VAR_4 ; VAR_5 = ( double ) VAR_3 ; return VAR_3 ; }", "our_target": "  public static long $noinline$DoubleConvert(boolean flag) {\n", "our_code": "<|startfocus|>\n  public static long doubleConvert(boolean flag) {\n<|endfocus|>\n    // Try defeating inlining.\n    if (doThrow) {\n      throw new Error();\n    }\n    long l = myLong;\n    myDouble = (double)l;\n    return l;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "long", "<|s|>", "double", "Convert", "(", "boolean", "<|s|>", "flag", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Try", "<|s|>", "defeating", "<|s|>", "inlining", ".", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "do", "Throw", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Error", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "long", "<|s|>", "l", "<|s|>", "=", "<|s|>", "my", "Long", ";", "<|nl|>", "<|4-s|>", "my", "Double", "<|s|>", "=", "<|s|>", "(", "double", ")", "l", ";", "<|nl|>", "<|4-s|>", "return", "<|s|>", "l", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 36, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5052", "comment_id": "b9a97860_eba1452d", "class_list": ["Main"], "func_list": ["public static void main(String[] args)", "public static long floatConvert(boolean flag)", "public static long doubleConvert(boolean flag)"], "prime_var_dic": {"myLong": 1, "myFloat": 1, "myDouble": 1}}, {"idx": 80558, "status": "update", "global_index": 20528, "project_name": "android_", "written_on": "2013-03-27 21:19:21", "tufano_target": "public static final byte [ ] METHOD_1 ( TYPE_1 msg ) { final byte [ ] result = new byte [ msg . METHOD_2 ( ) ] ; METHOD_1 ( msg , result , 0 , result . length ) ; return result ; }", "comment": "I wonder if these convenience functions should be made static and then pass in a MessageNano as a parameter. That way we'd save 4 slots per Message.", "tokenized_comment": ["I", "<|s|>", "wonder", "<|s|>", "if", "<|s|>", "these", "<|s|>", "convenience", "<|s|>", "functions", "<|s|>", "should", "<|s|>", "be", "<|s|>", "made", "<|s|>", "static", "<|s|>", "and", "<|s|>", "then", "<|s|>", "pass", "<|s|>", "in", "<|s|>", "a", "<|s|>", "Message", "Nano", "<|s|>", "as", "<|s|>", "a", "<|s|>", "parameter", ".", "<|s|>", "That", "<|s|>", "way", "<|s|>", "we", "'", "d", "<|s|>", "save", "<|s|>", "4", "<|s|>", "slots", "<|s|>", "per", "<|s|>", "Message", "."], "tufano_code": "public byte [ ] METHOD_1 ( ) { final byte [ ] result = new byte [ METHOD_2 ( ) ] ; METHOD_1 ( result , 0 , result . length ) ; return result ; }", "our_target": "    public static final byte[] toByteArray(MessageNano msg) {\n        final byte[] result = new byte[msg.getSerializedSize()];\n        toByteArray(msg, result, 0, result.length);\n", "our_code": "<|startfocus|>\n    public byte[] toByteArray() {\n        final byte[] result = new byte[getSerializedSize()];\n        toByteArray(result, 0, result.length);\n<|endfocus|>\n        return result;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "byte", "[", "]", "<|s|>", "to", "Byte", "Array", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "byte", "[", "]", "<|s|>", "result", "<|s|>", "=", "<|s|>", "new", "<|s|>", "byte", "[", "get", "Serialized", "Size", "(", ")", "];", "<|nl|>", "<|8-s|>", "to", "Byte", "Array", "(", "result", ",", "<|s|>", "0", ",", "<|s|>", "result", ".", "length", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "result", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 73, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_2705", "comment_id": "Sk36dvaU", "class_list": ["MessageNano"], "func_list": ["public byte[] toByteArray()", "public void toByteArray(byte [] data, int offset, int length)"], "prime_var_dic": {"MessageNano": 1, "the": 1, "byte": 1}}, {"idx": 92388, "status": "update", "global_index": 8801, "project_name": "android_", "written_on": "2015-07-27 18:23:40", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_5 VAR_2 ) { if ( TYPE_6 . METHOD_3 ( VAR_2 ) ) { return TYPE_4 . METHOD_4 ( VAR_2 ) ; } return null ; }", "comment": "Please add @Nullable to the method return type.", "tokenized_comment": ["Please", "<|s|>", "add", "<|s|>", "@", "Nullable", "<|s|>", "to", "<|s|>", "the", "<|s|>", "method", "<|s|>", "return", "<|s|>", "type", "."], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 ) != null ) { return TYPE_4 . get ( ) ; } return null ; }", "our_target": "  @Nullable\n  public static DependencyManager getDependencyManager(@NotNull Project project) {\n    if (Projects.isBuildWithGradle(project)) {\n      return GradleDependencyManager.getInstance(project);\n", "our_code": "<|startfocus|>\n  public static DependencyManager getDependencyManager(@NonNull Module module) {\n    if (GradleUtil.getGradleBuildFile(module) != null) {\n      return GradleDependencyManager.get();\n<|endfocus|>\n    }\n    return null;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Dependency", "Manager", "<|s|>", "get", "Dependency", "Manager", "(", "@", "Non", "Null", "<|s|>", "Module", "<|s|>", "module", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "Gradle", "Util", ".", "get", "Gradle", "Build", "File", "(", "module", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Gradle", "Dependency", "Manager", ".", "get", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 36, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_162", "comment_id": "4d9d1a6f_062de893", "class_list": ["holds", "DependencyManager"], "func_list": ["public static DependencyManager getDependencyManager(@NonNull Module module)", "public static DependencyManager getDependencyManager(@NonNull Module module)"], "prime_var_dic": {"and": 1, "DependencyManager": 1}}, {"idx": 55513, "status": "insert", "global_index": 7395, "project_name": "android_", "written_on": "2016-04-07 16:29:41", "tufano_target": "protected void METHOD_1 ( ) { VAR_1 . add ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; }", "comment": "You also need to add TEST004", "tokenized_comment": ["You", "<|s|>", "also", "<|s|>", "need", "<|s|>", "to", "<|s|>", "add", "<|s|>", "TEST", "004"], "tufano_code": "protected void METHOD_1 ( ) { VAR_1 . add ( VAR_2 ) ; }", "our_target": "    // rtTestInfos.add(TEST003); // KnownIssue\n    rtTestInfos.add(TEST004);\n", "our_code": "  protected void fillRtTestInfos() {\n    rtTestInfos.add(TEST002);\n<|startfocus|>\n    // rtTestInfos.add(TEST003); // KnownIssue\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "void", "<|s|>", "fill", "Rt", "Test", "Infos", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "rt", "Test", "Infos", ".", "add", "(", "TEST", "002", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "rt", "Test", "Infos", ".", "add", "(", "TEST", "003", ");", "<|s|>", "//", "<|s|>", "Known", "Issue", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 68, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2654", "comment_id": "0e2b3c19_37bc1288", "class_list": ["DefUseTests"], "func_list": ["protected void fillRtTestInfos()"], "prime_var_dic": {}}, {"idx": 80782, "status": "update", "global_index": 7634, "project_name": "android_", "written_on": "2015-11-02 19:21:56", "tufano_target": "private TYPE_1 < ? > METHOD_1 ( ) { long VAR_1 = VAR_2 . get ( ) ; METHOD_2 ( VAR_3 ) ; return ! ( METHOD_3 ( ) && VAR_2 . get ( ) == VAR_1 && VAR_4 != null ) ; }", "comment": "Document that this returns true if finalization completed, false otherwise?", "tokenized_comment": ["Document", "<|s|>", "that", "<|s|>", "this", "<|s|>", "returns", "<|s|>", "true", "<|s|>", "if", "<|s|>", "finalization", "<|s|>", "completed", ",", "<|s|>", "false", "<|s|>", "otherwise", "?"], "tufano_code": "private boolean METHOD_1 ( ) { long VAR_1 = VAR_2 . get ( ) ; METHOD_2 ( VAR_3 ) ; return ! ( METHOD_3 ( ) && VAR_2 . get ( ) == VAR_1 && VAR_4 != null ) ; }", "our_target": "        /**\n         * Return a FinalizerReference that took too long to process or null.\n         * Wait MAX_FINALIZE_NANOS.  If the FinalizerDaemon took essentially the whole time\n         * processing a single reference, return that reference.  Otherwise return null.\n         */\n        private FinalizerReference<?> waitForFinalization() {\n", "our_code": "<|startfocus|>\n        private boolean waitForFinalization() {\n<|endfocus|>\n            long startCount = FinalizerDaemon.INSTANCE.progressCounter.get();\n            // Avoid remembering object being finalized, so as not to keep it alive.\n            sleepFor(MAX_FINALIZE_NANOS);\n            // If the count is unchanged, then we did not start working on a new object.\n            // If we are working on finalizing an object, we must have spent the whole\n            // MAX_FINALIZE_NANOS finalizing it. We may have spent twice that much; that's OK.\n            return !(getNeedToWork() && FinalizerDaemon.INSTANCE.progressCounter.get() == startCount\n                    && FinalizerDaemon.INSTANCE.finalizingObject != null);\n            // We must see the finalizingObject value from before the last\n            // objectsFinalized increment or a later one.\n            // If we read the object and it is non-null, then either it must have been\n            // non-null all along, or we must have just finished the queue.remove().\n            // In the latter case, it must have taken a full timeout interval for the finalizer\n            // daemon to get get from the last increment through the goToSleep() call, which we\n            // assume is impossible.  Thus the read of finalizingObject only races in\n            // situations in which it is acceptable to time out, notably because the\n            // finalizer finished just as we were timing out.\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "private", "<|s|>", "boolean", "<|s|>", "wait", "For", "Finalization", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "long", "<|s|>", "start", "Count", "<|s|>", "=", "<|s|>", "Finalizer", "Daemon", ".", "INSTANCE", ".", "progress", "Counter", ".", "get", "(", ");", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Avoid", "<|s|>", "remembering", "<|s|>", "object", "<|s|>", "being", "<|s|>", "finalized", ",", "<|s|>", "so", "<|s|>", "as", "<|s|>", "not", "<|s|>", "to", "<|s|>", "keep", "<|s|>", "it", "<|s|>", "alive", ".", "<|nl|>", "<|12-s|>", "sleep", "For", "(", "MAX", "_", "FINALIZE", "_", "NANOS", ");", "<|nl|>", "<|12-s|>", "//", "<|s|>", "If", "<|s|>", "the", "<|s|>", "count", "<|s|>", "is", "<|s|>", "unchanged", ",", "<|s|>", "then", "<|s|>", "we", "<|s|>", "did", "<|s|>", "not", "<|s|>", "start", "<|s|>", "working", "<|s|>", "on", "<|s|>", "a", "<|s|>", "new", "<|s|>", "object", ".", "<|nl|>", "<|12-s|>", "//", "<|s|>", "If", "<|s|>", "we", "<|s|>", "are", "<|s|>", "working", "<|s|>", "on", "<|s|>", "finalizing", "<|s|>", "an", "<|s|>", "object", ",", "<|s|>", "we", "<|s|>", "must", "<|s|>", "have", "<|s|>", "spent", "<|s|>", "the", "<|s|>", "whole", "<|nl|>", "<|12-s|>", "//", "<|s|>", "MAX", "_", "FINALIZE", "_", "NANOS", "<|s|>", "finalizing", "<|s|>", "it", ".", "<|s|>", "We", "<|s|>", "may", "<|s|>", "have", "<|s|>", "spent", "<|s|>", "twice", "<|s|>", "that", "<|s|>", "much", ";", "<|s|>", "that", "'", "s", "<|s|>", "OK", ".", "<|nl|>", "<|12-s|>", "return", "<|s|>", "!", "(", "get", "Need", "To", "Work", "(", ")", "<|s|>", "&&", "<|s|>", "Finalizer", "Daemon", ".", "INSTANCE", ".", "progress", "Counter", ".", "get", "(", ")", "<|s|>", "==", "<|s|>", "start", "Count", "<|nl|>", "<|16-s|>", "<|4-s|>", "&&", "<|s|>", "Finalizer", "Daemon", ".", "INSTANCE", ".", "finalizing", "Object", "<|s|>", "!=", "<|s|>", "null", ");", "<|nl|>", "<|12-s|>", "//", "<|s|>", "We", "<|s|>", "must", "<|s|>", "see", "<|s|>", "the", "<|s|>", "finalizing", "Object", "<|s|>", "value", "<|s|>", "from", "<|s|>", "before", "<|s|>", "the", "<|s|>", "last", "<|nl|>", "<|12-s|>", "//", "<|s|>", "objects", "Finalized", "<|s|>", "increment", "<|s|>", "or", "<|s|>", "a", "<|s|>", "later", "<|s|>", "one", ".", "<|nl|>", "<|12-s|>", "//", "<|s|>", "If", "<|s|>", "we", "<|s|>", "read", "<|s|>", "the", "<|s|>", "object", "<|s|>", "and", "<|s|>", "it", "<|s|>", "is", "<|s|>", "non", "-", "null", ",", "<|s|>", "then", "<|s|>", "either", "<|s|>", "it", "<|s|>", "must", "<|s|>", "have", "<|s|>", "been", "<|nl|>", "<|12-s|>", "//", "<|s|>", "non", "-", "null", "<|s|>", "all", "<|s|>", "along", ",", "<|s|>", "or", "<|s|>", "we", "<|s|>", "must", "<|s|>", "have", "<|s|>", "just", "<|s|>", "finished", "<|s|>", "the", "<|s|>", "queue", ".", "remove", "(", ")", ".", "<|nl|>", "<|12-s|>", "//", "<|s|>", "In", "<|s|>", "the", "<|s|>", "latter", "<|s|>", "case", ",", "<|s|>", "it", "<|s|>", "must", "<|s|>", "have", "<|s|>", "taken", "<|s|>", "a", "<|s|>", "full", "<|s|>", "timeout", "<|s|>", "interval", "<|s|>", "for", "<|s|>", "the", "<|s|>", "finalizer", "<|nl|>", "<|12-s|>", "//", "<|s|>", "daemon", "<|s|>", "to", "<|s|>", "get", "<|s|>", "get", "<|s|>", "from", "<|s|>", "the", "<|s|>", "last", "<|s|>", "increment", "<|s|>", "through", "<|s|>", "the", "<|s|>", "go", "To", "Sleep", "(", ")", "<|s|>", "call", ",", "<|s|>", "which", "<|s|>", "we", "<|nl|>", "<|12-s|>", "//", "<|s|>", "assume", "<|s|>", "is", "<|s|>", "impossible", ".", "<|2-s|>", "Thus", "<|s|>", "the", "<|s|>", "read", "<|s|>", "of", "<|s|>", "finalizing", "Object", "<|s|>", "only", "<|s|>", "races", "<|s|>", "in", "<|nl|>", "<|12-s|>", "//", "<|s|>", "situations", "<|s|>", "in", "<|s|>", "which", "<|s|>", "it", "<|s|>", "is", "<|s|>", "acceptable", "<|s|>", "to", "<|s|>", "time", "<|s|>", "out", ",", "<|s|>", "notably", "<|s|>", "because", "<|s|>", "the", "<|nl|>", "<|12-s|>", "//", "<|s|>", "finalizer", "<|s|>", "finished", "<|s|>", "just", "<|s|>", "as", "<|s|>", "we", "<|s|>", "were", "<|s|>", "timing", "<|s|>", "out", ".", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 317, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_2845", "comment_id": "7643a650_4e7d2696", "class_list": ["Daemons", "Daemon", "ReferenceQueueDaemon", "FinalizerDaemon", "FinalizerWatchdogDaemon", "HeapTaskDaemon"], "func_list": ["public static void start()", "public static void stop()", "protected Daemon(String name)", "public abstract void run();", "private void enqueue(Reference<?> list)", "private void doFinalize(FinalizerReference<?> reference)", "private void sleepFor(long durationNanos)", "private boolean waitForFinalization()", "private static void finalizerTimedOut(Object object)", "public static void requestHeapTrim()", "public static void requestGC()", "public static void start()", "public static void stop()", "protected Daemon(String name)", "public abstract void run();", "private void enqueue(Reference<?> list)", "private void doFinalize(FinalizerReference<?> reference)", "private void sleepFor(long durationNanos)", "private boolean waitForFinalization()", "private static void finalizerTimedOut(Object object)", "public static void requestHeapTrim()", "public static void requestGC()", "public static void stop()", "public static void stop()", "public static void stop()", "public static void stop()"], "prime_var_dic": {}}, {"idx": 1301, "status": "update", "global_index": 13026, "project_name": "android_", "written_on": "2014-10-15 08:59:07", "tufano_target": "public final boolean equals ( TYPE_1 obj ) { return obj instanceof TYPE_2 && ( ( TYPE_2 ) obj ) . VAR_1 . equals ( VAR_1 ) && ( ( TYPE_2 ) obj ) . VAR_2 . equals ( VAR_2 ) ; }", "comment": "final", "tokenized_comment": ["final"], "tufano_code": "public boolean equals ( TYPE_1 obj ) { return obj instanceof TYPE_2 && ( ( TYPE_2 ) obj ) . VAR_1 . equals ( VAR_1 ) && ( ( TYPE_2 ) obj ) . VAR_2 . equals ( VAR_2 ) ; }", "our_target": "  public final boolean equals(Object obj) {\n", "our_code": "<|startfocus|>\n  public boolean equals(Object obj) {\n<|endfocus|>\n    return obj instanceof TypeInInputLibraryLocation\n        && ((TypeInInputLibraryLocation) obj).inputLibLoc.equals(inputLibLoc)\n        && ((TypeInInputLibraryLocation) obj).typeName.equals(typeName);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "equals", "(", "Object", "<|s|>", "obj", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "obj", "<|s|>", "instanceof", "<|s|>", "Type", "In", "Input", "Library", "Location", "<|nl|>", "<|8-s|>", "&&", "<|s|>", "(", "(", "Type", "In", "Input", "Library", "Location", ")", "<|s|>", "obj", ")", ".", "input", "Lib", "Loc", ".", "equals", "(", "input", "Lib", "Loc", ")", "<|nl|>", "<|8-s|>", "&&", "<|s|>", "(", "(", "Type", "In", "Input", "Library", "Location", ")", "<|s|>", "obj", ")", ".", "type", "Name", ".", "equals", "(", "type", "Name", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 47, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_2390", "comment_id": "d06fc874_a9799dbb", "class_list": ["TypeInInputLibraryLocation"], "func_list": ["public TypeInInputLibraryLocation(@Nonnull InputLibraryLocation inputLibLoc,", "public String getDescription()", "public boolean equals(Object obj)", "public int hashCode()", "public InputLibraryLocation getInputLibraryLocation()"], "prime_var_dic": {"inputLibLoc": 1, "typeName": 1}}, {"idx": 82388, "status": "update", "global_index": 14750, "project_name": "android_", "written_on": "2014-04-15 18:52:08", "tufano_target": "public TYPE_1 METHOD_1 ( ) { return null ; }", "comment": "ditto", "tokenized_comment": ["ditto"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return null ; }", "our_target": "        /* This implementation doesn't use any delegated tasks. */\n", "our_code": "    public Runnable getDelegatedTask() {\n<|startfocus|>\n        // TODO Auto-generated method stub\n<|endfocus|>\n        return null;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Runnable", "<|s|>", "get", "Delegated", "Task", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "TODO", "<|s|>", "Auto", "-", "generated", "<|s|>", "method", "<|s|>", "stub", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 194, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_4757", "comment_id": "9980137b_7e77885e", "class_list": ["OpenSSLEngineImpl"], "func_list": ["public OpenSSLEngineImpl(SSLParametersImpl sslParameters)", "public void closeOutbound()", "public Runnable getDelegatedTask()", "public String[] getEnabledCipherSuites()", "public String[] getEnabledProtocols()", "public boolean getEnableSessionCreation()", "public HandshakeStatus getHandshakeStatus()", "public boolean getNeedClientAuth()", "public SSLSession getSession()", "public String[] getSupportedCipherSuites()", "public String[] getSupportedProtocols()", "public boolean getUseClientMode()", "public boolean getWantClientAuth()", "public boolean isInboundDone()", "public boolean isOutboundDone()", "public void setEnabledCipherSuites(String[] suites)", "public void setEnabledProtocols(String[] protocols)", "public void setEnableSessionCreation(boolean flag)", "public void setNeedClientAuth(boolean need)", "public void setUseClientMode(boolean mode)", "public void setWantClientAuth(boolean want)", "private static int writeSinkToByteBuffer(OpenSSLBIOSink sink, ByteBuffer dst)", "public void onSSLStateChange(long sslSessionNativePtr, int type, int val)", "private void free()", "public SSLSession getHandshakeSession()", "public String chooseServerAlias(X509KeyManager keyManager, String keyType)"], "prime_var_dic": {"sslParameters": 1, "handshakeCompleted": 1, "EngineState": 1, "been": 2, "on": 2, "resources": 1, "CertificateException": 1, "callback": 1}}, {"idx": 68075, "status": "update", "global_index": 12598, "project_name": "android_", "written_on": "2014-09-18 17:47:19", "tufano_target": "public VAR_1 ( String VAR_2 , String id ) { METHOD_1 ( VAR_2 ) ; METHOD_2 ( id ) ; }", "comment": "no need to include the 'this'.", "tokenized_comment": ["no", "<|s|>", "need", "<|s|>", "to", "<|s|>", "include", "<|s|>", "the", "<|s|>", "'", "this", "'", "."], "tufano_code": "public VAR_1 ( String VAR_2 , String id ) { this . METHOD_1 ( VAR_2 ) ; this . METHOD_2 ( id ) ; }", "our_target": "    setDescription(description);\n    setProjectId(id);\n", "our_code": "  public ElysiumProjectModelItem(@Nullable String description, @NotNull String id) {\n<|startfocus|>\n    this.setDescription(description);\n    this.setProjectId(id);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Elysium", "Project", "Model", "Item", "(", "@", "Nullable", "<|s|>", "String", "<|s|>", "description", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "id", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "this", ".", "set", "Description", "(", "description", ");", "<|nl|>", "<|4-s|>", "this", ".", "set", "Project", "Id", "(", "id", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 31, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4570", "comment_id": "301bc308_da170136", "class_list": ["ElysiumProjectModelItem"], "func_list": ["public ElysiumProjectModelItem(@Nullable String description, @NotNull String id)", "public String getDescription()", "public void setDescription(String description)", "public String getProjectId()", "public void setProjectId(String projectId)"], "prime_var_dic": {}}, {"idx": 794, "status": "update", "global_index": 19022, "project_name": "android_", "written_on": "2010-11-03 19:27:43", "tufano_target": "public void METHOD_1 ( ) { try { new TYPE_1 ( ) . METHOD_2 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 t ) { } }", "comment": "spurious tab I guess?", "tokenized_comment": ["spurious", "<|s|>", "tab", "<|s|>", "I", "<|s|>", "guess", "?"], "tufano_code": "public void METHOD_1 ( ) { try { new TYPE_1 ( ) . METHOD_2 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 t ) { } }", "our_target": "        try {\n", "our_code": "    public void testE5() {\n        //@uses dot.junit.opcodes.iput_wide.TestStubs\n        //@uses dot.junit.opcodes.iput_wide.d.T_iput_wide_11\n<|startfocus|>\n    \ttry {\n<|endfocus|>\n            new T_iput_wide_11().run();\n            fail(\"expected IllegalAccessError\");\n        } catch (IllegalAccessError t) {\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "E", "5", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "@", "uses", "<|s|>", "dot", ".", "junit", ".", "opcodes", ".", "iput", "_", "wide", ".", "Test", "Stubs", "<|nl|>", "<|8-s|>", "//", "@", "uses", "<|s|>", "dot", ".", "junit", ".", "opcodes", ".", "iput", "_", "wide", ".", "d", ".", "T", "_", "iput", "_", "wide", "_", "11", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|t|>", "try", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "new", "<|s|>", "T", "_", "iput", "_", "wide", "_", "11", "(", ")", ".", "run", "(", ");", "<|nl|>", "<|12-s|>", "fail", "(", "\"", "expected", "<|s|>", "Illegal", "Access", "Error", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Illegal", "Access", "Error", "<|s|>", "t", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 340, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5610", "comment_id": "AAAA8H%2F%2F9TM%3D", "class_list": ["Test_iput_wide", "", ""], "func_list": ["public void testN1()", "public void testN2()", "public void testN3()", "public void testN4()", "public void testE2()", "public void testVFE1()", "public void testVFE2()", "public void testVFE5()", "public void testVFE7()", "public void testVFE8()", "public void testVFE9()", "public void testVFE10()", "public void testVFE11()", "public void testVFE12()", "public void testVFE13()", "public void testVFE14()", "public void testVFE15()", "public void testVFE16()", "public void testVFE17()", "public void testVFE18()", "public void testVFE6()", "public void testVFE30()", "public void testE5()", "public void testN1()", "public void testN2()", "public void testN3()", "public void testN4()", "public void testE2()", "public void testVFE1()", "public void testVFE2()", "public void testVFE5()", "public void testVFE7()", "public void testVFE8()", "public void testVFE9()", "public void testVFE10()", "public void testVFE11()", "public void testVFE12()", "public void testVFE13()", "public void testVFE14()", "public void testVFE15()", "public void testVFE16()", "public void testVFE17()", "public void testVFE18()", "public void testVFE6()", "public void testVFE30()", "public void testE5()", "public void testN1()", "public void testN2()", "public void testN3()", "public void testN4()", "public void testE2()", "public void testVFE1()", "public void testVFE2()", "public void testVFE5()", "public void testVFE7()", "public void testVFE8()", "public void testVFE9()", "public void testVFE10()", "public void testVFE11()", "public void testVFE12()", "public void testVFE13()", "public void testVFE14()", "public void testVFE15()", "public void testVFE16()", "public void testVFE17()", "public void testVFE18()", "public void testVFE6()", "public void testVFE30()", "public void testE5()"], "prime_var_dic": {"License": 1, "into": 2, "final": 1, "index": 1, "registers": 1, "register": 1}}, {"idx": 90360, "status": "update", "global_index": 17539, "project_name": "android_", "written_on": "2012-05-06 23:25:29", "tufano_target": "protected void METHOD_1 ( ) { if ( VAR_1 != null ) { if ( VAR_1 . METHOD_2 ( ) != - 1 && VAR_1 . METHOD_3 ( ) == null && VAR_2 == false ) { VAR_3 . METHOD_4 ( null ) ; } } }", "comment": "There might be an opportunity here to wrap this on multiple lines.", "tokenized_comment": ["There", "<|s|>", "might", "<|s|>", "be", "<|s|>", "an", "<|s|>", "opportunity", "<|s|>", "here", "<|s|>", "to", "<|s|>", "wrap", "<|s|>", "this", "<|s|>", "on", "<|s|>", "multiple", "<|s|>", "lines", "."], "tufano_code": "protected void METHOD_1 ( ) { if ( VAR_1 != null ) { if ( VAR_1 . METHOD_2 ( ) != - 1 && VAR_1 . METHOD_3 ( ) == null && VAR_2 == false ) { VAR_3 . METHOD_4 ( null ) ; } } }", "our_target": "            if (mAccessPoint.getLevel() != -1 &&\n                mAccessPoint.getState() == null &&\n                mEdit == false) {\n", "our_code": "    protected void onStart() {\n        if (mAccessPoint != null) {\n<|startfocus|>\n            if ( mAccessPoint.getLevel() != -1 && mAccessPoint.getState() == null && mEdit == false) {\n<|endfocus|>\n                mController.afterTextChanged(null);\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "on", "Start", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Access", "Point", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "<|s|>", "m", "Access", "Point", ".", "get", "Level", "(", ")", "<|s|>", "!=", "<|s|>", "-", "1", "<|s|>", "&&", "<|s|>", "m", "Access", "Point", ".", "get", "State", "(", ")", "<|s|>", "==", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "m", "Edit", "<|s|>", "==", "<|s|>", "false", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "m", "Controller", ".", "after", "Text", "Changed", "(", "null", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 64, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4492", "comment_id": "AAAFUH%2F%2F%2Fjw%3D", "class_list": ["WifiDialog"], "func_list": ["public WifiDialog(Context context, DialogInterface.OnClickListener listener,", "public WifiConfigController getController()", "protected void onCreate(Bundle savedInstanceState)", "protected void onStart()", "public boolean isEdit()", "public Button getSubmitButton()", "public Button getForgetButton()", "public Button getCancelButton()", "public void setSubmitButton(CharSequence text)", "public void setForgetButton(CharSequence text)", "public void setCancelButton(CharSequence text)"], "prime_var_dic": {"BUTTON_SUBMIT": 1, "BUTTON_FORGET": 1, "mEdit": 1, "mListener": 1, "mAccessPoint": 1}}, {"idx": 92600, "status": "update", "global_index": 18903, "project_name": "android_", "written_on": "2010-10-08 16:08:45", "tufano_target": "public void METHOD_1 ( TYPE_1 i ) { VAR_1 = i ; }", "comment": "is this a new system property being introduced?  there's been increasing resistance to adding new system properties lately, as the whole thing has been overused past its original intentions.", "tokenized_comment": ["is", "<|s|>", "this", "<|s|>", "a", "<|s|>", "new", "<|s|>", "system", "<|s|>", "property", "<|s|>", "being", "<|s|>", "introduced", "?", "<|2-s|>", "there", "'", "s", "<|s|>", "been", "<|s|>", "increasing", "<|s|>", "resistance", "<|s|>", "to", "<|s|>", "adding", "<|s|>", "new", "<|s|>", "system", "<|s|>", "properties", "<|s|>", "lately", ",", "<|s|>", "as", "<|s|>", "the", "<|s|>", "whole", "<|s|>", "thing", "<|s|>", "has", "<|s|>", "been", "<|s|>", "overused", "<|s|>", "past", "<|s|>", "its", "<|s|>", "original", "<|s|>", "intentions", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 i ) { VAR_1 = i ; }", "our_target": "    public void setLogCatViewInterface(LogCatViewInterface i) {\n", "our_code": "<|startfocus|>\n    public void setLogCatViewInterface (LogCatViewInterface i) {\n<|endfocus|>\n        mLogCatViewInterface = i;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Log", "Cat", "View", "Interface", "<|s|>", "(", "Log", "Cat", "View", "Interface", "<|s|>", "i", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Log", "Cat", "View", "Interface", "<|s|>", "=", "<|s|>", "i", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1600, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1659", "comment_id": "AAAA73%2F%2F%2FpE%3D", "class_list": ["LogPanel", "LogMessageInfo", "LogMessage", "LogCatOuputReceiver", "for", "looks", "PsOutputReceiver"], "func_list": ["public String toString()", "public LogCatOuputReceiver()", "public void processNewLines(String[] lines)", "public boolean isCancelled = false;", "public void run()", "public LogPanel(LogColors colors,", "public void setActions(ICommonAction deleteAction, ICommonAction editAction,", "public void setColumnMode(int mode)", "public void setFont(Font font)", "public void deviceSelected()", "public void clientSelected()", "protected Control createControl(Composite parent)", "public void widgetSelected(SelectionEvent e)", "public void modifyText(ModifyEvent e)", "protected void postCreation()", "public void setFocus()", "public void startLogCat(final IDevice device)", "new Thread(\"Logcat\")   //$NON-NLS-1$", "public void stopLogCat(boolean inUiThread)", "public void addFilter()", "public void editFilter()", "public void deleteFilter()", "public boolean save()", "public void clear()", "public void copy(Clipboard clipboard)", "public void selectAll()", "public void setTableFocusListener(ITableFocusListener listener)", "private void addTableToFocusListener(final Table table)", "public void focusGained(FocusEvent e)", "public void focusLost(FocusEvent e)", "private static void copyTable(Clipboard clipboard, Table table)", "public void setCurrentFilterLogLevel(int i)", "private TabItem createTab(LogFilter filter, int index, boolean fillTable)", "public void widgetDefaultSelected(SelectionEvent e)", "public void controlMoved(ControlEvent e)", "public void controlResized(ControlEvent e)", "protected void updateColumns(Table table)", "public void resetUI(boolean inUiThread)", "protected void processLogLines(String[] lines)", "private void asyncRefresh()", "private void processNewMessage(LogMessage newMessage)", "private void createFilters()", "private boolean checkFilter(final LogMessageInfo md)", "private void addFilterToArray(LogFilter newFilter)", "private void removeFilterFromArray(LogFilter oldFilter)", "private void initFilter(LogFilter filter)", "private void initDefaultFilter()", "private void resetFilters()", "private LogFilter getCurrentFilter()", "private void emptyTables()", "protected void updateFilteringWith(String text)", "private void selectionChanged(LogFilter selectedFilter)", "public String getSelectedErrorLineMessage()", "public void setLogCatViewInterface (LogCatViewInterface i)", "public String toString()", "public LogCatOuputReceiver()", "public void processNewLines(String[] lines)", "public boolean isCancelled = false;", "public void run()", "public LogPanel(LogColors colors,", "public void setActions(ICommonAction deleteAction, ICommonAction editAction,", "public void setColumnMode(int mode)", "public void setFont(Font font)", "public void deviceSelected()", "public void clientSelected()", "protected Control createControl(Composite parent)", "public void widgetSelected(SelectionEvent e)", "public void modifyText(ModifyEvent e)", "protected void postCreation()", "public void setFocus()", "public void startLogCat(final IDevice device)", "new Thread(\"Logcat\")   //$NON-NLS-1$", "public void stopLogCat(boolean inUiThread)", "public void addFilter()", "public void editFilter()", "public void deleteFilter()", "public boolean save()", "public void clear()", "public void copy(Clipboard clipboard)", "public void selectAll()", "public void setTableFocusListener(ITableFocusListener listener)", "private void addTableToFocusListener(final Table table)", "public void focusGained(FocusEvent e)", "public void focusLost(FocusEvent e)", "private static void copyTable(Clipboard clipboard, Table table)", "public void setCurrentFilterLogLevel(int i)", "private TabItem createTab(LogFilter filter, int index, boolean fillTable)", "public void widgetDefaultSelected(SelectionEvent e)", "public void controlMoved(ControlEvent e)", "public void controlResized(ControlEvent e)", "protected void updateColumns(Table table)", "public void resetUI(boolean inUiThread)", "protected void processLogLines(String[] lines)", "private void asyncRefresh()", "private void processNewMessage(LogMessage newMessage)", "private void createFilters()", "private boolean checkFilter(final LogMessageInfo md)", "private void addFilterToArray(LogFilter newFilter)", "private void removeFilterFromArray(LogFilter oldFilter)", "private void initFilter(LogFilter filter)", "private void initDefaultFilter()", "private void resetFilters()", "private LogFilter getCurrentFilter()", "private void emptyTables()", "protected void updateFilteringWith(String text)", "private void selectionChanged(LogFilter selectedFilter)", "public String getSelectedErrorLineMessage()", "public void setLogCatViewInterface (LogCatViewInterface i)", "public boolean isCancelled()", "public void processNewLines(String[] lines)", "public void run()"], "prime_var_dic": {}}, {"idx": 87928, "status": "update", "global_index": 20678, "project_name": "android_", "written_on": "2013-05-11 22:11:48", "tufano_target": "private void METHOD_1 ( String VAR_1 , TYPE_1 error ) { TYPE_2 VAR_2 = VAR_3 . remove ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_2 ( VAR_1 , VAR_2 , error ) ; } }", "comment": "no final", "tokenized_comment": ["no", "<|s|>", "final"], "tufano_code": "private void METHOD_1 ( final String VAR_1 , TYPE_1 error ) { TYPE_2 VAR_2 = VAR_3 . remove ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_2 ( VAR_1 , VAR_2 , error ) ; } }", "our_target": "    private void onGetImageError(String cacheKey, VolleyError error) {\n", "our_code": "<|startfocus|>\n    private void onGetImageError(final String cacheKey, VolleyError error) {\n<|endfocus|>\n        // Notify the requesters that something failed via a null result.\n        // Remove this request from the list of in-flight requests.\n        RequestListenerWrapper wrapper = mInFlightRequests.remove(cacheKey);\n\n        if (wrapper != null) {\n            // Send the batched response\n            batchResponse(cacheKey, wrapper, error);\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "void", "<|s|>", "on", "Get", "Image", "Error", "(", "final", "<|s|>", "String", "<|s|>", "cache", "Key", ",", "<|s|>", "Volley", "Error", "<|s|>", "error", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Notify", "<|s|>", "the", "<|s|>", "requesters", "<|s|>", "that", "<|s|>", "something", "<|s|>", "failed", "<|s|>", "via", "<|s|>", "a", "<|s|>", "null", "<|s|>", "result", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Remove", "<|s|>", "this", "<|s|>", "request", "<|s|>", "from", "<|s|>", "the", "<|s|>", "list", "<|s|>", "of", "<|s|>", "in", "-", "flight", "<|s|>", "requests", ".", "<|nl|>", "<|8-s|>", "Request", "Listener", "Wrapper", "<|s|>", "wrapper", "<|s|>", "=", "<|s|>", "m", "In", "Flight", "Requests", ".", "remove", "(", "cache", "Key", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "wrapper", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Send", "<|s|>", "the", "<|s|>", "batched", "<|s|>", "response", "<|nl|>", "<|12-s|>", "batch", "Response", "(", "cache", "Key", ",", "<|s|>", "wrapper", ",", "<|s|>", "error", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 253, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4508", "comment_id": "Ui-rDBYE", "class_list": ["is", "must", "ImageLoader", "ImageContainer", "used", "RequestListenerWrapper"], "func_list": ["public ImageLoader(RequestQueue queue, ImageCache imageCache)", "public static ImageListener getImageListener(final ImageView view,", "public void onErrorResponse(VolleyError error)", "public void onResponse(ImageContainer response, boolean isImmediate)", "public ImageContainer get(String requestUrl, final ImageListener listener)", "new ImageRequest(requestUrl, new Listener<Bitmap>()", "private void onGetImageSuccess(final String cacheKey, Bitmap response)", "private void onGetImageError(final String cacheKey, VolleyError error)", "public ImageContainer get(String requestUrl, final ImageListener listener)", "public void cancelRequest()", "public Bitmap getBitmap(String url);", "public String getRequestUrl()", "public RequestListenerWrapper(Request<?> request, ImageContainer container)", "public void addHandler(ImageContainer container)", "public boolean removeHandlerAndCancelIfNecessary(ImageContainer container)", "private void batchResponse(String cacheKey, RequestListenerWrapper wrapper,", "public void run()", "private static String getCacheKey(String url, int maxWidth, int maxHeight)", "public void onResponse(ImageContainer response, boolean isImmediate)"], "prime_var_dic": {"main": 1, "response": 1}}, {"idx": 68844, "status": "update", "global_index": 17284, "project_name": "android_", "written_on": "2011-04-06 07:20:17", "tufano_target": "public boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 < VAR_2 || VAR_1 > VAR_3 ) { return false ; } if ( ( VAR_1 - VAR_2 ) % VAR_4 != 0 ) { return false ; } return true ; }", "comment": "This will fail with the updated US band definition, ((frequency-mMinFrequency) % mChannelOffset != 0) should work.", "tokenized_comment": ["This", "<|s|>", "will", "<|s|>", "fail", "<|s|>", "with", "<|s|>", "the", "<|s|>", "updated", "<|s|>", "US", "<|s|>", "band", "<|s|>", "definition", ",", "<|s|>", "(", "(", "frequency", "-", "m", "Min", "Frequency", ")", "<|s|>", "%", "<|s|>", "m", "Channel", "Offset", "<|s|>", "!=", "<|s|>", "0", ")", "<|s|>", "should", "<|s|>", "work", "."], "tufano_code": "public boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 < VAR_2 || VAR_1 > VAR_3 ) { return false ; } if ( VAR_1 % VAR_4 != 0 ) { return false ; } return true ; }", "our_target": "        if ((frequency - mMinFrequency) % mChannelOffset != 0) {\n", "our_code": "    public boolean isFrequencyValid(int frequency) {\n        if (frequency < mMinFrequency || frequency > mMaxFrequency) {\n            return false;\n        }\n<|startfocus|>\n        if (frequency % mChannelOffset != 0) {\n<|endfocus|>\n            return false;\n        }\n        return true;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Frequency", "Valid", "(", "int", "<|s|>", "frequency", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "frequency", "<|s|>", "<", "<|s|>", "m", "Min", "Frequency", "<|s|>", "||", "<|s|>", "frequency", "<|s|>", ">", "<|s|>", "m", "Max", "Frequency", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "frequency", "<|s|>", "%", "<|s|>", "m", "Channel", "Offset", "<|s|>", "!=", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 176, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_1987", "comment_id": "AAAA%2Fn%2F%2F%2Fr8%3D", "class_list": ["is", "FmBand"], "func_list": ["public FmBand(int minFrequency, int maxFrequency, int channelOffset, int defaultFrequency)", "public boolean isFrequencyValid(int frequency)", "public int getMinFrequency()", "public int getMaxFrequency()", "public int getDefaultFrequency()", "public int getChannelOffset()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public FmBand createFromParcel(Parcel in)", "public FmBand[] newArray(int size)", "public FmBand(int minFrequency, int maxFrequency, int channelOffset, int defaultFrequency)", "public boolean isFrequencyValid(int frequency)", "public int getMinFrequency()", "public int getMaxFrequency()", "public int getDefaultFrequency()", "public int getChannelOffset()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public FmBand createFromParcel(Parcel in)", "public FmBand[] newArray(int size)"], "prime_var_dic": {"implements": 1, "int": 5, "representation": 1, "validate": 1, "interface": 3}}, {"idx": 92092, "status": "update", "global_index": 2698, "project_name": "android_", "written_on": "2017-03-31 23:39:03", "tufano_target": "TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) ; } return VAR_1 ; }", "comment": "Is this going to crash the system? if so, add a TODO to fix it.", "tokenized_comment": ["Is", "<|s|>", "this", "<|s|>", "going", "<|s|>", "to", "<|s|>", "crash", "<|s|>", "the", "<|s|>", "system", "?", "<|s|>", "if", "<|s|>", "so", ",", "<|s|>", "add", "<|s|>", "a", "<|s|>", "TODO", "<|s|>", "to", "<|s|>", "fix", "<|s|>", "it", "."], "tufano_code": "TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) . METHOD_3 ( ) ; } return VAR_1 ; }", "our_target": "            throw new RemoteException(\"Failed to Get Netd Instance\");\n", "our_code": "    INetd getNetdInstance() {\n        final INetd netd = NetdService.getInstance();\n        if (netd == null) {\n<|startfocus|>\n            throw new RemoteException(\"Failed to Get Netd Instance\").rethrowFromSystemServer();\n<|endfocus|>\n        }\n        return netd;\n    }", "tokenized_code": ["<|4-s|>", "INetd", "<|s|>", "get", "Netd", "Instance", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "INetd", "<|s|>", "netd", "<|s|>", "=", "<|s|>", "Netd", "Service", ".", "get", "Instance", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "netd", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Remote", "Exception", "(", "\"", "Failed", "<|s|>", "to", "<|s|>", "Get", "<|s|>", "Netd", "<|s|>", "Instance", "\"", ")", ".", "rethrow", "From", "System", "Server", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "netd", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 259, "base_patch_number": 16, "changed_patch_number": 17, "code_file_name": "android_4107", "comment_id": "67b467e6_3344487f", "class_list": ["IpSecService", "ManagedResource", "to", "TransformRecord", "SpiRecord"], "func_list": ["public IpSecConfig getConfig()", "protected abstract void releaseResources();", "protected abstract void nullifyRecord();", "private IpSecService(Context context)", "public void systemReady()", "private void connectNativeNetdService()", "new Thread(", "public void run()", "INetd getNetdInstance()", "boolean isNetdAlive()", "public void closeUdpEncapsulationSocket(ParcelFileDescriptor socket) }", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public IpSecConfig getConfig()", "protected abstract void releaseResources();", "protected abstract void nullifyRecord();", "private IpSecService(Context context)", "public void systemReady()", "private void connectNativeNetdService()", "new Thread(", "public void run()", "INetd getNetdInstance()", "boolean isNetdAlive()", "public void closeUdpEncapsulationSocket(ParcelFileDescriptor socket) }", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public IpSecConfig getConfig()", "protected void releaseResources()", "protected void nullifyRecord()", "protected void releaseResources()", "protected void nullifyRecord()"], "prime_var_dic": {"mDirection": 1, "mLocalAddress": 1, "mRemoteAddress": 1, "mBinder": 1}}, {"idx": 87984, "status": "update", "global_index": 8613, "project_name": "android_", "written_on": "2015-08-05 14:53:42", "tufano_target": "public VAR_1 ( TYPE_1 context , TYPE_5 VAR_7 , TYPE_3 VAR_3 ) { super ( context , VAR_3 ) ; VAR_4 = context ; VAR_5 = new TYPE_4 ( ) ; VAR_6 = VAR_2 ; }", "comment": "already mentioned\n\nthe interface should live with the class that calls the methods of the interface, NOT the class that implements it", "tokenized_comment": ["already", "<|s|>", "mentioned", "<|nl|>", "<|nl|>", "the", "<|s|>", "interface", "<|s|>", "should", "<|s|>", "live", "<|s|>", "with", "<|s|>", "the", "<|s|>", "class", "<|s|>", "that", "<|s|>", "calls", "<|s|>", "the", "<|s|>", "methods", "<|s|>", "of", "<|s|>", "the", "<|s|>", "interface", ",", "<|s|>", "NOT", "<|s|>", "the", "<|s|>", "class", "<|s|>", "that", "<|s|>", "implements", "<|s|>", "it"], "tufano_code": "public VAR_1 ( TYPE_1 context , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { super ( context , VAR_3 ) ; VAR_4 = context ; VAR_5 = new TYPE_4 ( ) ; VAR_6 = VAR_2 ; }", "our_target": "                                      @NotNull ItemHoverListener itemHoverListener,\n", "our_code": "  public StyleListPaletteCellRenderer(@NotNull ThemeEditorContext context,\n<|startfocus|>\n                                      @NotNull ThemeEditorComponent.ThemeChangedListener themeChangedListener,\n<|endfocus|>\n                                      @Nullable JComboBox comboBox) {\n    super(context, comboBox);\n    myContext = context;\n    myColorPaletteComponent = new ColorPaletteComponent();\n    myThemeChangedListener = themeChangedListener;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Style", "List", "Palette", "Cell", "Renderer", "(", "@", "Not", "Null", "<|s|>", "Theme", "Editor", "Context", "<|s|>", "context", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "<|2-s|>", "@", "Not", "Null", "<|s|>", "Theme", "Editor", "Component", ".", "Theme", "Changed", "Listener", "<|s|>", "theme", "Changed", "Listener", ",", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "<|2-s|>", "@", "Nullable", "<|s|>", "JCombo", "Box", "<|s|>", "combo", "Box", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "super", "(", "context", ",", "<|s|>", "combo", "Box", ");", "<|nl|>", "<|4-s|>", "my", "Context", "<|s|>", "=", "<|s|>", "context", ";", "<|nl|>", "<|4-s|>", "my", "Color", "Palette", "Component", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Color", "Palette", "Component", "(", ");", "<|nl|>", "<|4-s|>", "my", "Theme", "Changed", "Listener", "<|s|>", "=", "<|s|>", "theme", "Changed", "Listener", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 43, "base_patch_number": 29, "changed_patch_number": 30, "code_file_name": "android_264", "comment_id": "ea1a34b3_a9e4d9cb", "class_list": ["StyleListPaletteCellRenderer"], "func_list": ["public StyleListPaletteCellRenderer(@NotNull ThemeEditorContext context,", "protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus)"], "prime_var_dic": {"String": 3, "ThemeEditorContext": 1}}, {"idx": 74070, "status": "update", "global_index": 21682, "project_name": "android_", "written_on": "2013-12-19 20:09:25", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , boolean VAR_3 ) { super ( STRING_4 + ( VAR_3 ? STRING_5 : STRING_6 ) + STRING_7 + ( VAR_3 ? STRING_2 : STRING_3 ) ) ; VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "comment": "space around \"?\" and \":\"\n\nalso instead of exposing raw command used, maybe try to be more description? e.g. \"Device Screenshot\" vs \"Device Screenshot with Compressed Hierarchy\"", "tokenized_comment": ["space", "<|s|>", "around", "<|s|>", "\"", "?", "\"", "<|s|>", "and", "<|s|>", "\"", ":", "\"", "<|nl|>", "<|nl|>", "also", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "exposing", "<|s|>", "raw", "<|s|>", "command", "<|s|>", "used", ",", "<|s|>", "maybe", "<|s|>", "try", "<|s|>", "to", "<|s|>", "be", "<|s|>", "more", "<|s|>", "description", "?", "<|s|>", "e", ".", "g", ".", "<|s|>", "\"", "Device", "<|s|>", "Screenshot", "\"", "<|s|>", "vs", "<|s|>", "\"", "Device", "<|s|>", "Screenshot", "<|s|>", "with", "<|s|>", "Compressed", "<|s|>", "Hierarchy", "\""], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , boolean VAR_3 ) { super ( STRING_1 + ( VAR_3 ? STRING_2 : STRING_3 ) ) ; VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "our_target": "        super(\"&Device Screenshot \"+ (compressed ? \"with Compressed Hierarchy\" : \"\") \n                +\"(uiautomator dump\" + (compressed ? \" --compressed)\" : \")\"));\n", "our_code": "    public ScreenshotAction(UiAutomatorViewer viewer, boolean compressed) {\n<|startfocus|>\n        super(\"&Device Screenshot (uiautomator dump\"+(compressed? \" --compressed)\":\")\"));\n<|endfocus|>\n        mViewer = viewer;\n        mCompressed = compressed;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Screenshot", "Action", "(", "Ui", "Automator", "Viewer", "<|s|>", "viewer", ",", "<|s|>", "boolean", "<|s|>", "compressed", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "super", "(", "\"", "&", "Device", "<|s|>", "Screenshot", "<|s|>", "(", "uiautomator", "<|s|>", "dump", "\"", "+", "(", "compressed", "?", "<|s|>", "\"", "<|s|>", "--", "compressed", ")", "\"", ":", "\"", ")", "\"", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Viewer", "<|s|>", "=", "<|s|>", "viewer", ";", "<|nl|>", "<|8-s|>", "m", "Compressed", "<|s|>", "=", "<|s|>", "compressed", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 55, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_5626", "comment_id": "e871338d_37be1297", "class_list": ["ScreenshotAction", "DevicePickerDialog"], "func_list": ["public ScreenshotAction(UiAutomatorViewer viewer, boolean compressed)", "public ImageDescriptor getImageDescriptor()", "public void run()", "private void showError(final String msg, final Throwable t)", "private IDevice pickDevice()", "public DevicePickerDialog(Shell parentShell, List<IDevice> devices)", "protected Control createDialogArea(Composite parentShell)", "public void widgetSelected(SelectionEvent arg0)", "public IDevice getSelectedDevice()"], "prime_var_dic": {}}, {"idx": 91945, "status": "update", "global_index": 8760, "project_name": "android_", "written_on": "2015-08-06 09:51:15", "tufano_target": "public void METHOD_1 ( byte [ ] data ) { if ( METHOD_2 ( ) ) { throw new TYPE_1 ( STRING_2 ) ; } VAR_1 = data ; }", "comment": "The message in the exception could be more verbose explaining that in client mode this field should only be populated from the server's response.", "tokenized_comment": ["The", "<|s|>", "message", "<|s|>", "in", "<|s|>", "the", "<|s|>", "exception", "<|s|>", "could", "<|s|>", "be", "<|s|>", "more", "<|s|>", "verbose", "<|s|>", "explaining", "<|s|>", "that", "<|s|>", "in", "<|s|>", "client", "<|s|>", "mode", "<|s|>", "this", "<|s|>", "field", "<|s|>", "should", "<|s|>", "only", "<|s|>", "be", "<|s|>", "populated", "<|s|>", "from", "<|s|>", "the", "<|s|>", "server", "'", "s", "<|s|>", "response", "."], "tufano_code": "public void METHOD_1 ( byte [ ] data ) { if ( METHOD_2 ( ) ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_1 = data ; }", "our_target": "            throw new IllegalStateException(\"Cannot set SCT extension data in client mode.\");\n", "our_code": "    public void setSCTExtensionData(byte[] data) {\n        if (getUseClientMode()) {\n<|startfocus|>\n            throw new IllegalStateException(\"Client mode\");\n<|endfocus|>\n        }\n        sctExtensionData = data;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "SCTExtension", "Data", "(", "byte", "[", "]", "<|s|>", "data", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "get", "Use", "Client", "Mode", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "\"", "Client", "<|s|>", "mode", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "sct", "Extension", "Data", "<|s|>", "=", "<|s|>", "data", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1319, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4764", "comment_id": "8af7f8e0_a322fad7", "class_list": ["OpenSSLSocketImpl", "OpenSSLSocketImpl", "provides", "SSLInputStream", "provides", "SSLOutputStream"], "func_list": ["private String getHostname()", "public int getPort()", "public int clientPSKKeyRequested(String identityHint, byte[] identity, byte[] key)", "public int serverPSKKeyRequested(String identityHint, String identity, byte[] key)", "public void onSSLStateChange(long sslSessionNativePtr, int type, int val)", "private void notifyHandshakeCompletedListeners()", "public byte[] addCustomExtension(int ext_type)", "public void parseCustomExtension(int ext_type, byte[] data)", "private void assertReadableOrWriteableState()", "public void awaitPendingOps()", "public SSLSession getSession()", "public void addHandshakeCompletedListener(", "public void removeHandshakeCompletedListener(", "public boolean getEnableSessionCreation()", "public void setEnableSessionCreation(boolean flag)", "public String[] getSupportedCipherSuites()", "public String[] getEnabledCipherSuites()", "public void setEnabledCipherSuites(String[] suites)", "public String[] getSupportedProtocols()", "public String[] getEnabledProtocols()", "public void setEnabledProtocols(String[] protocols)", "public void setUseSessionTickets(boolean useSessionTickets)", "public void setHostname(String hostname)", "public void setChannelIdEnabled(boolean enabled)", "public void setChannelIdPrivateKey(PrivateKey privateKey)", "public boolean getUseClientMode()", "public void setUseClientMode(boolean mode)", "public boolean getWantClientAuth()", "public boolean getNeedClientAuth()", "public void setNeedClientAuth(boolean need)", "public void setWantClientAuth(boolean want)", "private void free()", "public byte[] getNpnSelectedProtocol()", "public byte[] getAlpnSelectedProtocol()", "public void setNpnProtocols(byte[] npnProtocols)", "public void setAlpnProtocols(byte[] alpnProtocols)", "public void setSCTExtensionEnabled(boolean enabled)", "public byte[] getSCTExtensionData()", "public void setSCTExtensionData(byte[] data)", "public String chooseServerAlias(X509KeyManager keyManager, String keyType)", "public String chooseClientAlias(X509KeyManager keyManager, X500Principal[] issuers,", "public String chooseServerPSKIdentityHint(PSKKeyManager keyManager)", "public String chooseClientPSKIdentity(PSKKeyManager keyManager, String identityHint)", "public SecretKey getPSKKey(PSKKeyManager keyManager, String identityHint, String identity)", "private String getHostname()", "public int getPort()", "public int clientPSKKeyRequested(String identityHint, byte[] identity, byte[] key)", "public int serverPSKKeyRequested(String identityHint, String identity, byte[] key)", "public void onSSLStateChange(long sslSessionNativePtr, int type, int val)", "private void notifyHandshakeCompletedListeners()", "public byte[] addCustomExtension(int ext_type)", "public void parseCustomExtension(int ext_type, byte[] data)", "private void assertReadableOrWriteableState()", "public void awaitPendingOps()", "public SSLSession getSession()", "public void addHandshakeCompletedListener(", "public void removeHandshakeCompletedListener(", "public boolean getEnableSessionCreation()", "public void setEnableSessionCreation(boolean flag)", "public String[] getSupportedCipherSuites()", "public String[] getEnabledCipherSuites()", "public void setEnabledCipherSuites(String[] suites)", "public String[] getSupportedProtocols()", "public String[] getEnabledProtocols()", "public void setEnabledProtocols(String[] protocols)", "public void setUseSessionTickets(boolean useSessionTickets)", "public void setHostname(String hostname)", "public void setChannelIdEnabled(boolean enabled)", "public void setChannelIdPrivateKey(PrivateKey privateKey)", "public boolean getUseClientMode()", "public void setUseClientMode(boolean mode)", "public boolean getWantClientAuth()", "public boolean getNeedClientAuth()", "public void setNeedClientAuth(boolean need)", "public void setWantClientAuth(boolean want)", "private void free()", "public byte[] getNpnSelectedProtocol()", "public byte[] getAlpnSelectedProtocol()", "public void setNpnProtocols(byte[] npnProtocols)", "public void setAlpnProtocols(byte[] alpnProtocols)", "public void setSCTExtensionEnabled(boolean enabled)", "public byte[] getSCTExtensionData()", "public void setSCTExtensionData(byte[] data)", "public String chooseServerAlias(X509KeyManager keyManager, String keyType)", "public String chooseClientAlias(X509KeyManager keyManager, X500Principal[] issuers,", "public String chooseServerPSKIdentityHint(PSKKeyManager keyManager)", "public String chooseClientPSKIdentity(PSKKeyManager keyManager, String identityHint)", "public SecretKey getPSKKey(PSKKeyManager keyManager, String identityHint, String identity)", "public void awaitPendingOps()", "public void awaitPendingOps()"], "prime_var_dic": {"socket": 1, "autoClose": 1}}, {"idx": 93694, "status": "update", "global_index": 19787, "project_name": "android_", "written_on": "2012-08-27 19:11:49", "tufano_target": "static TYPE_1 METHOD_1 ( String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 . message = VAR_1 ; VAR_4 . state = VAR_5 ; VAR_6 = true ; return VAR_4 ; }", "comment": "long line.", "tokenized_comment": ["long", "<|s|>", "line", "."], "tufano_code": "static TYPE_1 METHOD_1 ( String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_4 . message = VAR_1 ; VAR_4 . state = VAR_5 ; VAR_6 = true ; return VAR_4 ; }", "our_target": "    static GsmMmiCode newFromUssdUserInput(String ussdMessge,\n                                           GSMPhone phone,\n                                           UiccCardApplication app) {\n", "our_code": "<|startfocus|>\n    static GsmMmiCode newFromUssdUserInput(String ussdMessge, GSMPhone phone, UiccCardApplication app) {\n<|endfocus|>\n        GsmMmiCode ret = new GsmMmiCode(phone, app);\n\n        ret.message = ussdMessge;\n        ret.state = State.PENDING;\n        ret.isPendingUSSD = true;\n\n        return ret;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "static", "<|s|>", "Gsm", "Mmi", "Code", "<|s|>", "new", "From", "Ussd", "User", "Input", "(", "String", "<|s|>", "ussd", "Messge", ",", "<|s|>", "GSMPhone", "<|s|>", "phone", ",", "<|s|>", "Uicc", "Card", "Application", "<|s|>", "app", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Gsm", "Mmi", "Code", "<|s|>", "ret", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Gsm", "Mmi", "Code", "(", "phone", ",", "<|s|>", "app", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "ret", ".", "message", "<|s|>", "=", "<|s|>", "ussd", "Messge", ";", "<|nl|>", "<|8-s|>", "ret", ".", "state", "<|s|>", "=", "<|s|>", "State", ".", "PENDING", ";", "<|nl|>", "<|8-s|>", "ret", ".", "is", "Pending", "USSD", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "ret", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 237, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4662", "comment_id": "AAAI63%2F%2F%2FQE%3D", "class_list": ["GsmMmiCode", "*/", "bit", "gets"], "func_list": ["static GsmMmiCode newFromUssdUserInput(String ussdMessge, GSMPhone phone, UiccCardApplication app)", "public boolean isCancelable()", "static private boolean isShortCode(String dialString, GSMPhone phone)", "static private boolean isShortCodeUSSD(String dialString, GSMPhone phone)", "boolean isPinCommand()", "boolean isActivate()", "boolean isDeactivate()", "boolean isInterrogate()", "boolean isRegister()", "boolean isErasure()", "private boolean isPendingUSSD;", "private boolean isUssdRequest;", "private void handlePasswordError(int res)", "void sendUssd(String ussdMessage)", "private CharSequence getErrorMessage(AsyncResult ar)", "private CharSequence getScString()", "public String toString()"], "prime_var_dic": {}}, {"idx": 44308, "status": "update", "global_index": 12348, "project_name": "android_", "written_on": "2014-08-19 06:11:57", "tufano_target": "public VAR_1 ( TYPE_2 VAR_3 , String title , final boolean VAR_4 ) { super ( VAR_3 , title , true , new TYPE_3 ( ) { public boolean METHOD_1 ( ) { return VAR_4 ; } public void METHOD_2 ( ) { } } ) ; VAR_5 = VAR_2 ; VAR_6 = VAR_4 ; }", "comment": "This parent object is basically undoing the fact that this inner class is static. You could get rid of it and make it non-static", "tokenized_comment": ["This", "<|s|>", "parent", "<|s|>", "object", "<|s|>", "is", "<|s|>", "basically", "<|s|>", "undoing", "<|s|>", "the", "<|s|>", "fact", "<|s|>", "that", "<|s|>", "this", "<|s|>", "inner", "<|s|>", "class", "<|s|>", "is", "<|s|>", "static", ".", "<|s|>", "You", "<|s|>", "could", "<|s|>", "get", "<|s|>", "rid", "<|s|>", "of", "<|s|>", "it", "<|s|>", "and", "<|s|>", "make", "<|s|>", "it", "<|s|>", "non", "-", "static"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , String title , final boolean VAR_4 ) { super ( VAR_3 , title , true , new TYPE_3 ( ) { public boolean METHOD_1 ( ) { return VAR_4 ; } public void METHOD_2 ( ) { } } ) ; VAR_5 = VAR_2 ; VAR_6 = VAR_4 ; }", "our_target": "    public InternalWaitTask(@Nullable Project project, @NotNull String title, final boolean background) {\n", "our_code": "<|startfocus|>\n    public InternalWaitTask(@NotNull AbstractWaitTask parent, @Nullable Project project, @NotNull String title, final boolean background) {\n<|endfocus|>\n      super(project, title, true, new PerformInBackgroundOption() {\n        @Override\n        public boolean shouldStartInBackground() {\n          return background;\n        }\n\n        @Override\n        public void processSentToBackground() {\n\n        }\n      });\n      myParent = parent;\n      myBackground = background;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Internal", "Wait", "Task", "(", "@", "Not", "Null", "<|s|>", "Abstract", "Wait", "Task", "<|s|>", "parent", ",", "<|s|>", "@", "Nullable", "<|s|>", "Project", "<|s|>", "project", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "title", ",", "<|s|>", "final", "<|s|>", "boolean", "<|s|>", "background", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "super", "(", "project", ",", "<|s|>", "title", ",", "<|s|>", "true", ",", "<|s|>", "new", "<|s|>", "Perform", "In", "Background", "Option", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "@", "Override", "<|nl|>", "<|8-s|>", "public", "<|s|>", "boolean", "<|s|>", "should", "Start", "In", "Background", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "background", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "@", "Override", "<|nl|>", "<|8-s|>", "public", "<|s|>", "void", "<|s|>", "process", "Sent", "To", "Background", "(", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Parent", "<|s|>", "=", "<|s|>", "parent", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Background", "<|s|>", "=", "<|s|>", "background", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 269, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_149", "comment_id": "f3f77545_4614e8d7", "class_list": ["for", "AbstractWaitTask", "InternalWaitTask"], "func_list": ["public AbstractWaitTask(@Nullable Project project, @NotNull String title)", "protected int getTimeout()", "public synchronized final void runInBackground(Runnable callback)", "protected void runInForeground(Task task)", "protected void assertIsDispatchThread()", "private void initializeIfNeeded()", "private boolean isCurrentWaitTask(InternalWaitTask task)", "public InternalWaitTask(@NotNull AbstractWaitTask parent, @Nullable Project project, @NotNull String title, final boolean background)", "public boolean shouldStartInBackground()", "public void processSentToBackground()", "public synchronized final void runInBackground(Runnable callback)", "public void onSuccess()", "public void onCancel()", "public void terminate()", "public boolean isBackgroundTask()", "public void markComplete()", "protected abstract boolean isComplete();", "public AbstractWaitTask(@Nullable Project project, @NotNull String title)", "protected int getTimeout()", "public synchronized final void runInBackground(Runnable callback)", "protected void runInForeground(Task task)", "protected void assertIsDispatchThread()", "private void initializeIfNeeded()", "private boolean isCurrentWaitTask(InternalWaitTask task)", "public InternalWaitTask(@NotNull AbstractWaitTask parent, @Nullable Project project, @NotNull String title, final boolean background)", "public boolean shouldStartInBackground()", "public void processSentToBackground()", "public synchronized final void runInBackground(Runnable callback)", "public void onSuccess()", "public void onCancel()", "public void terminate()", "public boolean isBackgroundTask()", "public void markComplete()", "protected abstract boolean isComplete();", "public AbstractWaitTask(@Nullable Project project, @NotNull String title)"], "prime_var_dic": {}}, {"idx": 30257, "status": "update", "global_index": 6266, "project_name": "android_", "written_on": "2016-05-04 19:04:19", "tufano_target": "private boolean METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_1 && VAR_1 < VAR_2 ) { return false ; } else { return ! METHOD_3 ( ) ; } return false ; }", "comment": "what if it returns NULL?", "tokenized_comment": ["what", "<|s|>", "if", "<|s|>", "it", "<|s|>", "returns", "<|s|>", "NULL", "?"], "tufano_code": "private boolean METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_1 && VAR_1 >= VAR_2 ) { return ! METHOD_3 ( ) ; } return false ; }", "our_target": "        if (first_api_level && first_api_level < min_api_level) {\n            return false;\n        } else {\n", "our_code": "    private boolean isRequired() {\n        int first_api_level = System.GetProperty(\"ro.product.first_api_level\");\n\n        // Optional before min_api_level or if the device has low RAM\n<|startfocus|>\n        if (first_api_level && first_api_level >= min_api_level) {\n<|endfocus|>\n            return !hasLowRAM();\n        }\n\n        return false;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Required", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "first", "_", "api", "_", "level", "<|s|>", "=", "<|s|>", "System", ".", "Get", "Property", "(", "\"", "ro", ".", "product", ".", "first", "_", "api", "_", "level", "\"", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Optional", "<|s|>", "before", "<|s|>", "min", "_", "api", "_", "level", "<|s|>", "or", "<|s|>", "if", "<|s|>", "the", "<|s|>", "device", "<|s|>", "has", "<|s|>", "low", "<|s|>", "RAM", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "first", "_", "api", "_", "level", "<|s|>", "&&", "<|s|>", "first", "_", "api", "_", "level", "<|s|>", ">=", "<|s|>", "min", "_", "api", "_", "level", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "!", "has", "Low", "RAM", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 79, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5438", "comment_id": "ed70b31a_873d681e", "class_list": ["EncryptionTest"], "func_list": ["private boolean hasLowRAM()", "private boolean isRequired()"], "prime_var_dic": {"int": 1, "String": 2, "is": 1}}, {"idx": 2018, "status": "insert", "global_index": 5039, "project_name": "android_", "written_on": "2016-08-25 22:43:53", "tufano_target": "public void METHOD_1 ( int VAR_1 ) { for ( int VAR_2 = 0 ; VAR_2 < VAR_1 ; ++ VAR_2 ) { String VAR_3 = STRING_1 ; } return VAR_4 ; }", "comment": "That's dangerous. It could be optimized away.", "tokenized_comment": ["That", "'", "s", "<|s|>", "dangerous", ".", "<|s|>", "It", "<|s|>", "could", "<|s|>", "be", "<|s|>", "optimized", "<|s|>", "away", "."], "tufano_code": "public void METHOD_1 ( int VAR_1 ) { for ( int VAR_2 = 0 ; VAR_2 < VAR_1 ; ++ VAR_2 ) { String VAR_3 = STRING_1 ; } }", "our_target": "        }\n        return v;\n", "our_code": "    public void timeStringDexCacheAccess(int reps) {\n        for (int rep = 0; rep < reps; ++rep) {\n            String s = \"hello, world!\";\n<|startfocus|>\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "time", "String", "Dex", "Cache", "Access", "(", "int", "<|s|>", "reps", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "rep", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "rep", "<|s|>", "<", "<|s|>", "reps", ";", "<|s|>", "++", "rep", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "s", "<|s|>", "=", "<|s|>", "\"", "hello", ",", "<|s|>", "world", "!", "\"", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 25, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_969", "comment_id": "4537ee0c_602667d3", "class_list": ["StringDexCacheBenchmark"], "func_list": ["public void timeStringDexCacheAccess(int reps)"], "prime_var_dic": {}}, {"idx": 37446, "status": "update", "global_index": 9425, "project_name": "android_", "written_on": "2015-09-25 13:04:03", "tufano_target": "public static int METHOD_2 ( ) { return INT_1 ; }", "comment": "Please rename to '$inline$method'. The compiler recognizes the \"$inline$\" marker in debug mode and will verify that the method indeed got inlined. It's not necessary here but can't hurt either.", "tokenized_comment": ["Please", "<|s|>", "rename", "<|s|>", "to", "<|s|>", "'", "$", "inline", "$", "method", "'", ".", "<|s|>", "The", "<|s|>", "compiler", "<|s|>", "recognizes", "<|s|>", "the", "<|s|>", "\"", "$", "inline", "$", "\"", "<|s|>", "marker", "<|s|>", "in", "<|s|>", "debug", "<|s|>", "mode", "<|s|>", "and", "<|s|>", "will", "<|s|>", "verify", "<|s|>", "that", "<|s|>", "the", "<|s|>", "method", "<|s|>", "indeed", "<|s|>", "got", "<|s|>", "inlined", ".", "<|s|>", "It", "'", "s", "<|s|>", "not", "<|s|>", "necessary", "<|s|>", "here", "<|s|>", "but", "<|s|>", "can", "'", "t", "<|s|>", "hurt", "<|s|>", "either", "."], "tufano_code": "public static int METHOD_1 ( ) { return INT_1 ; }", "our_target": "  public static int $inline$method() {\n", "our_code": "<|startfocus|>\n  public static int inline_method() {\n<|endfocus|>\n    return 5;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "int", "<|s|>", "inline", "_", "method", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "5", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 19, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5068", "comment_id": "8ec8f176_f66a6071", "class_list": ["Main"], "func_list": ["public static int inline_method()", "public static int p(int j)"], "prime_var_dic": {}}, {"idx": 86524, "status": "update", "global_index": 12811, "project_name": "android_", "written_on": "2014-09-25 16:36:14", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 target ) { super ( VAR_2 , target . METHOD_1 ( ) ) ; METHOD_2 ( new TYPE_3 ( new TYPE_4 ( ) ) ) ; }", "comment": "@NotNull", "tokenized_comment": ["@", "Not", "Null"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 target ) { super ( VAR_2 , target . METHOD_1 ( ) ) ; METHOD_2 ( new TYPE_3 ( new TYPE_4 ( ) ) ) ; }", "our_target": "  public TranslationsEditorFixture(@NotNull Robot robot, @NotNull StringResourceEditor target) {\n", "our_code": "<|startfocus|>\n  public TranslationsEditorFixture(Robot robot, StringResourceEditor target) {\n<|endfocus|>\n    super(robot, target.getTranslationsTable());\n    cellReader(new BasicJTableCellReader(new StringsCellRendererReader()));\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Translations", "Editor", "Fixture", "(", "Robot", "<|s|>", "robot", ",", "<|s|>", "String", "Resource", "Editor", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "robot", ",", "<|s|>", "target", ".", "get", "Translations", "Table", "(", ")", ");", "<|nl|>", "<|4-s|>", "cell", "Reader", "(", "new", "<|s|>", "Basic", "JTable", "Cell", "Reader", "(", "new", "<|s|>", "Strings", "Cell", "Renderer", "Reader", "(", ")", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 34, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_66", "comment_id": "b06ed3ae_87e5f6ef", "class_list": ["TranslationsEditorFixture", "StringsCellRendererReader"], "func_list": ["public TranslationsEditorFixture(Robot robot, StringResourceEditor target)", "public List<String> locales()", "public List<String> keys()", "private static List<String> getColumnHeaderValues(final JTable table)", "public String valueFrom(Component c)", "public List<String> locales()"], "prime_var_dic": {}}, {"idx": 91822, "status": "update", "global_index": 16796, "project_name": "android_", "written_on": "2015-07-10 09:13:20", "tufano_target": "public void METHOD_1 ( TYPE_1 value ) { VAR_1 . METHOD_4 ( value . intValue ( ) / FLOAT_3 ) ; VAR_1 . METHOD_3 ( ) ; }", "comment": "Nit: no space after \"if\"", "tokenized_comment": ["Nit", ":", "<|s|>", "no", "<|s|>", "space", "<|s|>", "after", "<|s|>", "\"", "if", "\""], "tufano_code": "public void METHOD_1 ( TYPE_1 value ) { VAR_1 . METHOD_2 ( FLOAT_1 - ( value / FLOAT_2 ) ) ; VAR_1 . METHOD_3 ( ) ; }", "our_target": "          myColorWheel.setHue(value.intValue()/255.0f);\n", "our_code": "        public void consume(Integer value) {\n<|startfocus|>\n          myColorWheel.setBrightness(1f - (value / 255f));\n<|endfocus|>\n          myColorWheel.repaint();\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "consume", "(", "Integer", "<|s|>", "value", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "my", "Color", "Wheel", ".", "set", "Brightness", "(", "1", "f", "<|s|>", "-", "<|s|>", "(", "value", "<|s|>", "/", "<|s|>", "255", "f", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "my", "Color", "Wheel", ".", "repaint", "(", ");", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 590, "base_patch_number": 5, "changed_patch_number": 7, "code_file_name": "android_775", "comment_id": "d829ca86_0247fa22", "class_list": ["and", "ColorPicker", "ColorWheelPanel", "ColorWheel", "ColorPreviewComponent", "NumberDocument", "RecentColorsComponent", "ColorPickerDialog", "ColorWheelImageProducer", "ColorPipette", "ValidatingDocumentListener", "SlideComponent"], "func_list": ["public Dimension getPreferredSize()", "public Dimension getPreferredSize()", "public Dimension getPreferredSize()", "public void focusGained(final FocusEvent e)", "public Dimension getPreferredSize()", "public void dropImage()", "private ColorPreviewComponent()", "public Dimension getPreferredSize()", "public void setColor(Color c)", "protected void paintComponent(Graphics g)", "public NumberDocument(boolean hex)", "void setSource(JTextField field)", "public Dimension getPreferredSize()", "public void actionPerformed(ActionEvent e)", "private ColorWheelPanel(ColorListener listener, boolean enableOpacity, boolean opacityInPercent)", "public void consume(Integer value)"], "prime_var_dic": {}}, {"idx": 86826, "status": "update", "global_index": 12824, "project_name": "android_", "written_on": "2014-09-27 00:47:26", "tufano_target": "protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) , STRING_3 ) ; assertTrue ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; return TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; }", "comment": "should be android-21 as it's what the SDK normally contains on a normal install.", "tokenized_comment": ["should", "<|s|>", "be", "<|s|>", "android", "-", "21", "<|s|>", "as", "<|s|>", "it", "'", "s", "<|s|>", "what", "<|s|>", "the", "<|s|>", "SDK", "<|s|>", "normally", "<|s|>", "contains", "<|s|>", "on", "<|s|>", "a", "<|s|>", "normal", "<|s|>", "install", "."], "tufano_code": "protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) , STRING_1 ) ; assertTrue ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; return TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; }", "our_target": "        File aapt = new File(getSdkDir(), \"build-tools/android-5.0/aapt\");\n", "our_code": "    protected PngCruncher getCruncher() {\n<|startfocus|>\n        File aapt = new File(getSdkDir(), \"build-tools/android-L/aapt\");\n<|endfocus|>\n\n        assertTrue(\"Test requires build-tools 21.0.0\", aapt.isFile());\n        return QueuedCruncher.Builder.INSTANCE.newCruncher(aapt.getAbsolutePath(), mLogger);\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "Png", "Cruncher", "<|s|>", "get", "Cruncher", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "File", "<|s|>", "aapt", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "get", "Sdk", "Dir", "(", ")", ",", "<|s|>", "\"", "build", "-", "tools", "/", "android", "-", "L", "/", "aapt", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "assert", "True", "(", "\"", "Test", "<|s|>", "requires", "<|s|>", "build", "-", "tools", "<|s|>", "21", ".", "0", ".", "0", "\"", ",", "<|s|>", "aapt", ".", "is", "File", "(", ")", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "Queued", "Cruncher", ".", "Builder", ".", "INSTANCE", ".", "new", "Cruncher", "(", "aapt", ".", "get", "Absolute", "Path", "(", ")", ",", "<|s|>", "m", "Logger", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 69, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_1033", "comment_id": "9032afd1_99170737", "class_list": ["NinePatchAsyncAaptProcessTest"], "func_list": ["public static Test suite()", "protected PngCruncher getCruncher()"], "prime_var_dic": {}}, {"idx": 12588, "status": "update", "global_index": 4066, "project_name": "android_", "written_on": "2016-10-10 16:01:05", "tufano_target": "private VAR_1 ( TYPE_1 VAR_2 ) { TYPE_4 VAR_3 = ( TYPE_4 ) VAR_4 . METHOD_1 ( ) ; this . VAR_3 = VAR_3 == null ? null : VAR_3 ; }", "comment": "Your schedulable need the 3@ code form, is it possible to restrict instance to a local var access ?\nWhat is the case where it is another expression ?", "tokenized_comment": ["Your", "<|s|>", "schedulable", "<|s|>", "need", "<|s|>", "the", "<|s|>", "3", "@", "<|s|>", "code", "<|s|>", "form", ",", "<|s|>", "is", "<|s|>", "it", "<|s|>", "possible", "<|s|>", "to", "<|s|>", "restrict", "<|s|>", "instance", "<|s|>", "to", "<|s|>", "a", "<|s|>", "local", "<|s|>", "var", "<|s|>", "access", "<|s|>", "?", "<|nl|>", "What", "<|s|>", "is", "<|s|>", "the", "<|s|>", "case", "<|s|>", "where", "<|s|>", "it", "<|s|>", "is", "<|s|>", "another", "<|s|>", "expression", "<|s|>", "?"], "tufano_code": "private VAR_1 ( TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_1 ( ) ; if ( VAR_3 == null || VAR_3 instanceof TYPE_3 ) { this . VAR_3 = null ; } else { this . VAR_3 = VAR_3 ; } }", "our_target": "      JVariableRef targetThis = (JVariableRef) candidate.callSite.getInstance();\n      this.targetThis = targetThis == null ? null : targetThis;\n", "our_code": "    private PrologueInfo(@Nonnull CandidateInfo candidate) {\n      // Check to see if we need to explicitly pass in a this reference.\n<|startfocus|>\n      JExpression targetThis = candidate.callSite.getInstance();\n      if (targetThis == null || targetThis instanceof JThisRef) {\n        this.targetThis = null;\n      } else {\n        this.targetThis = targetThis;\n      }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Prologue", "Info", "(", "@", "Nonnull", "<|s|>", "Candidate", "Info", "<|s|>", "candidate", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Check", "<|s|>", "to", "<|s|>", "see", "<|s|>", "if", "<|s|>", "we", "<|s|>", "need", "<|s|>", "to", "<|s|>", "explicitly", "<|s|>", "pass", "<|s|>", "in", "<|s|>", "a", "<|s|>", "this", "<|s|>", "reference", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "JExpression", "<|s|>", "target", "This", "<|s|>", "=", "<|s|>", "candidate", ".", "call", "Site", ".", "get", "Instance", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "target", "This", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "target", "This", "<|s|>", "instanceof", "<|s|>", "JThis", "Ref", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "this", ".", "target", "This", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|8-s|>", "this", ".", "target", "This", "<|s|>", "=", "<|s|>", "target", "This", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 128, "base_patch_number": 14, "changed_patch_number": 16, "code_file_name": "android_2424", "comment_id": "df13b40f_749a28c3", "class_list": ["makes", "JMethodInliner", "contains", "should", "CandidateInfo", "contains", "PrologueInfo", "contains", "EpilogueInfo", "Visitor"], "func_list": ["private CandidateInfo(@Nonnull JMethod callSiteMethod, @Nonnull JMethodCall callSite,", "private PrologueInfo(@Nonnull CandidateInfo candidate)", "private EpilogueInfo(@Nonnull CandidateInfo candidate)", "private static void inline(@Nonnull JMethod callSiteMethod, @Nonnull JMethodCall callSite,", "private static void preparePrologue(@Nonnull CandidateInfo candidate,", "private static void inlineBody(@Nonnull CandidateInfo candidate, @Nonnull PrologueInfo prologue,", "private static void prepareEpilogue(@Nonnull CandidateInfo candidate,", "private Visitor(TransformationRequest tr)", "public boolean visit(JMethod jm)", "public void endVisit(@Nonnull JMethodCall jmc)", "public void run(JSession session)", "private CandidateInfo(@Nonnull JMethod callSiteMethod, @Nonnull JMethodCall callSite,", "private CandidateInfo(@Nonnull JMethod callSiteMethod, @Nonnull JMethodCall callSite,", "private CandidateInfo(@Nonnull JMethod callSiteMethod, @Nonnull JMethodCall callSite,", "private PrologueInfo(@Nonnull CandidateInfo candidate)", "private CandidateInfo(@Nonnull JMethod callSiteMethod, @Nonnull JMethodCall callSite,", "private EpilogueInfo(@Nonnull CandidateInfo candidate)"], "prime_var_dic": {}}, {"idx": 37221, "status": "update", "global_index": 8307, "project_name": "android_", "written_on": "2016-02-15 13:07:08", "tufano_target": "public TYPE_1 < TYPE_2 > METHOD_2 ( ) { return VAR_1 ; }", "comment": "Method", "tokenized_comment": ["Method"], "tufano_code": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }", "our_target": "  public List<JMethodIdWithReturnType> getBridgeMethodIds() {\n", "our_code": "<|startfocus|>\n  public List<JMethodIdWithReturnType> getBridgeMthIds() {\n<|endfocus|>\n    return bridges;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "List", "<", "JMethod", "Id", "With", "Return", "Type", ">", "<|s|>", "get", "Bridge", "Mth", "Ids", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "bridges", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 77, "base_patch_number": 9, "changed_patch_number": 11, "code_file_name": "android_2291", "comment_id": "bdb504dc_006b0a2d", "class_list": ["JLambda"], "func_list": ["public JLambda(@Nonnull SourceInfo info, @Nonnull JMethodIdWithReturnType mthToImplement,", "public JMethodIdWithReturnType getMethodIdToImplement()", "public List<JMethodIdWithReturnType> getBridgeMthIds()", "public void addBridgeDescriptor(@Nonnull JMethodIdWithReturnType bridgeDescriptor)", "public void addBridgeDescriptors(@Nonnull List<JMethodIdWithReturnType> bridgeDescriptors)", "public void addCapturedVariable(@Nonnull JVariableRef capturedVariableRef)", "public void traverse(@Nonnull JVisitor visitor)", "public JInterface getType()", "public JMethodBody getBody()", "public List<JParameter> getParameters()", "public JMethod getMethod()", "public List<JVariableRef> getCapturedVariables()", "public void setCaptureInstance(boolean captureInstance)", "public boolean needToCaptureInstance()", "public boolean canThrow()", "public List<JInterface> getInterfaceBounds()"], "prime_var_dic": {"mthIdToImplement": 1, "type": 1, "method": 1}}, {"idx": 49336, "status": "update", "global_index": 2391, "project_name": "android_", "written_on": "2017-03-07 19:28:38", "tufano_target": "public void METHOD_1 ( ) { assertTrue ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 < String > VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_1 < String > VAR_4 = METHOD_4 ( VAR_5 ) ; assertTrue ( VAR_1 . METHOD_5 ( VAR_2 , VAR_4 ) ) ; }", "comment": "can you also please verify that sizes below the max are written?", "tokenized_comment": ["can", "<|s|>", "you", "<|s|>", "also", "<|s|>", "please", "<|s|>", "verify", "<|s|>", "that", "<|s|>", "sizes", "<|s|>", "below", "<|s|>", "the", "<|s|>", "max", "<|s|>", "are", "<|s|>", "written", "?"], "tufano_code": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 < String > VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_1 < String > VAR_4 = METHOD_4 ( VAR_5 ) ; assertTrue ( VAR_1 . METHOD_5 ( VAR_2 , VAR_4 ) ) ; }", "our_target": "        assertTrue(mWifiConnectivityHelper.getFirmwareRoamingInfo());\n", "our_code": "    public void verifySetFirmwareRoamingConfigurationWithGoodInput() {\n<|startfocus|>\n        mWifiConnectivityHelper.getFirmwareRoamingInfo();\n<|endfocus|>\n        ArrayList<String> blacklist = buildBssidBlacklist(MAX_BSSID_BLACKLIST_SIZE);\n        ArrayList<String> whitelist = buildSsidWhitelist(MAX_SSID_WHITELIST_SIZE);\n        assertTrue(mWifiConnectivityHelper.setFirmwareRoamingConfiguration(blacklist, whitelist));\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "verify", "Set", "Firmware", "Roaming", "Configuration", "With", "Good", "Input", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Wifi", "Connectivity", "Helper", ".", "get", "Firmware", "Roaming", "Info", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Array", "List", "<", "String", ">", "<|s|>", "blacklist", "<|s|>", "=", "<|s|>", "build", "Bssid", "Blacklist", "(", "MAX", "_", "BSSID", "_", "BLACKLIST", "_", "SIZE", ");", "<|nl|>", "<|8-s|>", "Array", "List", "<", "String", ">", "<|s|>", "whitelist", "<|s|>", "=", "<|s|>", "build", "Ssid", "Whitelist", "(", "MAX", "_", "SSID", "_", "WHITELIST", "_", "SIZE", ");", "<|nl|>", "<|8-s|>", "assert", "True", "(", "m", "Wifi", "Connectivity", "Helper", ".", "set", "Firmware", "Roaming", "Configuration", "(", "blacklist", ",", "<|s|>", "whitelist", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 158, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_5526", "comment_id": "6e0fb733_9650b8de", "class_list": ["WifiConnectivityHelperTest"], "func_list": ["public void cleanup()", "private void setupWifiNative()", "private ArrayList<String> buildBssidBlacklist(int size)", "private ArrayList<String> buildSsidWhitelist(int size)", "public void returnFirmwareRoamingSupported()", "public void returnFirmwareRoamingNotSupported()", "public void verifyFirmwareRoamingCapabilityWithSuccessfulNativeCall()", "public void verifyFirmwareRoamingCapabilityWithFailureNativeCall()", "public void verifySetFirmwareRoamingConfigurationWithGoodInput()", "public void verifySetFirmwareRoamingConfigurationWithNullInput()", "public void verifySetFirmwareRoamingConfigurationWithIncorrectBlacklist()", "public void verifySetFirmwareRoamingConfigurationWithIncorrectWhitelist()", "public void verifySetFirmwareRoamingConfigurationWithEmptyBlacklistAndWhitelist()"], "prime_var_dic": {"mWifiNative": 1, "int": 2, "capability": 2}}, {"idx": 89060, "status": "update", "global_index": 4808, "project_name": "android_", "written_on": "2016-12-15 22:08:45", "tufano_target": "public VAR_1 ( boolean VAR_3 ) { if ( VAR_3 ) { METHOD_2 ( ) ; } }", "comment": "this should be handed the WifiAwareStateManager instead of WifiInjector", "tokenized_comment": ["this", "<|s|>", "should", "<|s|>", "be", "<|s|>", "handed", "<|s|>", "the", "<|s|>", "Wifi", "Aware", "State", "Manager", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "Wifi", "Injector"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , boolean VAR_3 ) { VAR_4 = VAR_2 . METHOD_1 ( ) ; if ( VAR_3 ) { METHOD_2 ( ) ; } }", "our_target": "    public WifiAwareNative(boolean doRegistration) {\n", "our_code": "<|startfocus|>\n    public WifiAwareNative(WifiInjector wifiInjector, boolean doRegistration) {\n        sWifiAwareStateManager = wifiInjector.getWifiAwareStateManager();\n<|endfocus|>\n        if (doRegistration) {\n            registerAwareNatives();\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Wifi", "Aware", "Native", "(", "Wifi", "Injector", "<|s|>", "wifi", "Injector", ",", "<|s|>", "boolean", "<|s|>", "do", "Registration", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "s", "Wifi", "Aware", "State", "Manager", "<|s|>", "=", "<|s|>", "wifi", "Injector", ".", "get", "Wifi", "Aware", "State", "Manager", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "do", "Registration", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "register", "Aware", "Natives", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 130, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_4014", "comment_id": "ba845725_699e653f", "class_list": ["WifiAwareNative", "for", "Capabilities"], "func_list": ["public WifiAwareCharacteristics toPublicCharacteristics()", "public String toString()", "private boolean isAwareInit()", "public void deInitAware()", "public WifiAwareNative(WifiInjector wifiInjector, boolean doRegistration)", "public boolean getCapabilities(short transactionId)", "public boolean enableAndConfigure(short transactionId, ConfigRequest configRequest,", "public boolean disable(short transactionId)", "public boolean publish(short transactionId, int publishId, PublishConfig publishConfig)", "public boolean subscribe(short transactionId, int subscribeId,", "public boolean sendMessage(short transactionId, int pubSubId, int requestorInstanceId,", "public boolean stopPublish(short transactionId, int pubSubId)", "public boolean stopSubscribe(short transactionId, int pubSubId)", "public boolean createAwareNetworkInterface(short transactionId, String interfaceName)", "public boolean deleteAwareNetworkInterface(short transactionId, String interfaceName)", "public boolean initiateDataPath(short transactionId, int peerId, int channelRequestType,", "public boolean respondToDataPathRequest(short transactionId, boolean accept, int ndpId,", "public boolean endDataPath(short transactionId, int ndpId)", "private static void onAwareNotifyResponse(short transactionId, int responseType, int status,", "private static void onAwareNotifyResponsePublishSubscribe(short transactionId, int responseType,", "private static void onAwareNotifyResponseCapabilities(short transactionId, int status,", "private static void onAwareNotifyResponseDataPathInitiate(short transactionId, int status,", "private static void onDiscoveryEngineEvent(int eventType, byte[] mac)", "private static void onMatchEvent(int pubSubId, int requestorInstanceId, byte[] mac,", "private static void onPublishTerminated(int publishId, int status)", "private static void onSubscribeTerminated(int subscribeId, int status)", "private static void onFollowupEvent(int pubSubId, int requestorInstanceId, byte[] mac,", "private static void onDisabledEvent(int status)", "private static void onTransmitFollowupEvent(short transactionId, int reason)", "private static void onDataPathRequest(int pubSubId, byte[] mac, int ndpId, byte[] message)", "private static void onDataPathConfirm(int ndpId, byte[] mac, boolean accept, int reason,", "private static void onDataPathEnd(int ndpId)", "public WifiAwareCharacteristics toPublicCharacteristics()", "public String toString()", "private boolean isAwareInit()", "public void deInitAware()", "public WifiAwareNative(WifiInjector wifiInjector, boolean doRegistration)", "public boolean getCapabilities(short transactionId)", "public boolean enableAndConfigure(short transactionId, ConfigRequest configRequest,", "public boolean disable(short transactionId)", "public boolean publish(short transactionId, int publishId, PublishConfig publishConfig)", "public boolean subscribe(short transactionId, int subscribeId,", "public boolean sendMessage(short transactionId, int pubSubId, int requestorInstanceId,", "public boolean stopPublish(short transactionId, int pubSubId)", "public boolean stopSubscribe(short transactionId, int pubSubId)", "public boolean createAwareNetworkInterface(short transactionId, String interfaceName)", "public boolean deleteAwareNetworkInterface(short transactionId, String interfaceName)", "public boolean initiateDataPath(short transactionId, int peerId, int channelRequestType,", "public boolean respondToDataPathRequest(short transactionId, boolean accept, int ndpId,", "public boolean endDataPath(short transactionId, int ndpId)", "private static void onAwareNotifyResponse(short transactionId, int responseType, int status,", "private static void onAwareNotifyResponsePublishSubscribe(short transactionId, int responseType,", "private static void onAwareNotifyResponseCapabilities(short transactionId, int status,", "private static void onAwareNotifyResponseDataPathInitiate(short transactionId, int status,", "private static void onDiscoveryEngineEvent(int eventType, byte[] mac)", "private static void onMatchEvent(int pubSubId, int requestorInstanceId, byte[] mac,", "private static void onPublishTerminated(int publishId, int status)", "private static void onSubscribeTerminated(int subscribeId, int status)", "private static void onFollowupEvent(int pubSubId, int requestorInstanceId, byte[] mac,", "private static void onDisabledEvent(int status)", "private static void onTransmitFollowupEvent(short transactionId, int reason)", "private static void onDataPathRequest(int pubSubId, byte[] mac, int ndpId, byte[] message)", "private static void onDataPathConfirm(int ndpId, byte[] mac, boolean accept, int reason,", "private static void onDataPathEnd(int ndpId)", "public WifiAwareCharacteristics toPublicCharacteristics()", "public String toString()"], "prime_var_dic": {"Capabilities": 1}}, {"idx": 91551, "status": "update", "global_index": 17597, "project_name": "android_", "written_on": "2012-04-27 23:11:48", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = METHOD_1 ( ) ; if ( TYPE_2 . METHOD_2 ( STRING_1 ) != null ) { VAR_2 = VAR_4 ; } VAR_5 = VAR_3 == null ? VAR_4 : VAR_2 ; }", "comment": "Note that I plan to have a pref for it later. I just needed a quick way to disable the cache when testing the support lib yesterday.", "tokenized_comment": ["Note", "<|s|>", "that", "<|s|>", "I", "<|s|>", "plan", "<|s|>", "to", "<|s|>", "have", "<|s|>", "a", "<|s|>", "pref", "<|s|>", "for", "<|s|>", "it", "<|s|>", "later", ".", "<|s|>", "I", "<|s|>", "just", "<|s|>", "needed", "<|s|>", "a", "<|s|>", "quick", "<|s|>", "way", "<|s|>", "to", "<|s|>", "disable", "<|s|>", "the", "<|s|>", "cache", "<|s|>", "when", "<|s|>", "testing", "<|s|>", "the", "<|s|>", "support", "<|s|>", "lib", "<|s|>", "yesterday", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = METHOD_1 ( ) ; if ( TYPE_2 . METHOD_2 ( STRING_1 ) != null ) { VAR_2 = VAR_4 ; } VAR_5 = VAR_3 == null ? VAR_4 : VAR_2 ; }", "our_target": "        if (System.getenv(\"SDKMAN_DISABLE_CACHE\") != null) {                 //$NON-NLS-1$\n", "our_code": "    public DownloadCache(Strategy strategy) {\n        mCacheRoot = initCacheRoot();\n\n        // If this is defined in the environment, never use the cache. Useful for testing.\n<|startfocus|>\n        if (System.getenv(\"SDKMAN_DISABLE_CACHE\") != null) {\n<|endfocus|>\n            strategy = Strategy.DIRECT;\n        }\n\n        mStrategy = mCacheRoot == null ? Strategy.DIRECT : strategy;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Download", "Cache", "(", "Strategy", "<|s|>", "strategy", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Cache", "Root", "<|s|>", "=", "<|s|>", "init", "Cache", "Root", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "If", "<|s|>", "this", "<|s|>", "is", "<|s|>", "defined", "<|s|>", "in", "<|s|>", "the", "<|s|>", "environment", ",", "<|s|>", "never", "<|s|>", "use", "<|s|>", "the", "<|s|>", "cache", ".", "<|s|>", "Useful", "<|s|>", "for", "<|s|>", "testing", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "System", ".", "getenv", "(", "\"", "SDKMAN", "_", "DISABLE", "_", "CACHE", "\"", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "strategy", "<|s|>", "=", "<|s|>", "Strategy", ".", "DIRECT", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "m", "Strategy", "<|s|>", "=", "<|s|>", "m", "Cache", "Root", "<|s|>", "==", "<|s|>", "null", "<|s|>", "?", "<|s|>", "Strategy", ".", "DIRECT", "<|s|>", ":", "<|s|>", "strategy", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 161, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_3942", "comment_id": "AAAFHX%2F%2F%2F%2BE%3D", "class_list": ["DownloadCache"], "func_list": ["public DownloadCache(Strategy strategy)", "public Strategy getStrategy()", "protected File initCacheRoot()", "private Properties readInfo(File info)", "private String getCacheFilename(String urlString)", "private String getInfoFilename(String cacheFilename)"], "prime_var_dic": {"requests": 1, "String": 5, "minutes": 1, "long": 2, "hours": 1, "int": 1, "mStrategy": 1, "mCacheRoot": 1, "cached": 1, "necessary": 1, "its": 2, "code": 1, "length": 1, "retrying": 1, "not": 1, "below": 1, "timestamp": 1, "properties": 1, "download": 1}}, {"idx": 17129, "status": "insert", "global_index": 20049, "project_name": "android_", "written_on": "2012-11-05 19:14:34", "tufano_target": "public static boolean METHOD_1 ( String path ) { try { TYPE_1 VAR_1 = VAR_2 . open ( path , VAR_3 , 0 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; } catch ( TYPE_2 VAR_4 ) { return false ; } }", "comment": "can we say what permissions we are trying to avoid needing for people who don't have reference to the bug? actually I might put more of that detail at the caller.", "tokenized_comment": ["can", "<|s|>", "we", "<|s|>", "say", "<|s|>", "what", "<|s|>", "permissions", "<|s|>", "we", "<|s|>", "are", "<|s|>", "trying", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "needing", "<|s|>", "for", "<|s|>", "people", "<|s|>", "who", "<|s|>", "don", "'", "t", "<|s|>", "have", "<|s|>", "reference", "<|s|>", "to", "<|s|>", "the", "<|s|>", "bug", "?", "<|s|>", "actually", "<|s|>", "I", "<|s|>", "might", "<|s|>", "put", "<|s|>", "more", "<|s|>", "of", "<|s|>", "that", "<|s|>", "detail", "<|s|>", "at", "<|s|>", "the", "<|s|>", "caller", "."], "tufano_code": "public static boolean METHOD_1 ( String path ) { try { TYPE_1 VAR_1 = VAR_2 . open ( path , VAR_3 , 0 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; } catch ( TYPE_2 VAR_4 ) { return false ; } }", "our_target": "        try {\n            // Use open(2) rather than stat(2) so we require fewer permissions. http://b/6485312.\n", "our_code": "    public static boolean canOpenReadOnly(String path) {\n        // We use open(2) rather than stat(2) so we require fewer permissions. http://b/6485312.\n<|startfocus|>\n        try {\n<|endfocus|>\n            FileDescriptor fd = Libcore.os.open(path, O_RDONLY, 0);\n            Libcore.os.close(fd);\n            return true;\n        } catch (ErrnoException errnoException) {\n            return false;\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "can", "Open", "Read", "Only", "(", "String", "<|s|>", "path", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "We", "<|s|>", "use", "<|s|>", "open", "(", "2", ")", "<|s|>", "rather", "<|s|>", "than", "<|s|>", "stat", "(", "2", ")", "<|s|>", "so", "<|s|>", "we", "<|s|>", "require", "<|s|>", "fewer", "<|s|>", "permissions", ".", "<|s|>", "http", "://", "b", "/", "6485312", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "File", "Descriptor", "<|s|>", "fd", "<|s|>", "=", "<|s|>", "Libcore", ".", "os", ".", "open", "(", "path", ",", "<|s|>", "O", "_", "RDONLY", ",", "<|s|>", "0", ");", "<|nl|>", "<|12-s|>", "Libcore", ".", "os", ".", "close", "(", "fd", ");", "<|nl|>", "<|12-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Errno", "Exception", "<|s|>", "errno", "Exception", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 151, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3113", "comment_id": "AAALR3%2F%2F%2Fpg%3D", "class_list": ["IoUtils"], "func_list": ["private IoUtils()", "public static void closeQuietly(AutoCloseable closeable)", "public static boolean canOpenReadOnly(String path)"], "prime_var_dic": {"IoUtils": 1}}, {"idx": 43333, "status": "update", "global_index": 14315, "project_name": "android_", "written_on": "2014-02-21 02:27:49", "tufano_target": "protected boolean METHOD_1 ( TYPE_1 path , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return false ; } TYPE_1 VAR_3 = TYPE_5 . METHOD_6 ( VAR_2 ) ; return TYPE_4 . METHOD_5 ( VAR_3 , path , false ) ; }", "comment": "Here you're just converting from VirtualFile to IO File right? Instead use\nFile rootFilePath = VfsUtilCore.virtualToIoFile(rootFile);", "tokenized_comment": ["Here", "<|s|>", "you", "'", "re", "<|s|>", "just", "<|s|>", "converting", "<|s|>", "from", "<|s|>", "Virtual", "File", "<|s|>", "to", "<|s|>", "IO", "<|s|>", "File", "<|s|>", "right", "?", "<|s|>", "Instead", "<|s|>", "use", "<|nl|>", "File", "<|s|>", "root", "File", "Path", "<|s|>", "=", "<|s|>", "Vfs", "Util", "Core", ".", "virtual", "To", "Io", "File", "(", "root", "File", ");"], "tufano_code": "protected boolean METHOD_1 ( TYPE_1 path , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return false ; } TYPE_1 VAR_3 = new TYPE_1 ( TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ; return TYPE_4 . METHOD_5 ( VAR_3 , path , false ) ; }", "our_target": "    File rootFilePath = VfsUtilCore.virtualToIoFile(rootFile);\n", "our_code": "  protected boolean isPathInContentEntry(@NotNull File path, @NotNull ContentEntry contentEntry) {\n    VirtualFile rootFile = contentEntry.getFile();\n    if (rootFile == null) {\n      return false;\n    }\n<|startfocus|>\n    File rootFilePath = new File(FileUtil.toSystemDependentName(rootFile.getPath()));\n<|endfocus|>\n    return FileUtil.isAncestor(rootFilePath, path, false);\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "boolean", "<|s|>", "is", "Path", "In", "Content", "Entry", "(", "@", "Not", "Null", "<|s|>", "File", "<|s|>", "path", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Content", "Entry", "<|s|>", "content", "Entry", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Virtual", "File", "<|s|>", "root", "File", "<|s|>", "=", "<|s|>", "content", "Entry", ".", "get", "File", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "root", "File", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "File", "<|s|>", "root", "File", "Path", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "File", "Util", ".", "to", "System", "Dependent", "Name", "(", "root", "File", ".", "get", "Path", "(", ")", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "File", "Util", ".", "is", "Ancestor", "(", "root", "File", "Path", ",", "<|s|>", "path", ",", "<|s|>", "false", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 109, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_339", "comment_id": "0f75b176_444cb85c", "class_list": ["AbstractContentRootModuleCustomizer<T>"], "func_list": ["public void customizeModule(@NotNull Module module, @NotNull Project project, @Nullable T model)", "protected void addSourceFolder(@NotNull Collection<ContentEntry> contentEntries,", "protected void addExcludedFolder(@NotNull ContentEntry contentEntry, @NotNull File dirPath)", "protected ContentEntry findParentContentEntry(@NotNull Collection<ContentEntry> contentEntries, @NotNull File dirPath)", "protected boolean isPathInContentEntry(@NotNull File path, @NotNull ContentEntry contentEntry)", "protected String pathToUrl(@NotNull File dirPath)"], "prime_var_dic": {}}, {"idx": 77623, "status": "update", "global_index": 15698, "project_name": "android_", "written_on": "2015-02-20 19:25:03", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , true , true , null ) ; } }", "comment": "nit: static import.", "tokenized_comment": ["nit", ":", "<|s|>", "static", "<|s|>", "import", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , true , true , null ) ; } }", "our_target": "    if (isBuildWithGradle(project)) {\n", "our_code": "  public void runActivity(@NotNull Project project) {\n<|startfocus|>\n    if (Projects.isBuildWithGradle(project)) {\n<|endfocus|>\n      // Prevent IDEA from refreshing project. We want to do it ourselves.\n      project.putUserData(ExternalSystemDataKeys.NEWLY_IMPORTED_PROJECT, Boolean.TRUE);\n      GradleProjectImporter.getInstance().requestProjectSync(project, true, true, null);\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "run", "Activity", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "Projects", ".", "is", "Build", "With", "Gradle", "(", "project", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Prevent", "<|s|>", "IDEA", "<|s|>", "from", "<|s|>", "refreshing", "<|s|>", "project", ".", "<|s|>", "We", "<|s|>", "want", "<|s|>", "to", "<|s|>", "do", "<|s|>", "it", "<|s|>", "ourselves", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "project", ".", "put", "User", "Data", "(", "External", "System", "Data", "Keys", ".", "NEWLY", "_", "IMPORTED", "_", "PROJECT", ",", "<|s|>", "Boolean", ".", "TRUE", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "Gradle", "Project", "Importer", ".", "get", "Instance", "(", ")", ".", "request", "Project", "Sync", "(", "project", ",", "<|s|>", "true", ",", "<|s|>", "true", ",", "<|s|>", "null", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 30, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_383", "comment_id": "c8e56a1d_32b2d010", "class_list": ["AndroidGradleProjectStartupActivity"], "func_list": ["public void runActivity(@NotNull Project project)"], "prime_var_dic": {"implements": 1}}, {"idx": 94315, "status": "update", "global_index": 2851, "project_name": "android_", "written_on": "2017-03-20 18:17:20", "tufano_target": "private boolean METHOD_1 ( int VAR_3 ) { if ( VAR_3 < 0 || VAR_3 >= VAR_4 . length ) return true ; return false ; }", "comment": "rename", "tokenized_comment": ["rename"], "tufano_code": "private boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 || VAR_1 >= VAR_2 . length ) return true ; return false ; }", "our_target": "    private boolean isInvalidSlotId(int slotIndex) {\n        if (slotIndex < 0 || slotIndex >= mSlotIndexToSubId.length) return true;\n", "our_code": "<|startfocus|>\n    private boolean isInvalidSlotId(int slotIdx) {\n        if (slotIdx < 0 || slotIdx >= mSlotIdxToSubId.length) return true;\n<|endfocus|>\n        return false;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Invalid", "Slot", "Id", "(", "int", "<|s|>", "slot", "Idx", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "slot", "Idx", "<|s|>", "<", "<|s|>", "0", "<|s|>", "||", "<|s|>", "slot", "Idx", "<|s|>", ">=", "<|s|>", "m", "Slot", "Idx", "To", "Sub", "Id", ".", "length", ")", "<|s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 181, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5314", "comment_id": "2955f269_192bc517", "class_list": ["SubscriptionControllerMock"], "func_list": ["public static SubscriptionController init(Phone phone)", "public static SubscriptionController getInstance()", "public SubscriptionControllerMock(Context c, ITelephonyRegistry.Stub tr, int phoneCount)", "protected void init(Context c)", "public int getDefaultDataSubId()", "public void setDefaultDataSubId(int subId)", "private void broadcastDefaultDataSubIdChanged(int subId)", "public int getSubIdUsingPhoneId(int phoneId)", "public void notifySubscriptionInfoChanged()", "public SubscriptionInfo getActiveSubscriptionInfo(int subId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForIccId(String iccId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIdx, String cp)", "public List<SubscriptionInfo> getAllSubInfoList(String callingPackage)", "public List<SubscriptionInfo> getActiveSubscriptionInfoList(String callingPackage)", "public int getActiveSubInfoCount(String callingPackage)", "public int getAllSubInfoCount(String callingPackage)", "public int getActiveSubInfoCountMax()", "public int addSubInfoRecord(String iccId, int slotId)", "public boolean setPlmnSpn(int slotId, boolean showPlmn, String plmn, boolean showSpn,", "public int setIconTint(int tint, int subId)", "public int setDisplayName(String displayName, int subId)", "public int setDisplayNameUsingSrc(String displayName, int subId, long nameSource)", "public int setDisplayNumber(String number, int subId)", "public int setDataRoaming(int roaming, int subId)", "public int setMccMnc(String mccMnc, int subId)", "public int getSlotId(int subId)", "private boolean isInvalidSlotId(int slotIdx)", "public int[] getSubId(int slotIdx)", "public void setSlotSubId(int slotIdx, int subId)", "public int getPhoneId(int subId)", "public int clearSubInfo()", "public int getDefaultSubId()", "public void setDefaultSmsSubId(int subId)", "public int getDefaultSmsSubId()", "public void setDefaultVoiceSubId(int subId)", "public int getDefaultVoiceSubId()", "public void clearDefaultsForInactiveSubIds()", "public int[] getSubIdUsingSlotId(int slotId)", "public List<SubscriptionInfo> getSubInfoUsingSlotIdWithCheck(int slotId, boolean needCheck,", "public void updatePhonesAvailability(Phone[] phones)", "public int[] getActiveSubIdList()", "public boolean isActiveSubId(int subId)", "public int getSimStateForSlotIndex(int slotIndex)", "public void setSubscriptionProperty(int subId, String propKey, String propValue)", "public String getSubscriptionProperty(int subId, String propKey, String callingPackage)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {"mTelephonyRegistry": 1}}, {"idx": 93229, "status": "update", "global_index": 2778, "project_name": "android_", "written_on": "2017-03-14 00:28:52", "tufano_target": "static TYPE_1 METHOD_4 ( TYPE_2 context , long VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( context , VAR_3 class ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 , VAR_1 ) ; return VAR_2 ; }", "comment": "hmm, lets name createMarkAsReadIntent? Can probably leave Wear out since it could possibly be used in other contexts.", "tokenized_comment": ["hmm", ",", "<|s|>", "lets", "<|s|>", "name", "<|s|>", "create", "Mark", "As", "Read", "Intent", "?", "<|s|>", "Can", "<|s|>", "probably", "<|s|>", "leave", "<|s|>", "Wear", "<|s|>", "out", "<|s|>", "since", "<|s|>", "it", "<|s|>", "could", "<|s|>", "possibly", "<|s|>", "be", "<|s|>", "used", "<|s|>", "in", "<|s|>", "other", "<|s|>", "contexts", "."], "tufano_code": "static TYPE_1 METHOD_1 ( TYPE_2 context , long VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( context , VAR_3 class ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 , VAR_1 ) ; return VAR_2 ; }", "our_target": "    static Intent createMarkAsReadIntent(Context context, long deliveryTime) {\n", "our_code": "<|startfocus|>\n    static Intent createWearDeleteIntent(Context context, long deliveryTime) {\n<|endfocus|>\n        Intent deleteIntent = new Intent(context, CellBroadcastReceiver.class);\n        deleteIntent.setAction(CellBroadcastReceiver.ACTION_MARK_AS_READ);\n        deleteIntent.putExtra(CellBroadcastReceiver.EXTRA_DELIVERY_TIME, deliveryTime);\n        return deleteIntent;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "static", "<|s|>", "Intent", "<|s|>", "create", "Wear", "Delete", "Intent", "(", "Context", "<|s|>", "context", ",", "<|s|>", "long", "<|s|>", "delivery", "Time", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Intent", "<|s|>", "delete", "Intent", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Intent", "(", "context", ",", "<|s|>", "Cell", "Broadcast", "Receiver", ".", "class", ");", "<|nl|>", "<|8-s|>", "delete", "Intent", ".", "set", "Action", "(", "Cell", "Broadcast", "Receiver", ".", "ACTION", "_", "MARK", "_", "AS", "_", "READ", ");", "<|nl|>", "<|8-s|>", "delete", "Intent", ".", "put", "Extra", "(", "Cell", "Broadcast", "Receiver", ".", "EXTRA", "_", "DELIVERY", "_", "TIME", ",", "<|s|>", "delivery", "Time", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "delete", "Intent", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 567, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4291", "comment_id": "e28768c8_5cbd3aa1", "class_list": ["CellBroadcastAlertService", "MessageServiceCategoryAndScope", "LocalBinder"], "func_list": ["public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public int onStartCommand(Intent intent, int flags, int startId)", "private void handleCellBroadcastIntent(Intent intent)", "public boolean execute(CellBroadcastContentProvider provider)", "private void showNewAlert(Intent intent)", "private boolean isMessageEnabledByUser(CellBroadcastMessage message)", "private void openEmergencyAlertNotification(CellBroadcastMessage message)", "static void addToNotificationBar(CellBroadcastMessage message,", "static Intent createDisplayMessageIntent(Context context, Class intentClass,", "static Intent createWearDeleteIntent(Context context, long deliveryTime)", "public IBinder onBind(Intent intent)", "public CellBroadcastAlertService getService()", "public static boolean isEmergencyMessage(Context context, CellBroadcastMessage cbm)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()"], "prime_var_dic": {}}, {"idx": 88427, "status": "update", "global_index": 17500, "project_name": "android_", "written_on": "2012-02-08 16:15:42", "tufano_target": "protected void METHOD_1 ( ) { if ( ! VAR_4 ) { TYPE_1 . METHOD_4 ( VAR_5 , STRING_1 ) ; METHOD_5 ( ) ; } if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } METHOD_3 ( VAR_3 ) ; }", "comment": "It would be useful to issue a warning log if finalize occurs without release() being called earlier.", "tokenized_comment": ["It", "<|s|>", "would", "<|s|>", "be", "<|s|>", "useful", "<|s|>", "to", "<|s|>", "issue", "<|s|>", "a", "<|s|>", "warning", "<|s|>", "log", "<|s|>", "if", "<|s|>", "finalize", "<|s|>", "occurs", "<|s|>", "without", "<|s|>", "release", "(", ")", "<|s|>", "being", "<|s|>", "called", "<|s|>", "earlier", "."], "tufano_code": "protected void METHOD_1 ( ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( ) ; } if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } METHOD_3 ( VAR_3 ) ; }", "our_target": "        if (!mReleased) {\n            Log.w(TAG, \"You should have called release()\");\n            release();\n", "our_code": "    protected void finalize() {\n<|startfocus|>\n        if (mInfoThread != null) {\n            mInfoThread.quit();\n<|endfocus|>\n        }\n        if (mEventThread != null) {\n            mEventThread.quit();\n        }\n        _finalize(mUniqueId);\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "finalize", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Info", "Thread", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Info", "Thread", ".", "quit", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Event", "Thread", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Event", "Thread", ".", "quit", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "_", "finalize", "(", "m", "Unique", "Id", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 249, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1687", "comment_id": "AAACt3%2F%2F%2F%2Bw%3D", "class_list": ["", "DrmManagerClient", "EventHandler", "InfoHandler"], "func_list": ["public EventHandler(Looper looper)", "public void handleMessage(Message msg)", "public static void notify(", "public InfoHandler(Looper looper)", "public DrmManagerClient(Context context)", "protected void finalize()", "private void createListeners()", "public void releaseResources()", "public String[] getAvailableDrmEngines()", "public ContentValues getConstraints(String path, int action)", "public ContentValues getMetadata(String path)", "public void installDrmEngine(String engineFilePath)", "public boolean canHandle(String path, String mimeType)", "public int processDrmInfo(DrmInfo drmInfo)", "public DrmInfo acquireDrmInfo(DrmInfoRequest drmInfoRequest)", "public int acquireRights(DrmInfoRequest drmInfoRequest)", "public int getDrmObjectType(String path, String mimeType)", "public String getOriginalMimeType(String path)", "public int checkRightsStatus(String path)", "public int removeRights(String path)", "public int removeAllRights()", "public int openConvertSession(String mimeType)", "public DrmConvertedStatus convertData(int convertId, byte[] inputData)", "public DrmConvertedStatus closeConvertSession(int convertId)", "private int getEventType(int infoType)", "private int getErrorType(int infoType)", "private String convertUriToPath(Uri uri)", "public EventHandler(Looper looper)", "public void handleMessage(Message msg)", "public static void notify(", "public InfoHandler(Looper looper)", "public DrmManagerClient(Context context)", "protected void finalize()", "private void createListeners()", "public void releaseResources()", "public String[] getAvailableDrmEngines()", "public ContentValues getConstraints(String path, int action)", "public ContentValues getMetadata(String path)", "public void installDrmEngine(String engineFilePath)", "public boolean canHandle(String path, String mimeType)", "public int processDrmInfo(DrmInfo drmInfo)", "public DrmInfo acquireDrmInfo(DrmInfoRequest drmInfoRequest)", "public int acquireRights(DrmInfoRequest drmInfoRequest)", "public int getDrmObjectType(String path, String mimeType)", "public String getOriginalMimeType(String path)", "public int checkRightsStatus(String path)", "public int removeRights(String path)", "public int removeAllRights()", "public int openConvertSession(String mimeType)", "public DrmConvertedStatus convertData(int convertId, byte[] inputData)", "public DrmConvertedStatus closeConvertSession(int convertId)", "private int getEventType(int infoType)", "private int getErrorType(int infoType)", "private String convertUriToPath(Uri uri)", "public EventHandler(Looper looper)", "public void handleMessage(Message msg)", "public EventHandler(Looper looper)", "public void handleMessage(Message msg)"], "prime_var_dic": {}}, {"idx": 30, "status": "update", "global_index": 20000, "project_name": "android_", "written_on": "2012-10-11 22:25:50", "tufano_target": "public String toString ( ) { return TYPE_1 . METHOD_1 ( key . METHOD_2 ( ) ) ; }", "comment": "remove?", "tokenized_comment": ["remove", "?"], "tufano_code": "public String toString ( ) { return super . toString ( ) ; }", "our_target": "        return NativeCrypto.EVP_PKEY_print_private(key.getPkeyContext());\n", "our_code": "    public String toString() {\n<|startfocus|>\n        // TODO Auto-generated method stub\n        return super.toString();\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "String", "<|s|>", "to", "String", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "TODO", "<|s|>", "Auto", "-", "generated", "<|s|>", "method", "<|s|>", "stub", "<|nl|>", "<|8-s|>", "return", "<|s|>", "super", ".", "to", "String", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 119, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_3153", "comment_id": "AAAKGH%2F%2F%2F98%3D", "class_list": ["OpenSSLECPrivateKey"], "func_list": ["public OpenSSLECPrivateKey(OpenSSLECGroupContext group, OpenSSLKey key)", "public String getAlgorithm()", "public String getFormat()", "public byte[] getEncoded()", "public ECParameterSpec getParams()", "public BigInteger getS()", "private BigInteger getPrivateKey()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public OpenSSLKey getOpenSSLKey()"], "prime_var_dic": {"implements": 1, "long": 1, "String": 1, "key": 1, "group": 1}}, {"idx": 41359, "status": "update", "global_index": 3333, "project_name": "android_", "written_on": "2017-01-13 15:51:26", "tufano_target": "private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; }", "comment": "Just inline this in the constructor.", "tokenized_comment": ["Just", "<|s|>", "inline", "<|s|>", "this", "<|s|>", "in", "<|s|>", "the", "<|s|>", "constructor", "."], "tufano_code": "private void METHOD_1 ( ) { try { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_2 VAR_3 ) { VAR_1 = null ; } }", "our_target": "        mAdapter = NfcAdapter.getNfcAdapter(mContext);\n", "our_code": "    private void getAdapter() {\n<|startfocus|>\n        try {\n            mAdapter = NfcAdapter.getNfcAdapter(mContext);\n        // Don't crash if NFC is unsupported\n        } catch (UnsupportedOperationException e) {\n            mAdapter = null;\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "get", "Adapter", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Adapter", "<|s|>", "=", "<|s|>", "Nfc", "Adapter", ".", "get", "Nfc", "Adapter", "(", "m", "Context", ");", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Don", "'", "t", "<|s|>", "crash", "<|s|>", "if", "<|s|>", "NFC", "<|s|>", "is", "<|s|>", "unsupported", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Unsupported", "Operation", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Adapter", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 133, "base_patch_number": 17, "changed_patch_number": 18, "code_file_name": "android_3582", "comment_id": "63f31dac_719e52f9", "class_list": ["NfcTile"], "func_list": ["public NfcTile(Host host)", "protected void handleDestroy()", "public BooleanState newTileState()", "public void setListening(boolean listening)", "public boolean isAvailable()", "protected void handleUserSwitch(int newUserId)", "public Intent getLongClickIntent()", "protected void handleClick()", "protected void handleSecondaryClick()", "public CharSequence getTileLabel()", "protected void handleUpdateState(BooleanState state, Object arg)", "public int getMetricsCategory()", "protected String composeChangeAnnouncement()", "private void getAdapter()", "public void onReceive(Context context, Intent intent)"], "prime_var_dic": {}}, {"idx": 92623, "status": "update", "global_index": 18905, "project_name": "android_", "written_on": "2010-10-08 16:08:45", "tufano_target": "public VAR_1 ( String VAR_2 , int VAR_3 ) { super ( ) ; VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "comment": "likewise?", "tokenized_comment": ["likewise", "?"], "tufano_code": "public VAR_1 ( String VAR_2 , int VAR_3 ) { super ( ) ; VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "our_target": "        public LogCatViewSearchRequestor(String choice, int lineNumber) {\n", "our_code": "<|startfocus|>\n        public LogCatViewSearchRequestor (String choice, int lineNumber) {\n<|endfocus|>\n            super();\n            mChoice = choice;\n            mLineNumber = lineNumber;\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "public", "<|s|>", "Log", "Cat", "View", "Search", "Requestor", "<|s|>", "(", "String", "<|s|>", "choice", ",", "<|s|>", "int", "<|s|>", "line", "Number", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "super", "(", ");", "<|nl|>", "<|12-s|>", "m", "Choice", "<|s|>", "=", "<|s|>", "choice", ";", "<|nl|>", "<|12-s|>", "m", "Line", "Number", "<|s|>", "=", "<|s|>", "line", "Number", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 170, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1934", "comment_id": "AAAA73%2F%2F%2FpA%3D", "class_list": ["LogCatView", "FilterStorage", "defines", "LogCatViewSearchRequestor", "declaration", "instead"], "func_list": ["public LogFilter[] getFilterFromStore()", "public void saveFilters(LogFilter[] filters)", "public boolean requiresDefaultFilter()", "public LogCatViewSearchRequestor (String choice, int lineNumber)", "IMarker createMarkerFromSearchMatch(IFile file, SearchMatch match)", "public LogCatViewSearchRequestor (String choice, int lineNumber)", "public static LogCatView getInstance()", "public static void setFont(Font font)", "public void createPartControl(Composite parent)", "public void run()", "mClearAction = new Action(\"Clear Log\")", "public void dispose()", "public void setFocus()", "private void placeActions()", "void openFile(IFile file, IMarker marker)", "void switchPerspective()", "void goToErrorLine()", "public void onDoubleClick()", "public LogFilter[] getFilterFromStore()", "public void saveFilters(LogFilter[] filters)", "public boolean requiresDefaultFilter()", "public LogCatViewSearchRequestor (String choice, int lineNumber)", "IMarker createMarkerFromSearchMatch(IFile file, SearchMatch match)", "public LogCatViewSearchRequestor (String choice, int lineNumber)", "public static LogCatView getInstance()", "public static void setFont(Font font)", "public void createPartControl(Composite parent)", "public void run()", "mClearAction = new Action(\"Clear Log\")", "public void dispose()", "public void setFocus()", "private void placeActions()", "void openFile(IFile file, IMarker marker)", "void switchPerspective()", "void goToErrorLine()", "public void onDoubleClick()", "public LogCatViewSearchRequestor (String choice, int lineNumber)", "IMarker createMarkerFromSearchMatch(IFile file, SearchMatch match)", "public LogCatViewSearchRequestor (String choice, int lineNumber)", "IMarker createMarkerFromSearchMatch(IFile file, SearchMatch match)", "public void run()"], "prime_var_dic": {}}, {"idx": 13969, "status": "update", "global_index": 2113, "project_name": "android_", "written_on": "2017-02-22 15:12:20", "tufano_target": "public void METHOD_1 ( int height ) { if ( height < 0 && VAR_1 != height && VAR_2 != height ) { throw new TYPE_1 ( STRING_2 + height ) ; } VAR_3 = height ; }", "comment": "\"Invalid height. Must be a positive value, ...\"\n\nSame as the constraints explained in the @param.", "tokenized_comment": ["\"", "Invalid", "<|s|>", "height", ".", "<|s|>", "Must", "<|s|>", "be", "<|s|>", "a", "<|s|>", "positive", "<|s|>", "value", ",", "<|s|>", "...", "\"", "<|nl|>", "<|nl|>", "Same", "<|s|>", "as", "<|s|>", "the", "<|s|>", "constraints", "<|s|>", "explained", "<|s|>", "in", "<|s|>", "the", "<|s|>", "@", "param", "."], "tufano_code": "public void METHOD_1 ( int height ) { if ( height < 0 && VAR_1 != height && VAR_2 != height ) { throw new TYPE_1 ( STRING_1 + height ) ; } VAR_3 = height ; }", "our_target": "                   \"Height of the popup window must be a positive value: \" + height);\n", "our_code": "    public void setHeight(int height) {\n        if (height < 0 && ViewGroup.LayoutParams.WRAP_CONTENT != height &&\n                ViewGroup.LayoutParams.MATCH_PARENT != height) {\n            throw new IllegalArgumentException(\n<|startfocus|>\n                   \"height is set to negative value:\" + height);\n<|endfocus|>\n        }\n        mDropDownHeight = height;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Height", "(", "int", "<|s|>", "height", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "height", "<|s|>", "<", "<|s|>", "0", "<|s|>", "&&", "<|s|>", "View", "Group", ".", "Layout", "Params", ".", "WRAP", "_", "CONTENT", "<|s|>", "!=", "<|s|>", "height", "<|s|>", "&&", "<|nl|>", "<|16-s|>", "View", "Group", ".", "Layout", "Params", ".", "MATCH", "_", "PARENT", "<|s|>", "!=", "<|s|>", "height", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|2-s|>", "<|s|>", "\"", "height", "<|s|>", "is", "<|s|>", "set", "<|s|>", "to", "<|s|>", "negative", "<|s|>", "value", ":", "\"", "<|s|>", "+", "<|s|>", "height", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "m", "Drop", "Down", "Height", "<|s|>", "=", "<|s|>", "height", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 533, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_1493", "comment_id": "5016e6ee_afc3500a", "class_list": ["ListPopupWindow", "PopupDataSetObserver", "ListSelectorHider", "ResizePopupRunnable", "PopupTouchInterceptor", "PopupScrollListener"], "func_list": ["public ListPopupWindow(@NonNull Context context)", "public void setAdapter(@Nullable ListAdapter adapter)", "public void setPromptPosition(int position)", "public int getPromptPosition()", "public void setModal(boolean modal)", "public boolean isModal()", "public void setForceIgnoreOutsideTouch(boolean forceIgnoreOutsideTouch)", "public void setDropDownAlwaysVisible(boolean dropDownAlwaysVisible)", "public boolean isDropDownAlwaysVisible()", "public void setSoftInputMode(int mode)", "public int getSoftInputMode()", "public void setListSelector(Drawable selector)", "public void setBackgroundDrawable(@Nullable Drawable d)", "public void setAnimationStyle(@StyleRes int animationStyle)", "public void setAnchorView(@Nullable View anchor)", "public int getHorizontalOffset()", "public void setHorizontalOffset(int offset)", "public int getVerticalOffset()", "public void setVerticalOffset(int offset)", "public void setEpicenterBounds(Rect bounds)", "public void setDropDownGravity(int gravity)", "public int getWidth()", "public void setWidth(int width)", "public void setContentWidth(int width)", "public int getHeight()", "public void setHeight(int height)", "public void setWindowLayoutType(int layoutType)", "public void setOnItemClickListener(@Nullable AdapterView.OnItemClickListener clickListener)", "public void setOnItemSelectedListener(@Nullable OnItemSelectedListener selectedListener)", "public void setPromptView(@Nullable View prompt)", "public void postShow()", "public void show()", "public void dismiss()", "public void setOnDismissListener(@Nullable PopupWindow.OnDismissListener listener)", "private void removePromptView()", "public void setInputMethodMode(int mode)", "public int getInputMethodMode()", "public void setSelection(int position)", "public void clearListSelection()", "public boolean isShowing()", "public boolean isInputMethodNotNeeded()", "public boolean performItemClick(int position)", "public int getSelectedItemPosition()", "public long getSelectedItemId()", "void setListItemExpandMax(int max)", "public boolean onKeyDown(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyUp(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyPreIme(int keyCode, @NonNull KeyEvent event)", "public OnTouchListener createDragToOpenListener(View src)", "public ShowableListMenu getPopup()", "private int buildDropDown()", "public void run()", "public void onItemSelected(AdapterView<?> parent, View view,", "public void onNothingSelected(AdapterView<?> parent)", "public void onChanged()", "public void onInvalidated()", "public boolean onTouch(View v, MotionEvent event)", "public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,", "public void onScrollStateChanged(AbsListView view, int scrollState)"], "prime_var_dic": {"mHandler": 1}}, {"idx": 93658, "status": "update", "global_index": 17724, "project_name": "android_", "written_on": "2012-06-11 23:49:15", "tufano_target": "private VAR_1 ( TYPE_1 b ) { VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; VAR_8 = TYPE_2 . METHOD_1 ( VAR_9 ) ; VAR_10 = TYPE_2 . METHOD_1 ( VAR_11 ) ; VAR_12 = VAR_13 ; VAR_14 = VAR_15 ; }", "comment": "if this class is immutable, we should make those lists unmodifiable.", "tokenized_comment": ["if", "<|s|>", "this", "<|s|>", "class", "<|s|>", "is", "<|s|>", "immutable", ",", "<|s|>", "we", "<|s|>", "should", "<|s|>", "make", "<|s|>", "those", "<|s|>", "lists", "<|s|>", "unmodifiable", "."], "tufano_code": "private VAR_1 ( TYPE_1 b ) { VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; VAR_8 = VAR_9 ; VAR_10 = VAR_11 ; VAR_12 = VAR_13 ; VAR_14 = VAR_15 ; }", "our_target": "        mSoftware = Collections.unmodifiableList(b.mSoftware);\n        mState = Collections.unmodifiableList(b.mState);\n", "our_code": "    private Device(Builder b) {\n        mName = b.mName;\n        mManufacturer = b.mManufacturer;\n        mHardware = b.mHardware;\n<|startfocus|>\n        mSoftware = b.mSoftware;\n        mState = b.mState;\n<|endfocus|>\n        mMeta = b.mMeta;\n        mDefaultState = b.mDefaultState;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Device", "(", "Builder", "<|s|>", "b", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Name", "<|s|>", "=", "<|s|>", "b", ".", "m", "Name", ";", "<|nl|>", "<|8-s|>", "m", "Manufacturer", "<|s|>", "=", "<|s|>", "b", ".", "m", "Manufacturer", ";", "<|nl|>", "<|8-s|>", "m", "Hardware", "<|s|>", "=", "<|s|>", "b", ".", "m", "Hardware", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Software", "<|s|>", "=", "<|s|>", "b", ".", "m", "Software", ";", "<|nl|>", "<|8-s|>", "m", "State", "<|s|>", "=", "<|s|>", "b", ".", "m", "State", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Meta", "<|s|>", "=", "<|s|>", "b", ".", "m", "Meta", ";", "<|nl|>", "<|8-s|>", "m", "Default", "State", "<|s|>", "=", "<|s|>", "b", ".", "m", "Default", "State", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 175, "base_patch_number": 4, "changed_patch_number": 6, "code_file_name": "android_3927", "comment_id": "AAAGe3%2F%2F%2Fr4%3D", "class_list": ["Device", "Builder", "Meta", "Hardware", "Software", "State", "Screen", "Camera"], "func_list": ["public String getName()", "public String getManufacturer()", "public List<Software> getAllSoftware()", "public List<State> getAllStates()", "public Hardware getHardware()", "public Meta getMeta()", "public State getDefaultState()", "public Software getSoftware(int apiVersion)", "public State getState(String name)", "public void setName(String name)", "public void setManufacturer(String manufacturer)", "public void addSoftware(Software sw)", "public void addAllSoftware(Collection<? extends Software> sw)", "public void addState(State state)", "public void addAllState(Collection<? extends State> states)", "public void setHardware(Hardware hw)", "public void setMeta(Meta meta)", "public Device build()", "private Device(Builder b)", "public File getIconSixtyFour()", "public boolean hasIconSixtyFour()", "public File getIconSixteen()", "public boolean hasIconSixteen()", "public File getFrame()", "public boolean hasFrame()", "public Point getFrameOffsetLandscape()", "public Point getFrameOffsetPortrait()", "public Set<Network> getNetworking()", "public Set<Sensor> getSensors()", "public boolean hasMic()", "public List<Camera> getCameras()", "public Camera getCamera(int i)", "public Keyboard getKeyboard()", "public Navigation getNav()", "public Storage getRam()", "public ButtonType getButtonType()", "public List<Storage> getInternalStorage()", "public List<Storage> getRemovableStorage()", "public String getCpu()", "public String getGpu()", "public Set<Abi> getSupportedAbis()", "public Set<Dock> getDocks()", "public ChargeType getChargeType()", "public ScreenSize getScreenSize()", "public double getScreenDiagonalLength()", "public Density getScreenPixelDensity()", "public ScreenRatio getScreenRatio()", "public Point getScreenDimensions()", "public double getScreenXdpi()", "public double getScreenYdpi()", "public Multitouch getMultitouch()", "public TouchScreen getMechanism()", "public ScreenType getScreenType()", "public Hardware deepCopy()", "public int getMinSdkLevel()", "public int getMaxSdkLevel()", "public boolean hasLiveWallpaperSupport()", "public Set<BluetoothProfile> getBluetoothProfiles()", "public String getGlVersion()", "public Set<String> getGlExtensions()", "public boolean isDefaultState()", "public String getDescription()", "public ScreenOrientation getOrientation()", "public KeyboardState getKeyState()", "public NavigationState getNavState()", "public Hardware getHardwareOverride()", "public Location getLocation()", "public boolean hasAutofocus()", "public boolean hasFlash()", "public Camera deepCopy()", "public void setName(String name)", "public void setManufacturer(String manufacturer)", "public void addSoftware(Software sw)", "public void addAllSoftware(Collection<? extends Software> sw)", "public void addState(State state)", "public void addAllState(Collection<? extends State> states)", "public void setHardware(Hardware hw)", "public void setMeta(Meta meta)", "public Device build()", "public String getName()", "public String getName()", "public String getName()", "public String getName()", "public String getManufacturer()", "public List<Software> getAllSoftware()", "public List<State> getAllStates()", "public Hardware getHardware()", "public Meta getMeta()", "public State getDefaultState()", "public Software getSoftware(int apiVersion)", "public State getState(String name)", "public void setName(String name)", "public void setManufacturer(String manufacturer)", "public void addSoftware(Software sw)", "public void addAllSoftware(Collection<? extends Software> sw)", "public void addState(State state)", "public void addAllState(Collection<? extends State> states)", "public void setHardware(Hardware hw)", "public void setMeta(Meta meta)", "public Device build()", "private Device(Builder b)", "public File getIconSixtyFour()", "public boolean hasIconSixtyFour()", "public File getIconSixteen()", "public boolean hasIconSixteen()", "public File getFrame()", "public boolean hasFrame()", "public Point getFrameOffsetLandscape()", "public Point getFrameOffsetPortrait()", "public Set<Network> getNetworking()", "public Set<Sensor> getSensors()", "public boolean hasMic()", "public List<Camera> getCameras()", "public Camera getCamera(int i)", "public Keyboard getKeyboard()", "public Navigation getNav()", "public Storage getRam()", "public ButtonType getButtonType()", "public List<Storage> getInternalStorage()", "public List<Storage> getRemovableStorage()", "public String getCpu()", "public String getGpu()", "public Set<Abi> getSupportedAbis()", "public Set<Dock> getDocks()", "public ChargeType getChargeType()", "public ScreenSize getScreenSize()", "public double getScreenDiagonalLength()", "public Density getScreenPixelDensity()", "public ScreenRatio getScreenRatio()", "public Point getScreenDimensions()", "public double getScreenXdpi()", "public double getScreenYdpi()", "public Multitouch getMultitouch()", "public TouchScreen getMechanism()", "public ScreenType getScreenType()", "public Hardware deepCopy()", "public int getMinSdkLevel()", "public int getMaxSdkLevel()", "public boolean hasLiveWallpaperSupport()", "public Set<BluetoothProfile> getBluetoothProfiles()", "public String getGlVersion()", "public Set<String> getGlExtensions()", "public boolean isDefaultState()", "public String getDescription()", "public ScreenOrientation getOrientation()", "public KeyboardState getKeyState()", "public NavigationState getNavState()", "public Hardware getHardwareOverride()", "public Location getLocation()", "public boolean hasAutofocus()", "public boolean hasFlash()", "public Camera deepCopy()", "public String getName()", "public String getManufacturer()", "public List<Software> getAllSoftware()", "public List<State> getAllStates()", "public Hardware getHardware()", "public Meta getMeta()", "public State getDefaultState()", "public Software getSoftware(int apiVersion)", "public State getState(String name)", "public void setName(String name)", "public void setManufacturer(String manufacturer)", "public void addSoftware(Software sw)", "public void addAllSoftware(Collection<? extends Software> sw)", "public void addState(State state)", "public void addAllState(Collection<? extends State> states)", "public void setHardware(Hardware hw)", "public void setMeta(Meta meta)", "public Device build()", "private Device(Builder b)", "public File getIconSixtyFour()", "public boolean hasIconSixtyFour()", "public File getIconSixteen()", "public boolean hasIconSixteen()", "public File getFrame()", "public boolean hasFrame()", "public Point getFrameOffsetLandscape()", "public Point getFrameOffsetPortrait()", "public Set<Network> getNetworking()", "public Set<Sensor> getSensors()", "public boolean hasMic()", "public List<Camera> getCameras()", "public Camera getCamera(int i)", "public Keyboard getKeyboard()", "public Navigation getNav()", "public Storage getRam()", "public ButtonType getButtonType()", "public List<Storage> getInternalStorage()", "public List<Storage> getRemovableStorage()", "public String getCpu()", "public String getGpu()", "public Set<Abi> getSupportedAbis()", "public Set<Dock> getDocks()", "public ChargeType getChargeType()", "public ScreenSize getScreenSize()", "public double getScreenDiagonalLength()", "public Density getScreenPixelDensity()", "public ScreenRatio getScreenRatio()", "public Point getScreenDimensions()", "public double getScreenXdpi()", "public double getScreenYdpi()", "public Multitouch getMultitouch()", "public TouchScreen getMechanism()", "public ScreenType getScreenType()", "public Hardware deepCopy()", "public int getMinSdkLevel()", "public int getMaxSdkLevel()", "public boolean hasLiveWallpaperSupport()", "public Set<BluetoothProfile> getBluetoothProfiles()", "public String getGlVersion()", "public Set<String> getGlExtensions()", "public boolean isDefaultState()", "public String getDescription()", "public ScreenOrientation getOrientation()", "public KeyboardState getKeyState()", "public NavigationState getNavState()", "public Hardware getHardwareOverride()", "public Location getLocation()", "public boolean hasAutofocus()", "public boolean hasFlash()", "public Camera deepCopy()", "public Set<Network> getNetworking()"], "prime_var_dic": {}}, {"idx": 62405, "status": "update", "global_index": 21543, "project_name": "android_", "written_on": "2013-12-14 01:03:27", "tufano_target": "protected VAR_1 ( TYPE_2 VAR_2 ) { if ( VAR_2 == null ) { throw new TYPE_3 ( ) ; } VAR_3 = VAR_2 ; VAR_4 = true ; this . parameters = VAR_5 ; }", "comment": "if you change owner to SSLEngineImpl, it lets you drop a bit more code (checks if engineOwner != null in other files too)\n\nI know we are trying to minimize diffs here, but this seems a bit cleaner.\n\n(also engineOwner can be final too, right?)", "tokenized_comment": ["if", "<|s|>", "you", "<|s|>", "change", "<|s|>", "owner", "<|s|>", "to", "<|s|>", "SSLEngine", "Impl", ",", "<|s|>", "it", "<|s|>", "lets", "<|s|>", "you", "<|s|>", "drop", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "more", "<|s|>", "code", "<|s|>", "(", "checks", "<|s|>", "if", "<|s|>", "engine", "Owner", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "in", "<|s|>", "other", "<|s|>", "files", "<|s|>", "too", ")", "<|nl|>", "<|nl|>", "I", "<|s|>", "know", "<|s|>", "we", "<|s|>", "are", "<|s|>", "trying", "<|s|>", "to", "<|s|>", "minimize", "<|s|>", "diffs", "<|s|>", "here", ",", "<|s|>", "but", "<|s|>", "this", "<|s|>", "seems", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "cleaner", ".", "<|nl|>", "<|nl|>", "(", "also", "<|s|>", "engine", "Owner", "<|s|>", "can", "<|s|>", "be", "<|s|>", "final", "<|s|>", "too", ",", "<|s|>", "right", "?", ")"], "tufano_code": "protected VAR_1 ( TYPE_1 VAR_2 ) { if ( VAR_2 instanceof TYPE_2 ) { VAR_3 = ( TYPE_2 ) VAR_2 ; VAR_4 = true ; this . parameters = VAR_5 ; } }", "our_target": "    protected HandshakeProtocol(SSLEngineImpl owner) {\n          if (owner == null) {\n             throw new NullPointerException();\n          }\n          engineOwner = owner;\n          nonBlocking = true;\n          this.parameters = engineOwner.sslParameters;\n", "our_code": "<|startfocus|>\n    protected HandshakeProtocol(Object owner) {\n        if (owner instanceof SSLEngineImpl) {\n            engineOwner = (SSLEngineImpl) owner;\n            nonBlocking = true;\n            this.parameters = engineOwner.sslParameters;\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "protected", "<|s|>", "Handshake", "Protocol", "(", "Object", "<|s|>", "owner", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "owner", "<|s|>", "instanceof", "<|s|>", "SSLEngine", "Impl", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "engine", "Owner", "<|s|>", "=", "<|s|>", "(", "SSLEngine", "Impl", ")", "<|s|>", "owner", ";", "<|nl|>", "<|12-s|>", "non", "Blocking", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "this", ".", "parameters", "<|s|>", "=", "<|s|>", "engine", "Owner", ".", "ssl", "Parameters", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 155, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4749", "comment_id": "28ab4b9f_a1243841", "class_list": ["for", "HandshakeProtocol"], "func_list": ["protected HandshakeProtocol(Object owner)", "public void setRecordProtocol(SSLRecordProtocol recordProtocol)", "protected void stop()", "public SSLSessionImpl getSession()", "protected void sendChangeCipherSpec()", "protected void sendHelloRequest()", "public byte[] wrap()", "protected void sendWarningAlert(byte description)", "protected void fatalAlert(byte description, String reason)", "protected void computerReferenceVerifyDataTLS(String label)", "protected void computerVerifyDataTLS(String label, byte[] buf)", "protected void computerReferenceVerifyDataSSLv3(byte[] sender)", "protected void computerVerifyDataSSLv3(byte[] sender, byte[] buf)", "protected void verifyFinished(byte[] data)", "protected void unexpectedMessage()", "protected void sendChangeCipherSpec()", "public void computerMasterSecret()", "public Runnable getTask()", "protected void clearMessages()", "protected void shutdown()", "protected HandshakeProtocol(Object owner)", "public void setRecordProtocol(SSLRecordProtocol recordProtocol)", "protected void stop()", "public SSLSessionImpl getSession()", "protected void sendChangeCipherSpec()", "protected void sendHelloRequest()", "public byte[] wrap()", "protected void sendWarningAlert(byte description)", "protected void fatalAlert(byte description, String reason)", "protected void computerReferenceVerifyDataTLS(String label)", "protected void computerVerifyDataTLS(String label, byte[] buf)", "protected void computerReferenceVerifyDataSSLv3(byte[] sender)", "protected void computerVerifyDataSSLv3(byte[] sender, byte[] buf)", "protected void verifyFinished(byte[] data)", "protected void unexpectedMessage()", "protected void sendChangeCipherSpec()", "public void computerMasterSecret()", "public Runnable getTask()", "protected void clearMessages()", "protected void shutdown()"], "prime_var_dic": {"HandshakeProtocol": 2, "int": 4, "implementation": 1, "handshake": 2, "resuming": 1, "delegated": 1, "byte": 1, "Protocol": 1, "message": 2, "finished": 1, "messages": 2, "execution": 4, "spec": 2, "MESSAGE": 1, "HandshakeIODataStream": 1, "task": 1, "length": 1, "method": 1}}, {"idx": 1271, "status": "update", "global_index": 10030, "project_name": "android_", "written_on": "2015-04-14 00:16:51", "tufano_target": "public void METHOD_1 ( TYPE_1 context ) { VAR_1 = false ; VAR_2 . METHOD_2 ( ) ; }", "comment": "Can this analysis be done per manifest file, or do you really need to cross check multiple manifests? Seems like you'd really want to do this check just for each activity element independently, and for each activity you encounter, go to look at the metadata and see if it specifies an action view. In that case you can immediately report whether it's missing or wrong -- you don't need to accumulate that information and report it at the end of seeing all projects, right? (In fact it looks like right now, if a single activity has an action view, then that will be considered true for all activities.)\n\nTake a look at SecurityDetector and for example the isStandardReceiver() method or the isWearableBindListener() -- in each case we iterate to see whether the right condition is met right there, and if so we can report it immediately.", "tokenized_comment": ["Can", "<|s|>", "this", "<|s|>", "analysis", "<|s|>", "be", "<|s|>", "done", "<|s|>", "per", "<|s|>", "manifest", "<|s|>", "file", ",", "<|s|>", "or", "<|s|>", "do", "<|s|>", "you", "<|s|>", "really", "<|s|>", "need", "<|s|>", "to", "<|s|>", "cross", "<|s|>", "check", "<|s|>", "multiple", "<|s|>", "manifests", "?", "<|s|>", "Seems", "<|s|>", "like", "<|s|>", "you", "'", "d", "<|s|>", "really", "<|s|>", "want", "<|s|>", "to", "<|s|>", "do", "<|s|>", "this", "<|s|>", "check", "<|s|>", "just", "<|s|>", "for", "<|s|>", "each", "<|s|>", "activity", "<|s|>", "element", "<|s|>", "independently", ",", "<|s|>", "and", "<|s|>", "for", "<|s|>", "each", "<|s|>", "activity", "<|s|>", "you", "<|s|>", "encounter", ",", "<|s|>", "go", "<|s|>", "to", "<|s|>", "look", "<|s|>", "at", "<|s|>", "the", "<|s|>", "metadata", "<|s|>", "and", "<|s|>", "see", "<|s|>", "if", "<|s|>", "it", "<|s|>", "specifies", "<|s|>", "an", "<|s|>", "action", "<|s|>", "view", ".", "<|s|>", "In", "<|s|>", "that", "<|s|>", "case", "<|s|>", "you", "<|s|>", "can", "<|s|>", "immediately", "<|s|>", "report", "<|s|>", "whether", "<|s|>", "it", "'", "s", "<|s|>", "missing", "<|s|>", "or", "<|s|>", "wrong", "<|s|>", "--", "<|s|>", "you", "<|s|>", "don", "'", "t", "<|s|>", "need", "<|s|>", "to", "<|s|>", "accumulate", "<|s|>", "that", "<|s|>", "information", "<|s|>", "and", "<|s|>", "report", "<|s|>", "it", "<|s|>", "at", "<|s|>", "the", "<|s|>", "end", "<|s|>", "of", "<|s|>", "seeing", "<|s|>", "all", "<|s|>", "projects", ",", "<|s|>", "right", "?", "<|s|>", "(", "In", "<|s|>", "fact", "<|s|>", "it", "<|s|>", "looks", "<|s|>", "like", "<|s|>", "right", "<|s|>", "now", ",", "<|s|>", "if", "<|s|>", "a", "<|s|>", "single", "<|s|>", "activity", "<|s|>", "has", "<|s|>", "an", "<|s|>", "action", "<|s|>", "view", ",", "<|s|>", "then", "<|s|>", "that", "<|s|>", "will", "<|s|>", "be", "<|s|>", "considered", "<|s|>", "true", "<|s|>", "for", "<|s|>", "all", "<|s|>", "activities", ".", ")", "<|nl|>", "<|nl|>", "Take", "<|s|>", "a", "<|s|>", "look", "<|s|>", "at", "<|s|>", "Security", "Detector", "<|s|>", "and", "<|s|>", "for", "<|s|>", "example", "<|s|>", "the", "<|s|>", "is", "Standard", "Receiver", "(", ")", "<|s|>", "method", "<|s|>", "or", "<|s|>", "the", "<|s|>", "is", "Wearable", "Bind", "Listener", "(", ")", "<|s|>", "--", "<|s|>", "in", "<|s|>", "each", "<|s|>", "case", "<|s|>", "we", "<|s|>", "iterate", "<|s|>", "to", "<|s|>", "see", "<|s|>", "whether", "<|s|>", "the", "<|s|>", "right", "<|s|>", "condition", "<|s|>", "is", "<|s|>", "met", "<|s|>", "right", "<|s|>", "there", ",", "<|s|>", "and", "<|s|>", "if", "<|s|>", "so", "<|s|>", "we", "<|s|>", "can", "<|s|>", "report", "<|s|>", "it", "<|s|>", "immediately", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 context ) { VAR_1 = false ; VAR_2 . METHOD_2 ( ) ; }", "our_target": "    @Override\n    public void beforeCheckProject(@NonNull Context context) {\n", "our_code": "<|startfocus|>\n    @Override public void beforeCheckProject(@NonNull Context context) {\n<|endfocus|>\n        mHasActionView = false;\n        mActivityLocations.clear();\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "@", "Override", "<|s|>", "public", "<|s|>", "void", "<|s|>", "before", "Check", "Project", "(", "@", "Non", "Null", "<|s|>", "Context", "<|s|>", "context", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Has", "Action", "View", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "m", "Activity", "Locations", ".", "clear", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 77, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_2891", "comment_id": "904c868c_24dd7295", "class_list": ["AppIndexingApiDetector"], "func_list": ["public AppIndexingApiDetector()", "@Override @Nullable public Collection<String> getApplicableElements()", "@Override public void beforeCheckProject(@NonNull Context context)", "@Override public void afterCheckProject(@NonNull Context context)", "@Override public void visitElement(@NonNull XmlContext context, @NonNull Element element)", "private void checkData(XmlContext context, Element element)"], "prime_var_dic": {"AppIndexing": 1}}, {"idx": 91230, "status": "update", "global_index": 14929, "project_name": "android_", "written_on": "2014-04-30 22:00:00", "tufano_target": "private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ! VAR_1 . METHOD_4 ( ) ) { throw new TYPE_1 ( STRING_1 ) ; } }", "comment": "checkAccessible?", "tokenized_comment": ["check", "Accessible", "?"], "tufano_code": "private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ! VAR_1 . METHOD_3 ( ) ) { throw new TYPE_1 ( STRING_1 ) ; } }", "our_target": "    if (!block.isAccessible()) {\n", "our_code": "  private void checkCanAccess() {\n    checkNotFreed();\n<|startfocus|>\n    if (!block.canAccess()) {\n<|endfocus|>\n      throw new IllegalStateException(\"buffer is inaccessible\");\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "check", "Can", "Access", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "check", "Not", "Freed", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "block", ".", "can", "Access", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "\"", "buffer", "<|s|>", "is", "<|s|>", "inaccessible", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 548, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3027", "comment_id": "eaf77045_834d4284", "class_list": ["DirectByteBuffer", "constructor,"], "func_list": ["protected DirectByteBuffer(MemoryBlock block, int capacity, int offset, boolean isReadOnly, MapMode mapMode)", "private static DirectByteBuffer copy(DirectByteBuffer other, int markOfOther, boolean isReadOnly)", "@Override public ByteBuffer asReadOnlyBuffer()", "@Override public ByteBuffer compact()", "@Override public ByteBuffer duplicate()", "@Override public ByteBuffer slice()", "private final boolean isReadOnly;", "@Override public void allowAccess(boolean allow)", "@Override public ByteBuffer put(byte value)", "@Override public ByteBuffer putChar(char value)", "@Override public ByteBuffer putDouble(double value)", "@Override public ByteBuffer putFloat(float value)", "@Override public ByteBuffer putInt(int value)", "@Override public ByteBuffer putLong(long value)", "@Override public ByteBuffer putShort(short value)", "private void checkCanAccess()", "private void checkNotFreed()"], "prime_var_dic": {"case": 1}}, {"idx": 81449, "status": "update", "global_index": 10877, "project_name": "android_", "written_on": "2015-05-21 21:45:13", "tufano_target": "public boolean METHOD_1 ( TYPE_1 file ) { return true ; }", "comment": "nullable", "tokenized_comment": ["nullable"], "tufano_code": "public boolean METHOD_1 ( TYPE_1 file ) { return true ; }", "our_target": "  public boolean accept(@NotNull VirtualFile file) {\n", "our_code": "<|startfocus|>\n  public boolean accept(VirtualFile file) {\n<|endfocus|>\n    return true;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "accept", "(", "Virtual", "File", "<|s|>", "file", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 47, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_494", "comment_id": "4d0995dc_bd4e6b4a", "class_list": ["CaptureType"], "func_list": ["public boolean accept(VirtualFile file)"], "prime_var_dic": {"CaptureType": 1}}, {"idx": 95238, "status": "update", "global_index": 17846, "project_name": "android_", "written_on": "2009-01-12 22:48:26", "tufano_target": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; }", "comment": "Intendation is incorrect.", "tokenized_comment": ["Intendation", "<|s|>", "is", "<|s|>", "incorrect", "."], "tufano_code": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; }", "our_target": "        addPreferencesFromResource(R.xml.gsm_umts_options);\n", "our_code": "    protected void onCreate(Bundle icicle) {\n     super.onCreate(icicle);\n        \n<|startfocus|>\n     addPreferencesFromResource(R.xml.gsm_umts_options);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "on", "Create", "(", "Bundle", "<|s|>", "icicle", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|s|>", "super", ".", "on", "Create", "(", "icicle", ");", "<|nl|>", "<|8-s|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|s|>", "add", "Preferences", "From", "Resource", "(", "R", ".", "xml", ".", "gsm", "_", "umts", "_", "options", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 41, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4380", "comment_id": "z85b4a66adba9a0988d7ca80a10c1f809", "class_list": ["GsmUmtsOptions"], "func_list": ["protected void onCreate(Bundle icicle)"], "prime_var_dic": {}}, {"idx": 32044, "status": "update", "global_index": 13344, "project_name": "android_", "written_on": "2014-11-19 14:47:52", "tufano_target": "private boolean METHOD_4 ( TYPE_4 < TYPE_5 > VAR_4 ) { for ( TYPE_5 VAR_2 : VAR_4 ) { if ( VAR_2 instanceof TYPE_6 && ( ( ( TYPE_6 ) VAR_2 ) . METHOD_3 ( ) == VAR_3 ) ) { return true ; } } return false ; }", "comment": "why not \"containsRuntimeAnnotation\"?", "tokenized_comment": ["why", "<|s|>", "not", "<|s|>", "\"", "contains", "Runtime", "Annotation", "\"", "?"], "tufano_code": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_2 instanceof TYPE_3 && ( ( ( TYPE_3 ) VAR_2 ) . METHOD_3 ( ) == VAR_3 ) ) { return true ; } } return false ; }", "our_target": "  private boolean containsRuntimeAnnotation(@Nonnull Collection<JAnnotation> annotationTypes) {\n    for (JAnnotation annotation: annotationTypes) {\n      if (annotation instanceof JDefinedAnnotation\n          && (((JDefinedAnnotation) annotation).getRetentionPolicy() == JRetentionPolicy.RUNTIME)) {\n", "our_code": "<|startfocus|>\n  private boolean isAnnotatedByRuntimeAnnotation(@Nonnull Annotable annotable) {\n    for (JAnnotationType annotation : annotable.getAnnotationTypes()) {\n      if (annotation instanceof JDefinedAnnotationType && (\n          ((JDefinedAnnotationType) annotation).getRetentionPolicy() == JRetentionPolicy.RUNTIME)) {\n<|endfocus|>\n        return true;\n      }\n    }\n    return false;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Annotated", "By", "Runtime", "Annotation", "(", "@", "Nonnull", "<|s|>", "Annotable", "<|s|>", "annotable", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "JAnnotation", "Type", "<|s|>", "annotation", "<|s|>", ":", "<|s|>", "annotable", ".", "get", "Annotation", "Types", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "annotation", "<|s|>", "instanceof", "<|s|>", "JDefined", "Annotation", "Type", "<|s|>", "&&", "<|s|>", "(", "<|nl|>", "<|8-s|>", "<|2-s|>", "(", "(", "JDefined", "Annotation", "Type", ")", "<|s|>", "annotation", ")", ".", "get", "Retention", "Policy", "(", ")", "<|s|>", "==", "<|s|>", "JRetention", "Policy", ".", "RUNTIME", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 80, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_2232", "comment_id": "5af0570f_5d83db61", "class_list": ["AnnotatedFinder"], "func_list": ["private boolean hasRuntimeAnnotation(@Nonnull JDefinedClassOrInterface type)", "private boolean isAnnotatedByRuntimeAnnotation(@Nonnull Annotable annotable)"], "prime_var_dic": {"implements": 1}}, {"idx": 96397, "status": "update", "global_index": 5940, "project_name": "android_", "written_on": "2016-07-27 08:51:44", "tufano_target": "public static String METHOD_1 ( String VAR_1 ) { if ( VAR_1 == null || VAR_1 . isEmpty ( ) ) { return null ; } VAR_1 = VAR_1 . toLowerCase ( VAR_3 ) ; return VAR_2 . get ( VAR_1 ) ; }", "comment": "toLowerCase(Locale.US);", "tokenized_comment": ["to", "Lower", "Case", "(", "Locale", ".", "US", ");"], "tufano_code": "public static String METHOD_1 ( String VAR_1 ) { if ( VAR_1 == null || VAR_1 . isEmpty ( ) ) { return null ; } VAR_1 = VAR_1 . toLowerCase ( ) ; return VAR_2 . get ( VAR_1 ) ; }", "our_target": "        extension = extension.toLowerCase(Locale.US);\n", "our_code": "    public static String guessMimeTypeFromExtension(String extension) {\n        if (extension == null || extension.isEmpty()) {\n            return null;\n        }\n<|startfocus|>\n        extension = extension.toLowerCase();\n<|endfocus|>\n        return extensionToMimeTypeMap.get(extension);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "String", "<|s|>", "guess", "Mime", "Type", "From", "Extension", "(", "String", "<|s|>", "extension", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "extension", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "extension", ".", "is", "Empty", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "extension", "<|s|>", "=", "<|s|>", "extension", ".", "to", "Lower", "Case", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "extension", "To", "Mime", "Type", "Map", ".", "get", "(", "extension", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 430, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3118", "comment_id": "0f234ded_a7440aa4", "class_list": ["MimeUtils"], "func_list": ["private static void add(String mimeType, String extension)", "private MimeUtils()", "public static boolean hasMimeType(String mimeType)", "public static String guessMimeTypeFromExtension(String extension)", "public static boolean hasExtension(String extension)", "public static String guessExtensionFromMimeType(String mimeType)"], "prime_var_dic": {"MimeUtils": 1, "like": 1}}, {"idx": 78959, "status": "update", "global_index": 12649, "project_name": "android_", "written_on": "2014-09-18 15:05:35", "tufano_target": "public void METHOD_1 ( String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( STRING_2 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_1 ) ; }", "comment": "(see updated comment in https://android-review.googlesource.com/#/c/107754/ regarding within)", "tokenized_comment": ["(", "see", "<|s|>", "updated", "<|s|>", "comment", "<|s|>", "in", "<|s|>", "https", "://", "android", "-", "review", ".", "googlesource", ".", "com", "/#/", "c", "/", "107754", "/", "<|s|>", "regarding", "<|s|>", "within", ")"], "tufano_code": "public void METHOD_1 ( String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_1 ) ; }", "our_target": "    JButton localeChooser = findToolbarButton(\"Locale to render layout with inside the IDE\");\n", "our_code": "  public void chooseLocale(@NotNull String locale) {\n<|startfocus|>\n    JButton localeChooser = findToolbarButton(\"Locale to render layout within the IDE\");\n<|endfocus|>\n    myRobot.click(localeChooser);\n\n    clickPopupMenuItem(locale);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "choose", "Locale", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "locale", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "JButton", "<|s|>", "locale", "Chooser", "<|s|>", "=", "<|s|>", "find", "Toolbar", "Button", "(", "\"", "Locale", "<|s|>", "to", "<|s|>", "render", "<|s|>", "layout", "<|s|>", "within", "<|s|>", "the", "<|s|>", "IDE", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Robot", ".", "click", "(", "locale", "Chooser", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "click", "Popup", "Menu", "Item", "(", "locale", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 104, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_44", "comment_id": "3042e3dc_993e6b40", "class_list": ["ConfigurationToolbarFixture"], "func_list": ["public ConfigurationToolbarFixture(@NotNull Robot robot, @NotNull LayoutFixture editorFixture, @NotNull RenderContext renderContext,", "public ConfigurationToolbarFixture requireDevice(@NotNull String id)", "public boolean isDevice(String id)", "public ConfigurationToolbarFixture requireOrientation(@NotNull String name)", "public ConfigurationToolbarFixture requireTheme(@NotNull String theme)", "public void toggleOrientation()", "public void createLandscapeVariation()", "public void chooseLocale(@NotNull String locale)", "public void removePreviews()", "public void chooseDevice(String labelPrefix)", "public void createOtherVariation(@NotNull String variation)", "private Configuration getConfiguration()", "private JButton findToolbarButton(@NotNull final String tooltip)", "protected boolean isMatching(JButton button)", "private void clickPopupMenuItem(@NotNull String label)"], "prime_var_dic": {"myRobot": 1, "myEditorFixture": 1, "myRenderContext": 1, "myToolbarWidget": 1}}, {"idx": 88949, "status": "update", "global_index": 14890, "project_name": "android_", "written_on": "2014-05-02 02:22:36", "tufano_target": "public void METHOD_1 ( TYPE_1 context , TYPE_2 attribute ) { String VAR_1 = attribute . getValue ( ) ; if ( VAR_1 != null && VAR_1 . equals ( VAR_2 ) ) { String message = STRING_1 ; context . METHOD_2 ( VAR_3 , attribute , context . METHOD_3 ( attribute ) , message , null ) ; } }", "comment": "one more thing - can you change this to insert the node as a scope:\ncontext.report(ISSUE, attribute, context.getLocation(attribute), message, null);\n\nThat will make the suppress facility work (tools:ignore=\"<id>\" to suppress this issue). Can you also double check that the other lint detectors you've submitted (thanks again!) do the same thing -- pass in the DOM node for XML as the second parameter, or the method node for byte code -- the lint driver uses it to search for suppress annotations (in bytecode) and tools:ignore attribute (in XML) etc.", "tokenized_comment": ["one", "<|s|>", "more", "<|s|>", "thing", "<|s|>", "-", "<|s|>", "can", "<|s|>", "you", "<|s|>", "change", "<|s|>", "this", "<|s|>", "to", "<|s|>", "insert", "<|s|>", "the", "<|s|>", "node", "<|s|>", "as", "<|s|>", "a", "<|s|>", "scope", ":", "<|nl|>", "context", ".", "report", "(", "ISSUE", ",", "<|s|>", "attribute", ",", "<|s|>", "context", ".", "get", "Location", "(", "attribute", ")", ",", "<|s|>", "message", ",", "<|s|>", "null", ");", "<|nl|>", "<|nl|>", "That", "<|s|>", "will", "<|s|>", "make", "<|s|>", "the", "<|s|>", "suppress", "<|s|>", "facility", "<|s|>", "work", "<|s|>", "(", "tools", ":", "ignore", "=", "\"", "<", "id", ">", "\"", "<|s|>", "to", "<|s|>", "suppress", "<|s|>", "this", "<|s|>", "issue", ")", ".", "<|s|>", "Can", "<|s|>", "you", "<|s|>", "also", "<|s|>", "double", "<|s|>", "check", "<|s|>", "that", "<|s|>", "the", "<|s|>", "other", "<|s|>", "lint", "<|s|>", "detectors", "<|s|>", "you", "'", "ve", "<|s|>", "submitted", "<|s|>", "(", "thanks", "<|s|>", "again", "!", ")", "<|s|>", "do", "<|s|>", "the", "<|s|>", "same", "<|s|>", "thing", "<|s|>", "--", "<|s|>", "pass", "<|s|>", "in", "<|s|>", "the", "<|s|>", "DOM", "<|s|>", "node", "<|s|>", "for", "<|s|>", "XML", "<|s|>", "as", "<|s|>", "the", "<|s|>", "second", "<|s|>", "parameter", ",", "<|s|>", "or", "<|s|>", "the", "<|s|>", "method", "<|s|>", "node", "<|s|>", "for", "<|s|>", "byte", "<|s|>", "code", "<|s|>", "--", "<|s|>", "the", "<|s|>", "lint", "<|s|>", "driver", "<|s|>", "uses", "<|s|>", "it", "<|s|>", "to", "<|s|>", "search", "<|s|>", "for", "<|s|>", "suppress", "<|s|>", "annotations", "<|s|>", "(", "in", "<|s|>", "bytecode", ")", "<|s|>", "and", "<|s|>", "tools", ":", "ignore", "<|s|>", "attribute", "<|s|>", "(", "in", "<|s|>", "XML", ")", "<|s|>", "etc", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 context , TYPE_2 attribute ) { String VAR_1 = attribute . getValue ( ) ; if ( VAR_1 != null && VAR_1 . equals ( VAR_2 ) ) { String message = STRING_1 ; context . METHOD_2 ( VAR_3 , context . METHOD_3 ( attribute ) , message , null ) ; } }", "our_target": "            context.report(ISSUE, attribute, context.getLocation(attribute), message, null);\n", "our_code": "    public void visitAttribute(@NonNull XmlContext context, @NonNull Attr attribute) {\n        String protectionLevel = attribute.getValue();\n        if (protectionLevel != null\n            && protectionLevel.equals(SIGNATURE_OR_SYSTEM)) {\n            String message = \"protectionLevel should probably not be set to signatureOrSystem\";\n<|startfocus|>\n            context.report(ISSUE, context.getLocation(attribute), message, null);\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "visit", "Attribute", "(", "@", "Non", "Null", "<|s|>", "Xml", "Context", "<|s|>", "context", ",", "<|s|>", "@", "Non", "Null", "<|s|>", "Attr", "<|s|>", "attribute", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "<|s|>", "protection", "Level", "<|s|>", "=", "<|s|>", "attribute", ".", "get", "Value", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "protection", "Level", "<|s|>", "!=", "<|s|>", "null", "<|nl|>", "<|12-s|>", "&&", "<|s|>", "protection", "Level", ".", "equals", "(", "SIGNATURE", "_", "OR", "_", "SYSTEM", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "message", "<|s|>", "=", "<|s|>", "\"", "protection", "Level", "<|s|>", "should", "<|s|>", "probably", "<|s|>", "not", "<|s|>", "be", "<|s|>", "set", "<|s|>", "to", "<|s|>", "signature", "Or", "System", "\"", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "context", ".", "report", "(", "ISSUE", ",", "<|s|>", "context", ".", "get", "Location", "(", "attribute", ")", ",", "<|s|>", "message", ",", "<|s|>", "null", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 96, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_2909", "comment_id": "aa481879_cc480397", "class_list": ["SignatureOrSystemDetector"], "func_list": ["public Speed getSpeed()", "public boolean appliesTo(@NonNull Context context, @NonNull File file)", "public Collection<String> getApplicableAttributes()", "public void visitAttribute(@NonNull XmlContext context, @NonNull Attr attribute)"], "prime_var_dic": {"level": 1, "String": 2}}, {"idx": 82922, "status": "update", "global_index": 14759, "project_name": "android_", "written_on": "2014-04-11 19:22:12", "tufano_target": "public void METHOD_3 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; }", "comment": "@Override?", "tokenized_comment": ["@", "Override", "?"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; }", "our_target": "    public void release() {\n", "our_code": "<|startfocus|>\n    public void close() {\n<|endfocus|>\n        NativeCrypto.BIO_free_all(ctx);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "close", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Native", "Crypto", ".", "BIO", "_", "free", "_", "all", "(", "ctx", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 44, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4751", "comment_id": "99dbb3ac_c9cf1144", "class_list": ["OpenSSLBIOInputStream"], "func_list": ["public OpenSSLBIOInputStream(InputStream is)", "public long getBioContext()", "public void close()"], "prime_var_dic": {"BIO_gets": 1}}, {"idx": 68699, "status": "update", "global_index": 10709, "project_name": "android_", "written_on": "2015-05-13 14:23:11", "tufano_target": "public VAR_1 ( String path , String VAR_2 ) { VAR_3 = path ; VAR_5 = VAR_6 ; }", "comment": "nullability annotations", "tokenized_comment": ["nullability", "<|s|>", "annotations"], "tufano_code": "public VAR_1 ( String path , String VAR_2 ) { VAR_3 = path ; VAR_4 = VAR_2 ; }", "our_target": "    myApplicationId = applicationId;\n", "our_code": "  public ApkInstallation(String path, String manifestPackage) {\n    myPath = path;\n<|startfocus|>\n    myManifestPackage = manifestPackage;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Apk", "Installation", "(", "String", "<|s|>", "path", ",", "<|s|>", "String", "<|s|>", "manifest", "Package", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "my", "Path", "<|s|>", "=", "<|s|>", "path", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "my", "Manifest", "Package", "<|s|>", "=", "<|s|>", "manifest", "Package", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 27, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_754", "comment_id": "8d146d89_27ebf4a9", "class_list": ["ApkInstallation"], "func_list": ["public ApkInstallation(String path, String manifestPackage)", "public String getPath()", "public String getManifestPackage()"], "prime_var_dic": {"ApkInstallation": 1, "myPath": 1, "myManifestPackage": 1}}, {"idx": 95932, "status": "update", "global_index": 3897, "project_name": "android_", "written_on": "2017-02-09 10:15:16", "tufano_target": "public void METHOD_3 ( ) { TYPE_1 . assertEquals ( INT_1 , TYPE_2 . METHOD_2 ( INT_1 , - 1 ) ) ; }", "comment": "testFallThroughCaseWithPhi", "tokenized_comment": ["test", "Fall", "Through", "Case", "With", "Phi"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . assertEquals ( INT_1 , TYPE_2 . METHOD_2 ( INT_1 , - 1 ) ) ; }", "our_target": "  public void testFallThroughCaseWithPhi() {\n", "our_code": "<|startfocus|>\n  public void testfallThroughCaseWithPhi() {\n<|endfocus|>\n    Assert.assertEquals(2, Ssa.fallThroughCaseWithPhi(2, -1));\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "testfall", "Through", "Case", "With", "Phi", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Assert", ".", "assert", "Equals", "(", "2", ",", "<|s|>", "Ssa", ".", "fall", "Through", "Case", "With", "Phi", "(", "2", ",", "<|s|>", "-", "1", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 50, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_2678", "comment_id": "234f7f9e_db3d9bfb", "class_list": ["Tests"], "func_list": ["public void testNestedCatch()", "public void testMultipleUses()", "public void testfallThroughCaseWithPhi()"], "prime_var_dic": {}}, {"idx": 133, "status": "update", "global_index": 3007, "project_name": "android_", "written_on": "2016-01-08 12:07:41", "tufano_target": "private void METHOD_1 ( int VAR_2 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; }", "comment": "technology,etc.", "tokenized_comment": ["technology", ",", "etc", "."], "tufano_code": "private void METHOD_1 ( int type ) { VAR_1 . METHOD_2 ( type ) ; }", "our_target": "    private void notifyHostEmuActivated(int technology) {\n        mListener.onHostCardEmulationActivated(technology);\n", "our_code": "<|startfocus|>\n    private void notifyHostEmuActivated(int type) {\n        mListener.onHostCardEmulationActivated(type);\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "void", "<|s|>", "notify", "Host", "Emu", "Activated", "(", "int", "<|s|>", "type", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Listener", ".", "on", "Host", "Card", "Emulation", "Activated", "(", "type", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 374, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_3405", "comment_id": "6a31fb81_3c5f1954", "class_list": ["NativeNfcManager"], "func_list": ["public NativeNfcManager(Context context, DeviceHostListener listener)", "public void checkFirmware()", "public native boolean initializeNativeStructure();", "public boolean deinitialize()", "public String getName()", "public void registerT3tIdentifier(byte[] t3tIdentifier)", "public void deregisterT3tIdentifier(byte[] t3tIdentifier)", "public void clearT3tIdentifiersCache()", "public void enableDiscovery(NfcDiscoveryParameters params, boolean restart)", "public void resetTimeouts()", "public boolean setTimeout(int tech, int timeout)", "public int getTimeout(int tech)", "public boolean canMakeReadOnly(int ndefType)", "public int getMaxTransceiveLength(int technology)", "public void setP2pInitiatorModes(int modes)", "public void setP2pTargetModes(int modes)", "public boolean getExtendedLengthApdusSupported()", "public int getDefaultLlcpMiu()", "public int getDefaultLlcpRwSize()", "public String dump()", "public boolean enableScreenOffSuspend()", "public boolean disableScreenOffSuspend()", "private void notifyNdefMessageListeners(NativeNfcTag tag)", "private void notifyLlcpLinkActivation(NativeP2pDevice device)", "private void notifyLlcpLinkDeactivated(NativeP2pDevice device)", "private void notifyLlcpLinkFirstPacketReceived(NativeP2pDevice device)", "private void notifyHostEmuActivated(int type)", "private void notifyHostEmuData(int type, byte[] data)", "private void notifyHostEmuDeactivated(int type)", "private void notifyRfFieldActivated()", "private void notifyRfFieldDeactivated()"], "prime_var_dic": {"implements": 1, "String": 1, "PREF": 1, "DEFAULT_LLCP_MIU": 1, "DEFAULT_LLCP_RWSIZE": 1, "DRIVER_NAME": 1, "mListener": 1, "mContext": 1, "linearBufferLength": 1, "LlcpException": 1}}, {"idx": 94609, "status": "update", "global_index": 20834, "project_name": "android_", "written_on": "2013-07-01 21:03:51", "tufano_target": "protected VAR_1 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 , String name ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; VAR_6 = name ; }", "comment": "is this { on its own line or just line wrapping in gerrit?", "tokenized_comment": ["is", "<|s|>", "this", "<|s|>", "{", "<|s|>", "on", "<|s|>", "its", "<|s|>", "own", "<|s|>", "line", "<|s|>", "or", "<|s|>", "just", "<|s|>", "line", "<|s|>", "wrapping", "<|s|>", "in", "<|s|>", "gerrit", "?"], "tufano_code": "protected VAR_1 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 , String name ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; VAR_6 = name ; }", "our_target": "    protected LibraryBundle(@NonNull File bundle,\n                            @NonNull File bundleFolder,\n                            @Nullable String name) {\n", "our_code": "<|startfocus|>\n    protected LibraryBundle(@NonNull File bundle, @NonNull File bundleFolder, @Nullable String name) {\n<|endfocus|>\n        mBundle = bundle;\n        mBundleFolder = bundleFolder;\n        mName = name;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "protected", "<|s|>", "Library", "Bundle", "(", "@", "Non", "Null", "<|s|>", "File", "<|s|>", "bundle", ",", "<|s|>", "@", "Non", "Null", "<|s|>", "File", "<|s|>", "bundle", "Folder", ",", "<|s|>", "@", "Nullable", "<|s|>", "String", "<|s|>", "name", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Bundle", "<|s|>", "=", "<|s|>", "bundle", ";", "<|nl|>", "<|8-s|>", "m", "Bundle", "Folder", "<|s|>", "=", "<|s|>", "bundle", "Folder", ";", "<|nl|>", "<|8-s|>", "m", "Name", "<|s|>", "=", "<|s|>", "name", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 47, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1200", "comment_id": "0a2cb179_05c56584", "class_list": ["LibraryBundle"], "func_list": ["protected LibraryBundle(@NonNull File bundle, @NonNull File bundleFolder, @Nullable String name)", "public String getName()", "public String toString()", "public File getManifest()", "public File getSymbolFile()", "public File getBundle()", "public File getFolder()", "public File getJarFile()", "public List<JarDependency> getLocalDependencies()", "public List<File> getLocalJars()", "public File getResFolder()", "public File getAssetsFolder()", "public File getJniFolder()", "public File getAidlFolder()", "public File getRenderscriptFolder()", "public File getProguardRules()", "public File getLintJar()", "public File getBundleFolder()", "public boolean equals(Object o)", "public int hashCode()"], "prime_var_dic": {"String": 1, "mName": 1, "mBundle": 1, "mBundleFolder": 1, "optional": 1}}, {"idx": 11937, "status": "update", "global_index": 21107, "project_name": "android_", "written_on": "2013-09-13 18:13:05", "tufano_target": "public static String METHOD_4 ( TYPE_1 file ) { return METHOD_4 ( file , true ) ; }", "comment": "We really should add a TemplateUtilsTest", "tokenized_comment": ["We", "<|s|>", "really", "<|s|>", "should", "<|s|>", "add", "<|s|>", "a", "<|s|>", "Template", "Utils", "Test"], "tufano_code": "public static void METHOD_1 ( TYPE_1 file , String VAR_1 ) { try { TYPE_2 writer = new TYPE_2 ( new TYPE_3 ( file ) ) ; writer.write ( VAR_1 ) ; writer . METHOD_2 ( ) ; } catch ( TYPE_4 VAR_2 ) { TYPE_5 . METHOD_3 ( VAR_2 ) ; } }", "our_target": "  @Nullable\n  public static String readTextFile(@NotNull File file) {\n    return readTextFile(file, true);\n", "our_code": "<|startfocus|>\n  public static void writeTextFile(@NotNull File file, @NotNull String contents) {\n    try {\n      BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n      writer.write(contents);\n      writer.close();\n    } catch (IOException e) {\n      LOG.warn(e);\n    }\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "write", "Text", "File", "(", "@", "Not", "Null", "<|s|>", "File", "<|s|>", "file", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "contents", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Buffered", "Writer", "<|s|>", "writer", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Buffered", "Writer", "(", "new", "<|s|>", "File", "Writer", "(", "file", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "writer", ".", "write", "(", "contents", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "writer", ".", "close", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "warn", "(", "e", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 381, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_604", "comment_id": "27645599_51b0c61f", "class_list": ["TemplateUtils", "name", "", "name"], "func_list": ["public static String extractClassName(@NotNull String string)", "public static String stripSuffix(@NotNull String string, @NotNull String suffix)", "public static String camelCaseToUnderlines(String string)", "public static String underlinesToCamelCase(String string)", "public static String getTargetLabel(@NotNull IAndroidTarget target)", "public static String[] getKnownVersions()", "public static File[] listFiles(File dir)", "public static List<Element> getChildren(@NotNull Element element)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static void selectEditor(Project project, VirtualFile file)", "public static String readTextFile(@NotNull File file)", "public static void writeTextFile(@NotNull File file, @NotNull String contents)", "public static File getGradleBuildFile(File moduleRoot)", "public static String extractClassName(@NotNull String string)", "public static String extractClassName(@NotNull String string)", "public static String stripSuffix(@NotNull String string, @NotNull String suffix)", "public static String camelCaseToUnderlines(String string)", "public static String underlinesToCamelCase(String string)", "public static String getTargetLabel(@NotNull IAndroidTarget target)", "public static String[] getKnownVersions()", "public static File[] listFiles(File dir)", "public static List<Element> getChildren(@NotNull Element element)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static boolean openEditors(@NotNull Project project, @NotNull List<String> paths, boolean select)", "public static void selectEditor(Project project, VirtualFile file)", "public static String readTextFile(@NotNull File file)", "public static void writeTextFile(@NotNull File file, @NotNull String contents)", "public static File getGradleBuildFile(File moduleRoot)", "public static String extractClassName(@NotNull String string)"], "prime_var_dic": {}}, {"idx": 38073, "status": "update", "global_index": 7277, "project_name": "android_", "written_on": "2016-03-11 07:26:05", "tufano_target": "private boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = this . METHOD_2 ( ) ; return ( VAR_1 != null && VAR_1 . METHOD_3 ( VAR_2 ) ) ; }", "comment": "final", "tokenized_comment": ["final"], "tufano_code": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; return ( VAR_1 != null && VAR_1 . METHOD_3 ( STRING_1 ) ) ; }", "our_target": "        final PackageManager pm = this.getPackageManager();\n        return (pm != null && pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK));\n", "our_code": "    private boolean isLeanbackOnly() {\n<|startfocus|>\n        PackageManager pm = this.getPackageManager();\n        return (pm != null && pm.hasSystemFeature(\"android.software.leanback_only\"));\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Leanback", "Only", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Package", "Manager", "<|s|>", "pm", "<|s|>", "=", "<|s|>", "this", ".", "get", "Package", "Manager", "(", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "pm", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "pm", ".", "has", "System", "Feature", "(", "\"", "android", ".", "software", ".", "leanback", "_", "only", "\"", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 636, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_878", "comment_id": "1774317a_158d94f0", "class_list": ["ConnectivityScreenOffTestActivity", "AppState", "ScreenAndPlugStateReceiver", "BackgroundTestingThread", "HttpResult"], "func_list": ["public ConnectivityScreenOffTestActivity()", "protected void onCreate(Bundle savedInstanceState)", "protected void onDestroy()", "private void setupUserInterface()", "public void onClick(View v)", "private void configureFromSystemServices()", "private void clearNetworkCallback()", "private void stopAnyExistingTestingThread()", "private void setTestPassing()", "public void run()", "private void logAndUpdate(final String msg)", "private Button getStartButton()", "private void setUserActivityTimeout(long timeout)", "private void tryScreenOff()", "private void tryScreenOn()", "private void startTest()", "void setNetwork(Network network)", "void setScreenOn()  mScreenOffTime = 0; }", "void setScreenOff()  mScreenOffTime = SystemClock.elapsedRealtime(); }", "boolean validScreenStateForTesting()  return (mScreenOffTime > 0); }", "void setPowerConnected()  mPowerDisconnectTime = 0; }", "void setPowerDisconnected()  mPowerDisconnectTime = SystemClock.elapsedRealtime(); }", "boolean validPowerStateForTesting()  return !mHasBattery || (mPowerDisconnectTime > 0); }", "public void onReceive(Context context, Intent intent)", "private NetworkCallback createNetworkCallback()", "public void onAvailable(Network network)", "public void onLost(Network network)", "public void onLinkPropertiesChanged(Network network, LinkProperties newLp)", "private void mainLoop()", "private boolean stillRunning()", "public void setStopped()", "private void maybeWaitForPreviousThread()", "private void dupStateLocked()", "private void awaitNotification(int timeoutMs)", "private void resetConnectivityCheckStatistics()", "boolean hasBasicIPv6Connectivity()", "boolean hasGlobalIPv6Connectivity()", "public HttpResult(int rcode, String msg)", "private static HttpResult getHttpResource(", "private boolean isLeanbackOnly()", "public ConnectivityScreenOffTestActivity()", "public ConnectivityScreenOffTestActivity()", "public ConnectivityScreenOffTestActivity()"], "prime_var_dic": {}}, {"idx": 339, "status": "update", "global_index": 11016, "project_name": "android_", "written_on": "2015-06-02 18:03:50", "tufano_target": "<ERROR>", "comment": "Void?", "tokenized_comment": ["Void", "?"], "tufano_code": "<ERROR>", "our_target": "                    public Void call() throws Exception {\n", "our_code": "    public void createTasksForVariantData(\n            @NonNull final TaskFactory tasks,\n            @NonNull final BaseVariantData<? extends BaseVariantOutputData> variantData) {\n        final LibraryVariantData libVariantData = (LibraryVariantData) variantData;\n        final GradleVariantConfiguration variantConfig = variantData.getVariantConfiguration();\n        CoreBuildType buildType = variantConfig.getBuildType();\n\n        final VariantScope variantScope = variantData.getScope();\n\n        final String dirName = variantConfig.getDirName();\n\n        createAnchorTasks(tasks, variantScope);\n\n        createCheckManifestTask(tasks, variantScope);\n\n        // Add a task to create the res values\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        createGenerateResValuesTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        // Add a task to process the manifest(s)\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK,\n                new Recorder.Block<Object>() {\n                    @Override\n<|startfocus|>\n                    public Object call() throws Exception {\n<|endfocus|>\n                        createMergeLibManifestsTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        // Add a task to compile renderscript files.\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        createRenderscriptTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        AndroidTask<MergeResources> packageRes = ThreadRecorder.get().record(\n                ExecutionType.LIB_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK,\n                new Recorder.Block<AndroidTask<MergeResources>>() {\n                    @Override\n                    public AndroidTask<MergeResources> call() throws Exception {\n                        // Create a merge task to only merge the resources from this library and not\n                        // the dependencies. This is what gets packaged in the aar.\n                        AndroidTask<MergeResources> mergeResourceTask =\n                                basicCreateMergeResourcesTask(\n                                        tasks,\n                                        variantScope,\n                                        \"package\",\n                                        new File(\n                                                variantScope.getGlobalScope().getIntermediatesDir(),\n                                                DIR_BUNDLES + \"/\" + variantScope\n                                                        .getVariantConfiguration().getDirName() +\n                                                        \"/res\"),\n                                        false /*includeDependencies*/,\n                                        false /*process9Patch*/);\n\n                        if (variantData.getVariantDependency().hasNonOptionalLibraries()) {\n                            // Add a task to merge the resource folders, including the libraries, in order to\n                            // generate the R.txt file with all the symbols, including the ones from\n                            // the dependencies.\n                            createMergeResourcesTask(tasks, variantScope);\n                        }\n\n                        mergeResourceTask.configure(tasks,\n                                new Action<Task>() {\n                                    @Override\n                                    public void execute(Task task) {\n                                        ConventionMappingHelper.map(task,\n                                                \"publicFile\",\n                                                new Callable<Object>() {\n                                                    @Override\n                                                    public Object call() throws Exception {\n                                                        return new File(\n                                                                variantScope.getGlobalScope()\n                                                                        .getIntermediatesDir(),\n                                                                DIR_BUNDLES + \"/\" + dirName + \"/\"\n                                                                        + SdkConstants.FN_PUBLIC_TXT);\n                                                    }\n                                                });\n                                    }\n                                });\n\n                        return mergeResourceTask;\n                    }\n                });\n\n        // Add a task to merge the assets folders\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() {\n                        createMergeAssetsTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        // Add a task to create the BuildConfig class\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        createBuildConfigTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        createPreprocessResourcesTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_PROCESS_RES_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        // Add a task to generate resource source files, directing the location\n                        // of the r.txt file to be directly in the bundle.\n                        createProcessResTask(tasks, variantScope,\n                                new File(variantScope.getGlobalScope().getIntermediatesDir(),\n                                        DIR_BUNDLES + \"/\" + dirName),\n                                false /*generateResourcePackage*/);\n\n                        // process java resources\n                        createProcessJavaResTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_AIDL_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        createAidlTask(tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        // Add a compile task\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_COMPILE_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        AndroidTask<JavaCompile> javacTask = createJavacTask(tasks, variantScope);\n                        TaskManager.setJavaCompilerTask(javacTask, tasks, variantScope);\n                        return null;\n                    }\n                });\n\n        // package the prebuilt native libs into the bundle folder\n        final Sync packageJniLibs = project.getTasks().create(\n                variantScope.getTaskName(\"package\", \"JniLibs\"),\n                Sync.class);\n\n        // Add dependencies on NDK tasks if NDK plugin is applied.\n        if (isNdkTaskNeeded) {\n            // Add NDK tasks\n            ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_NDK_TASK,\n                    new Recorder.Block<Void>() {\n                        @Override\n                        public Void call() throws Exception {\n                            createNdkTasks(variantScope);\n                            packageJniLibs.dependsOn(variantData.ndkCompileTask);\n                            packageJniLibs.from(variantData.ndkCompileTask.getSoFolder())\n                                    .include(\"**/*.so\");\n                            return null;\n                        }\n                    });\n        } else {\n            if (variantData.compileTask != null) {\n                variantData.compileTask.dependsOn(getNdkBuildable(variantData));\n            } else {\n                variantScope.getCompileTask().dependsOn(tasks, getNdkBuildable(variantData));\n            }\n        }\n\n        Sync packageRenderscript = ThreadRecorder.get().record(\n                ExecutionType.LIB_TASK_MANAGER_CREATE_PACKAGING_TASK,\n                new Recorder.Block<Sync>() {\n                    @Override\n                    public Sync call() throws Exception {\n                        // package from 2 sources.\n                        packageJniLibs.from(variantConfig.getJniLibsList())\n                                .include(\"**/*.so\");\n                        packageJniLibs.into(new File(\n                                variantScope.getGlobalScope().getIntermediatesDir(),\n                                DIR_BUNDLES + \"/\" + dirName + \"/jni\"));\n\n                        // package the renderscript header files files into the bundle folder\n                        Sync packageRenderscript = project.getTasks().create(\n                                variantScope.getTaskName(\"package\", \"Renderscript\"), Sync.class);\n                        // package from 3 sources. the order is important to make sure the override works well.\n                        packageRenderscript.from(variantConfig.getRenderscriptSourceList())\n                                .include(\"**/*.rsh\");\n                        packageRenderscript.into(new File(\n                                variantScope.getGlobalScope().getIntermediatesDir(),\n                                DIR_BUNDLES + \"/\" + dirName + \"/\" + SdkConstants.FD_RENDERSCRIPT));\n                        return packageRenderscript;\n                    }\n                });\n\n        // merge consumer proguard files from different build types and flavors\n        MergeFileTask mergeProGuardFileTask = ThreadRecorder.get().record(\n                ExecutionType.LIB_TASK_MANAGER_CREATE_MERGE_PROGUARD_FILE_TASK,\n                new Recorder.Block<MergeFileTask>() {\n                    @Override\n                    public MergeFileTask call() throws Exception {\n                        MergeFileTask mergeProGuardFileTask = project.getTasks().create(\n                                variantScope.getTaskName(\"merge\", \"ProguardFiles\"),\n                                MergeFileTask.class);\n                        mergeProGuardFileTask.setInputFiles(\n                                project.files(variantConfig.getConsumerProguardFiles())\n                                        .getFiles());\n                        mergeProGuardFileTask.setOutputFile(new File(\n                                variantScope.getGlobalScope().getIntermediatesDir(),\n                                DIR_BUNDLES + \"/\" + dirName + \"/\" + LibraryBundle.FN_PROGUARD_TXT));\n                        return mergeProGuardFileTask;\n                    }\n\n                });\n\n        // copy lint.jar into the bundle folder\n        Copy lintCopy = project.getTasks().create(\n                variantScope.getTaskName(\"copy\", \"Lint\"), Copy.class);\n        lintCopy.dependsOn(LINT_COMPILE);\n        lintCopy.from(new File(\n                variantScope.getGlobalScope().getIntermediatesDir(),\n                \"lint/lint.jar\"));\n        lintCopy.into(new File(\n                variantScope.getGlobalScope().getIntermediatesDir(),\n                DIR_BUNDLES + \"/\" + dirName));\n\n        final Zip bundle = project.getTasks().create(variantScope.getTaskName(\"bundle\"), Zip.class);\n\n        if (variantData.getVariantDependency().isAnnotationsPresent()) {\n            libVariantData.generateAnnotationsTask =\n                    createExtractAnnotations(project, variantData);\n        }\n        if (libVariantData.generateAnnotationsTask != null) {\n            bundle.dependsOn(libVariantData.generateAnnotationsTask);\n        }\n\n        final boolean instrumented = variantConfig.getBuildType().isTestCoverageEnabled();\n\n        // data holding dependencies and input for the dex. This gets updated as new\n        // post-compilation steps are inserted between the compilation and dx.\n        final PostCompilationData pcDataTemp = new PostCompilationData();\n\n        final PostCompilationData pcData = ThreadRecorder.get().record(\n                ExecutionType.LIB_TASK_MANAGER_CREATE_POST_COMPILATION_TASK,\n                new Recorder.Block<PostCompilationData>() {\n                    @Override\n                    public PostCompilationData call() throws Exception {\n                        pcDataTemp.setClassGeneratingTasks(Collections.singletonList(\n                                variantScope.getJavacTask().getName()));\n                        pcDataTemp.setLibraryGeneratingTasks(Collections.singletonList(\n                                variantData.getVariantDependency().getPackageConfiguration()\n                                        .getBuildDependencies()));\n                        pcDataTemp.setInputFilesCallable(new Callable<List<File>>() {\n                            @Override\n                            public List<File> call() throws Exception {\n                                return new ArrayList<File>(\n                                        variantData.javacTask.getOutputs().getFiles().getFiles());\n                            }\n\n                        });\n                        pcDataTemp.setInputDir(variantScope.getJavaOutputDir());\n                        pcDataTemp.setInputLibraries(Collections.<File>emptyList());\n\n                        // if needed, instrument the code\n                        if (instrumented) {\n                            return createJacocoTask(tasks, variantScope, pcDataTemp);\n                        }\n                        return pcDataTemp;\n                    }\n                });\n        checkState(pcData != null);\n\n        if (buildType.isMinifyEnabled()) {\n            // run proguard on output of compile task\n            ThreadRecorder.get().record(\n                    ExecutionType.LIB_TASK_MANAGER_CREATE_PROGUARD_TASK,\n                    new Recorder.Block<Void>() {\n                        @Override\n                        public Void call() throws Exception {\n                            File outFile = maybeCreateProguardTasks(tasks, variantScope,\n                                    pcData);\n                            pcData.setInputFiles(Collections.singletonList(outFile));\n                            pcData.setInputDirCallable(null);\n                            pcData.setInputLibraries(Collections.<File>emptyList());\n                            return null;\n                        }\n                    });\n        } else {\n            // package the local jar in libs/\n            ThreadRecorder.get().record(\n                    ExecutionType.LIB_TASK_MANAGER_CREATE_PACKAGE_LOCAL_JAR,\n                    new Recorder.Block<Void>() {\n                        @Override\n                        public Void call() throws Exception {\n                            Sync packageLocalJar = project.getTasks().create(\n                                    variantScope.getTaskName(\"package\", \"LocalJar\"), Sync.class);\n                            packageLocalJar.from(\n                                    DependencyManager\n                                            .getPackagedLocalJarFileList(\n                                                    variantData.getVariantDependency())\n                                            .toArray());\n                            packageLocalJar.into(new File(\n                                    variantScope.getGlobalScope().getIntermediatesDir(),\n                                    DIR_BUNDLES + \"/\" + dirName + \"/\" + LIBS_FOLDER));\n\n                            // add the input libraries. This is only going to be the agent jar if applicable\n                            // due to how inputLibraries is initialized.\n                            // TODO: clean this.\n                            packageLocalJar.from(pcData.getInputLibrariesCallable());\n                            TaskManager.optionalDependsOn(\n                                    packageLocalJar,\n                                    pcData.getLibraryGeneratingTasks());\n                            pcData.setLibraryGeneratingTasks(\n                                    Collections.singletonList(packageLocalJar));\n\n                            // jar the classes.\n                            Jar jar = project.getTasks().create(\n                                    variantScope.getTaskName(\"package\", \"Jar\"), Jar.class);\n                            jar.dependsOn(variantScope.getProcessJavaResourcesTask().getName());\n\n                            // add the class files (whether they are instrumented or not.\n                            jar.from(pcData.getInputDirCallable());\n                            TaskManager.optionalDependsOn(jar, pcData.getClassGeneratingTasks());\n                            pcData.setClassGeneratingTasks(Collections.singletonList(jar));\n\n                            jar.from(variantScope.getJavaResourcesDestinationDir());\n\n                            jar.setDestinationDir(new File(\n                                    variantScope.getGlobalScope().getIntermediatesDir(),\n                                    DIR_BUNDLES + \"/\" + dirName));\n                            jar.setArchiveName(\"classes.jar\");\n\n                            String packageName = variantConfig.getPackageFromManifest();\n                            if (packageName == null) {\n                                throw new BuildException(\"Failed to read manifest\", null);\n                            }\n\n                            packageName = packageName.replace(\".\", \"/\");\n\n                            jar.exclude(packageName + \"/R.class\");\n                            jar.exclude(packageName + \"/R$*.class\");\n                            if (!getExtension().getPackageBuildConfig()) {\n                                jar.exclude(packageName + \"/Manifest.class\");\n                                jar.exclude(packageName + \"/Manifest$*.class\");\n                                jar.exclude(packageName + \"/BuildConfig.class\");\n                            }\n\n                            if (libVariantData.generateAnnotationsTask != null) {\n                                // In case extract annotations strips out private typedef annotation classes\n                                jar.dependsOn(libVariantData.generateAnnotationsTask);\n                            }\n                            return null;\n                        }\n                    });\n        }\n\n        bundle.dependsOn(packageRes.getName(), packageRenderscript, lintCopy, packageJniLibs,\n                mergeProGuardFileTask);\n        TaskManager.optionalDependsOn(bundle, pcData.getClassGeneratingTasks());\n        TaskManager.optionalDependsOn(bundle, pcData.getLibraryGeneratingTasks());\n\n        bundle.setDescription(\"Assembles a bundle containing the library in \" +\n                variantConfig.getFullName() + \".\");\n        bundle.setDestinationDir(new File(variantScope.getGlobalScope().getOutputsDir(), \"aar\"));\n        bundle.setArchiveName(project.getName() + \"-\" + variantConfig.getBaseName() + \".\"\n                + BuilderConstants.EXT_LIB_ARCHIVE);\n        bundle.setExtension(BuilderConstants.EXT_LIB_ARCHIVE);\n        bundle.from(new File(\n                variantScope.getGlobalScope().getIntermediatesDir(),\n                DIR_BUNDLES + \"/\" + dirName));\n        bundle.from(new File(\n                variantScope.getGlobalScope().getIntermediatesDir(),\n                ANNOTATIONS + \"/\" + dirName));\n\n        // get the single output for now, though that may always be the case for a library.\n        LibVariantOutputData variantOutputData = libVariantData.getOutputs().get(0);\n        variantOutputData.packageLibTask = bundle;\n\n        variantData.assembleVariantTask.dependsOn(bundle);\n        variantOutputData.assembleTask = variantData.assembleVariantTask;\n\n        if (getExtension().getDefaultPublishConfig().equals(variantConfig.getFullName())) {\n            VariantHelper.setupDefaultConfig(project,\n                    variantData.getVariantDependency().getPackageConfiguration());\n\n            // add the artifact that will be published\n            project.getArtifacts().add(\"default\", bundle);\n\n            getAssembleDefault().dependsOn(variantData.assembleVariantTask);\n        }\n\n        // also publish the artifact with its full config name\n        if (getExtension().getPublishNonDefault()) {\n            project.getArtifacts().add(\n                    variantData.getVariantDependency().getPublishConfiguration().getName(), bundle);\n            bundle.setClassifier(\n                    variantData.getVariantDependency().getPublishConfiguration().getName());\n        }\n\n        // configure the variant to be testable.\n        variantConfig.setOutput(new LibraryBundle(\n                bundle.getArchivePath(),\n                new File(variantScope.getGlobalScope().getIntermediatesDir(),\n                        DIR_BUNDLES + \"/\" + dirName),\n                variantData.getName(),\n                project.getPath()) {\n            @Override\n            @Nullable\n            public String getProjectVariant() {\n                return variantData.getName();\n            }\n\n            @NonNull\n            @Override\n            public List<LibraryDependency> getDependencies() {\n                return variantConfig.getDirectLibraries();\n            }\n\n            @NonNull\n            @Override\n            public List<? extends AndroidLibrary> getLibraryDependencies() {\n                return variantConfig.getDirectLibraries();\n            }\n\n            @NonNull\n            @Override\n            public List<? extends ManifestDependency> getManifestDependencies() {\n                return variantConfig.getDirectLibraries();\n            }\n\n            @Override\n            @Nullable\n            public MavenCoordinates getRequestedCoordinates() {\n                return null;\n            }\n\n            @Override\n            @Nullable\n            public MavenCoordinates getResolvedCoordinates() {\n                return null;\n            }\n\n            @Override\n            @NonNull\n            protected File getJarsRootFolder() {\n                return getFolder();\n            }\n\n            @Override\n            public boolean isOptional() {\n                return false;\n            }\n\n        });\n\n        ThreadRecorder.get().record(ExecutionType.LIB_TASK_MANAGER_CREATE_LINT_TASK,\n                new Recorder.Block<Void>() {\n                    @Override\n                    public Void call() throws Exception {\n                        createLintTasks(tasks, variantScope);\n                        return null;\n                    }\n                });\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "create", "Tasks", "For", "Variant", "Data", "(", "<|nl|>", "<|12-s|>", "@", "Non", "Null", "<|s|>", "final", "<|s|>", "Task", "Factory", "<|s|>", "tasks", ",", "<|nl|>", "<|12-s|>", "@", "Non", "Null", "<|s|>", "final", "<|s|>", "Base", "Variant", "Data", "<", "?", "<|s|>", "extends", "<|s|>", "Base", "Variant", "Output", "Data", ">", "<|s|>", "variant", "Data", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Library", "Variant", "Data", "<|s|>", "lib", "Variant", "Data", "<|s|>", "=", "<|s|>", "(", "Library", "Variant", "Data", ")", "<|s|>", "variant", "Data", ";", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Gradle", "Variant", "Configuration", "<|s|>", "variant", "Config", "<|s|>", "=", "<|s|>", "variant", "Data", ".", "get", "Variant", "Configuration", "(", ");", "<|nl|>", "<|8-s|>", "Core", "Build", "Type", "<|s|>", "build", "Type", "<|s|>", "=", "<|s|>", "variant", "Config", ".", "get", "Build", "Type", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Variant", "Scope", "<|s|>", "variant", "Scope", "<|s|>", "=", "<|s|>", "variant", "Data", ".", "get", "Scope", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "String", "<|s|>", "dir", "Name", "<|s|>", "=", "<|s|>", "variant", "Config", ".", "get", "Dir", "Name", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "create", "Anchor", "Tasks", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "create", "Check", "Manifest", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "task", "<|s|>", "to", "<|s|>", "create", "<|s|>", "the", "<|s|>", "res", "<|s|>", "values", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "GENERATE", "_", "RES", "_", "VALUES", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Generate", "Res", "Values", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "task", "<|s|>", "to", "<|s|>", "process", "<|s|>", "the", "<|s|>", "manifest", "(", "s", ")", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "MERGE", "_", "MANIFEST", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Object", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Object", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Merge", "Lib", "Manifests", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "task", "<|s|>", "to", "<|s|>", "compile", "<|s|>", "renderscript", "<|s|>", "files", ".", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "CREATE", "_", "RENDERSCRIPT", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Renderscript", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "Android", "Task", "<", "Merge", "Resources", ">", "<|s|>", "package", "Res", "<|s|>", "=", "<|s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "<|nl|>", "<|16-s|>", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "MERGE", "_", "RESOURCES", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Android", "Task", "<", "Merge", "Resources", ">>", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Android", "Task", "<", "Merge", "Resources", ">", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "Create", "<|s|>", "a", "<|s|>", "merge", "<|s|>", "task", "<|s|>", "to", "<|s|>", "only", "<|s|>", "merge", "<|s|>", "the", "<|s|>", "resources", "<|s|>", "from", "<|s|>", "this", "<|s|>", "library", "<|s|>", "and", "<|s|>", "not", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "the", "<|s|>", "dependencies", ".", "<|s|>", "This", "<|s|>", "is", "<|s|>", "what", "<|s|>", "gets", "<|s|>", "packaged", "<|s|>", "in", "<|s|>", "the", "<|s|>", "aar", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "Android", "Task", "<", "Merge", "Resources", ">", "<|s|>", "merge", "Resource", "Task", "<|s|>", "=", "<|nl|>", "<|16-s|>", "<|16-s|>", "basic", "Create", "Merge", "Resources", "Task", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "tasks", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "variant", "Scope", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "\"", "package", "\"", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "variant", "Scope", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", ".", "get", "Variant", "Configuration", "(", ")", ".", "get", "Dir", "Name", "(", ")", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "\"", "/", "res", "\"", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "false", "<|s|>", "/*", "include", "Dependencies", "*/", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "false", "<|s|>", "/*", "process", "9", "Patch", "*/", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "variant", "Data", ".", "get", "Variant", "Dependency", "(", ")", ".", "has", "Non", "Optional", "Libraries", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "task", "<|s|>", "to", "<|s|>", "merge", "<|s|>", "the", "<|s|>", "resource", "<|s|>", "folders", ",", "<|s|>", "including", "<|s|>", "the", "<|s|>", "libraries", ",", "<|s|>", "in", "<|s|>", "order", "<|s|>", "to", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "generate", "<|s|>", "the", "<|s|>", "R", ".", "txt", "<|s|>", "file", "<|s|>", "with", "<|s|>", "all", "<|s|>", "the", "<|s|>", "symbols", ",", "<|s|>", "including", "<|s|>", "the", "<|s|>", "ones", "<|s|>", "from", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "the", "<|s|>", "dependencies", ".", "<|nl|>", "<|16-s|>", "<|12-s|>", "create", "Merge", "Resources", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "merge", "Resource", "Task", ".", "configure", "(", "tasks", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "new", "<|s|>", "Action", "<", "Task", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "execute", "(", "Task", "<|s|>", "task", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "Convention", "Mapping", "Helper", ".", "map", "(", "task", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "\"", "public", "File", "\"", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "new", "<|s|>", "Callable", "<", "Object", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Object", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "+", "<|s|>", "Sdk", "Constants", ".", "FN", "_", "PUBLIC", "_", "TXT", ");", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "}", ");", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "merge", "Resource", "Task", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "task", "<|s|>", "to", "<|s|>", "merge", "<|s|>", "the", "<|s|>", "assets", "<|s|>", "folders", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "MERGE", "_", "ASSETS", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Merge", "Assets", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "task", "<|s|>", "to", "<|s|>", "create", "<|s|>", "the", "<|s|>", "Build", "Config", "<|s|>", "class", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "BUILD", "_", "CONFIG", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Build", "Config", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "BACKPORT", "_", "RESOURCES", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Preprocess", "Resources", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "PROCESS", "_", "RES", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "task", "<|s|>", "to", "<|s|>", "generate", "<|s|>", "resource", "<|s|>", "source", "<|s|>", "files", ",", "<|s|>", "directing", "<|s|>", "the", "<|s|>", "location", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "of", "<|s|>", "the", "<|s|>", "r", ".", "txt", "<|s|>", "file", "<|s|>", "to", "<|s|>", "be", "<|s|>", "directly", "<|s|>", "in", "<|s|>", "the", "<|s|>", "bundle", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Process", "Res", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "new", "<|s|>", "File", "(", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "false", "<|s|>", "/*", "generate", "Resource", "Package", "*/", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "process", "<|s|>", "java", "<|s|>", "resources", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Process", "Java", "Res", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "AIDL", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Aidl", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "a", "<|s|>", "compile", "<|s|>", "task", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "COMPILE", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "Android", "Task", "<", "Java", "Compile", ">", "<|s|>", "javac", "Task", "<|s|>", "=", "<|s|>", "create", "Javac", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "Task", "Manager", ".", "set", "Java", "Compiler", "Task", "(", "javac", "Task", ",", "<|s|>", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "package", "<|s|>", "the", "<|s|>", "prebuilt", "<|s|>", "native", "<|s|>", "libs", "<|s|>", "into", "<|s|>", "the", "<|s|>", "bundle", "<|s|>", "folder", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Sync", "<|s|>", "package", "Jni", "Libs", "<|s|>", "=", "<|s|>", "project", ".", "get", "Tasks", "(", ")", ".", "create", "(", "<|nl|>", "<|16-s|>", "variant", "Scope", ".", "get", "Task", "Name", "(", "\"", "package", "\"", ",", "<|s|>", "\"", "Jni", "Libs", "\"", ")", ",", "<|nl|>", "<|16-s|>", "Sync", ".", "class", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Add", "<|s|>", "dependencies", "<|s|>", "on", "<|s|>", "NDK", "<|s|>", "tasks", "<|s|>", "if", "<|s|>", "NDK", "<|s|>", "plugin", "<|s|>", "is", "<|s|>", "applied", ".", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "is", "Ndk", "Task", "Needed", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Add", "<|s|>", "NDK", "<|s|>", "tasks", "<|nl|>", "<|12-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "NDK", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|8-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "create", "Ndk", "Tasks", "(", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "package", "Jni", "Libs", ".", "depends", "On", "(", "variant", "Data", ".", "ndk", "Compile", "Task", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "package", "Jni", "Libs", ".", "from", "(", "variant", "Data", ".", "ndk", "Compile", "Task", ".", "get", "So", "Folder", "(", ")", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", ".", "include", "(", "\"", "*", "*/", "*", ".", "so", "\"", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "variant", "Data", ".", "compile", "Task", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "variant", "Data", ".", "compile", "Task", ".", "depends", "On", "(", "get", "Ndk", "Buildable", "(", "variant", "Data", ")", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "variant", "Scope", ".", "get", "Compile", "Task", "(", ")", ".", "depends", "On", "(", "tasks", ",", "<|s|>", "get", "Ndk", "Buildable", "(", "variant", "Data", ")", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "Sync", "<|s|>", "package", "Renderscript", "<|s|>", "=", "<|s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "<|nl|>", "<|16-s|>", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "PACKAGING", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Sync", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Sync", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "package", "<|s|>", "from", "<|s|>", "2", "<|s|>", "sources", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "package", "Jni", "Libs", ".", "from", "(", "variant", "Config", ".", "get", "Jni", "Libs", "List", "(", ")", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", ".", "include", "(", "\"", "*", "*/", "*", ".", "so", "\"", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "package", "Jni", "Libs", ".", "into", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "jni", "\"", ")", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "package", "<|s|>", "the", "<|s|>", "renderscript", "<|s|>", "header", "<|s|>", "files", "<|s|>", "files", "<|s|>", "into", "<|s|>", "the", "<|s|>", "bundle", "<|s|>", "folder", "<|nl|>", "<|16-s|>", "<|8-s|>", "Sync", "<|s|>", "package", "Renderscript", "<|s|>", "=", "<|s|>", "project", ".", "get", "Tasks", "(", ")", ".", "create", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Task", "Name", "(", "\"", "package", "\"", ",", "<|s|>", "\"", "Renderscript", "\"", ")", ",", "<|s|>", "Sync", ".", "class", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "package", "<|s|>", "from", "<|s|>", "3", "<|s|>", "sources", ".", "<|s|>", "the", "<|s|>", "order", "<|s|>", "is", "<|s|>", "important", "<|s|>", "to", "<|s|>", "make", "<|s|>", "sure", "<|s|>", "the", "<|s|>", "override", "<|s|>", "works", "<|s|>", "well", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "package", "Renderscript", ".", "from", "(", "variant", "Config", ".", "get", "Renderscript", "Source", "List", "(", ")", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", ".", "include", "(", "\"", "*", "*/", "*", ".", "rsh", "\"", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "package", "Renderscript", ".", "into", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "Sdk", "Constants", ".", "FD", "_", "RENDERSCRIPT", ")", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "package", "Renderscript", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "merge", "<|s|>", "consumer", "<|s|>", "proguard", "<|s|>", "files", "<|s|>", "from", "<|s|>", "different", "<|s|>", "build", "<|s|>", "types", "<|s|>", "and", "<|s|>", "flavors", "<|nl|>", "<|8-s|>", "Merge", "File", "Task", "<|s|>", "merge", "Pro", "Guard", "File", "Task", "<|s|>", "=", "<|s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "<|nl|>", "<|16-s|>", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "MERGE", "_", "PROGUARD", "_", "FILE", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Merge", "File", "Task", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Merge", "File", "Task", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "Merge", "File", "Task", "<|s|>", "merge", "Pro", "Guard", "File", "Task", "<|s|>", "=", "<|s|>", "project", ".", "get", "Tasks", "(", ")", ".", "create", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Task", "Name", "(", "\"", "merge", "\"", ",", "<|s|>", "\"", "Proguard", "Files", "\"", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "Merge", "File", "Task", ".", "class", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "merge", "Pro", "Guard", "File", "Task", ".", "set", "Input", "Files", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "project", ".", "files", "(", "variant", "Config", ".", "get", "Consumer", "Proguard", "Files", "(", ")", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", ".", "get", "Files", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "merge", "Pro", "Guard", "File", "Task", ".", "set", "Output", "File", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "Library", "Bundle", ".", "FN", "_", "PROGUARD", "_", "TXT", ")", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "merge", "Pro", "Guard", "File", "Task", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "copy", "<|s|>", "lint", ".", "jar", "<|s|>", "into", "<|s|>", "the", "<|s|>", "bundle", "<|s|>", "folder", "<|nl|>", "<|8-s|>", "Copy", "<|s|>", "lint", "Copy", "<|s|>", "=", "<|s|>", "project", ".", "get", "Tasks", "(", ")", ".", "create", "(", "<|nl|>", "<|16-s|>", "variant", "Scope", ".", "get", "Task", "Name", "(", "\"", "copy", "\"", ",", "<|s|>", "\"", "Lint", "\"", ")", ",", "<|s|>", "Copy", ".", "class", ");", "<|nl|>", "<|8-s|>", "lint", "Copy", ".", "depends", "On", "(", "LINT", "_", "COMPILE", ");", "<|nl|>", "<|8-s|>", "lint", "Copy", ".", "from", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "\"", "lint", "/", "lint", ".", "jar", "\"", ")", ");", "<|nl|>", "<|8-s|>", "lint", "Copy", ".", "into", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", ")", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Zip", "<|s|>", "bundle", "<|s|>", "=", "<|s|>", "project", ".", "get", "Tasks", "(", ")", ".", "create", "(", "variant", "Scope", ".", "get", "Task", "Name", "(", "\"", "bundle", "\"", ")", ",", "<|s|>", "Zip", ".", "class", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "variant", "Data", ".", "get", "Variant", "Dependency", "(", ")", ".", "is", "Annotations", "Present", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "lib", "Variant", "Data", ".", "generate", "Annotations", "Task", "<|s|>", "=", "<|nl|>", "<|16-s|>", "<|4-s|>", "create", "Extract", "Annotations", "(", "project", ",", "<|s|>", "variant", "Data", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "lib", "Variant", "Data", ".", "generate", "Annotations", "Task", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "bundle", ".", "depends", "On", "(", "lib", "Variant", "Data", ".", "generate", "Annotations", "Task", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "boolean", "<|s|>", "instrumented", "<|s|>", "=", "<|s|>", "variant", "Config", ".", "get", "Build", "Type", "(", ")", ".", "is", "Test", "Coverage", "Enabled", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "data", "<|s|>", "holding", "<|s|>", "dependencies", "<|s|>", "and", "<|s|>", "input", "<|s|>", "for", "<|s|>", "the", "<|s|>", "dex", ".", "<|s|>", "This", "<|s|>", "gets", "<|s|>", "updated", "<|s|>", "as", "<|s|>", "new", "<|nl|>", "<|8-s|>", "//", "<|s|>", "post", "-", "compilation", "<|s|>", "steps", "<|s|>", "are", "<|s|>", "inserted", "<|s|>", "between", "<|s|>", "the", "<|s|>", "compilation", "<|s|>", "and", "<|s|>", "dx", ".", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Post", "Compilation", "Data", "<|s|>", "pc", "Data", "Temp", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Post", "Compilation", "Data", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Post", "Compilation", "Data", "<|s|>", "pc", "Data", "<|s|>", "=", "<|s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "<|nl|>", "<|16-s|>", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "POST", "_", "COMPILATION", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Post", "Compilation", "Data", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Post", "Compilation", "Data", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "pc", "Data", "Temp", ".", "set", "Class", "Generating", "Tasks", "(", "Collections", ".", "singleton", "List", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Javac", "Task", "(", ")", ".", "get", "Name", "(", ")", ")", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "pc", "Data", "Temp", ".", "set", "Library", "Generating", "Tasks", "(", "Collections", ".", "singleton", "List", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "variant", "Data", ".", "get", "Variant", "Dependency", "(", ")", ".", "get", "Package", "Configuration", "(", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", ".", "get", "Build", "Dependencies", "(", ")", ")", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "pc", "Data", "Temp", ".", "set", "Input", "Files", "Callable", "(", "new", "<|s|>", "Callable", "<", "List", "<", "File", ">>", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|12-s|>", "public", "<|s|>", "List", "<", "File", ">", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "return", "<|s|>", "new", "<|s|>", "Array", "List", "<", "File", ">", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "variant", "Data", ".", "javac", "Task", ".", "get", "Outputs", "(", ")", ".", "get", "Files", "(", ")", ".", "get", "Files", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "pc", "Data", "Temp", ".", "set", "Input", "Dir", "(", "variant", "Scope", ".", "get", "Java", "Output", "Dir", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "pc", "Data", "Temp", ".", "set", "Input", "Libraries", "(", "Collections", ".", "<", "File", ">", "empty", "List", "(", ")", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "//", "<|s|>", "if", "<|s|>", "needed", ",", "<|s|>", "instrument", "<|s|>", "the", "<|s|>", "code", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "instrumented", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "return", "<|s|>", "create", "Jacoco", "Task", "(", "tasks", ",", "<|s|>", "variant", "Scope", ",", "<|s|>", "pc", "Data", "Temp", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "pc", "Data", "Temp", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|8-s|>", "check", "State", "(", "pc", "Data", "<|s|>", "!=", "<|s|>", "null", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "build", "Type", ".", "is", "Minify", "Enabled", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "run", "<|s|>", "proguard", "<|s|>", "on", "<|s|>", "output", "<|s|>", "of", "<|s|>", "compile", "<|s|>", "task", "<|nl|>", "<|12-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "PROGUARD", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|8-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "File", "<|s|>", "out", "File", "<|s|>", "=", "<|s|>", "maybe", "Create", "Proguard", "Tasks", "(", "tasks", ",", "<|s|>", "variant", "Scope", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "pc", "Data", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "pc", "Data", ".", "set", "Input", "Files", "(", "Collections", ".", "singleton", "List", "(", "out", "File", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "pc", "Data", ".", "set", "Input", "Dir", "Callable", "(", "null", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "pc", "Data", ".", "set", "Input", "Libraries", "(", "Collections", ".", "<", "File", ">", "empty", "List", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "package", "<|s|>", "the", "<|s|>", "local", "<|s|>", "jar", "<|s|>", "in", "<|s|>", "libs", "/", "<|nl|>", "<|12-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "PACKAGE", "_", "LOCAL", "_", "JAR", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|8-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "Sync", "<|s|>", "package", "Local", "Jar", "<|s|>", "=", "<|s|>", "project", ".", "get", "Tasks", "(", ")", ".", "create", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "variant", "Scope", ".", "get", "Task", "Name", "(", "\"", "package", "\"", ",", "<|s|>", "\"", "Local", "Jar", "\"", ")", ",", "<|s|>", "Sync", ".", "class", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "package", "Local", "Jar", ".", "from", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "Dependency", "Manager", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|12-s|>", ".", "get", "Packaged", "Local", "Jar", "File", "List", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "variant", "Data", ".", "get", "Variant", "Dependency", "(", ")", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|12-s|>", ".", "to", "Array", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "package", "Local", "Jar", ".", "into", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "LIBS", "_", "FOLDER", ")", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "add", "<|s|>", "the", "<|s|>", "input", "<|s|>", "libraries", ".", "<|s|>", "This", "<|s|>", "is", "<|s|>", "only", "<|s|>", "going", "<|s|>", "to", "<|s|>", "be", "<|s|>", "the", "<|s|>", "agent", "<|s|>", "jar", "<|s|>", "if", "<|s|>", "applicable", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "due", "<|s|>", "to", "<|s|>", "how", "<|s|>", "input", "Libraries", "<|s|>", "is", "<|s|>", "initialized", ".", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "clean", "<|s|>", "this", ".", "<|nl|>", "<|16-s|>", "<|12-s|>", "package", "Local", "Jar", ".", "from", "(", "pc", "Data", ".", "get", "Input", "Libraries", "Callable", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "Task", "Manager", ".", "optional", "Depends", "On", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "package", "Local", "Jar", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "pc", "Data", ".", "get", "Library", "Generating", "Tasks", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "pc", "Data", ".", "set", "Library", "Generating", "Tasks", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "Collections", ".", "singleton", "List", "(", "package", "Local", "Jar", ")", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "jar", "<|s|>", "the", "<|s|>", "classes", ".", "<|nl|>", "<|16-s|>", "<|12-s|>", "Jar", "<|s|>", "jar", "<|s|>", "=", "<|s|>", "project", ".", "get", "Tasks", "(", ")", ".", "create", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "variant", "Scope", ".", "get", "Task", "Name", "(", "\"", "package", "\"", ",", "<|s|>", "\"", "Jar", "\"", ")", ",", "<|s|>", "Jar", ".", "class", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "jar", ".", "depends", "On", "(", "variant", "Scope", ".", "get", "Process", "Java", "Resources", "Task", "(", ")", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "//", "<|s|>", "add", "<|s|>", "the", "<|s|>", "class", "<|s|>", "files", "<|s|>", "(", "whether", "<|s|>", "they", "<|s|>", "are", "<|s|>", "instrumented", "<|s|>", "or", "<|s|>", "not", ".", "<|nl|>", "<|16-s|>", "<|12-s|>", "jar", ".", "from", "(", "pc", "Data", ".", "get", "Input", "Dir", "Callable", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "Task", "Manager", ".", "optional", "Depends", "On", "(", "jar", ",", "<|s|>", "pc", "Data", ".", "get", "Class", "Generating", "Tasks", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "pc", "Data", ".", "set", "Class", "Generating", "Tasks", "(", "Collections", ".", "singleton", "List", "(", "jar", ")", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "jar", ".", "from", "(", "variant", "Scope", ".", "get", "Java", "Resources", "Destination", "Dir", "(", ")", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "jar", ".", "set", "Destination", "Dir", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "jar", ".", "set", "Archive", "Name", "(", "\"", "classes", ".", "jar", "\"", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "String", "<|s|>", "package", "Name", "<|s|>", "=", "<|s|>", "variant", "Config", ".", "get", "Package", "From", "Manifest", "(", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "if", "<|s|>", "(", "package", "Name", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Build", "Exception", "(", "\"", "Failed", "<|s|>", "to", "<|s|>", "read", "<|s|>", "manifest", "\"", ",", "<|s|>", "null", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "package", "Name", "<|s|>", "=", "<|s|>", "package", "Name", ".", "replace", "(", "\"", ".", "\"", ",", "<|s|>", "\"", "/", "\"", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "jar", ".", "exclude", "(", "package", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "R", ".", "class", "\"", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "jar", ".", "exclude", "(", "package", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "R", "$", "*", ".", "class", "\"", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "if", "<|s|>", "(", "!", "get", "Extension", "(", ")", ".", "get", "Package", "Build", "Config", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "jar", ".", "exclude", "(", "package", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "Manifest", ".", "class", "\"", ");", "<|nl|>", "<|16-s|>", "<|16-s|>", "jar", ".", "exclude", "(", "package", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "Manifest", "$", "*", ".", "class", "\"", ");", "<|nl|>", "<|16-s|>", "<|16-s|>", "jar", ".", "exclude", "(", "package", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "Build", "Config", ".", "class", "\"", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "if", "<|s|>", "(", "lib", "Variant", "Data", ".", "generate", "Annotations", "Task", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "//", "<|s|>", "In", "<|s|>", "case", "<|s|>", "extract", "<|s|>", "annotations", "<|s|>", "strips", "<|s|>", "out", "<|s|>", "private", "<|s|>", "typedef", "<|s|>", "annotation", "<|s|>", "classes", "<|nl|>", "<|16-s|>", "<|16-s|>", "jar", ".", "depends", "On", "(", "lib", "Variant", "Data", ".", "generate", "Annotations", "Task", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "}", "<|nl|>", "<|16-s|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "bundle", ".", "depends", "On", "(", "package", "Res", ".", "get", "Name", "(", ")", ",", "<|s|>", "package", "Renderscript", ",", "<|s|>", "lint", "Copy", ",", "<|s|>", "package", "Jni", "Libs", ",", "<|nl|>", "<|16-s|>", "merge", "Pro", "Guard", "File", "Task", ");", "<|nl|>", "<|8-s|>", "Task", "Manager", ".", "optional", "Depends", "On", "(", "bundle", ",", "<|s|>", "pc", "Data", ".", "get", "Class", "Generating", "Tasks", "(", ")", ");", "<|nl|>", "<|8-s|>", "Task", "Manager", ".", "optional", "Depends", "On", "(", "bundle", ",", "<|s|>", "pc", "Data", ".", "get", "Library", "Generating", "Tasks", "(", ")", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "bundle", ".", "set", "Description", "(", "\"", "Assembles", "<|s|>", "a", "<|s|>", "bundle", "<|s|>", "containing", "<|s|>", "the", "<|s|>", "library", "<|s|>", "in", "<|s|>", "\"", "<|s|>", "+", "<|nl|>", "<|16-s|>", "variant", "Config", ".", "get", "Full", "Name", "(", ")", "<|s|>", "+", "<|s|>", "\"", ".", "\"", ");", "<|nl|>", "<|8-s|>", "bundle", ".", "set", "Destination", "Dir", "(", "new", "<|s|>", "File", "(", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Outputs", "Dir", "(", ")", ",", "<|s|>", "\"", "aar", "\"", ")", ");", "<|nl|>", "<|8-s|>", "bundle", ".", "set", "Archive", "Name", "(", "project", ".", "get", "Name", "(", ")", "<|s|>", "+", "<|s|>", "\"", "-", "\"", "<|s|>", "+", "<|s|>", "variant", "Config", ".", "get", "Base", "Name", "(", ")", "<|s|>", "+", "<|s|>", "\"", ".", "\"", "<|nl|>", "<|16-s|>", "+", "<|s|>", "Builder", "Constants", ".", "EXT", "_", "LIB", "_", "ARCHIVE", ");", "<|nl|>", "<|8-s|>", "bundle", ".", "set", "Extension", "(", "Builder", "Constants", ".", "EXT", "_", "LIB", "_", "ARCHIVE", ");", "<|nl|>", "<|8-s|>", "bundle", ".", "from", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", ")", ");", "<|nl|>", "<|8-s|>", "bundle", ".", "from", "(", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "ANNOTATIONS", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", ")", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "get", "<|s|>", "the", "<|s|>", "single", "<|s|>", "output", "<|s|>", "for", "<|s|>", "now", ",", "<|s|>", "though", "<|s|>", "that", "<|s|>", "may", "<|s|>", "always", "<|s|>", "be", "<|s|>", "the", "<|s|>", "case", "<|s|>", "for", "<|s|>", "a", "<|s|>", "library", ".", "<|nl|>", "<|8-s|>", "Lib", "Variant", "Output", "Data", "<|s|>", "variant", "Output", "Data", "<|s|>", "=", "<|s|>", "lib", "Variant", "Data", ".", "get", "Outputs", "(", ")", ".", "get", "(", "0", ");", "<|nl|>", "<|8-s|>", "variant", "Output", "Data", ".", "package", "Lib", "Task", "<|s|>", "=", "<|s|>", "bundle", ";", "<|nl|>", "<|nl|>", "<|8-s|>", "variant", "Data", ".", "assemble", "Variant", "Task", ".", "depends", "On", "(", "bundle", ");", "<|nl|>", "<|8-s|>", "variant", "Output", "Data", ".", "assemble", "Task", "<|s|>", "=", "<|s|>", "variant", "Data", ".", "assemble", "Variant", "Task", ";", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "get", "Extension", "(", ")", ".", "get", "Default", "Publish", "Config", "(", ")", ".", "equals", "(", "variant", "Config", ".", "get", "Full", "Name", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Variant", "Helper", ".", "setup", "Default", "Config", "(", "project", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "variant", "Data", ".", "get", "Variant", "Dependency", "(", ")", ".", "get", "Package", "Configuration", "(", ")", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "add", "<|s|>", "the", "<|s|>", "artifact", "<|s|>", "that", "<|s|>", "will", "<|s|>", "be", "<|s|>", "published", "<|nl|>", "<|12-s|>", "project", ".", "get", "Artifacts", "(", ")", ".", "add", "(", "\"", "default", "\"", ",", "<|s|>", "bundle", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "get", "Assemble", "Default", "(", ")", ".", "depends", "On", "(", "variant", "Data", ".", "assemble", "Variant", "Task", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "also", "<|s|>", "publish", "<|s|>", "the", "<|s|>", "artifact", "<|s|>", "with", "<|s|>", "its", "<|s|>", "full", "<|s|>", "config", "<|s|>", "name", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "get", "Extension", "(", ")", ".", "get", "Publish", "Non", "Default", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "project", ".", "get", "Artifacts", "(", ")", ".", "add", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "variant", "Data", ".", "get", "Variant", "Dependency", "(", ")", ".", "get", "Publish", "Configuration", "(", ")", ".", "get", "Name", "(", ")", ",", "<|s|>", "bundle", ");", "<|nl|>", "<|12-s|>", "bundle", ".", "set", "Classifier", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "variant", "Data", ".", "get", "Variant", "Dependency", "(", ")", ".", "get", "Publish", "Configuration", "(", ")", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "configure", "<|s|>", "the", "<|s|>", "variant", "<|s|>", "to", "<|s|>", "be", "<|s|>", "testable", ".", "<|nl|>", "<|8-s|>", "variant", "Config", ".", "set", "Output", "(", "new", "<|s|>", "Library", "Bundle", "(", "<|nl|>", "<|16-s|>", "bundle", ".", "get", "Archive", "Path", "(", ")", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "File", "(", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", ")", ",", "<|nl|>", "<|16-s|>", "variant", "Data", ".", "get", "Name", "(", ")", ",", "<|nl|>", "<|16-s|>", "project", ".", "get", "Path", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "@", "Nullable", "<|nl|>", "<|12-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Project", "Variant", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "variant", "Data", ".", "get", "Name", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "@", "Non", "Null", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "public", "<|s|>", "List", "<", "Library", "Dependency", ">", "<|s|>", "get", "Dependencies", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "variant", "Config", ".", "get", "Direct", "Libraries", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "@", "Non", "Null", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "public", "<|s|>", "List", "<", "?", "<|s|>", "extends", "<|s|>", "Android", "Library", ">", "<|s|>", "get", "Library", "Dependencies", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "variant", "Config", ".", "get", "Direct", "Libraries", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "@", "Non", "Null", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "public", "<|s|>", "List", "<", "?", "<|s|>", "extends", "<|s|>", "Manifest", "Dependency", ">", "<|s|>", "get", "Manifest", "Dependencies", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "variant", "Config", ".", "get", "Direct", "Libraries", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "@", "Nullable", "<|nl|>", "<|12-s|>", "public", "<|s|>", "Maven", "Coordinates", "<|s|>", "get", "Requested", "Coordinates", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "@", "Nullable", "<|nl|>", "<|12-s|>", "public", "<|s|>", "Maven", "Coordinates", "<|s|>", "get", "Resolved", "Coordinates", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "@", "Non", "Null", "<|nl|>", "<|12-s|>", "protected", "<|s|>", "File", "<|s|>", "get", "Jars", "Root", "Folder", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "get", "Folder", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Optional", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "Thread", "Recorder", ".", "get", "(", ")", ".", "record", "(", "Execution", "Type", ".", "LIB", "_", "TASK", "_", "MANAGER", "_", "CREATE", "_", "LINT", "_", "TASK", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Recorder", ".", "Block", "<", "Void", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Void", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "create", "Lint", "Tasks", "(", "tasks", ",", "<|s|>", "variant", "Scope", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 117, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1045", "comment_id": "b97b38ac_8f8d493c", "class_list": ["LibraryTaskManager", "", "files"], "func_list": ["public LibraryTaskManager (", "public void createTasksForVariantData(", "public void execute(Task task)", "public Void call() throws Exception", "public String getProjectVariant()", "public List<LibraryDependency> getDependencies()", "public MavenCoordinates getRequestedCoordinates()", "public MavenCoordinates getResolvedCoordinates()", "protected File getJarsRootFolder()", "public boolean isOptional()", "public ExtractAnnotations createExtractAnnotations(", "private Task getAssembleDefault()", "public LibraryTaskManager (", "public void createTasksForVariantData(", "public void execute(Task task)", "public Void call() throws Exception", "public String getProjectVariant()", "public List<LibraryDependency> getDependencies()", "public MavenCoordinates getRequestedCoordinates()", "public MavenCoordinates getResolvedCoordinates()", "protected File getJarsRootFolder()", "public boolean isOptional()", "public ExtractAnnotations createExtractAnnotations(", "private Task getAssembleDefault()"], "prime_var_dic": {}}, {"idx": 21086, "status": "update", "global_index": 3132, "project_name": "android_", "written_on": "2016-12-05 18:42:03", "tufano_target": "public static boolean METHOD_1 ( int state ) { switch ( state ) { case VAR_2 : case VAR_3 : case VAR_4 : return true ; case VAR_5 : return VAR_1 ; default : return false ; } }", "comment": "I'm not sure I like the data spcifics.  Verifying it's part of the enum is fine, but maybe drop isData?", "tokenized_comment": ["I", "'", "m", "<|s|>", "not", "<|s|>", "sure", "<|s|>", "I", "<|s|>", "like", "<|s|>", "the", "<|s|>", "data", "<|s|>", "spcifics", ".", "<|2-s|>", "Verifying", "<|s|>", "it", "'", "s", "<|s|>", "part", "<|s|>", "of", "<|s|>", "the", "<|s|>", "enum", "<|s|>", "is", "<|s|>", "fine", ",", "<|s|>", "but", "<|s|>", "maybe", "<|s|>", "drop", "<|s|>", "is", "Data", "?"], "tufano_code": "public static boolean METHOD_1 ( int state , boolean VAR_1 ) { switch ( state ) { case VAR_2 : case VAR_3 : case VAR_4 : return true ; case VAR_5 : return VAR_1 ; default : return false ; } }", "our_target": "    public static boolean isValidActivationState(int state) {\n", "our_code": "<|startfocus|>\n    public static boolean isValidActivationState(int state, boolean isData) {\n<|endfocus|>\n        switch (state) {\n            case STATE_UNKNOWN:\n            case STATE_ACTIVATED:\n            case STATE_DEACTIVATED:\n                return true;\n            case STATE_RESTRICTED:\n                return isData;\n            default:\n                return false;\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "is", "Valid", "Activation", "State", "(", "int", "<|s|>", "state", ",", "<|s|>", "boolean", "<|s|>", "is", "Data", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "switch", "<|s|>", "(", "state", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "case", "<|s|>", "STATE", "_", "UNKNOWN", ":", "<|nl|>", "<|12-s|>", "case", "<|s|>", "STATE", "_", "ACTIVATED", ":", "<|nl|>", "<|12-s|>", "case", "<|s|>", "STATE", "_", "DEACTIVATED", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "STATE", "_", "RESTRICTED", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "is", "Data", ";", "<|nl|>", "<|12-s|>", "default", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 80, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4905", "comment_id": "8d159bc1_5c6e7419", "class_list": ["SimActivationState"], "func_list": ["private static String convertToStr(int state)", "public static boolean isValidActivationState(int state, boolean isData)", "public int getVoiceActivationState()", "public int getDataActivationState()", "public String getVoiceActivationStateStr()", "public String getDataActivationStateStr()", "public boolean setVoiceActivationState(int state)", "public boolean setDataActivationState(int state)", "public void writeToParcel(Parcel out, int flags)", "public SimActivationState(SimActivationState s)", "protected void copyFrom(SimActivationState s)", "public int describeContents()", "public SimActivationState createFromParcel(Parcel in)", "public SimActivationState[] newArray(int size)", "private static void log(String s)"], "prime_var_dic": {"implements": 1, "boolean": 1, "String": 1, "int": 4, "Creator": 1}}, {"idx": 77245, "status": "update", "global_index": 10841, "project_name": "android_", "written_on": "2015-05-20 10:18:07", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return ( VAR_1 . METHOD_2 ( ) . equals ( VAR_4 ) ? new TYPE_5 ( VAR_2 , VAR_3 ) : new TYPE_6 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }", "comment": "Put on a new line, so ? is aligned with :", "tokenized_comment": ["Put", "<|s|>", "on", "<|s|>", "a", "<|s|>", "new", "<|s|>", "line", ",", "<|s|>", "so", "<|s|>", "?", "<|s|>", "is", "<|s|>", "aligned", "<|s|>", "with", "<|s|>", ":"], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return ( VAR_1 . METHOD_2 ( ) . equals ( VAR_4 ) ? new TYPE_5 ( VAR_2 , VAR_3 ) : new TYPE_6 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }", "our_target": "        return (ndkHandler.getToolchain().equals(Toolchain.GCC)\n                ? new GccNativeToolSpecification(buildType, platform)\n", "our_code": "    public static NativeToolSpecification create(NdkHandler ndkHandler, BuildType buildType,\n            NativePlatform platform) {\n<|startfocus|>\n        return (ndkHandler.getToolchain().equals(Toolchain.GCC) ? new GccNativeToolSpecification(\n                buildType, platform)\n<|endfocus|>\n                : new ClangNativeToolSpecification(ndkHandler, buildType, platform));\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "Native", "Tool", "Specification", "<|s|>", "create", "(", "Ndk", "Handler", "<|s|>", "ndk", "Handler", ",", "<|s|>", "Build", "Type", "<|s|>", "build", "Type", ",", "<|nl|>", "<|12-s|>", "Native", "Platform", "<|s|>", "platform", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "ndk", "Handler", ".", "get", "Toolchain", "(", ")", ".", "equals", "(", "Toolchain", ".", "GCC", ")", "<|s|>", "?", "<|s|>", "new", "<|s|>", "Gcc", "Native", "Tool", "Specification", "(", "<|nl|>", "<|16-s|>", "build", "Type", ",", "<|s|>", "platform", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", ":", "<|s|>", "new", "<|s|>", "Clang", "Native", "Tool", "Specification", "(", "ndk", "Handler", ",", "<|s|>", "build", "Type", ",", "<|s|>", "platform", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 39, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1105", "comment_id": "2d20e12c_5f91a31d", "class_list": ["NativeToolSpecificationFactory"], "func_list": ["public static NativeToolSpecification create(NdkHandler ndkHandler, BuildType buildType,"], "prime_var_dic": {}}, {"idx": 93946, "status": "update", "global_index": 17746, "project_name": "android_", "written_on": "2012-07-05 19:37:57", "tufano_target": "protected void METHOD_1 ( ) { if ( VAR_1 != null && VAR_2 == true ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } try { if ( ! VAR_5 ) METHOD_3 ( ) ; } catch ( TYPE_1 VAR_4 ) { } }", "comment": "Please protect the call with if (!mClosed). There's no reason to call the code twice and possibly generate an exception in the common case where the cursor is properly closed by the app.", "tokenized_comment": ["Please", "<|s|>", "protect", "<|s|>", "the", "<|s|>", "call", "<|s|>", "with", "<|s|>", "if", "<|s|>", "(", "!", "m", "Closed", ")", ".", "<|s|>", "There", "'", "s", "<|s|>", "no", "<|s|>", "reason", "<|s|>", "to", "<|s|>", "call", "<|s|>", "the", "<|s|>", "code", "<|s|>", "twice", "<|s|>", "and", "<|s|>", "possibly", "<|s|>", "generate", "<|s|>", "an", "<|s|>", "exception", "<|s|>", "in", "<|s|>", "the", "<|s|>", "common", "<|s|>", "case", "<|s|>", "where", "<|s|>", "the", "<|s|>", "cursor", "<|s|>", "is", "<|s|>", "properly", "<|s|>", "closed", "<|s|>", "by", "<|s|>", "the", "<|s|>", "app", "."], "tufano_code": "protected void METHOD_1 ( ) { if ( VAR_1 != null && VAR_2 == true ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } try { METHOD_3 ( ) ; } catch ( TYPE_1 VAR_4 ) { } }", "our_target": "            if (!mClosed) close();\n", "our_code": "    protected void finalize() {\n        if (mSelfObserver != null && mSelfObserverRegistered == true) {\n            mContentResolver.unregisterContentObserver(mSelfObserver);\n        }\n        try {\n<|startfocus|>\n            close();\n<|endfocus|>\n        } catch(Exception e) { }\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "finalize", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Self", "Observer", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "m", "Self", "Observer", "Registered", "<|s|>", "==", "<|s|>", "true", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Content", "Resolver", ".", "unregister", "Content", "Observer", "(", "m", "Self", "Observer", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "close", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 410, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1334", "comment_id": "AAAHJ3%2F%2F%2F98%3D", "class_list": ["that", "AbstractCursor", "a", "of", "implementations", "to", "SelfContentObserver", "and", "that"], "func_list": ["public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public AbstractCursor()", "public void fillWindow(int position, CursorWindow window)", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "protected void notifyDataSetChange()", "protected DataSetObservable getDataSetObservable()", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()", "public SelfContentObserver(AbstractCursor cursor)", "public boolean deliverSelfNotifications()", "public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public AbstractCursor()", "public void fillWindow(int position, CursorWindow window)", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "protected void notifyDataSetChange()", "protected DataSetObservable getDataSetObservable()", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()", "public SelfContentObserver(AbstractCursor cursor)", "public boolean deliverSelfNotifications()", "public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public AbstractCursor()", "public void fillWindow(int position, CursorWindow window)", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "protected void notifyDataSetChange()", "protected DataSetObservable getDataSetObservable()", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()", "public SelfContentObserver(AbstractCursor cursor)", "public boolean deliverSelfNotifications()", "public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public AbstractCursor()", "public void fillWindow(int position, CursorWindow window)", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "protected void notifyDataSetChange()", "protected DataSetObservable getDataSetObservable()", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()", "public SelfContentObserver(AbstractCursor cursor)", "public boolean deliverSelfNotifications()", "protected void checkPosition()", "public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public AbstractCursor()", "public void fillWindow(int position, CursorWindow window)", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "protected void notifyDataSetChange()", "protected DataSetObservable getDataSetObservable()", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()", "public SelfContentObserver(AbstractCursor cursor)", "public boolean deliverSelfNotifications()", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public AbstractCursor()", "public void fillWindow(int position, CursorWindow window)", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "protected void notifyDataSetChange()", "protected DataSetObservable getDataSetObservable()", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()", "public SelfContentObserver(AbstractCursor cursor)", "public boolean deliverSelfNotifications()", "public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public AbstractCursor()", "public void fillWindow(int position, CursorWindow window)", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "protected void notifyDataSetChange()", "protected DataSetObservable getDataSetObservable()", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public Uri getNotificationUri()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()", "public SelfContentObserver(AbstractCursor cursor)", "public boolean deliverSelfNotifications()"], "prime_var_dic": {"String": 1, "Bundle": 1, "CursorIndexOutOfBoundsException": 1}}, {"idx": 13326, "status": "update", "global_index": 4076, "project_name": "android_", "written_on": "2016-09-22 17:42:37", "tufano_target": "protected String METHOD_1 ( String VAR_1 ) { return super . METHOD_1 ( VAR_1 ) + STRING_1 ; }", "comment": "@Nonnull String orgName", "tokenized_comment": ["@", "Nonnull", "<|s|>", "String", "<|s|>", "org", "Name"], "tufano_code": "protected String METHOD_1 ( String VAR_1 ) { return super . METHOD_1 ( VAR_1 ) + STRING_1 ; }", "our_target": "  protected String cloneLocalName(@Nonnull String orgName) {\n", "our_code": "<|startfocus|>\n  protected String cloneLocalName(String orgName) {\n<|endfocus|>\n    return super.cloneLocalName(orgName) + \"_cloned\";\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "protected", "<|s|>", "String", "<|s|>", "clone", "Local", "Name", "(", "String", "<|s|>", "org", "Name", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "super", ".", "clone", "Local", "Name", "(", "org", "Name", ")", "<|s|>", "+", "<|s|>", "\"", "_", "cloned", "\"", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 189, "base_patch_number": 12, "changed_patch_number": 14, "code_file_name": "android_2422", "comment_id": "b0f70f09_9bca8b42", "class_list": ["is", "InlineCloneStatementVisitor", "will"], "func_list": ["public InlineCloneStatementVisitor(@Nonnull TransformationRequest trRequest,", "public JBlock cloneMethodBody(@Nonnull JMethodBody body)", "public boolean visit(@Nonnull JBlock block)", "private void internalCloneBlock(JBlock newBlock, JBlock orgBlock)", "protected JStatement updateCatchBlockList(@Nonnull JStatement clonedStmt,", "protected String cloneLocalName(String orgName)"], "prime_var_dic": {}}, {"idx": 18561, "status": "update", "global_index": 21175, "project_name": "android_", "written_on": "2013-10-09 17:27:48", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 ) { VAR_4 = VAR_3 ; VAR_5 = VAR_3 . substring ( VAR_3 . METHOD_1 ( CHAR_1 ) + 1 ) ; VAR_6 = new TYPE_2 ( VAR_2 , VAR_3 ) ; }", "comment": "nitpick - don't need this. prefix", "tokenized_comment": ["nitpick", "<|s|>", "-", "<|s|>", "don", "'", "t", "<|s|>", "need", "<|s|>", "this", ".", "<|s|>", "prefix"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 ) { this . VAR_4 = VAR_3 ; VAR_5 = VAR_3 . substring ( VAR_3 . METHOD_1 ( CHAR_1 ) + 1 ) ; VAR_6 = new TYPE_2 ( VAR_2 , VAR_3 ) ; }", "our_target": "    myModulePath = modulePath;\n", "our_code": "  public AndroidModuleConfigurable(Project project, String modulePath) {\n<|startfocus|>\n    this.myModulePath = modulePath;\n<|endfocus|>\n    myDisplayName = modulePath.substring(modulePath.lastIndexOf(':') + 1);\n    myModuleEditor = new AndroidModuleEditor(project, modulePath);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Android", "Module", "Configurable", "(", "Project", "<|s|>", "project", ",", "<|s|>", "String", "<|s|>", "module", "Path", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "this", ".", "my", "Module", "Path", "<|s|>", "=", "<|s|>", "module", "Path", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Display", "Name", "<|s|>", "=", "<|s|>", "module", "Path", ".", "substring", "(", "module", "Path", ".", "last", "Index", "Of", "(':", "'", ")", "<|s|>", "+", "<|s|>", "1", ");", "<|nl|>", "<|4-s|>", "my", "Module", "Editor", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Android", "Module", "Editor", "(", "project", ",", "<|s|>", "module", "Path", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 36, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_580", "comment_id": "41869966_b437aebe", "class_list": ["AndroidModuleConfigurable"], "func_list": ["public AndroidModuleConfigurable(Project project, String modulePath)", "public void setDisplayName(String name)", "public Object getEditableObject()", "public String getBannerSlogan()", "public JComponent createOptionsPanel()", "public String getDisplayName()", "public String getHelpTopic()", "public boolean isModified()", "public void reset()", "public void disposeUIResources()", "public Icon getIcon(boolean expanded)"], "prime_var_dic": {"myModulePath": 1, "myDisplayName": 1, "myModuleEditor": 1}}, {"idx": 11529, "status": "update", "global_index": 10139, "project_name": "android_", "written_on": "2015-04-15 15:09:45", "tufano_target": "public TYPE_1 set ( String VAR_1 , String key , String value ) { String VAR_3 = ( VAR_1 != null ? ( VAR_1 + STRING_1 ) : STRING_2 ) ; VAR_2 . put ( VAR_3 + key , value ) ; return this ; }", "comment": "Nit: make (ns != null ? (ns + \":\") : \"\") to be a local variable, say, \"prefix\" for better readability?", "tokenized_comment": ["Nit", ":", "<|s|>", "make", "<|s|>", "(", "ns", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "?", "<|s|>", "(", "ns", "<|s|>", "+", "<|s|>", "\"", ":", "\"", ")", "<|s|>", ":", "<|s|>", "\"", "\"", ")", "<|s|>", "to", "<|s|>", "be", "<|s|>", "a", "<|s|>", "local", "<|s|>", "variable", ",", "<|s|>", "say", ",", "<|s|>", "\"", "prefix", "\"", "<|s|>", "for", "<|s|>", "better", "<|s|>", "readability", "?"], "tufano_code": "public TYPE_1 set ( String VAR_1 , String key , String value ) { VAR_2 . put ( ( VAR_1 != null ? ( VAR_1 + STRING_1 ) : STRING_2 ) + key , value ) ; return this ; }", "our_target": "      String prefix = (ns != null ? (ns + \":\") : \"\");\n      attributes.put(prefix + key, value);\n", "our_code": "    public ComponentDefinition set(@Nullable String ns, @NotNull String key, @NotNull String value) {\n<|startfocus|>\n      attributes.put((ns != null ? (ns + \":\") : \"\") + key, value);\n<|endfocus|>\n\n      return this;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Component", "Definition", "<|s|>", "set", "(", "@", "Nullable", "<|s|>", "String", "<|s|>", "ns", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "key", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "value", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "attributes", ".", "put", "(", "(", "ns", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "?", "<|s|>", "(", "ns", "<|s|>", "+", "<|s|>", "\"", ":", "\"", ")", "<|s|>", ":", "<|s|>", "\"", "\"", ")", "<|s|>", "+", "<|s|>", "key", ",", "<|s|>", "value", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 133, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_320", "comment_id": "709c722a_e4351087", "class_list": ["ThemePreviewBuilder", "ComponentDefinition", "and", "and", "ApiLevelFilter", "SearchFilter"], "func_list": ["public ComponentDefinition(String description, ComponentGroup group, String name, int weight)", "public ComponentDefinition set(@Nullable String ns, @NotNull String key, @NotNull String value)", "public ComponentDefinition setApiLevel(int apiLevel)", "String getId()", "public ComponentDefinition setText(@NotNull String text)", "public ComponentDefinition addAlias(@NotNull String text)", "public ApiLevelFilter(int apiLevel)", "public boolean apply(ComponentDefinition input)", "public SearchFilter(@NotNull String searchTerm, boolean caseSensitive)", "private static Element buildMainLayoutElement(@NotNull Document document)", "private static Element buildComponent(@NotNull Document document, @NotNull ComponentDefinition def)", "private static Element buildElementGroup(@NotNull Document document, @NotNull ComponentGroup group, @NotNull String verticalPadding)", "private static void printDebug(@NotNull PrintStream out, @NotNull Document document)", "private List<ComponentDefinition> getComponentsByGroup(@NotNull final ComponentGroup group)", "private static String toDp(int n)", "private static String toSp(int n)", "public ThemePreviewBuilder addComponentFilter(@NotNull Predicate<ComponentDefinition> filter)", "public ThemePreviewBuilder addAllComponents(@NotNull List<ComponentDefinition> definitions)", "public ThemePreviewBuilder addComponentFilter(@NotNull Predicate<ComponentDefinition> filter)", "public ThemePreviewBuilder setGroupHeaderColor(@NotNull String color)", "public ThemePreviewBuilder setSeparatorColor(@NotNull String color)", "public ThemePreviewBuilder setSeparatorHeight(int height)", "public ThemePreviewBuilder setDebug(@NotNull PrintStream printStream)", "public ComponentDefinition(String description, ComponentGroup group, String name, int weight)", "public ComponentDefinition set(@Nullable String ns, @NotNull String key, @NotNull String value)", "public ComponentDefinition setApiLevel(int apiLevel)", "String getId()", "public ComponentDefinition setText(@NotNull String text)", "public ComponentDefinition addAlias(@NotNull String text)", "public ApiLevelFilter(int apiLevel)", "public boolean apply(ComponentDefinition input)", "public SearchFilter(@NotNull String searchTerm, boolean caseSensitive)", "private static Element buildMainLayoutElement(@NotNull Document document)", "private static Element buildComponent(@NotNull Document document, @NotNull ComponentDefinition def)", "private static Element buildElementGroup(@NotNull Document document, @NotNull ComponentGroup group, @NotNull String verticalPadding)", "private static void printDebug(@NotNull PrintStream out, @NotNull Document document)", "private List<ComponentDefinition> getComponentsByGroup(@NotNull final ComponentGroup group)", "private static String toDp(int n)", "private static String toSp(int n)", "public ThemePreviewBuilder addComponentFilter(@NotNull Predicate<ComponentDefinition> filter)", "public ThemePreviewBuilder addAllComponents(@NotNull List<ComponentDefinition> definitions)", "public ThemePreviewBuilder addComponentFilter(@NotNull Predicate<ComponentDefinition> filter)", "public ThemePreviewBuilder setGroupHeaderColor(@NotNull String color)", "public ThemePreviewBuilder setSeparatorColor(@NotNull String color)", "public ThemePreviewBuilder setSeparatorHeight(int height)", "public ThemePreviewBuilder setDebug(@NotNull PrintStream printStream)", "public ComponentDefinition(String description, ComponentGroup group, String name, int weight)", "public ComponentDefinition set(@Nullable String ns, @NotNull String key, @NotNull String value)", "public ComponentDefinition setApiLevel(int apiLevel)", "String getId()", "public ComponentDefinition setText(@NotNull String text)", "public ComponentDefinition addAlias(@NotNull String text)", "public ApiLevelFilter(int apiLevel)", "public boolean apply(ComponentDefinition input)", "public SearchFilter(@NotNull String searchTerm, boolean caseSensitive)", "private static Element buildMainLayoutElement(@NotNull Document document)", "private static Element buildComponent(@NotNull Document document, @NotNull ComponentDefinition def)", "private static Element buildElementGroup(@NotNull Document document, @NotNull ComponentGroup group, @NotNull String verticalPadding)", "private static void printDebug(@NotNull PrintStream out, @NotNull Document document)", "private List<ComponentDefinition> getComponentsByGroup(@NotNull final ComponentGroup group)", "private static String toDp(int n)", "private static String toSp(int n)", "public ThemePreviewBuilder addComponentFilter(@NotNull Predicate<ComponentDefinition> filter)", "public ThemePreviewBuilder addAllComponents(@NotNull List<ComponentDefinition> definitions)", "public ThemePreviewBuilder addComponentFilter(@NotNull Predicate<ComponentDefinition> filter)", "public ThemePreviewBuilder setGroupHeaderColor(@NotNull String color)", "public ThemePreviewBuilder setSeparatorColor(@NotNull String color)", "public ThemePreviewBuilder setSeparatorHeight(int height)", "public ThemePreviewBuilder setDebug(@NotNull PrintStream printStream)", "public ApiLevelFilter(int apiLevel)", "public boolean apply(ComponentDefinition input)", "public SearchFilter(@NotNull String searchTerm, boolean caseSensitive)", "public boolean apply(ComponentDefinition input)"], "prime_var_dic": {"myCaseSensitive": 1, "mySearchTerm": 1}}, {"idx": 26420, "status": "update", "global_index": 10316, "project_name": "android_", "written_on": "2015-04-23 17:08:05", "tufano_target": "public static int METHOD_1 ( int x , int y ) { int VAR_1 ; if ( METHOD_2 ( ) ) { VAR_1 = x + y ; } else { VAR_1 = x - y ; } return VAR_1 ; }", "comment": "same question", "tokenized_comment": ["same", "<|s|>", "question"], "tufano_code": "public static int METHOD_1 ( int x , int y ) { int VAR_1 ; if ( METHOD_2 ( ) == false ) { VAR_1 = x + y ; } else { VAR_1 = x - y ; } return VAR_1 ; }", "our_target": "    if (inlineFalse()) {\n", "our_code": "  public static int testFalseBranch(int x, int y) {\n    int z;\n<|startfocus|>\n    if (inlineFalse() == false) {\n<|endfocus|>\n      z = x + y;\n    } else {\n      z = x - y;\n    }\n    return z;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "int", "<|s|>", "test", "False", "Branch", "(", "int", "<|s|>", "x", ",", "<|s|>", "int", "<|s|>", "y", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "int", "<|s|>", "z", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "inline", "False", "(", ")", "<|s|>", "==", "<|s|>", "false", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "z", "<|s|>", "=", "<|s|>", "x", "<|s|>", "+", "<|s|>", "y", ";", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "z", "<|s|>", "=", "<|s|>", "x", "<|s|>", "-", "<|s|>", "y", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "z", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 90, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_5063", "comment_id": "b088aa37_1377f403", "class_list": ["Main"], "func_list": ["public static void assertIntEquals(int expected, int result)", "public static boolean inlineTrue()", "public static int testTrueBranch(int x, int y)", "public static boolean inlineFalse()", "public static int testFalseBranch(int x, int y)", "public static int testRemoveLoop(int x)", "public static int testInfiniteLoop(int x)", "public static void main(String[] args)"], "prime_var_dic": {}}, {"idx": 86, "status": "update", "global_index": 15003, "project_name": "android_", "written_on": "2014-05-14 16:56:33", "tufano_target": "public void METHOD_1 ( TYPE_1 < String , TYPE_2 > VAR_1 ) { synchronized ( this ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; } }", "comment": "same comment here", "tokenized_comment": ["same", "<|s|>", "comment", "<|s|>", "here"], "tufano_code": "public void METHOD_1 ( TYPE_1 < String , TYPE_2 > VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; } }", "our_target": "    synchronized (this) {\n", "our_code": "  public void setAllUsers(Map<String, User> users) {\n<|startfocus|>\n    synchronized (allUsers) {\n<|endfocus|>\n      allUsers.clear();\n      allUsers.putAll(users);\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "All", "Users", "(", "Map", "<", "String", ",", "<|s|>", "User", ">", "<|s|>", "users", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "synchronized", "<|s|>", "(", "all", "Users", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "all", "Users", ".", "clear", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "all", "Users", ".", "put", "All", "(", "users", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 45, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_2949", "comment_id": "0aa1240c_94da4c82", "class_list": ["Users"], "func_list": ["public void setAllUsers(Map<String, User> users)", "public User getActiveUser()", "public boolean setActiveUser(String userEmail)", "public int numberOfUsers()", "public boolean isActiveUserAvailable()", "public boolean addUser(User user)", "public boolean removeUser(String userEmail)", "public void removeAllUsers()"], "prime_var_dic": {"user": 3}}, {"idx": 45658, "status": "update", "global_index": 9490, "project_name": "android_", "written_on": "2015-10-14 10:24:16", "tufano_target": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_3 ) ; fail ( STRING_2 ) ; } catch ( TYPE_2 VAR_1 ) { } }", "comment": "Why $?", "tokenized_comment": ["Why", "<|s|>", "$", "?"], "tufano_code": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( STRING_2 ) ; } catch ( TYPE_2 VAR_1 ) { } }", "our_target": "            UriCodec.decode(\"ab%2f$%C4%82%25%e0%a1%80%p\");\n", "our_code": "    public void testDecode_wrongHexDigit_fails() {\n        try {\n            // %p in the end.\n<|startfocus|>\n            UriCodec.decode(\"ab%2f$%c4%82%25%e0%a1%80%p\");\n<|endfocus|>\n            fail(\"Expected URISyntaxException\");\n        } catch (IllegalArgumentException expected) {\n            // Expected.\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Decode", "_", "wrong", "Hex", "Digit", "_", "fails", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "%", "p", "<|s|>", "in", "<|s|>", "the", "<|s|>", "end", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "Uri", "Codec", ".", "decode", "(", "\"", "ab", "%", "2", "f", "$", "%", "c", "4", "%", "82", "%", "25", "%", "e", "0", "%", "a", "1", "%", "80", "%", "p", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "fail", "(", "\"", "Expected", "<|s|>", "URISyntax", "Exception", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Illegal", "Argument", "Exception", "<|s|>", "expected", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Expected", ".", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 202, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3346", "comment_id": "ff8686d4_844c48b3", "class_list": ["UriCodecTest"], "func_list": ["protected boolean isRetained(char c)", "public void testEncode_emptyString_returnsEmptyString()", "public void testEncode_emptyString_returnsEmptyString()", "public void testEncode_partially_returnsPercentUnchanged()", "public void testEncode_lastCharacter()", "public void testDecode_emptyString_returnsEmptyString()", "public void testDecode_wrongHexDigit_fails()", "public void testDecode_secondHexDigitWrong_fails()", "public void testDecode_endsWithPercent_fails()", "public void testDecode_dontThrowException_appendsUnknownCharacter()", "public void testDecode_convertPlus()", "public void testDecode_lastCharacter()"], "prime_var_dic": {"String": 1, "after": 5}}, {"idx": 41688, "status": "update", "global_index": 20271, "project_name": "android_", "written_on": "2013-03-01 16:19:03", "tufano_target": "private boolean VAR_2 = false ; public boolean METHOD_1 ( ) { return VAR_1 ; }", "comment": "fields should have prefix m", "tokenized_comment": ["fields", "<|s|>", "should", "<|s|>", "have", "<|s|>", "prefix", "<|s|>", "m"], "tufano_code": "private boolean VAR_1 = false ; public boolean METHOD_1 ( ) { return VAR_1 ; }", "our_target": "    private boolean mHasNinePatchExtension = false;\n", "our_code": "<|startfocus|>\n    private boolean hasNinePatchExtension = false;\n<|endfocus|>\n\n    public boolean hasNinePatchExtension() {\n        return hasNinePatchExtension;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "has", "Nine", "Patch", "Extension", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "has", "Nine", "Patch", "Extension", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "has", "Nine", "Patch", "Extension", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 79, "base_patch_number": 16, "changed_patch_number": 17, "code_file_name": "android_1784", "comment_id": "QkhBCJBw", "class_list": ["NinePatchedImage", "Projection", "Chunk", "Tick"], "func_list": ["public static String getNinePatchedFileName(String fileName)", "public ImageData getImageData()", "public int getWidth()", "public int getHeight()", "public Image getImage()", "private boolean hasNinePatchExtension = false;", "public boolean isDirty()", "public void clearDirtyFlg()", "public NinePatchedImage(String fileName)", "private void initNinePatchedImage(ImageData imageData, boolean hasNinePatchExtension)", "public boolean ensure9Patch()", "private boolean isValidPixel(int pixel)", "public void convertToNinePatch()", "private static int[] initArray(int[] array)", "private void createPatchArray()", "private void createContentArray()", "boolean isValid = true;", "public void setPatch(int x, int y, int color)", "public void erase(int x, int y)", "public List<Tick> getHorizontalPatches()", "public List<Tick> getVerticalPatches()", "private static boolean findPatches(int[] pixels, List<Tick> out)", "public void findPatches()", "public Rectangle getContentArea()", "private Tick getContentArea(List<Tick> list)", "public List<Tick> getHorizontalContents()", "public List<Tick> getVerticalContents()", "private static void findContentArea(int[] pixels, List<Tick> out)", "public void findContentsArea()", "public ImageData getRawImageData()", "private static void recycleChunks(Chunk[][] patchChunks, List<Chunk> bin)", "private Chunk getChunk()", "public Chunk[][] getChunks(Chunk[][] chunks)", "public Chunk[][] getCorruptedChunks(Chunk[][] chunks)", "private static boolean isVerticalCorrupted(ImageData data, Rectangle r)", "private static boolean isHorizontalCorrupted(ImageData data, Rectangle r)", "private static void recycleProjections(Projection[][] projections, List<Projection> bin)", "private Projection getProjection()", "public Projection[][] getProjections(int width, int height, Projection[][] projections)", "public String toString()", "private void initNinePatchedImage(ImageData imageData, boolean hasNinePatchExtension)", "private String typeToString()", "public int getLength()", "public Tick(int tickColor)", "private static void recycleProjections(Projection[][] projections, List<Projection> bin)", "private static void recycleChunks(Chunk[][] patchChunks, List<Chunk> bin)", "public List<Tick> getHorizontalPatches()"], "prime_var_dic": {}}, {"idx": 7301, "status": "update", "global_index": 7093, "project_name": "android_", "written_on": "2016-03-30 14:08:13", "tufano_target": "private static boolean METHOD_4 ( ) { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . getBoolean ( VAR_1 , true ) ; }", "comment": "Sorry. this is not proper English. Either doesSupportMms or isMmsSupported.", "tokenized_comment": ["Sorry", ".", "<|s|>", "this", "<|s|>", "is", "<|s|>", "not", "<|s|>", "proper", "<|s|>", "English", ".", "<|s|>", "Either", "<|s|>", "does", "Support", "Mms", "<|s|>", "or", "<|s|>", "is", "Mms", "Supported", "."], "tufano_code": "private static boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . getBoolean ( VAR_1 , true ) ; }", "our_target": "    private static boolean doesSupportMMS() {\n", "our_code": "<|startfocus|>\n    private static boolean doesSupportedMMS() {\n<|endfocus|>\n        return SmsManager\n                .getDefault()\n                .getCarrierConfigValues()\n                .getBoolean(SmsManager.MMS_CONFIG_MMS_ENABLED, true);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "does", "Supported", "MMS", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "Sms", "Manager", "<|nl|>", "<|16-s|>", ".", "get", "Default", "(", ")", "<|nl|>", "<|16-s|>", ".", "get", "Carrier", "Config", "Values", "(", ")", "<|nl|>", "<|16-s|>", ".", "get", "Boolean", "(", "Sms", "Manager", ".", "MMS", "_", "CONFIG", "_", "MMS", "_", "ENABLED", ",", "<|s|>", "true", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 321, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_5465", "comment_id": "11fe01e6_bfdad307", "class_list": ["MmsTest", "SentReceiver", ""], "func_list": ["public SentReceiver()", "public void onReceive(Context context, Intent intent)", "public boolean waitForSuccess(long timeout)", "public void testSendMmsMessage()", "private static boolean writePdu(File file, byte[] pdu)", "private byte[] buildPdu(Context context, String selfNumber, String subject, String text)", "private static int addTextPart(PduBody pb, String message, boolean addTextSmil)", "private static void addSmilPart(PduBody pb, String smil)", "private static String getSimNumber(Context context)", "private static boolean shouldParseContentDisposition()", "private static boolean doesSupportedMMS()", "public SentReceiver()", "public void onReceive(Context context, Intent intent)", "public boolean waitForSuccess(long timeout)"], "prime_var_dic": {"License": 1}}, {"idx": 11617, "status": "update", "global_index": 6101, "project_name": "android_", "written_on": "2016-01-28 09:21:36", "tufano_target": "private static void METHOD_1 ( TYPE_1 context , boolean show ) { TYPE_2 intent = new TYPE_2 ( VAR_3 ) . METHOD_2 ( VAR_4 , show ) ; context . METHOD_3 ( intent ) ; }", "comment": "you can combine this with the previous line\nIntent intent = new Intent()\n                .putExtra();", "tokenized_comment": ["you", "<|s|>", "can", "<|s|>", "combine", "<|s|>", "this", "<|s|>", "with", "<|s|>", "the", "<|s|>", "previous", "<|s|>", "line", "<|nl|>", "Intent", "<|s|>", "intent", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Intent", "(", ")", "<|nl|>", "<|16-s|>", ".", "put", "Extra", "(", ");"], "tufano_code": "private static void METHOD_1 ( TYPE_1 context , boolean show ) { TYPE_2 intent = new TYPE_2 ( VAR_1 ) ; intent . METHOD_2 ( VAR_2 , show ) ; context . METHOD_3 ( intent ) ; }", "our_target": "        Intent intent = new Intent(TelecomManager.ACTION_ONGOING_CALL)\n                .putExtra(TelecomManager.EXTRA_ONGOING_CALL_SHOW, show);\n", "our_code": "    private static void moveToBackgroundNotification(Context context, boolean show) {\n<|startfocus|>\n        Intent intent = new Intent(ACTION_ONGOING_CALL);\n        intent.putExtra(EXTRA_ONGOING_CALL_SHOW, show);\n<|endfocus|>\n        context.sendBroadcast(intent);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "move", "To", "Background", "Notification", "(", "Context", "<|s|>", "context", ",", "<|s|>", "boolean", "<|s|>", "show", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Intent", "<|s|>", "intent", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Intent", "(", "ACTION", "_", "ONGOING", "_", "CALL", ");", "<|nl|>", "<|8-s|>", "intent", ".", "put", "Extra", "(", "EXTRA", "_", "ONGOING", "_", "CALL", "_", "SHOW", ",", "<|s|>", "show", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "context", ".", "send", "Broadcast", "(", "intent", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 692, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4318", "comment_id": "b4a43ebb_468feb19", "class_list": ["adds", "StatusBarNotifier"], "func_list": ["public StatusBarNotifier(Context context, ContactInfoCache contactInfoCache)", "public void onStateChange(InCallState oldState, InCallState newState, CallList callList)", "public void updateNotification(InCallState state, CallList callList)", "private void cancelNotification()", "static void clearAllCallNotifications(Context backupContext)", "private void updateInCallNotification(final InCallState state, CallList callList)", "private void showNotification(final Call call)", "public void onContactInfoComplete(String callId, ContactCacheEntry entry)", "public void onImageLoadComplete(String callId, ContactCacheEntry entry)", "private void buildAndSendNotification(Call originalCall, ContactCacheEntry contactInfo)", "private void createIncomingCallNotification(", "private boolean checkForChangeAndSaveData(int icon, String content, Bitmap largeIcon,", "private String getContentTitle(ContactCacheEntry contactInfo, Call call)", "private void addPersonReference(Notification.Builder builder, ContactCacheEntry contactInfo,", "private Bitmap getLargeIconToDisplay(ContactCacheEntry contactInfo, Call call)", "private Bitmap getRoundedIcon(Bitmap bitmap)", "private int getIconToDisplay(Call call)", "private String getContentString(Call call)", "private Call getCallToShow(CallList callList)", "private void addAnswerAction(Notification.Builder builder)", "private void addDismissAction(Notification.Builder builder)", "private void addHangupAction(Notification.Builder builder)", "private void addVideoCallAction(Notification.Builder builder)", "private void addVoiceAction(Notification.Builder builder)", "private void addAcceptUpgradeRequestAction(Notification.Builder builder)", "private void addDismissUpgradeRequestAction(Notification.Builder builder)", "private void configureFullScreenIntent(Notification.Builder builder, PendingIntent intent,", "private PendingIntent createLaunchPendingIntent()", "private static PendingIntent createNotificationPendingIntent(Context context, String action)", "public void onCallChanged(Call call)", "public void onSessionModificationStateChange(int sessionModificationState)", "public void onLastForwardedNumberChange()", "public void onChildNumberChange()", "private static void moveToBackgroundNotification(Context context, boolean show)", "public StatusBarNotifier(Context context, ContactInfoCache contactInfoCache)", "public void onStateChange(InCallState oldState, InCallState newState, CallList callList)", "public void updateNotification(InCallState state, CallList callList)", "private void cancelNotification()", "static void clearAllCallNotifications(Context backupContext)", "private void updateInCallNotification(final InCallState state, CallList callList)", "private void showNotification(final Call call)", "public void onContactInfoComplete(String callId, ContactCacheEntry entry)", "public void onImageLoadComplete(String callId, ContactCacheEntry entry)", "private void buildAndSendNotification(Call originalCall, ContactCacheEntry contactInfo)", "private void createIncomingCallNotification(", "private boolean checkForChangeAndSaveData(int icon, String content, Bitmap largeIcon,", "private String getContentTitle(ContactCacheEntry contactInfo, Call call)", "private void addPersonReference(Notification.Builder builder, ContactCacheEntry contactInfo,", "private Bitmap getLargeIconToDisplay(ContactCacheEntry contactInfo, Call call)", "private Bitmap getRoundedIcon(Bitmap bitmap)", "private int getIconToDisplay(Call call)", "private String getContentString(Call call)", "private Call getCallToShow(CallList callList)", "private void addAnswerAction(Notification.Builder builder)", "private void addDismissAction(Notification.Builder builder)", "private void addHangupAction(Notification.Builder builder)", "private void addVideoCallAction(Notification.Builder builder)", "private void addVoiceAction(Notification.Builder builder)", "private void addAcceptUpgradeRequestAction(Notification.Builder builder)", "private void addDismissUpgradeRequestAction(Notification.Builder builder)", "private void configureFullScreenIntent(Notification.Builder builder, PendingIntent intent,", "private PendingIntent createLaunchPendingIntent()", "private static PendingIntent createNotificationPendingIntent(Context context, String action)", "public void onCallChanged(Call call)", "public void onSessionModificationStateChange(int sessionModificationState)", "public void onLastForwardedNumberChange()", "public void onChildNumberChange()", "private static void moveToBackgroundNotification(Context context, boolean show)"], "prime_var_dic": {"implements": 1, "int": 3, "String": 2, "mContext": 1, "mContactInfoCache": 1, "mNotificationManager": 1, "display": 1, "as": 1, "context": 1}}, {"idx": 39358, "status": "update", "global_index": 11181, "project_name": "android_", "written_on": "2014-07-15 11:36:09", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 VAR_5 = METHOD_2 ( VAR_1 ) ; TYPE_4 < String > VAR_2 = TYPE_5 . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; }", "comment": "use Collections.singletonList()", "tokenized_comment": ["use", "<|s|>", "Collections", ".", "singleton", "List", "(", ")"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_2 < String > VAR_2 = new TYPE_2 < String > ( 1 ) ; VAR_2 . add ( VAR_3 . METHOD_3 ( ) . VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; }", "our_target": "    BaseAction.State s = setupAction(e);\n    List<String> lastTask = Collections.singletonList(s.getLastRanTask());\n    s.performTasks(lastTask);\n", "our_code": "  public void actionPerformed(AnActionEvent e) {\n<|startfocus|>\n    setupAction(e);\n    ArrayList<String> lastTask = new ArrayList<String>(1);\n    lastTask.add(myProjectStateComponent.getState().myLastRanTask);\n    myProjectStateComponent.performTasks(lastTask);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "action", "Performed", "(", "An", "Action", "Event", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "setup", "Action", "(", "e", ");", "<|nl|>", "<|4-s|>", "Array", "List", "<", "String", ">", "<|s|>", "last", "Task", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "String", ">", "(", "1", ");", "<|nl|>", "<|4-s|>", "last", "Task", ".", "add", "(", "my", "Project", "State", "Component", ".", "get", "State", "(", ")", ".", "my", "Last", "Ran", "Task", ");", "<|nl|>", "<|4-s|>", "my", "Project", "State", "Component", ".", "perform", "Tasks", "(", "last", "Task", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 30, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_926", "comment_id": "390c8c77_92113a71", "class_list": ["RunLast"], "func_list": ["public void actionPerformed(AnActionEvent e)"], "prime_var_dic": {}}, {"idx": 25283, "status": "update", "global_index": 12253, "project_name": "android_", "written_on": "2014-08-07 18:28:31", "tufano_target": "public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }", "comment": "terminate is a synchronized method, the synchronized around it is not needed.", "tokenized_comment": ["terminate", "<|s|>", "is", "<|s|>", "a", "<|s|>", "synchronized", "<|s|>", "method", ",", "<|s|>", "the", "<|s|>", "synchronized", "<|s|>", "around", "<|s|>", "it", "<|s|>", "is", "<|s|>", "not", "<|s|>", "needed", "."], "tufano_code": "public static void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( ) ; } }", "our_target": "    myDdmlib.terminate();\n", "our_code": "  public static void terminateDdmlib() {\n<|startfocus|>\n    synchronized (myDdmlib) {\n      myDdmlib.terminate();\n    }\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "terminate", "Ddmlib", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "synchronized", "<|s|>", "(", "my", "Ddmlib", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Ddmlib", ".", "terminate", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 311, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_768", "comment_id": "b6f7ab98_b126f819", "class_list": ["AndroidSdkData", "MyInitializeDdmlibTask"], "func_list": ["public static AndroidSdkData getSdkData(@NotNull File sdkLocation)", "private AndroidSdkData(@NotNull LocalSdk localSdk)", "public File getLocation()", "public String getPath()", "public BuildToolInfo getLatestBuildTool()", "public IAndroidTarget[] getTargets()", "public IAndroidTarget findTargetByName(@NotNull String name)", "public IAndroidTarget findTargetByApiLevel(@NotNull String apiLevel)", "else if (candidate == null)", "public IAndroidTarget findTargetByHashString(@NotNull String hashString)", "public int getPlatformToolsRevision()", "public int getSdkToolsRevision()", "public boolean equals(Object obj)", "public int hashCode()", "private boolean initializeDdmlib(@NotNull Project project)", "private static String combine(@NotNull String[] strs)", "private String getAdbPath()", "public static void terminateDdmlib()", "public AndroidDebugBridge getDebugBridge(@NotNull Project project)", "public LocalSdk getLocalSdk()", "public RemoteSdk getRemoteSdk()", "public SettingsController getSettingsController()", "public DeviceManager getDeviceManager()", "public AndroidTargetData getTargetData(@NotNull IAndroidTarget target)", "public MyInitializeDdmlibTask(Project project, Ddmlib ddmlib)", "public boolean isFinished()", "public boolean isCanceled()", "public void onCancel()", "public void run(@NotNull ProgressIndicator indicator)", "else if (result == 1)"], "prime_var_dic": {"click": 1}}, {"idx": 94842, "status": "update", "global_index": 1996, "project_name": "android_", "written_on": "2017-05-16 06:34:22", "tufano_target": "public VAR_1 ( TYPE_2 < TYPE_3 > VAR_3 ) { VAR_6 = VAR_3 ; VAR_7 = new TYPE_4 < > ( ) ; VAR_8 = METHOD_2 ( ) ; VAR_9 = 0 ; }", "comment": "Is there a reason why the log is the first parameter? (Here and elsewhere.) Often the recommendation is to have the most important parameters at the beginning.", "tokenized_comment": ["Is", "<|s|>", "there", "<|s|>", "a", "<|s|>", "reason", "<|s|>", "why", "<|s|>", "the", "<|s|>", "log", "<|s|>", "is", "<|s|>", "the", "<|s|>", "first", "<|s|>", "parameter", "?", "<|s|>", "(", "Here", "<|s|>", "and", "<|s|>", "elsewhere", ".", ")", "<|s|>", "Often", "<|s|>", "the", "<|s|>", "recommendation", "<|s|>", "is", "<|s|>", "to", "<|s|>", "have", "<|s|>", "the", "<|s|>", "most", "<|s|>", "important", "<|s|>", "parameters", "<|s|>", "at", "<|s|>", "the", "<|s|>", "beginning", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 < TYPE_3 > VAR_3 ) { VAR_4 = VAR_2 . METHOD_1 ( VAR_5 ) ; VAR_6 = VAR_3 ; VAR_7 = new TYPE_4 < > ( ) ; VAR_8 = METHOD_2 ( ) ; VAR_9 = 0 ; }", "our_target": "    public IPv6TetheringCoordinator(ArrayList<TetherInterfaceStateMachine> notifyList) {\n", "our_code": "<|startfocus|>\n    public IPv6TetheringCoordinator(\n            SharedLog log, ArrayList<TetherInterfaceStateMachine> notifyList) {\n        mLog = log.forSubComponent(TAG);\n<|endfocus|>\n        mNotifyList = notifyList;\n        mActiveDownstreams = new LinkedList<>();\n        mUniqueLocalPrefix = generateUniqueLocalPrefix();\n        mNextSubnetId = 0;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "IPv", "6", "Tethering", "Coordinator", "(", "<|nl|>", "<|12-s|>", "Shared", "Log", "<|s|>", "log", ",", "<|s|>", "Array", "List", "<", "Tether", "Interface", "State", "Machine", ">", "<|s|>", "notify", "List", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Log", "<|s|>", "=", "<|s|>", "log", ".", "for", "Sub", "Component", "(", "TAG", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Notify", "List", "<|s|>", "=", "<|s|>", "notify", "List", ";", "<|nl|>", "<|8-s|>", "m", "Active", "Downstreams", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Linked", "List", "<", ">", "(", ");", "<|nl|>", "<|8-s|>", "m", "Unique", "Local", "Prefix", "<|s|>", "=", "<|s|>", "generate", "Unique", "Local", "Prefix", "(", ");", "<|nl|>", "<|8-s|>", "m", "Next", "Subnet", "Id", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 80, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_4093", "comment_id": "c69fdfea_bbac1716", "class_list": ["IPv6TetheringCoordinator", "Downstream"], "func_list": ["public IPv6TetheringCoordinator(", "public void addActiveDownstream(TetherInterfaceStateMachine downstream, int mode)", "public void removeActiveDownstream(TetherInterfaceStateMachine downstream)", "public void updateUpstreamNetworkState(NetworkState ns)", "private void stopIPv6TetheringOnAllInterfaces()", "private void setUpstreamNetworkState(NetworkState ns)", "private void updateIPv6TetheringInterfaces()", "private LinkProperties getInterfaceIPv6LinkProperties(TetherInterfaceStateMachine sm)", "Downstream findDownstream(TetherInterfaceStateMachine tism)", "private static boolean canTetherIPv6(NetworkState ns, SharedLog sharedLog)", "private static LinkProperties getIPv6OnlyLinkProperties(LinkProperties lp)", "private static boolean isIPv6GlobalAddress(InetAddress ip)", "private static LinkProperties getUniqueLocalConfig(byte[] ulp, short subnetId)", "private static IpPrefix makeUniqueLocalPrefix(byte[] in6addr, short subnetId, int prefixlen)", "private static byte[] generateUniqueLocalPrefix()", "private static String toDebugString(NetworkState ns)", "private void stopIPv6TetheringOnAllInterfaces()"], "prime_var_dic": {"Downstream": 1, "tism": 1, "mode": 1, "subnetId": 1}}, {"idx": 82544, "status": "update", "global_index": 14751, "project_name": "android_", "written_on": "2014-04-15 18:52:08", "tufano_target": "public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { if ( VAR_3 ) { VAR_4 . METHOD_2 ( STRING_1 + TYPE_1 . toString ( VAR_5 , INT_1 ) + STRING_3 ) ; } this . VAR_6 = true ; }", "comment": "handshakeCompleted -> onSSLStateChange \n\nplus add logging of type and val?", "tokenized_comment": ["handshake", "Completed", "<|s|>", "->", "<|s|>", "on", "SSLState", "Change", "<|s|>", "<|nl|>", "<|nl|>", "plus", "<|s|>", "add", "<|s|>", "logging", "<|s|>", "of", "<|s|>", "type", "<|s|>", "and", "<|s|>", "val", "?"], "tufano_code": "public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { if ( VAR_3 ) { VAR_4 . METHOD_2 ( STRING_1 + TYPE_1 . toString ( VAR_5 , INT_1 ) + STRING_2 ) ; } this . VAR_6 = true ; }", "our_target": "                                   + \" onSSLStateChange\");\n", "our_code": "        public void onSSLStateChange(long sslSessionNativePtr, int type, int val) {\n            if (DEBUG) {\n                System.out.println(\"ssl=0x\" + Long.toString(sslNativePointer, 16)\n<|startfocus|>\n                                   + \" handshakeCompleted\");\n<|endfocus|>\n            }\n            this.handshakeCompletedCalled = true;\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "on", "SSLState", "Change", "(", "long", "<|s|>", "ssl", "Session", "Native", "Ptr", ",", "<|s|>", "int", "<|s|>", "type", ",", "<|s|>", "int", "<|s|>", "val", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "DEBUG", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "System", ".", "out", ".", "println", "(", "\"", "ssl", "=", "0", "x", "\"", "<|s|>", "+", "<|s|>", "Long", ".", "to", "String", "(", "ssl", "Native", "Pointer", ",", "<|s|>", "16", ")", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|2-s|>", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "handshake", "Completed", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "this", ".", "handshake", "Completed", "Called", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 736, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_4789", "comment_id": "198c23b9_c69d330f", "class_list": ["NativeCryptoTest", "Hooks", "TestSSLHandshakeCallbacks", "ServerHooks", "!="], "func_list": ["private static OpenSSLKey getServerPrivateKey()", "private static long[] getServerCertificates()", "private static OpenSSLKey getClientPrivateKey()", "private static long[] getClientCertificates()", "private static byte[][] getCaPrincipals()", "private static long[] getCertificateReferences(OpenSSLX509Certificate[] certs)", "public static void assertEqualSessions(long expected, long actual)", "public static void assertEqualByteArrays(byte[] expected, byte[] actual)", "public static void assertEqualPrincipals(byte[][] expected, byte[][] actual)", "public static void assertEqualCertificateChains(long[] expected, long[] actual)", "public void clientCertificateRequested(long s) }", "public TestSSLHandshakeCallbacks(Socket socket,", "public void onSSLStateChange(long sslSessionNativePtr, int type, int val)", "public Socket getSocket()", "public ServerHooks(OpenSSLKey privateKey, long[] certificates)", "public static Future<TestSSLHandshakeCallbacks> handshake(final ServerSocket listener,", "new Thread()", "public void run()", "public void test_X509_NAME_hashes()", "public void clientCertificateRequested(long s) }", "public ServerHooks(OpenSSLKey privateKey, long[] certificates)", "public void clientCertificateRequested(long s)"], "prime_var_dic": {}}, {"idx": 73726, "status": "update", "global_index": 9596, "project_name": "android_", "written_on": "2015-11-06 14:25:12", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 class ; VAR_1 . METHOD_2 ( VAR_3 class , VAR_4 class ) ; }", "comment": "Normally I would fail() here or just declare the throws Exception on the test method.", "tokenized_comment": ["Normally", "<|s|>", "I", "<|s|>", "would", "<|s|>", "fail", "(", ")", "<|s|>", "here", "<|s|>", "or", "<|s|>", "just", "<|s|>", "declare", "<|s|>", "the", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "on", "<|s|>", "the", "<|s|>", "test", "<|s|>", "method", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 class ; try { VAR_1 . METHOD_2 ( VAR_3 class , VAR_4 class ) ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }", "our_target": "        // This will succeed if the constructor is declared in NoClassDefFoundError.\n        klass.getDeclaredConstructor(String.class, Throwable.class);\n", "our_code": "    public void test_NoClassDefFoundError_constructor_with_cause() {\n        Class<NoClassDefFoundError> klass = NoClassDefFoundError.class;\n<|startfocus|>\n        try {\n            klass.getDeclaredConstructor(String.class, Throwable.class);\n        } catch (Exception exc) {\n            throw new RuntimeException(exc);\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "No", "Class", "Def", "Found", "Error", "_", "constructor", "_", "with", "_", "cause", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Class", "<", "No", "Class", "Def", "Found", "Error", ">", "<|s|>", "klass", "<|s|>", "=", "<|s|>", "No", "Class", "Def", "Found", "Error", ".", "class", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "klass", ".", "get", "Declared", "Constructor", "(", "String", ".", "class", ",", "<|s|>", "Throwable", ".", "class", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "exc", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "exc", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 26, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3193", "comment_id": "d60ff2af_aa476ff7", "class_list": ["NoClassDefFoundErrorTest"], "func_list": ["public void test_NoClassDefFoundError_constructor_with_cause()"], "prime_var_dic": {}}, {"idx": 11159, "status": "update", "global_index": 12088, "project_name": "android_", "written_on": "2014-08-05 03:13:41", "tufano_target": "public TYPE_1 METHOD_2 ( final String text ) { TYPE_2 VAR_1 = METHOD_1 ( ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( text ) ; } return this ; }", "comment": "nit: I like \"enterText\" a little better. It expresses that it is an action to be performed. \"type\" can be confused with a noun, instead of verb. Up to you.", "tokenized_comment": ["nit", ":", "<|s|>", "I", "<|s|>", "like", "<|s|>", "\"", "enter", "Text", "\"", "<|s|>", "a", "<|s|>", "little", "<|s|>", "better", ".", "<|s|>", "It", "<|s|>", "expresses", "<|s|>", "that", "<|s|>", "it", "<|s|>", "is", "<|s|>", "an", "<|s|>", "action", "<|s|>", "to", "<|s|>", "be", "<|s|>", "performed", ".", "<|s|>", "\"", "type", "\"", "<|s|>", "can", "<|s|>", "be", "<|s|>", "confused", "<|s|>", "with", "<|s|>", "a", "<|s|>", "noun", ",", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "verb", ".", "<|s|>", "Up", "<|s|>", "to", "<|s|>", "you", "."], "tufano_code": "public TYPE_1 type ( final String text ) { TYPE_2 VAR_1 = METHOD_1 ( ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( text ) ; } return this ; }", "our_target": "  public EditorFixture enterText(@NotNull final String text) {\n", "our_code": "<|startfocus|>\n  public EditorFixture type(@NotNull final String text) {\n<|endfocus|>\n    Component component = getFocusedEditor();\n    if (component != null) {\n      robot.enterText(text);\n    }\n\n    return this;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Editor", "Fixture", "<|s|>", "type", "(", "@", "Not", "Null", "<|s|>", "final", "<|s|>", "String", "<|s|>", "text", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Component", "<|s|>", "component", "<|s|>", "=", "<|s|>", "get", "Focused", "Editor", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "component", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "robot", ".", "enter", "Text", "(", "text", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 310, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_32", "comment_id": "16431782_41a7f4ab", "class_list": ["EditorFixture"], "func_list": ["public EditorFixture(Robot robot, IdeFrameFixture frame)", "public VirtualFile getCurrentFile()", "public String getCurrentFileName()", "public int getCurrentLineNumber()", "public String getCurrentLineContents(boolean trim, boolean showPositions, int additionalLines)", "public String getCurrentFileContents(boolean showPositions)", "public EditorFixture type(@NotNull final String text)", "public EditorFixture typeKey(int keyCode)", "public EditorFixture pressKey(int keyCode)", "public EditorFixture releaseKey(int keyCode)", "public EditorFixture requestFocus()", "private JComponent getFocusedEditor()", "public EditorFixture moveTo(final int offset)", "public EditorFixture select(final int firstOffset, final int secondOffset)", "public int findOffset(@Nullable final String prefix,  @Nullable final String suffix, final boolean searchFromTop)", "public EditorFixture close()", "public EditorFixture selectEditorTab(@NotNull final String tabName)", "public EditorFixture open(@NotNull final VirtualFile file, @NotNull final Tab tab)", "public boolean test()", "public EditorFixture invokeAction(@NotNull EditorAction action)", "protected boolean isMatching(JDialog dialog)", "private void invokeActionViaKeystroke(@NotNull String actionId)"], "prime_var_dic": {"String": 3, "robot": 1, "myFrame": 1, "key": 1, "the": 1, "character": 1, "firstOffset": 1, "editor": 1, "opened": 1}}, {"idx": 93287, "status": "update", "global_index": 19747, "project_name": "android_", "written_on": "2012-09-07 16:36:07", "tufano_target": "public void METHOD_1 ( String VAR_1 , String VAR_2 , TYPE_1 VAR_3 ) { synchronized ( VAR_4 ) { if ( VAR_5 ) METHOD_2 ( STRING_3 ) ; VAR_6 . METHOD_3 ( VAR_1 , VAR_2 , VAR_7 , VAR_3 ) ; } }", "comment": "Change to:\n  log(\"changeIccFdnPassword\");", "tokenized_comment": ["Change", "<|s|>", "to", ":", "<|nl|>", "<|2-s|>", "log", "(", "\"", "change", "Icc", "Fdn", "Password", "\"", ");"], "tufano_code": "public void METHOD_1 ( String VAR_1 , String VAR_2 , TYPE_1 VAR_3 ) { synchronized ( VAR_4 ) { if ( VAR_5 ) METHOD_2 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; VAR_6 . METHOD_3 ( VAR_1 , VAR_2 , VAR_7 , VAR_3 ) ; } }", "our_target": "            if (DBG) log(\"changeIccFdnPassword\");\n", "our_code": "    public void changeIccFdnPassword(String oldPassword, String newPassword,\n            Message onComplete) {\n        synchronized (mLock) {\n<|startfocus|>\n            if (DBG) log(\"Change Pin2 old: \" + oldPassword + \" new: \" + newPassword);\n<|endfocus|>\n            mCi.changeIccPin2ForApp(oldPassword, newPassword, mAid,\n                    onComplete);\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "change", "Icc", "Fdn", "Password", "(", "String", "<|s|>", "old", "Password", ",", "<|s|>", "String", "<|s|>", "new", "Password", ",", "<|nl|>", "<|12-s|>", "Message", "<|s|>", "on", "Complete", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "DBG", ")", "<|s|>", "log", "(", "\"", "Change", "<|s|>", "Pin", "2", "<|s|>", "old", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "old", "Password", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "new", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "new", "Password", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "m", "Ci", ".", "change", "Icc", "Pin", "2", "For", "App", "(", "old", "Password", ",", "<|s|>", "new", "Password", ",", "<|s|>", "m", "Aid", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "on", "Complete", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 686, "base_patch_number": 21, "changed_patch_number": 22, "code_file_name": "android_4710", "comment_id": "AAAI9H%2F%2F%2Flo%3D", "class_list": ["UiccCardApplication"], "func_list": ["void update (IccCardApplicationStatus as, Context c, CommandsInterface ci)", "void dispose()", "private IccRecords createIccRecords(AppType type, Context c, CommandsInterface ci)", "private IccFileHandler createIccFileHandler(AppType type)", "private void queryFdn()", "private void onQueryFdnEnabled(AsyncResult ar)", "private void onChangeFdnDone(AsyncResult ar)", "private void queryPin1State()", "private void onQueryFacilityLock(AsyncResult ar)", "private void onChangeFacilityLock(AsyncResult ar)", "public void handleMessage(Message msg)", "public void registerForReady(Handler h, int what, Object obj)", "public void unregisterForReady(Handler h)", "public void registerForLocked(Handler h, int what, Object obj)", "public void unregisterForLocked(Handler h)", "public void registerForNetworkLocked(Handler h, int what, Object obj)", "public void unregisterForNetworkLocked(Handler h)", "private void notifyReadyRegistrantsIfNeeded(Registrant r)", "private void notifyPinLockedRegistrantsIfNeeded(Registrant r)", "private void notifyNetworkLockedRegistrantsIfNeeded(Registrant r)", "public AppState getState()", "public AppType getType()", "public PersoSubState getPersoSubState()", "public String getAid()", "public PinState getPin1State()", "public IccFileHandler getIccFileHandler()", "public IccRecords getIccRecords()", "public void supplyPin (String pin, Message onComplete)", "public void supplyPuk (String puk, String newPin, Message onComplete)", "public void supplyPin2 (String pin2, Message onComplete)", "public void supplyPuk2 (String puk2, String newPin2, Message onComplete)", "public void supplyNetworkDepersonalization (String pin, Message onComplete)", "public boolean getIccLockEnabled()", "public boolean getIccFdnEnabled()", "public void setIccLockEnabled (boolean enabled,", "public void setIccFdnEnabled (boolean enabled,", "public void changeIccLockPassword(String oldPassword, String newPassword,", "public void changeIccFdnPassword(String oldPassword, String newPassword,", "private void log(String msg)", "private void loge(String msg)"], "prime_var_dic": {"String": 1, "boolean": 1, "int": 4, "held": 1, "an": 5, "locked": 1, "fdn": 1}}, {"idx": 12768, "status": "update", "global_index": 11083, "project_name": "android_", "written_on": "2015-06-15 16:14:36", "tufano_target": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 instanceof TYPE_2 || METHOD_2 ( VAR_1 ) ; }", "comment": "@NotNull/@Nullable missing", "tokenized_comment": ["@", "Not", "Null", "/", "@", "Nullable", "<|s|>", "missing"], "tufano_code": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 instanceof TYPE_2 || METHOD_2 ( VAR_1 ) ; }", "our_target": "  private static boolean configurationTypeIsSupported(@NotNull RunConfiguration runConfiguration) {\n", "our_code": "<|startfocus|>\n  private static boolean configurationTypeIsSupported(RunConfiguration runConfiguration) {\n<|endfocus|>\n    return runConfiguration instanceof AndroidRunConfigurationBase || isUnitTestConfiguration(runConfiguration);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "configuration", "Type", "Is", "Supported", "(", "Run", "Configuration", "<|s|>", "run", "Configuration", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "run", "Configuration", "<|s|>", "instanceof", "<|s|>", "Android", "Run", "Configuration", "Base", "<|s|>", "||", "<|s|>", "is", "Unit", "Test", "Configuration", "(", "run", "Configuration", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 129, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_405", "comment_id": "b98a589d_06dd6051", "class_list": ["MakeBeforeRunTaskProvider"], "func_list": ["public MakeBeforeRunTaskProvider(@NotNull Project project)", "public Key<MakeBeforeRunTask> getId()", "public Icon getIcon()", "public Icon getTaskIcon(MakeBeforeRunTask task)", "public String getName()", "public String getDescription(MakeBeforeRunTask task)", "public boolean isConfigurable()", "public MakeBeforeRunTask createTask(RunConfiguration runConfiguration)", "private static boolean configurationTypeIsSupported(RunConfiguration runConfiguration)", "private static boolean isUnitTestConfiguration(RunConfiguration runConfiguration)", "public boolean configureTask(RunConfiguration runConfiguration, MakeBeforeRunTask task)", "private List<String> createAvailableTasks()", "public boolean canExecuteTask(RunConfiguration configuration, MakeBeforeRunTask task)", "public boolean executeTask(final DataContext context,", "public void syncFailed(@NotNull Project project, @NotNull String errorMessage)", "public void execute(@NotNull GradleInvocationResult result)", "public void run()", "private Module[] getAffectedModules(Module[] modules)", "private static TestCompileType getTestCompileType(@Nullable RunConfiguration runConfiguration)"], "prime_var_dic": {"Project": 1}}, {"idx": 68517, "status": "update", "global_index": 12603, "project_name": "android_", "written_on": "2014-09-09 16:00:26", "tufano_target": "public String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( ) . getName ( VAR_1 ) + STRING_4 + METHOD_3 ( VAR_1 . getClass ( ) ) + STRING_5 + METHOD_3 ( VAR_2 ) ; }", "comment": "xxx was found as an yyy instead of a zzz", "tokenized_comment": ["xxx", "<|s|>", "was", "<|s|>", "found", "<|s|>", "as", "<|s|>", "an", "<|s|>", "yyy", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "a", "<|s|>", "zzz"], "tufano_code": "public String METHOD_1 ( ) { return STRING_1 + TYPE_1 . METHOD_2 ( ) . getName ( VAR_1 ) + STRING_2 + METHOD_3 ( VAR_1 . getClass ( ) ) + STRING_3 + METHOD_3 ( VAR_2 ) ; }", "our_target": "    return Jack.getUserFriendlyFormatter().getName(found) +\n        \" found as \" + getTypeKind(found.getClass()) +\n        \" instead of \" + getTypeKind(expectedClass);\n", "our_code": "  public String getMessage() {\n<|startfocus|>\n    return \"Failed to lookup type \" + Jack.getUserFriendlyFormatter().getName(found) +\n        \". A type of this name was found but it's a \" + getTypeKind(found.getClass()) +\n        \" while it was expected to be \" + getTypeKind(expectedClass);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Message", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "\"", "Failed", "<|s|>", "to", "<|s|>", "lookup", "<|s|>", "type", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "Jack", ".", "get", "User", "Friendly", "Formatter", "(", ")", ".", "get", "Name", "(", "found", ")", "<|s|>", "+", "<|nl|>", "<|8-s|>", "\"", ".", "<|s|>", "A", "<|s|>", "type", "<|s|>", "of", "<|s|>", "this", "<|s|>", "name", "<|s|>", "was", "<|s|>", "found", "<|s|>", "but", "<|s|>", "it", "'", "s", "<|s|>", "a", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "get", "Type", "Kind", "(", "found", ".", "get", "Class", "(", ")", ")", "<|s|>", "+", "<|nl|>", "<|8-s|>", "\"", "<|s|>", "while", "<|s|>", "it", "<|s|>", "was", "<|s|>", "expected", "<|s|>", "to", "<|s|>", "be", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "get", "Type", "Kind", "(", "expected", "Class", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 56, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2284", "comment_id": "f0aa0b52_5496fafc", "class_list": ["IncompatibleJTypeLookupException"], "func_list": ["public IncompatibleJTypeLookupException(", "public String getMessage()", "private static String getTypeKind(@Nonnull Class<? extends JType> typeClass)"], "prime_var_dic": {"long": 1, "found": 1}}, {"idx": 95557, "status": "update", "global_index": 11750, "project_name": "android_", "written_on": "2014-07-14 18:06:05", "tufano_target": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . assertEquals ( STRING_1 , event . values [ 0 ] , FLOAT_1 ) ; VAR_1 . add ( METHOD_2 ( VAR_2 ) ) ; }", "comment": "assertEquals?", "tokenized_comment": ["assert", "Equals", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . assertTrue ( STRING_1 , event . values [ 0 ] == FLOAT_1 ) ; VAR_1 . add ( METHOD_2 ( VAR_2 ) ) ; }", "our_target": "        Assert.assertEquals(\"Incorrect value[0] in step detector event\", event.values[0], 1.0f);\n", "our_code": "    public void onStepDetectorChanged(SensorEvent event) {\n<|startfocus|>\n        Assert.assertTrue(\"Incorrect value[0] in step detector event\", event.values[0] == 1.0f);\n<|endfocus|>\n        mTimestampsStepDetector.add(checkTimestamp(event.timestamp));\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Step", "Detector", "Changed", "(", "Sensor", "Event", "<|s|>", "event", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Assert", ".", "assert", "True", "(", "\"", "Incorrect", "<|s|>", "value", "[", "0", "]", "<|s|>", "in", "<|s|>", "step", "<|s|>", "detector", "<|s|>", "event", "\"", ",", "<|s|>", "event", ".", "values", "[", "0", "]", "<|s|>", "==", "<|s|>", "1", ".", "0", "f", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Timestamps", "Step", "Detector", ".", "add", "(", "check", "Timestamp", "(", "event", ".", "timestamp", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 269, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_893", "comment_id": "f9683404_154c1401", "class_list": ["StepCounterTestActivity"], "func_list": ["public void onClick(View v)", "public long checkTimestamp(long event_timestamp)", "public void onStepCounterChanged(SensorEvent event)", "public void onStepDetectorChanged(SensorEvent event)", "public void beep(int tone)", "public void vibrate()", "protected boolean compareTimestamps()", "public void onAccelerometerChanged(SensorEvent event)", "protected void onResume()", "protected void onPause()"], "prime_var_dic": {"sec": 1, "mAccelerationThresholdForMoveDetection": 1, "numPassedTests": 1, "count": 1, "expected": 2, "detection": 1}}, {"idx": 95223, "status": "update", "global_index": 5546, "project_name": "android_", "written_on": "2016-10-17 15:30:21", "tufano_target": "public VAR_1 ( ) { super ( VAR_2 , STRING_3 , INT_1 , VAR_3 , STRING_2 ) ; }", "comment": "Wrong name", "tokenized_comment": ["Wrong", "<|s|>", "name"], "tufano_code": "public VAR_1 ( ) { super ( VAR_2 , STRING_1 , INT_1 , VAR_3 , STRING_2 ) ; }", "our_target": "                    \"HmacSHA256\",\n", "our_code": "        public PBEWithHmacSHA256AES128AlgorithmParameters() {\n            super(PKCSObjectIdentifiers.id_hmacWithSHA256,\n<|startfocus|>\n                    \"HmacSHA224\",\n<|endfocus|>\n                    16, /* keySize */\n                    NISTObjectIdentifiers.id_aes128_CBC,\n                    \"AES128\");\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "PBEWith", "Hmac", "SHA", "256", "AES", "128", "Algorithm", "Parameters", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "super", "(", "PKCSObject", "Identifiers", ".", "id", "_", "hmac", "With", "SHA", "256", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "Hmac", "SHA", "224", "\"", ",", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "16", ",", "<|s|>", "/*", "<|s|>", "key", "Size", "<|s|>", "*/", "<|nl|>", "<|16-s|>", "<|4-s|>", "NISTObject", "Identifiers", ".", "id", "_", "aes", "128", "_", "CBC", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "AES", "128", "\"", ");", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 196, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_943", "comment_id": "7cdd769f_6c055322", "class_list": ["PBES2AlgorithmParameters", "BasePBEWithHmacAlgorithmParameters", "PBEWithHmacSHA1AES128AlgorithmParameters", "PBEWithHmacSHA224AES128AlgorithmParameters", "PBEWithHmacSHA256AES128AlgorithmParameters", "PBEWithHmacSHA384AES128AlgorithmParameters", "PBEWithHmacSHA512AES128AlgorithmParameters", "PBEWithHmacSHA1AES256AlgorithmParameters", "PBEWithHmacSHA224AES256AlgorithmParameters", "PBEWithHmacSHA256AES256AlgorithmParameters", "PBEWithHmacSHA384AES256AlgorithmParameters", "PBEWithHmacSHA512AES256AlgorithmParameters", "Mappings"], "func_list": ["private BasePBEWithHmacAlgorithmParameters(", "public PBEWithHmacSHA1AES128AlgorithmParameters()", "public PBEWithHmacSHA224AES128AlgorithmParameters()", "public PBEWithHmacSHA256AES128AlgorithmParameters()", "public PBEWithHmacSHA384AES128AlgorithmParameters()", "public PBEWithHmacSHA512AES128AlgorithmParameters()", "public PBEWithHmacSHA1AES256AlgorithmParameters()", "public PBEWithHmacSHA224AES256AlgorithmParameters()", "public PBEWithHmacSHA256AES256AlgorithmParameters()", "public PBEWithHmacSHA384AES256AlgorithmParameters()", "public PBEWithHmacSHA512AES256AlgorithmParameters()", "private BasePBEWithHmacAlgorithmParameters(", "public PBEWithHmacSHA1AES128AlgorithmParameters()", "public PBEWithHmacSHA224AES128AlgorithmParameters()", "public PBEWithHmacSHA256AES128AlgorithmParameters()", "public PBEWithHmacSHA384AES128AlgorithmParameters()", "public PBEWithHmacSHA512AES128AlgorithmParameters()", "public PBEWithHmacSHA1AES256AlgorithmParameters()", "public PBEWithHmacSHA224AES256AlgorithmParameters()", "public PBEWithHmacSHA256AES256AlgorithmParameters()", "public PBEWithHmacSHA384AES256AlgorithmParameters()", "public PBEWithHmacSHA512AES256AlgorithmParameters()"], "prime_var_dic": {"Mappings": 1}}, {"idx": 60599, "status": "update", "global_index": 4447, "project_name": "android_", "written_on": "2016-11-09 10:10:12", "tufano_target": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_1 ) ) ; VAR_5 . METHOD_3 ( ) ; return true ; }", "comment": "call abortEventually directly?", "tokenized_comment": ["call", "<|s|>", "abort", "Eventually", "<|s|>", "directly", "?"], "tufano_code": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_1 ) ) ; VAR_4 = true ; return true ; }", "our_target": "      session.abortEventually();\n", "our_code": "    public boolean visit(@Nonnull JPolymorphicMethodCall polymorphicMethodCall) {\n      reporter.report(Severity.NON_FATAL, new InvokePolymorphicReportable(polymorphicMethodCall));\n<|startfocus|>\n      haserror = true;\n<|endfocus|>\n      return true;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "visit", "(", "@", "Nonnull", "<|s|>", "JPolymorphic", "Method", "Call", "<|s|>", "polymorphic", "Method", "Call", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "reporter", ".", "report", "(", "Severity", ".", "NON", "_", "FATAL", ",", "<|s|>", "new", "<|s|>", "Invoke", "Polymorphic", "Reportable", "(", "polymorphic", "Method", "Call", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "haserror", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 99, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2220", "comment_id": "2b19f7c0_683f7bcd", "class_list": ["AndroidCompatibilityChecker", "UsedInvokePolymorphicVisitor", "SerializableLambdaVisitor"], "func_list": ["public boolean visit(@Nonnull JPolymorphicMethodCall polymorphicMethodCall)", "public void run(@Nonnull JMethod m)", "public boolean visit(@Nonnull JPolymorphicMethodCall polymorphicMethodCall)", "public boolean visit(@Nonnull JLambda lambda)"], "prime_var_dic": {}}, {"idx": 28883, "status": "update", "global_index": 4172, "project_name": "android_", "written_on": "2016-09-15 22:34:17", "tufano_target": "public void METHOD_1 ( String VAR_1 , int status ) { METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . status = status ; } }", "comment": "and here", "tokenized_comment": ["and", "<|s|>", "here"], "tufano_code": "public void METHOD_1 ( String VAR_1 , int status ) { METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 != null ) { synchronized ( VAR_3 ) { VAR_2 . status = status ; } } }", "our_target": "            d.status = status;\n", "our_code": "    public void updateStatus(String deviceAddress, int status) {\n        validateDeviceAddress(deviceAddress);\n        WifiP2pDevice d = getKey(deviceAddress);\n        if (d != null) {\n<|startfocus|>\n            synchronized (mDeviceMapLock) {\n                d.status = status;\n            }\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "update", "Status", "(", "String", "<|s|>", "device", "Address", ",", "<|s|>", "int", "<|s|>", "status", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "validate", "Device", "Address", "(", "device", "Address", ");", "<|nl|>", "<|8-s|>", "Wifi", "P", "2", "p", "Device", "<|s|>", "d", "<|s|>", "=", "<|s|>", "get", "Key", "(", "device", "Address", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "d", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "synchronized", "<|s|>", "(", "m", "Device", "Map", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "d", ".", "status", "<|s|>", "=", "<|s|>", "status", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 165, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_5680", "comment_id": "cb1db24e_b95da34b", "class_list": ["representing", "WifiP2pDeviceList"], "func_list": ["public WifiP2pDeviceList()", "private void putKey(String address, WifiP2pDevice device)", "private WifiP2pDevice getKey(String address)", "private WifiP2pDevice removeKey(String address)", "private void validateDevice(WifiP2pDevice device)", "private void validateDeviceAddress(String deviceAddress)", "public boolean clear()", "public void update(WifiP2pDevice device)", "public void updateSupplicantDetails(WifiP2pDevice device)", "public void updateGroupCapability(String deviceAddress, int groupCapab)", "public void updateStatus(String deviceAddress, int status)", "private WifiP2pDevice getKey(String address)", "public boolean remove(WifiP2pDevice device)", "private WifiP2pDevice removeKey(String address)", "public Collection<WifiP2pDevice> getDeviceList()", "public boolean isGroupOwner(String deviceAddress)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public WifiP2pDeviceList createFromParcel(Parcel in)", "public WifiP2pDeviceList[] newArray(int size)"], "prime_var_dic": {"implements": 1, "be": 1, "of": 1, "interface": 3, "Creator": 1}}, {"idx": 19545, "status": "update", "global_index": 10231, "project_name": "android_", "written_on": "2015-04-21 22:44:04", "tufano_target": "public VAR_1 ( String filename ) { type = VAR_2 ; this . filename = filename ; }", "comment": "@NonNull, likewise below", "tokenized_comment": ["@", "Non", "Null", ",", "<|s|>", "likewise", "<|s|>", "below"], "tufano_code": "public VAR_1 ( String filename ) { type = VAR_2 ; this . filename = filename ; }", "our_target": "        public HprofData(@NonNull String filename) {\n", "our_code": "<|startfocus|>\n        public HprofData(String filename) {\n<|endfocus|>\n            type = Type.FILE;\n            this.filename = filename;\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "public", "<|s|>", "Hprof", "Data", "(", "String", "<|s|>", "filename", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "type", "<|s|>", "=", "<|s|>", "Type", ".", "FILE", ";", "<|nl|>", "<|12-s|>", "this", ".", "filename", "<|s|>", "=", "<|s|>", "filename", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 344, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1619", "comment_id": "302afabf_dc358487", "class_list": ["ClientData", "HeapData", "HeapInfo", "HprofData"], "func_list": ["public boolean isHeapDataComplete()", "public Collection<HeapSegment> getHeapSegments()", "public void setProcessedHeapData(byte[] heapData)", "public byte[] getProcessedHeapData()", "public void setProcessedHeapMap(Map<Integer, ArrayList<HeapSegmentElement>> heapMap)", "public HeapInfo(long maxSizeInBytes,", "public HprofData(String filename)", "public void setHprofData(byte[] data)", "public void clearHprofData()", "public HprofData getHprofData()", "public static void setHprofDumpHandler(IHprofDumpHandler handler)", "static IHprofDumpHandler getHprofDumpHandler()", "public static void setMethodProfilingHandler(IMethodProfilingHandler handler)", "static IMethodProfilingHandler getMethodProfilingHandler()", "public static void setAllocationTrackingHandler(@NonNull IAllocationTrackingHandler handler)", "static IAllocationTrackingHandler getAllocationTrackingHandler()", "public boolean isDdmAware()", "void isDdmAware(boolean aware)", "public int getPid()", "public String getVmIdentifier()", "void setVmIdentifier(String ident)", "public String getClientDescription()", "public int getUserId()", "public boolean isValidUserId()", "public String getAbi()", "public String getJvmFlags()", "void setClientDescription(String description)", "void setUserId(int id)", "void setAbi(String abi)", "void setJvmFlags(String jvmFlags)", "public DebuggerStatus getDebuggerConnectionStatus()", "void setDebuggerConnectionStatus(DebuggerStatus status)", "public HeapData getVmHeapData()", "HeapData getNativeHeapData()", "void addFeature(String feature)", "public boolean hasFeature(String feature)", "void setPendingHprofDump(String pendingHprofDump)", "String getPendingHprofDump()", "public boolean hasPendingHprofDump()", "void setPendingMethodProfiling(String pendingMethodProfiling)", "String getPendingMethodProfiling()"], "prime_var_dic": {"list": 1}}, {"idx": 59169, "status": "insert", "global_index": 6627, "project_name": "android_", "written_on": "2016-05-26 02:41:00", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 . get ( ) ) ; VAR_3 . set ( null ) ; } super . METHOD_1 ( ) ; }", "comment": "should we only call this if mBluetoothPan.get() is non-null?", "tokenized_comment": ["should", "<|s|>", "we", "<|s|>", "only", "<|s|>", "call", "<|s|>", "this", "<|s|>", "if", "<|s|>", "m", "Bluetooth", "Pan", ".", "get", "(", ")", "<|s|>", "is", "<|s|>", "non", "-", "null", "?"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 . get ( ) ) ; } super . METHOD_1 ( ) ; }", "our_target": "            adapter.closeProfileProxy(BluetoothProfile.PAN, mBluetoothPan.get());\n            mBluetoothPan.set(null);\n", "our_code": "    public void onDestroy() {\n        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();\n        if (adapter != null) {\n<|startfocus|>\n            adapter.closeProfileProxy(BluetoothProfile.PAN, mBluetoothPan.get());\n<|endfocus|>\n        }\n        super.onDestroy();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Destroy", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Bluetooth", "Adapter", "<|s|>", "adapter", "<|s|>", "=", "<|s|>", "Bluetooth", "Adapter", ".", "get", "Default", "Adapter", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "adapter", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "adapter", ".", "close", "Profile", "Proxy", "(", "Bluetooth", "Profile", ".", "PAN", ",", "<|s|>", "m", "Bluetooth", "Pan", ".", "get", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "super", ".", "on", "Destroy", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 189, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4481", "comment_id": "9c0f6fb1_87d7f9d3", "class_list": ["TetherSettings", "name", "TetherChangeReceiver"], "func_list": ["protected int getMetricsCategory()", "public void onCreate(Bundle icicle)", "public void onDestroy()", "public void onSaveInstanceState(Bundle savedInstanceState)", "private void initWifiTethering()", "public void onServiceConnected(int profile, BluetoothProfile proxy)", "public void onServiceDisconnected(int profile)", "public Dialog onCreateDialog(int id)", "public void onReceive(Context content, Intent intent)", "public void onStart()", "public void onStop()", "private void updateState()", "private void updateUsbState(String[] available, String[] tethered,", "private void updateBluetoothState(String[] available, String[] tethered,", "public boolean onPreferenceChange(Preference preference, Object value)", "public static boolean isProvisioningNeededButUnavailable(Context context)", "private static boolean isIntentAvailable(Context context)", "private void startProvisioningIfNecessary(int choice)", "public void onActivityResult(int requestCode, int resultCode, Intent intent)", "private void startTethering()", "private void setUsbTethering(boolean enabled)", "public boolean onPreferenceTreeClick(PreferenceScreen screen, Preference preference)", "private static String findIface(String[] ifaces, String[] regexes)", "public void onClick(DialogInterface dialogInterface, int button)", "public int getHelpResource()", "protected int getMetricsCategory()", "protected int getMetricsCategory()"], "prime_var_dic": {"String": 1, "int": 2, "or": 1}}, {"idx": 90676, "status": "update", "global_index": 18772, "project_name": "android_", "written_on": "2010-08-28 00:16:07", "tufano_target": "<ERROR>", "comment": "hmm what's this about? There are API differences between the 2.\n\nsee http://developer.android.com/sdk/api_diff/6/changes.html", "tokenized_comment": ["hmm", "<|s|>", "what", "'", "s", "<|s|>", "this", "<|s|>", "about", "?", "<|s|>", "There", "<|s|>", "are", "<|s|>", "API", "<|s|>", "differences", "<|s|>", "between", "<|s|>", "the", "<|s|>", "2", ".", "<|nl|>", "<|nl|>", "see", "<|s|>", "http", "://", "developer", ".", "android", ".", "com", "/", "sdk", "/", "api", "_", "diff", "/", "6", "/", "changes", ".", "html"], "tufano_code": "<ERROR>", "our_target": "                // same; Cannot find source for API level 5\n", "our_code": "    private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths, IAndroidTarget target) {\n        ArrayList<IClasspathEntry> list = new ArrayList<IClasspathEntry>();\n\n        // First, we create the IClasspathEntry for the framework.\n        // now add the android framework to the class path.\n        // create the path object.\n        IPath android_lib = new Path(paths[CACHE_INDEX_JAR]);\n        \n        IPath android_src = null;\n        String androidSrc = null;\n        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n        if (target != null) {\n            androidSrc = ProjectHelper.loadStringProperty(root, getAndroidSourceProperty(target));\n        }\n        if (androidSrc != null && androidSrc.trim().length() > 0) {\n            android_src = new Path(androidSrc);\n        }\n        if (android_src == null) {\n            android_src = new Path(paths[CACHE_INDEX_SRC]);\n            File androidSrcFile = new File(paths[CACHE_INDEX_SRC]);\n            if (!androidSrcFile.isDirectory()) {\n                android_src = null;\n            }\n        }\n\n        if (android_src == null && target != null) {\n            Bundle bundle = getSourceBundle();\n\n            if (bundle != null) {\n                AndroidVersion version = target.getVersion();\n                String apiString = version.getApiString();\n                String sourcePath = apiString + SOURCES_ZIP;\n                // FIXME API level 6 (SDK 2.0.1) and API Level 5 (SDK 2.0) are\n<|startfocus|>\n                // same\n<|endfocus|>\n                if (\"6\".equals(apiString)) {\n                    sourcePath = \"5\" + SOURCES_ZIP;\n                }\n                URL sourceURL = bundle.getEntry(sourcePath);\n                if (sourceURL != null) {\n                    URL url = null;\n                    try {\n                        url = FileLocator.resolve(sourceURL);\n                    } catch (IOException ignore) {\n                    }\n                    if (url != null) {\n                        androidSrc = url.getFile();\n                        if (new File(androidSrc).isFile()) {\n                            android_src = new Path(androidSrc);\n                        }\n                    }\n                }\n            }\n        }\n\n        // create the java doc link.\n        String androidApiURL = ProjectHelper.loadStringProperty(root, PROPERTY_ANDROID_API);\n        String apiURL = null;\n        if (androidApiURL != null) {\n            apiURL = androidApiURL;\n        } else {\n            if (testURL(androidApiURL)) {\n                apiURL = androidApiURL;\n            } else if (testURL(paths[CACHE_INDEX_DOCS_URI])) {\n                apiURL = paths[CACHE_INDEX_DOCS_URI];\n            } else if (testURL(ANDROID_API_REFERENCE)) {\n                apiURL = ANDROID_API_REFERENCE;\n            }\n        }\n        IClasspathAttribute[] attributes = null;\n        if (apiURL != null) {\n\n            IClasspathAttribute cpAttribute = JavaCore.newClasspathAttribute(\n                    IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, apiURL);\n            attributes = new IClasspathAttribute[] {\n                cpAttribute\n            };\n        }\n        // create the access rule to restrict access to classes in\n        // com.android.internal\n        IAccessRule accessRule = JavaCore.newAccessRule(new Path(\"com/android/internal/**\"), //$NON-NLS-1$\n                IAccessRule.K_NON_ACCESSIBLE);\n\n        IClasspathEntry frameworkClasspathEntry = JavaCore.newLibraryEntry(android_lib,\n                android_src, // source attachment path\n                null, // default source attachment root path.\n                new IAccessRule[] {\n                    accessRule\n                }, attributes, false // not exported.\n                );\n\n        list.add(frameworkClasspathEntry);\n\n        // now deal with optional libraries\n        if (paths.length >= 5) {\n            String docPath = paths[CACHE_INDEX_OPT_DOCS_URI];\n            int i = 4;\n            while (i < paths.length) {\n                Path jarPath = new Path(paths[i++]);\n\n                attributes = null;\n                if (docPath.length() > 0) {\n                    attributes = new IClasspathAttribute[] {\n                        JavaCore.newClasspathAttribute(\n                                IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, docPath)\n                    };\n                }\n\n                IClasspathEntry entry = JavaCore.newLibraryEntry(jarPath, null, // source\n                                                                                // attachment\n                                                                                // path\n                        null, // default source attachment root path.\n                        null, attributes, false // not exported.\n                        );\n                list.add(entry);\n            }\n        }\n\n        if (apiURL != null) {\n            ProjectHelper.saveStringProperty(root, PROPERTY_ANDROID_API, apiURL);\n        }\n        if (android_src != null && target != null) {\n            ProjectHelper.saveStringProperty(root, getAndroidSourceProperty(target),\n                    android_src.toOSString());\n        }\n        return list.toArray(new IClasspathEntry[list.size()]);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "IClasspath", "Entry", "[", "]", "<|s|>", "create", "Classpath", "Entries", "From", "Paths", "(", "String", "[", "]", "<|s|>", "paths", ",", "<|s|>", "IAndroid", "Target", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "<|s|>", "list", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "First", ",", "<|s|>", "we", "<|s|>", "create", "<|s|>", "the", "<|s|>", "IClasspath", "Entry", "<|s|>", "for", "<|s|>", "the", "<|s|>", "framework", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "add", "<|s|>", "the", "<|s|>", "android", "<|s|>", "framework", "<|s|>", "to", "<|s|>", "the", "<|s|>", "class", "<|s|>", "path", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "path", "<|s|>", "object", ".", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "_", "lib", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "JAR", "]", ");", "<|nl|>", "<|8-s|>", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "IWorkspace", "Root", "<|s|>", "root", "<|s|>", "=", "<|s|>", "Resources", "Plugin", ".", "get", "Workspace", "(", ")", ".", "get", "Root", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Src", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "android", "Src", ".", "trim", "(", ")", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "File", "<|s|>", "android", "Src", "File", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "android", "Src", "File", ".", "is", "Directory", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "==", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Bundle", "<|s|>", "bundle", "<|s|>", "=", "<|s|>", "get", "Source", "Bundle", "(", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "bundle", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Android", "Version", "<|s|>", "version", "<|s|>", "=", "<|s|>", "target", ".", "get", "Version", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "api", "String", "<|s|>", "=", "<|s|>", "version", ".", "get", "Api", "String", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "source", "Path", "<|s|>", "=", "<|s|>", "api", "String", "<|s|>", "+", "<|s|>", "SOURCES", "_", "ZIP", ";", "<|nl|>", "<|16-s|>", "//", "<|s|>", "FIXME", "<|s|>", "API", "<|s|>", "level", "<|s|>", "6", "<|s|>", "(", "SDK", "<|s|>", "2", ".", "0", ".", "1", ")", "<|s|>", "and", "<|s|>", "API", "<|s|>", "Level", "<|s|>", "5", "<|s|>", "(", "SDK", "<|s|>", "2", ".", "0", ")", "<|s|>", "are", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "//", "<|s|>", "same", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "\"", "6", "\"", ".", "equals", "(", "api", "String", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "source", "Path", "<|s|>", "=", "<|s|>", "\"", "5", "\"", "<|s|>", "+", "<|s|>", "SOURCES", "_", "ZIP", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "URL", "<|s|>", "source", "URL", "<|s|>", "=", "<|s|>", "bundle", ".", "get", "Entry", "(", "source", "Path", ");", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "source", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "URL", "<|s|>", "url", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "url", "<|s|>", "=", "<|s|>", "File", "Locator", ".", "resolve", "(", "source", "URL", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "ignore", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "url", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "url", ".", "get", "File", "(", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "new", "<|s|>", "File", "(", "android", "Src", ")", ".", "is", "File", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "java", "<|s|>", "doc", "<|s|>", "link", ".", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Api", "URL", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ");", "<|nl|>", "<|8-s|>", "String", "<|s|>", "api", "URL", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "test", "URL", "(", "android", "Api", "URL", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "]", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "ANDROID", "_", "API", "_", "REFERENCE", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "ANDROID", "_", "API", "_", "REFERENCE", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|12-s|>", "IClasspath", "Attribute", "<|s|>", "cp", "Attribute", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|12-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "cp", "Attribute", "<|nl|>", "<|12-s|>", "};", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "access", "<|s|>", "rule", "<|s|>", "to", "<|s|>", "restrict", "<|s|>", "access", "<|s|>", "to", "<|s|>", "classes", "<|s|>", "in", "<|nl|>", "<|8-s|>", "//", "<|s|>", "com", ".", "android", ".", "internal", "<|nl|>", "<|8-s|>", "IAccess", "Rule", "<|s|>", "access", "Rule", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Access", "Rule", "(", "new", "<|s|>", "Path", "(", "\"", "com", "/", "android", "/", "internal", "/*", "*", "\"", ")", ",", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "1", "$", "<|nl|>", "<|16-s|>", "IAccess", "Rule", ".", "K", "_", "NON", "_", "ACCESSIBLE", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "IClasspath", "Entry", "<|s|>", "framework", "Classpath", "Entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "android", "_", "lib", ",", "<|nl|>", "<|16-s|>", "android", "_", "src", ",", "<|s|>", "//", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "path", "<|nl|>", "<|16-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "new", "<|s|>", "IAccess", "Rule", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "access", "Rule", "<|nl|>", "<|16-s|>", "}", ",", "<|s|>", "attributes", ",", "<|s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "list", ".", "add", "(", "framework", "Classpath", "Entry", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "deal", "<|s|>", "with", "<|s|>", "optional", "<|s|>", "libraries", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "paths", ".", "length", "<|s|>", ">=", "<|s|>", "5", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "doc", "Path", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "OPT", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "4", ";", "<|nl|>", "<|12-s|>", "while", "<|s|>", "(", "i", "<|s|>", "<", "<|s|>", "paths", ".", "length", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Path", "<|s|>", "jar", "Path", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "i", "++", "]", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "doc", "Path", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "doc", "Path", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", "};", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "IClasspath", "Entry", "<|s|>", "entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "jar", "Path", ",", "<|s|>", "null", ",", "<|s|>", "//", "<|s|>", "source", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "//", "<|s|>", "attachment", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "//", "<|s|>", "path", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "attributes", ",", "<|s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", ");", "<|nl|>", "<|16-s|>", "list", ".", "add", "(", "entry", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "android", "_", "src", ".", "to", "OSString", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "list", ".", "to", "Array", "(", "new", "<|s|>", "IClasspath", "Entry", "[", "list", ".", "size", "(", ")", "]", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 503, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1863", "comment_id": "AAAA6X%2F%2F%2FRE%3D", "class_list": ["AndroidClasspathContainerInitializer", "path."], "func_list": ["public AndroidClasspathContainerInitializer()", "public static IClasspathEntry getContainerEntry()", "public static boolean checkPath(IPath path)", "public static boolean updateProjects(IJavaProject[] androidProjects)", "private static IClasspathContainer allocateAndroidContainer(IJavaProject javaProject)", "public IClasspathEntry[] getClasspathEntries()", "public String getDescription()", "public int getKind()", "public IPath getPath()", "protected IStatus run(IProgressMonitor monitor)", "private static IClasspathEntry[] createClasspathEntries(IProject project,", "private static AndroidClasspathContainer getContainerFromCache(IProject project, IAndroidTarget target)", "private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths, IAndroidTarget target)", "private static Bundle getSourceBundle()", "private static String getAndroidSourceProperty(IAndroidTarget target)", "private static boolean testURL(String androidApiURL)", "public static void checkProjectsCache(ArrayList<IJavaProject> projects)", "private static String[] getTargetPaths(IAndroidTarget target)", "public boolean canUpdateClasspathContainer(IPath containerPath, IJavaProject project)", "public AndroidClasspathContainerInitializer()"], "prime_var_dic": {"path": 1, "String": 5, "int": 5}}, {"idx": 17716, "status": "update", "global_index": 16202, "project_name": "android_", "written_on": "2015-03-19 15:33:06", "tufano_target": "public void METHOD_3 ( String param ) { VAR_1 = TYPE_1 . METHOD_2 ( param ) ; }", "comment": "remove", "tokenized_comment": ["remove"], "tufano_code": "public void METHOD_1 ( String param ) { VAR_1 = TYPE_1 . METHOD_2 ( param ) ; }", "our_target": "    public void additionalParameters(@NonNull String param) {\n", "our_code": "<|startfocus|>\n    public void setAdditionalParameters(String param) {\n<|endfocus|>\n        additionalParameters = Collections.singletonList(param);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Additional", "Parameters", "(", "String", "<|s|>", "param", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "additional", "Parameters", "<|s|>", "=", "<|s|>", "Collections", ".", "singleton", "List", "(", "param", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 139, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1041", "comment_id": "86fc4cc6_2dcf15db", "class_list": ["AaptOptions"], "func_list": ["public void setIgnoreAssetsPattern(@Nullable String ignoreAssetsPattern)", "public String getIgnoreAssets()", "public void setNoCompress(String noCompress)", "public Collection<String> getNoCompress()", "public void useNewCruncher(boolean value)", "public void setUseNewCruncher(boolean value)", "public void setCruncherEnabled(boolean value)", "public boolean getCruncherEnabled()", "public boolean getUseNewCruncher()", "public void failOnMissingConfigEntry(boolean value)", "public void setFailOnMissingConfigEntry(boolean value)", "public boolean getFailOnMissingConfigEntry()", "public void noCompress(String noCompress)", "public void setAdditionalParameters(String param)", "public List<String> getAdditionalParameters()"], "prime_var_dic": {"implements": 1, "PNG": 1}}, {"idx": 4726, "status": "update", "global_index": 5078, "project_name": "android_", "written_on": "2016-09-08 20:02:14", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 ) { VAR_4 = VAR_2 ; VAR_6 = string ; }", "comment": "private", "tokenized_comment": ["private"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; }", "our_target": "      myString = string;\n", "our_code": "    public ResourceItemEntry(@NotNull ResourceItem resourceItem, @NotNull String stringRepresentation) {\n      myResourceItem = resourceItem;\n<|startfocus|>\n      myStringRepresentation = stringRepresentation;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Resource", "Item", "Entry", "(", "@", "Not", "Null", "<|s|>", "Resource", "Item", "<|s|>", "resource", "Item", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "string", "Representation", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Resource", "Item", "<|s|>", "=", "<|s|>", "resource", "Item", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "String", "Representation", "<|s|>", "=", "<|s|>", "string", "Representation", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 133, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_223", "comment_id": "1691b3ce_72c26027", "class_list": ["StringResource", "ResourceItemEntry"], "func_list": ["String getKey()", "void setKey(@NotNull String key)", "ResourceItem getDefaultValue()", "String getDefaultValueAsString()", "void setDefaultValue(@NotNull ResourceItem defaultValue, @NotNull String defaultValueString)", "void removeDefaultValue()", "public boolean isTranslatable()", "void setTranslatable(boolean translatable)", "void setTranslation(@NotNull Locale locale, @NotNull ResourceItem translation, @NotNull String translationString)", "ResourceItem getTranslation(@NotNull Locale locale)", "String getTranslationAsString(@NotNull Locale locale)", "void removeTranslation(@NotNull Locale locale)", "Collection<Locale> getTranslatedLocales()", "boolean isTranslationMissing(@NotNull Locale locale)", "public String resourceToString()", "public ResourceItemEntry(@NotNull ResourceItem resourceItem, @NotNull String stringRepresentation)"], "prime_var_dic": {}}, {"idx": 53845, "status": "update", "global_index": 13562, "project_name": "android_", "written_on": "2015-01-28 17:36:59", "tufano_target": "public VAR_1 ( long id ) { this . VAR_2 = id ; }", "comment": "my", "tokenized_comment": ["my"], "tufano_code": "public VAR_1 ( long id ) { this . id = id ; }", "our_target": "    this.myId = id;\n", "our_code": "  public AtomNode(long id) {\n<|startfocus|>\n    this.id = id;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Atom", "Node", "(", "long", "<|s|>", "id", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "this", ".", "id", "<|s|>", "=", "<|s|>", "id", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 55, "base_patch_number": 25, "changed_patch_number": 26, "code_file_name": "android_180", "comment_id": "57c59722_eecddf66", "class_list": ["AtomNode"], "func_list": ["public AtomNode(long id)", "private static String toHtmlString(@NotNull Color color)", "public long getRepresentativeAtomId()", "public Component getComponent(@NotNull EnumInfoCache enumInfoCache,", "protected JBLabel populateEnumLabel(@NotNull Object value,", "public void mousePressed(MouseEvent mouseEvent)", "public void run()", "public void propertyChange(PropertyChangeEvent propertyChangeEvent)"], "prime_var_dic": {}}, {"idx": 14833, "status": "update", "global_index": 11099, "project_name": "android_", "written_on": "2015-06-15 17:16:50", "tufano_target": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 . compareTo ( TYPE_4 . METHOD_3 ( VAR_3 ) ) >= 0 ; } }", "comment": "static import", "tokenized_comment": ["static", "<|s|>", "import"], "tufano_code": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 . compareTo ( TYPE_2 . METHOD_3 ( VAR_3 ) ) >= 0 ; } else { return false ; } }", "our_target": "      return fromBuildFile.compareTo(PreciseRevision.parseRevision(GRADLE_PLUGIN_RECOMMENDED_VERSION)) >= 0;\n", "our_code": "  private static boolean gradleModelIsRecent(@NotNull Project project) {\n    // Sync has failed, so we can only check the build file.\n    FullRevision fromBuildFile = GradleUtil.getAndroidGradleModelVersionFromBuildFile(project);\n    if (fromBuildFile != null) {\n<|startfocus|>\n      return fromBuildFile.compareTo(FullRevision.parseRevision(GRADLE_PLUGIN_RECOMMENDED_VERSION)) >= 0;\n    } else {\n      return false;\n<|endfocus|>\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "gradle", "Model", "Is", "Recent", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Sync", "<|s|>", "has", "<|s|>", "failed", ",", "<|s|>", "so", "<|s|>", "we", "<|s|>", "can", "<|s|>", "only", "<|s|>", "check", "<|s|>", "the", "<|s|>", "build", "<|s|>", "file", ".", "<|nl|>", "<|4-s|>", "Full", "Revision", "<|s|>", "from", "Build", "File", "<|s|>", "=", "<|s|>", "Gradle", "Util", ".", "get", "Android", "Gradle", "Model", "Version", "From", "Build", "File", "(", "project", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "from", "Build", "File", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "from", "Build", "File", ".", "compare", "To", "(", "Full", "Revision", ".", "parse", "Revision", "(", "GRADLE", "_", "PLUGIN", "_", "RECOMMENDED", "_", "VERSION", ")", ")", "<|s|>", ">=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 119, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_414", "comment_id": "19d1a48c_8b035115", "class_list": ["GradleDslMethodNotFoundErrorHandler"], "func_list": ["public boolean handleError(@NotNull List<String> message,", "private static NotificationHyperlink getGradleSettingsHyperlink(@NotNull Project project)", "protected void execute(@NotNull Project project)", "private static boolean gradleModelIsRecent(@NotNull Project project)", "private static boolean isUsingWrapper(@NotNull Project project)", "private static NotificationHyperlink getApplyGradlePluginHyperlink(@NotNull final VirtualFile virtualFile,", "private static void openFile(@NotNull VirtualFile virtualFile, @NotNull NotificationData notification, @NotNull Project project)"], "prime_var_dic": {}}, {"idx": 94346, "status": "update", "global_index": 2859, "project_name": "android_", "written_on": "2017-03-20 17:35:40", "tufano_target": "public TYPE_1 METHOD_1 ( int VAR_3 , String VAR_2 ) { throw new TYPE_2 ( STRING_1 ) ; }", "comment": "this", "tokenized_comment": ["this"], "tufano_code": "public TYPE_1 METHOD_1 ( int VAR_1 , String VAR_2 ) { throw new TYPE_2 ( STRING_1 ) ; }", "our_target": "    public SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIndex, String cp){\n", "our_code": "<|startfocus|>\n    public SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIdx, String cp){\n<|endfocus|>\n        throw new RuntimeException(\"not implemented\");\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Subscription", "Info", "<|s|>", "get", "Active", "Subscription", "Info", "For", "Sim", "Slot", "Index", "(", "int", "<|s|>", "slot", "Idx", ",", "<|s|>", "String", "<|s|>", "cp", ")", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "\"", "not", "<|s|>", "implemented", "\"", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 120, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_5314", "comment_id": "b4085caa_6efa0da1", "class_list": ["SubscriptionControllerMock"], "func_list": ["public static SubscriptionController init(Phone phone)", "public static SubscriptionController getInstance()", "public SubscriptionControllerMock(Context c, ITelephonyRegistry.Stub tr, int phoneCount)", "protected void init(Context c)", "public int getDefaultDataSubId()", "public void setDefaultDataSubId(int subId)", "private void broadcastDefaultDataSubIdChanged(int subId)", "public int getSubIdUsingPhoneId(int phoneId)", "public void notifySubscriptionInfoChanged()", "public SubscriptionInfo getActiveSubscriptionInfo(int subId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForIccId(String iccId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIdx, String cp)", "public List<SubscriptionInfo> getAllSubInfoList(String callingPackage)", "public List<SubscriptionInfo> getActiveSubscriptionInfoList(String callingPackage)", "public int getActiveSubInfoCount(String callingPackage)", "public int getAllSubInfoCount(String callingPackage)", "public int getActiveSubInfoCountMax()", "public int addSubInfoRecord(String iccId, int slotId)", "public boolean setPlmnSpn(int slotId, boolean showPlmn, String plmn, boolean showSpn,", "public int setIconTint(int tint, int subId)", "public int setDisplayName(String displayName, int subId)", "public int setDisplayNameUsingSrc(String displayName, int subId, long nameSource)", "public int setDisplayNumber(String number, int subId)", "public int setDataRoaming(int roaming, int subId)", "public int setMccMnc(String mccMnc, int subId)", "public int getSlotId(int subId)", "private boolean isInvalidSlotId(int slotIdx)", "public int[] getSubId(int slotIdx)", "public void setSlotSubId(int slotIdx, int subId)", "public int getPhoneId(int subId)", "public int clearSubInfo()", "public int getDefaultSubId()", "public void setDefaultSmsSubId(int subId)", "public int getDefaultSmsSubId()", "public void setDefaultVoiceSubId(int subId)", "public int getDefaultVoiceSubId()", "public void clearDefaultsForInactiveSubIds()", "public int[] getSubIdUsingSlotId(int slotId)", "public List<SubscriptionInfo> getSubInfoUsingSlotIdWithCheck(int slotId, boolean needCheck,", "public void updatePhonesAvailability(Phone[] phones)", "public int[] getActiveSubIdList()", "public boolean isActiveSubId(int subId)", "public int getSimStateForSlotIndex(int slotIndex)", "public void setSubscriptionProperty(int subId, String propKey, String propValue)", "public String getSubscriptionProperty(int subId, String propKey, String callingPackage)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {"mTelephonyRegistry": 1}}, {"idx": 62844, "status": "update", "global_index": 20371, "project_name": "android_", "written_on": "2013-02-07 23:48:42", "tufano_target": "private void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( TYPE_4 VAR_2 : VAR_3 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }", "comment": "I'm not very familiar with SynchronizedSet; will this actually lock the mLIsteners array while you are using an iterator on it? If not, you might as well take out the SynchronizedSet wrapped, and just add synchronized (mListeners) on your add, remove and iterator calls, right?", "tokenized_comment": ["I", "'", "m", "<|s|>", "not", "<|s|>", "very", "<|s|>", "familiar", "<|s|>", "with", "<|s|>", "Synchronized", "Set", ";", "<|s|>", "will", "<|s|>", "this", "<|s|>", "actually", "<|s|>", "lock", "<|s|>", "the", "<|s|>", "m", "LIsteners", "<|s|>", "array", "<|s|>", "while", "<|s|>", "you", "<|s|>", "are", "<|s|>", "using", "<|s|>", "an", "<|s|>", "iterator", "<|s|>", "on", "<|s|>", "it", "?", "<|s|>", "If", "<|s|>", "not", ",", "<|s|>", "you", "<|s|>", "might", "<|s|>", "as", "<|s|>", "well", "<|s|>", "take", "<|s|>", "out", "<|s|>", "the", "<|s|>", "Synchronized", "Set", "<|s|>", "wrapped", ",", "<|s|>", "and", "<|s|>", "just", "<|s|>", "add", "<|s|>", "synchronized", "<|s|>", "(", "m", "Listeners", ")", "<|s|>", "on", "<|s|>", "your", "<|s|>", "add", ",", "<|s|>", "remove", "<|s|>", "and", "<|s|>", "iterator", "<|s|>", "calls", ",", "<|s|>", "right", "?"], "tufano_code": "private void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( TYPE_3 VAR_2 : VAR_3 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }", "our_target": "        for (LogCatListener l: mListeners) {\n", "our_code": "    private void notifyListeners(List<LogCatMessage> messages) {\n<|startfocus|>\n        for (ILogCatListener l: mListeners) {\n<|endfocus|>\n            l.log(messages);\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "notify", "Listeners", "(", "List", "<", "Log", "Cat", "Message", ">", "<|s|>", "messages", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "ILog", "Cat", "Listener", "<|s|>", "l", ":", "<|s|>", "m", "Listeners", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "l", ".", "log", "(", "messages", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 127, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1630", "comment_id": "PpYAv2KY", "class_list": ["LogCatReceiverTask", "LogCatOutputReceiver"], "func_list": ["public LogCatReceiverTask(@NonNull IDevice device)", "public void run()", "public void stop()", "public LogCatOutputReceiver()", "public boolean isCancelled()", "public void processNewLines(String[] lines)", "private void processLogLines(String[] lines)", "public void addLogCatListener(ILogCatListener l)", "public void removeLogCatListener(ILogCatListener l)", "private void notifyListeners(List<LogCatMessage> messages)", "private static LogCatMessage errorMessage(String msg)", "public LogCatReceiverTask(@NonNull IDevice device)"], "prime_var_dic": {"mReceiver": 1, "mParser": 1, "mCancelled": 1}}, {"idx": 92863, "status": "update", "global_index": 5300, "project_name": "android_", "written_on": "2016-10-05 12:36:55", "tufano_target": "public static TYPE_1 METHOD_2 ( String name , String VAR_1 , TYPE_4 VAR_2 ) { return new TYPE_1 ( name , VAR_1 , VAR_2 ) ; }", "comment": "Try with OutputVFSCodec?", "tokenized_comment": ["Try", "<|s|>", "with", "<|s|>", "Output", "VFSCodec", "?"], "tufano_code": "public static TYPE_1 METHOD_1 ( String name , String VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { return new TYPE_1 ( name , VAR_1 , VAR_2 ) ; }", "our_target": "  public static OutputVFSPropertyId create(\n      @Nonnull String name, @Nonnull String description, @Nonnull OutputVFSCodec codec) {\n", "our_code": "<|startfocus|>\n  public static OutputVFSPropertyId createInstance(\n      @Nonnull String name, @Nonnull String description, @Nonnull StringCodec<OutputVFS> codec) {\n<|endfocus|>\n    return new OutputVFSPropertyId(name, description, codec);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Output", "VFSProperty", "Id", "<|s|>", "create", "Instance", "(", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Nonnull", "<|s|>", "String", "<|s|>", "name", ",", "<|s|>", "@", "Nonnull", "<|s|>", "String", "<|s|>", "description", ",", "<|s|>", "@", "Nonnull", "<|s|>", "String", "Codec", "<", "Output", "VFS", ">", "<|s|>", "codec", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "new", "<|s|>", "Output", "VFSProperty", "Id", "(", "name", ",", "<|s|>", "description", ",", "<|s|>", "codec", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 35, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3816", "comment_id": "5fefc46f_8067764c", "class_list": ["OutputVFSPropertyId"], "func_list": ["public static OutputVFSPropertyId createInstance(", "protected OutputVFSPropertyId(@Nonnull String name, @Nonnull String description,", "public OutputVFSPropertyId addDefaultValue (@Nonnull String defaultValue)", "public OutputVFSPropertyId requiredIf(@Nonnull BooleanExpression expression)", "public OutputVFSPropertyId addCategory(@Nonnull Class<? extends Category> category)", "public OutputVFSPropertyId withAutoCheck()", "public void run(@Nonnull OutputVFS vfs)", "public OutputVFSPropertyId withoutAutoAction()"], "prime_var_dic": {}}, {"idx": 70817, "status": "update", "global_index": 4534, "project_name": "android_", "written_on": "2016-11-14 19:34:00", "tufano_target": "public void METHOD_1 ( TYPE_1 context , TYPE_2 intent ) { if ( TYPE_3 . equals ( intent . METHOD_2 ( ) ) ) { METHOD_4 ( intent . METHOD_5 ( VAR_2 , 0 ) ) ; } }", "comment": "why is this posted now and wasn't before?", "tokenized_comment": ["why", "<|s|>", "is", "<|s|>", "this", "<|s|>", "posted", "<|s|>", "now", "<|s|>", "and", "<|s|>", "wasn", "'", "t", "<|s|>", "before", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 context , TYPE_2 intent ) { if ( TYPE_3 . equals ( intent . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ( ) - > METHOD_4 ( intent . METHOD_5 ( VAR_2 , 0 ) ) ) ; } }", "our_target": "                notifyUserSwitched(intent.getIntExtra(Intent.EXTRA_USER_HANDLE, 0));\n", "our_code": "        public void onReceive(Context context, Intent intent) {\n            if (Intent.ACTION_USER_SWITCHED.equals(intent.getAction())) {\n<|startfocus|>\n                mHandler.post(() -> notifyUserSwitched(intent.getIntExtra(\n                        Intent.EXTRA_USER_HANDLE, 0)));\n<|endfocus|>\n            }\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Receive", "(", "Context", "<|s|>", "context", ",", "<|s|>", "Intent", "<|s|>", "intent", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "Intent", ".", "ACTION", "_", "USER", "_", "SWITCHED", ".", "equals", "(", "intent", ".", "get", "Action", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "m", "Handler", ".", "post", "(", "(", ")", "<|s|>", "->", "<|s|>", "notify", "User", "Switched", "(", "intent", ".", "get", "Int", "Extra", "(", "<|nl|>", "<|16-s|>", "<|8-s|>", "Intent", ".", "EXTRA", "_", "USER", "_", "HANDLE", ",", "<|s|>", "0", ")", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 78, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_3583", "comment_id": "cb669bd0_5e28ecb4", "class_list": ["CurrentUserTracker", "UserReceiver"], "func_list": ["public CurrentUserTracker(Context context)", "public int getCurrentUserId()", "public void startTracking()", "public void stopTracking()", "private UserReceiver mUserReceiver;", "static UserReceiver getInstance(Context context)", "public void onReceive(Context context, Intent intent)", "private void addTracker(Consumer<Integer> callback)", "private void removeTracker(Consumer<Integer> callback)", "private void notifyUserSwitched(int newUserId)", "public CurrentUserTracker(Context context)"], "prime_var_dic": {}}, {"idx": 6808, "status": "update", "global_index": 10089, "project_name": "android_", "written_on": "2015-04-13 23:55:33", "tufano_target": "private static String METHOD_1 ( String VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 != - 1 ) { return VAR_1 . substring ( 0 , VAR_2 ) ; } return VAR_1 ; }", "comment": "nit - use '-' instead of \"-\"", "tokenized_comment": ["nit", "<|s|>", "-", "<|s|>", "use", "<|s|>", "'", "-", "'", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "\"", "-", "\""], "tufano_code": "private static String METHOD_1 ( String VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 != - 1 ) { return VAR_1 . substring ( 0 , VAR_2 ) ; } return VAR_1 ; }", "our_target": "      // in case this is a nightly (e.g. \"2.4-20150409092851+0000\").\n", "our_code": "  private static String removeTimestampFromGradleVersion(@NotNull String gradleVersion) {\n    int dashIndex = gradleVersion.indexOf(\"-\");\n    if (dashIndex != -1) {\n<|startfocus|>\n      // in case this is a nightly (e.g. \"gradle-2.4-20150409092851+0000\").\n<|endfocus|>\n      return gradleVersion.substring(0, dashIndex);\n    }\n    return gradleVersion;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "remove", "Timestamp", "From", "Gradle", "Version", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "gradle", "Version", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "int", "<|s|>", "dash", "Index", "<|s|>", "=", "<|s|>", "gradle", "Version", ".", "index", "Of", "(", "\"", "-", "\"", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "dash", "Index", "<|s|>", "!=", "<|s|>", "-", "1", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "in", "<|s|>", "case", "<|s|>", "this", "<|s|>", "is", "<|s|>", "a", "<|s|>", "nightly", "<|s|>", "(", "e", ".", "g", ".", "<|s|>", "\"", "gradle", "-", "2", ".", "4", "-", "2015040909", "2851", "+", "0000", "\"", ")", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "gradle", "Version", ".", "substring", "(", "0", ",", "<|s|>", "dash", "Index", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "gradle", "Version", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 699, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_436", "comment_id": "10597645_117cee32", "class_list": ["GradleUtil", "loader", "names"], "func_list": ["private GradleUtil()", "public static boolean isSupportedGradleVersion(@NotNull FullRevision gradleVersion)", "public static AndroidArtifactOutput getOutput(@NotNull AndroidArtifact artifact)", "public static Icon getModuleIcon(@NotNull Module module)", "public static AndroidProject getAndroidProject(@NotNull Module module)", "public static String getGradlePath(@NotNull Module module)", "public static boolean isRootModuleWithNoSources(@NotNull Module module)", "public static List<AndroidLibrary> getDirectLibraryDependencies(@NotNull Variant variant,", "public static Module findModuleByGradlePath(@NotNull Project project, @NotNull String gradlePath)", "public static List<String> getPathSegments(@NotNull String gradlePath)", "public static VirtualFile getGradleBuildFile(@NotNull Module module)", "public static File getGradleBuildFilePath(@NotNull File rootDir)", "public static VirtualFile getGradleSettingsFile(@NotNull File rootDir)", "public static File getGradleSettingsFilePath(@NotNull File rootDir)", "public static File getGradleWrapperPropertiesFilePath(@NotNull File projectRootDir)", "private static String getGradleDistributionUrl(@NotNull String gradleVersion, boolean binOnly)", "public static GradleExecutionSettings getGradleExecutionSettings(@NotNull Project project)", "public static File findWrapperPropertiesFile(@NotNull Project project)", "public static GradleProjectSettings getGradleProjectSettings(@NotNull Project project)", "private static GradleProjectSettings getFirstNotNull(@Nullable Set<GradleProjectSettings> allProjectSettings)", "public static List<String> getGradleInvocationJvmArgs(@NotNull File projectDir, @Nullable BuildMode buildMode)", "static String getGradleInvocationJvmArg(@Nullable BuildMode buildMode)", "public static File findAnyGradleHome(boolean interactive)", "private static File findGradleHome(@NotNull Project project)", "private static File getGradleHome(@NotNull Project project, @NotNull WrapperConfiguration configuration)", "private static boolean isValidGradleHome(@NotNull File path)", "public static String getDefaultPhysicalPathFromGradlePath(@NotNull String gradlePath)", "public static File getModuleDefaultPath(@NotNull VirtualFile parentDir, @NotNull String gradlePath)", "public static int isValidGradlePath(@NotNull String gradlePath)", "public static boolean hasModule(@Nullable Project project, @NotNull String gradlePath, boolean checkProjectFolder)", "public static void cleanUpPreferences(@NotNull ExtensionPoint<ConfigurableEP<Configurable>> preferences,", "public static FullRevision getGradleVersion(@NotNull Project project)", "else if (location.isDirectory())", "static FullRevision getGradleVersionFromJar(@NotNull File libraryJarFile)", "private static String removeTimestampFromGradleVersion(@NotNull String gradleVersion)", "public static FullRevision getResolvedAndroidGradleModelVersion(@NotNull final Project project)", "public boolean process(VirtualFile virtualFile)", "private static FullRevision parseRevision(@NotNull String revision)", "public static GradleCoordinate getPluginDefinition(@NotNull String fileContents, @NotNull String pluginName)", "public String fun(Pair<String, GroovyLexer> pair)", "public static boolean updateGradleDependencyVersion(@NotNull Project project,", "public TextRange fun(Pair<String, GroovyLexer> pair)", "public void run()", "public static TextRange findDependency(@NotNull final String dependency, @NotNull String contents)", "return findStringLiteral(dependency, contents, new Function<Pair<String, GroovyLexer>, TextRange>()", "public static String getPluginDefinitionString(@NotNull String fileContents, @NotNull String pluginName)", "return forPluginDefinition(fileContents, pluginName, new Function<Pair<String, GroovyLexer>, String>()", "private static String getAndroidGradleModelVersion(@NotNull GradleCoordinate coordinate, @Nullable Project project)", "public static GradleCoordinate findLatestVersionInGradleCache(@NotNull GradleCoordinate original,", "public static void addLocalMavenRepoInitScriptCommandLineOption(@NotNull List<String> args)", "static File addLocalMavenRepoInitScriptCommandLineOption(@NotNull List<String> args, @NotNull File repoPath)", "public static void attemptToUseEmbeddedGradle(@NotNull Project project)", "static String getGradleWrapperVersionOnlyIfComingForGradleDotOrg(@Nullable String url)", "private static boolean isCompatibleWithEmbeddedGradleVersion(@NotNull String gradleVersion)", "private static boolean isWrapperInGradleCache(@NotNull Project project, @NotNull String gradleVersion)", "private static Collection<File> getGradleServicePaths(@Nullable Project project)", "public static boolean dependsOn(@NonNull IdeaAndroidProject project, @NonNull String artifact)", "public static boolean hasCause(@NotNull Throwable e, @NotNull Class<?> causeClass)", "public static File getGradleUserSettingsFile()"], "prime_var_dic": {}}, {"idx": 88869, "status": "update", "global_index": 7806, "project_name": "android_", "written_on": "2015-11-27 09:23:54", "tufano_target": "private static void METHOD_2 ( String VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; fail ( STRING_1 + VAR_3 class . getName ( ) + STRING_2 ) ; } catch ( TYPE_2 VAR_4 ) { } }", "comment": "assertExceptionInX500PrincipalConstructor()\n\n- you're asserting something, not setting an expectation. The rest is just to make it clearer.", "tokenized_comment": ["assert", "Exception", "In", "X", "500", "Principal", "Constructor", "(", ")", "<|nl|>", "<|nl|>", "-", "<|s|>", "you", "'", "re", "<|s|>", "asserting", "<|s|>", "something", ",", "<|s|>", "not", "<|s|>", "setting", "<|s|>", "an", "<|s|>", "expectation", ".", "<|s|>", "The", "<|s|>", "rest", "<|s|>", "is", "<|s|>", "just", "<|s|>", "to", "<|s|>", "make", "<|s|>", "it", "<|s|>", "clearer", "."], "tufano_code": "private void METHOD_1 ( String VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; fail ( STRING_1 + VAR_3 class . getName ( ) + STRING_2 ) ; } catch ( TYPE_2 VAR_4 ) { } }", "our_target": "    private static void assertExceptionInPrincipal(String dn) {\n", "our_code": "<|startfocus|>\n    private void expectExceptionInPrincipal(String dn) {\n<|endfocus|>\n        try {\n            X500Principal principal = new X500Principal(dn);\n            fail(\"Expected \" + IllegalArgumentException.class.getName()\n                    + \" because of incorrect input name\");\n        } catch (IllegalArgumentException e) {\n            // Expected.\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "void", "<|s|>", "expect", "Exception", "In", "Principal", "(", "String", "<|s|>", "dn", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "X", "500", "Principal", "<|s|>", "principal", "<|s|>", "=", "<|s|>", "new", "<|s|>", "X", "500", "Principal", "(", "dn", ");", "<|nl|>", "<|12-s|>", "fail", "(", "\"", "Expected", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "Illegal", "Argument", "Exception", ".", "class", ".", "get", "Name", "(", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", "+", "<|s|>", "\"", "<|s|>", "because", "<|s|>", "of", "<|s|>", "incorrect", "<|s|>", "input", "<|s|>", "name", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Illegal", "Argument", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Expected", ".", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 152, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5399", "comment_id": "bbb8a7d5_ffa4f725", "class_list": ["AbstractVerifierTest"], "func_list": ["public void testGetCns()", "public void testEmptyValues()", "public void testGetCns_escapedChars()", "public void testGetCns_whitespace()", "public void testGetCnsWithOid()", "public void testGetCnsWithQuotedStrings()", "public void testGetCnsWithUtf8()", "public void testGetCnsWithWhitespace()", "private void assertCns(String dn, String... expected)", "private void expectExceptionInPrincipal(String dn)", "private X509Certificate getMockCertificate(final String subjectName)", "public X500Principal getSubjectX500Principal()", "public Set<String> getCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)", "public Set<String> getNonCriticalExtensionOIDs()", "public boolean hasUnsupportedCriticalExtension()", "public String toString()", "public PublicKey getPublicKey()", "public int getVersion()", "public BigInteger getSerialNumber()", "public Principal getIssuerDN()", "public Principal getSubjectDN()", "public Date getNotBefore()", "public Date getNotAfter()", "public byte[] getSignature()", "public String getSigAlgName()", "public String getSigAlgOID()", "public byte[] getSigAlgParams()", "public boolean[] getIssuerUniqueID()", "public boolean[] getSubjectUniqueID()", "public boolean[] getKeyUsage()", "public int getBasicConstraints()"], "prime_var_dic": {}}, {"idx": 91238, "status": "update", "global_index": 17574, "project_name": "android_", "written_on": "2012-04-19 21:49:59", "tufano_target": "public float METHOD_2 ( ) { return VAR_2 ; }", "comment": "Maybe rename \"Market\" to \"MarketShare\" ?", "tokenized_comment": ["Maybe", "<|s|>", "rename", "<|s|>", "\"", "Market", "\"", "<|s|>", "to", "<|s|>", "\"", "Market", "Share", "\"", "<|s|>", "?"], "tufano_code": "public float METHOD_1 ( ) { return VAR_1 ; }", "our_target": "        /** An approximate share percentage of this platform and all the\n         *  platforms of lower API level. */\n        public float getShare() {\n            return mShare;\n", "our_code": "<|startfocus|>\n        public float getMarketPercent() {\n            return mMarketPercent;\n<|endfocus|>\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "public", "<|s|>", "float", "<|s|>", "get", "Market", "Percent", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "m", "Market", "Percent", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 86, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_3954", "comment_id": "AAAE3n%2F%2F%2F%2Bg%3D", "class_list": ["SdkStats", "PlatformStatBase", "PlatformStat", "at"], "func_list": ["public PlatformStatBase(int apiLevel,", "public int getApiLevel()", "public String getCodeName()", "public String getVersionName()", "public float getMarketPercent()", "public String toString()", "public PlatformStatBase(int apiLevel,", "public float getAccumMarketPercent()", "public SdkStats()", "public SparseArray<PlatformStat> getStats()", "public void load(DownloadCache cache, boolean forceHttp, ITaskMonitor monitor)", "private InputStream fetchUrl(String urlString,", "protected int getXmlSchemaVersion(InputStream xml)", "protected String validateXml(InputStream xml, String url, int version,", "protected Document getDocument(InputStream xml, ITaskMonitor monitor)", "protected SparseArray<PlatformStat> parseStatsDocument(", "private Node getFirstChild(Node node, String nsUri, String xmlLocalName)", "public PlatformStatBase(int apiLevel,", "public int getApiLevel()", "public String getCodeName()", "public String getVersionName()", "public float getMarketPercent()", "public String toString()", "public PlatformStatBase(int apiLevel,", "public int getApiLevel()", "public String getCodeName()", "public String getVersionName()", "public float getMarketPercent()", "public String toString()", "public PlatformStatBase(int apiLevel,", "public int getApiLevel()", "public String getCodeName()", "public String getVersionName()", "public float getMarketPercent()", "public String toString()", "public PlatformStatBase(int apiLevel,", "public float getAccumMarketPercent()", "public SdkStats()", "public SparseArray<PlatformStat> getStats()", "public void load(DownloadCache cache, boolean forceHttp, ITaskMonitor monitor)", "private InputStream fetchUrl(String urlString,", "protected int getXmlSchemaVersion(InputStream xml)", "protected String validateXml(InputStream xml, String url, int version,", "protected Document getDocument(InputStream xml, ITaskMonitor monitor)", "protected SparseArray<PlatformStat> parseStatsDocument(", "private Node getFirstChild(Node node, String nsUri, String xmlLocalName)"], "prime_var_dic": {"License": 1, "platforms": 1, "PlatformStatBase": 1, "mApiLevel": 1, "mVersionName": 1, "mCodeName": 1, "mMarketPercent": 1, "mAccumMarketPercent": 1, "wrong": 1, "fetch": 1}}, {"idx": 95285, "status": "update", "global_index": 17865, "project_name": "android_", "written_on": "2009-01-14 12:19:11", "tufano_target": "private boolean METHOD_1 ( ) { if ( ! TYPE_1 . get ( STRING_3 ) . equals ( STRING_2 ) ) { return false ; } return VAR_1 && VAR_2 ; }", "comment": "Defect 1086. due to that defect we have done the renaming, to have it working. On the master branch is the official fix for this defect. We will rename according to master branch.\n", "tokenized_comment": ["Defect", "<|s|>", "1086", ".", "<|s|>", "due", "<|s|>", "to", "<|s|>", "that", "<|s|>", "defect", "<|s|>", "we", "<|s|>", "have", "<|s|>", "done", "<|s|>", "the", "<|s|>", "renaming", ",", "<|s|>", "to", "<|s|>", "have", "<|s|>", "it", "<|s|>", "working", ".", "<|s|>", "On", "<|s|>", "the", "<|s|>", "master", "<|s|>", "branch", "<|s|>", "is", "<|s|>", "the", "<|s|>", "official", "<|s|>", "fix", "<|s|>", "for", "<|s|>", "this", "<|s|>", "defect", ".", "<|s|>", "We", "<|s|>", "will", "<|s|>", "rename", "<|s|>", "according", "<|s|>", "to", "<|s|>", "master", "<|s|>", "branch", ".", "<|nl|>"], "tufano_code": "private boolean METHOD_1 ( ) { if ( ! TYPE_1 . get ( STRING_1 ) . equals ( STRING_2 ) ) { return false ; } return VAR_1 && VAR_2 ; }", "our_target": "        if (!SystemProperties.get(\"ro.com.google.locationfeatures\").equals(\"1\")) {\n", "our_code": "    private boolean isCollectionEnabled() {\n        // This class provides a Google-specific location feature, so it's enabled only\n        // when the system property ro.enable_google_location_feat is set.\n<|startfocus|>\n        if (!SystemProperties.get(\"ro.enable_google_location_feat\").equals(\"1\")) {\n<|endfocus|>\n            return false;\n        }\n        return mBatteryLevelIsHealthy && mNetworkProviderIsEnabled;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Collection", "Enabled", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "This", "<|s|>", "class", "<|s|>", "provides", "<|s|>", "a", "<|s|>", "Google", "-", "specific", "<|s|>", "location", "<|s|>", "feature", ",", "<|s|>", "so", "<|s|>", "it", "'", "s", "<|s|>", "enabled", "<|s|>", "only", "<|nl|>", "<|8-s|>", "//", "<|s|>", "when", "<|s|>", "the", "<|s|>", "system", "<|s|>", "property", "<|s|>", "ro", ".", "enable", "_", "google", "_", "location", "_", "feat", "<|s|>", "is", "<|s|>", "set", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "System", "Properties", ".", "get", "(", "\"", "ro", ".", "enable", "_", "google", "_", "location", "_", "feat", "\"", ")", ".", "equals", "(", "\"", "1", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Battery", "Level", "Is", "Healthy", "<|s|>", "&&", "<|s|>", "m", "Network", "Provider", "Is", "Enabled", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 360, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_2945", "comment_id": "z40fac4bda1531510dedabd93f740c86e", "class_list": ["LocationCollector", "provides", "CellUploads"], "func_list": ["public LocationCollector(LocationMasfClient masfClient)", "public void updateNetworkProviderStatus(boolean enabled)", "public void updateBatteryState(int scale, int level, boolean plugged)", "private boolean isCollectionEnabled()", "private CellUploads mCellUploads = new CellUploads();", "private boolean contains(CellState cellState, Location loc)", "private void log(String string)", "public LocationCollector(LocationMasfClient masfClient)"], "prime_var_dic": {}}, {"idx": 83218, "status": "update", "global_index": 7658, "project_name": "android_", "written_on": "2016-01-12 18:48:18", "tufano_target": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_3 VAR_3 ) { return ; } assertTrue ( VAR_2 instanceof TYPE_3 ) ; }", "comment": "Exception -> Throwable to be more robust?", "tokenized_comment": ["Exception", "<|s|>", "->", "<|s|>", "Throwable", "<|s|>", "to", "<|s|>", "be", "<|s|>", "more", "<|s|>", "robust", "?"], "tufano_code": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_3 ) { VAR_2 = VAR_3 ; } assertTrue ( VAR_2 instanceof TYPE_3 ) ; }", "our_target": "        } catch (IllegalArgumentException ex) {\n            return;\n", "our_code": "    private static void assertThrowsIllegalArgumentException(Runnable runnable) {\n        Exception e = null;\n        try {\n            runnable.run();\n<|startfocus|>\n        } catch (Exception ex) {\n            e = ex;\n<|endfocus|>\n        }\n        assertTrue(e instanceof IllegalArgumentException);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "assert", "Throws", "Illegal", "Argument", "Exception", "(", "Runnable", "<|s|>", "runnable", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Exception", "<|s|>", "e", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "runnable", ".", "run", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "ex", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "e", "<|s|>", "=", "<|s|>", "ex", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "assert", "True", "(", "e", "<|s|>", "instanceof", "<|s|>", "Illegal", "Argument", "Exception", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 160, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_3350", "comment_id": "4768b202_29cbb5a2", "class_list": ["NativeAllocationRegistryTest", "TestConfig", "Allocation"], "func_list": ["public TestConfig(boolean useAllocator, boolean shareRegistry)", "private void testNativeAllocation(TestConfig config)", "public long allocate()", "public void testNativeAllocationAllocatorAndSharedRegistry()", "public void testNativeAllocationNoAllocatorAndSharedRegistry()", "public void testNativeAllocationAllocatorAndNoSharedRegistry()", "public void testNativeAllocationNoAllocatorAndNoSharedRegistry()", "public void testNullArguments()", "public void run()", "private static void assertThrowsIllegalArgumentException(Runnable runnable)", "public TestConfig(boolean useAllocator, boolean shareRegistry)", "public TestConfig(boolean useAllocator, boolean shareRegistry)", "private void testNativeAllocation(TestConfig config)", "public long allocate()", "public void testNativeAllocationAllocatorAndSharedRegistry()", "public void testNativeAllocationNoAllocatorAndSharedRegistry()", "public void testNativeAllocationAllocatorAndNoSharedRegistry()", "public void testNativeAllocationNoAllocatorAndNoSharedRegistry()", "public void testNullArguments()", "public void run()", "private static void assertThrowsIllegalArgumentException(Runnable runnable)"], "prime_var_dic": {"TestConfig": 1, "Allocation": 1}}, {"idx": 95405, "status": "update", "global_index": 20993, "project_name": "android_", "written_on": "2013-08-22 18:58:27", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_4 = VAR_2 ; }", "comment": "ditto", "tokenized_comment": ["ditto"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = VAR_2 ; }", "our_target": "        mStringBuilder = stringBuilder;\n", "our_code": "    public HtmlBuilder(@NonNull StringBuilder stringBuilder) {\n<|startfocus|>\n        myStringBuilder = stringBuilder;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Html", "Builder", "(", "@", "Non", "Null", "<|s|>", "String", "Builder", "<|s|>", "string", "Builder", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "my", "String", "Builder", "<|s|>", "=", "<|s|>", "string", "Builder", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 25, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1266", "comment_id": "2da354b4_7f0b9b36", "class_list": ["HtmlBuilder"], "func_list": ["public HtmlBuilder(@NonNull StringBuilder stringBuilder)", "public HtmlBuilder openHtmlBody()", "public HtmlBuilder closeHtmlBody()", "public HtmlBuilder addHtml(@NonNull String html)", "public HtmlBuilder addNbsp()", "public HtmlBuilder addNbsps(int count)", "public HtmlBuilder newline()", "public HtmlBuilder addLink(@NonNull String textBefore,", "public HtmlBuilder addHtml(@NonNull String html)", "public String getHtml()", "public HtmlBuilder beginBold()", "public HtmlBuilder endBold()", "public HtmlBuilder addBold(String text)", "public HtmlBuilder beginDiv()", "public HtmlBuilder endDiv()", "public HtmlBuilder addHeading(@NonNull String text, @NonNull String fontColor)", "public HtmlBuilder beginList()", "public HtmlBuilder endList()", "public HtmlBuilder listItem()", "public HtmlBuilder addImage(URL url, @Nullable String altText)", "public HtmlBuilder addIcon(@Nullable String src)", "public HtmlBuilder beginTable(@Nullable String tdExtra)", "public HtmlBuilder endTable()", "public HtmlBuilder beginTableRow()", "public HtmlBuilder endTableRow()", "public HtmlBuilder addTableRow(boolean isHeader, String... columns)", "public StringBuilder getStringBuilder()"], "prime_var_dic": {"StringBuilder": 1, "boolean": 1}}, {"idx": 85001, "status": "update", "global_index": 12764, "project_name": "android_", "written_on": "2014-09-26 14:15:35", "tufano_target": "public void METHOD_3 ( ) { METHOD_2 ( STRING_1 , INT_1 ) ; METHOD_2 ( STRING_2 , INT_1 ) ; }", "comment": "the preferred test method name format is test{methodName}_{condition}\n\nso more like testFilterSamples_singleWord", "tokenized_comment": ["the", "<|s|>", "preferred", "<|s|>", "test", "<|s|>", "method", "<|s|>", "name", "<|s|>", "format", "<|s|>", "is", "<|s|>", "test", "{", "method", "Name", "}", "_", "{", "condition", "}", "<|nl|>", "<|nl|>", "so", "<|s|>", "more", "<|s|>", "like", "<|s|>", "test", "Filter", "Samples", "_", "single", "Word"], "tufano_code": "public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , INT_1 ) ; METHOD_2 ( STRING_2 , INT_1 ) ; }", "our_target": "  public void testFilterSamples_emptySearch() {\n", "our_code": "<|startfocus|>\n  public void testEmptySearch() {\n<|endfocus|>\n    doFilterCheck(\"\", 3);\n    doFilterCheck(\"          \", 3);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Empty", "Search", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "do", "Filter", "Check", "(", "\"", "\"", ",", "<|s|>", "3", ");", "<|nl|>", "<|4-s|>", "do", "Filter", "Check", "(", "\"", "<|8-s|>", "<|2-s|>", "\"", ",", "<|s|>", "3", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 44, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_5541", "comment_id": "907b8f5f_dc1fc5f3", "class_list": ["SampleImportTreeManagerTest"], "func_list": ["public void testEmptySearch()", "public void testSingleWord()", "public void testTwoWords()", "public void testLotsOfWords()", "private void doFilterCheck(@NotNull String query, int resultSize)", "private void initSamples()", "private static Sample createSample(String title, String description, List<String> categories)"], "prime_var_dic": {}}, {"idx": 90866, "status": "delete", "global_index": 18782, "project_name": "android_", "written_on": "2010-08-30 20:32:38", "tufano_target": "<ERROR>", "comment": "I don't understand the comment nor what you change 6 into 5. Please explain.", "tokenized_comment": ["I", "<|s|>", "don", "'", "t", "<|s|>", "understand", "<|s|>", "the", "<|s|>", "comment", "<|s|>", "nor", "<|s|>", "what", "<|s|>", "you", "<|s|>", "change", "<|s|>", "6", "<|s|>", "into", "<|s|>", "5", ".", "<|s|>", "Please", "<|s|>", "explain", "."], "tufano_code": "<ERROR>", "our_target": "<|del|>\n", "our_code": "    private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths,\n            IAndroidTarget target) {\n        ArrayList<IClasspathEntry> list = new ArrayList<IClasspathEntry>();\n\n        // First, we create the IClasspathEntry for the framework.\n        // now add the android framework to the class path.\n        // create the path object.\n        IPath android_lib = new Path(paths[CACHE_INDEX_JAR]);\n        \n        IPath android_src = null;\n        String androidSrc = null;\n        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n        if (target != null) {\n            androidSrc = ProjectHelper.loadStringProperty(root, getAndroidSourceProperty(target));\n        }\n        if (androidSrc != null && androidSrc.trim().length() > 0) {\n            android_src = new Path(androidSrc);\n        }\n        if (android_src == null) {\n            android_src = new Path(paths[CACHE_INDEX_SRC]);\n            File androidSrcFile = new File(paths[CACHE_INDEX_SRC]);\n            if (!androidSrcFile.isDirectory()) {\n                android_src = null;\n            }\n        }\n\n        if (android_src == null && target != null) {\n            Bundle bundle = getSourceBundle();\n\n            if (bundle != null) {\n                AndroidVersion version = target.getVersion();\n                String apiString = version.getApiString();\n                String sourcePath = apiString + SOURCES_ZIP;\n<|startfocus|>\n                // FIXME API level 6 (SDK 2.0.1) and API Level 5 (SDK 2.0) are\n                // same; Cannot find source for API level 5\n                if (\"6\".equals(apiString)) {\n                    sourcePath = \"5\" + SOURCES_ZIP;\n                }\n<|endfocus|>\n                URL sourceURL = bundle.getEntry(sourcePath);\n                if (sourceURL != null) {\n                    URL url = null;\n                    try {\n                        url = FileLocator.resolve(sourceURL);\n                    } catch (IOException ignore) {\n                    }\n                    if (url != null) {\n                        androidSrc = url.getFile();\n                        if (new File(androidSrc).isFile()) {\n                            android_src = new Path(androidSrc);\n                        }\n                    }\n                }\n            }\n        }\n\n        // create the java doc link.\n        String androidApiURL = ProjectHelper.loadStringProperty(root, PROPERTY_ANDROID_API);\n        String apiURL = null;\n        if (androidApiURL != null) {\n            apiURL = androidApiURL;\n        } else {\n            if (testURL(androidApiURL)) {\n                apiURL = androidApiURL;\n            } else if (testURL(paths[CACHE_INDEX_DOCS_URI])) {\n                apiURL = paths[CACHE_INDEX_DOCS_URI];\n            } else if (testURL(ANDROID_API_REFERENCE)) {\n                apiURL = ANDROID_API_REFERENCE;\n            }\n        }\n        IClasspathAttribute[] attributes = null;\n        if (apiURL != null) {\n\n            IClasspathAttribute cpAttribute = JavaCore.newClasspathAttribute(\n                    IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, apiURL);\n            attributes = new IClasspathAttribute[] {\n                cpAttribute\n            };\n        }\n        // create the access rule to restrict access to classes in\n        // com.android.internal\n        IAccessRule accessRule = JavaCore.newAccessRule(new Path(\"com/android/internal/**\"), //$NON-NLS-1$\n                IAccessRule.K_NON_ACCESSIBLE);\n\n        IClasspathEntry frameworkClasspathEntry = JavaCore.newLibraryEntry(android_lib,\n                android_src, // source attachment path\n                null, // default source attachment root path.\n                new IAccessRule[] {\n                    accessRule\n                }, attributes, false // not exported.\n                );\n\n        list.add(frameworkClasspathEntry);\n\n        // now deal with optional libraries\n        if (paths.length >= 5) {\n            String docPath = paths[CACHE_INDEX_OPT_DOCS_URI];\n            int i = 4;\n            while (i < paths.length) {\n                Path jarPath = new Path(paths[i++]);\n\n                attributes = null;\n                if (docPath.length() > 0) {\n                    attributes = new IClasspathAttribute[] {\n                        JavaCore.newClasspathAttribute(\n                                IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, docPath)\n                    };\n                }\n\n                IClasspathEntry entry = JavaCore.newLibraryEntry(jarPath, null, // source\n                                                                                // attachment\n                                                                                // path\n                        null, // default source attachment root path.\n                        null, attributes, false // not exported.\n                        );\n                list.add(entry);\n            }\n        }\n\n        if (apiURL != null) {\n            ProjectHelper.saveStringProperty(root, PROPERTY_ANDROID_API, apiURL);\n        }\n        if (android_src != null && target != null) {\n            ProjectHelper.saveStringProperty(root, getAndroidSourceProperty(target),\n                    android_src.toOSString());\n        }\n        return list.toArray(new IClasspathEntry[list.size()]);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "IClasspath", "Entry", "[", "]", "<|s|>", "create", "Classpath", "Entries", "From", "Paths", "(", "String", "[", "]", "<|s|>", "paths", ",", "<|nl|>", "<|12-s|>", "IAndroid", "Target", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "<|s|>", "list", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "First", ",", "<|s|>", "we", "<|s|>", "create", "<|s|>", "the", "<|s|>", "IClasspath", "Entry", "<|s|>", "for", "<|s|>", "the", "<|s|>", "framework", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "add", "<|s|>", "the", "<|s|>", "android", "<|s|>", "framework", "<|s|>", "to", "<|s|>", "the", "<|s|>", "class", "<|s|>", "path", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "path", "<|s|>", "object", ".", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "_", "lib", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "JAR", "]", ");", "<|nl|>", "<|8-s|>", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "IWorkspace", "Root", "<|s|>", "root", "<|s|>", "=", "<|s|>", "Resources", "Plugin", ".", "get", "Workspace", "(", ")", ".", "get", "Root", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Src", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "android", "Src", ".", "trim", "(", ")", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "File", "<|s|>", "android", "Src", "File", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "android", "Src", "File", ".", "is", "Directory", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "==", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Bundle", "<|s|>", "bundle", "<|s|>", "=", "<|s|>", "get", "Source", "Bundle", "(", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "bundle", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Android", "Version", "<|s|>", "version", "<|s|>", "=", "<|s|>", "target", ".", "get", "Version", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "api", "String", "<|s|>", "=", "<|s|>", "version", ".", "get", "Api", "String", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "source", "Path", "<|s|>", "=", "<|s|>", "api", "String", "<|s|>", "+", "<|s|>", "SOURCES", "_", "ZIP", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "//", "<|s|>", "FIXME", "<|s|>", "API", "<|s|>", "level", "<|s|>", "6", "<|s|>", "(", "SDK", "<|s|>", "2", ".", "0", ".", "1", ")", "<|s|>", "and", "<|s|>", "API", "<|s|>", "Level", "<|s|>", "5", "<|s|>", "(", "SDK", "<|s|>", "2", ".", "0", ")", "<|s|>", "are", "<|nl|>", "<|16-s|>", "//", "<|s|>", "same", ";", "<|s|>", "Cannot", "<|s|>", "find", "<|s|>", "source", "<|s|>", "for", "<|s|>", "API", "<|s|>", "level", "<|s|>", "5", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "\"", "6", "\"", ".", "equals", "(", "api", "String", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "source", "Path", "<|s|>", "=", "<|s|>", "\"", "5", "\"", "<|s|>", "+", "<|s|>", "SOURCES", "_", "ZIP", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "URL", "<|s|>", "source", "URL", "<|s|>", "=", "<|s|>", "bundle", ".", "get", "Entry", "(", "source", "Path", ");", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "source", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "URL", "<|s|>", "url", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "url", "<|s|>", "=", "<|s|>", "File", "Locator", ".", "resolve", "(", "source", "URL", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "ignore", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "url", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "url", ".", "get", "File", "(", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "new", "<|s|>", "File", "(", "android", "Src", ")", ".", "is", "File", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "java", "<|s|>", "doc", "<|s|>", "link", ".", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Api", "URL", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ");", "<|nl|>", "<|8-s|>", "String", "<|s|>", "api", "URL", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "test", "URL", "(", "android", "Api", "URL", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "]", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "ANDROID", "_", "API", "_", "REFERENCE", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "ANDROID", "_", "API", "_", "REFERENCE", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|12-s|>", "IClasspath", "Attribute", "<|s|>", "cp", "Attribute", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|12-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "cp", "Attribute", "<|nl|>", "<|12-s|>", "};", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "access", "<|s|>", "rule", "<|s|>", "to", "<|s|>", "restrict", "<|s|>", "access", "<|s|>", "to", "<|s|>", "classes", "<|s|>", "in", "<|nl|>", "<|8-s|>", "//", "<|s|>", "com", ".", "android", ".", "internal", "<|nl|>", "<|8-s|>", "IAccess", "Rule", "<|s|>", "access", "Rule", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Access", "Rule", "(", "new", "<|s|>", "Path", "(", "\"", "com", "/", "android", "/", "internal", "/*", "*", "\"", ")", ",", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "1", "$", "<|nl|>", "<|16-s|>", "IAccess", "Rule", ".", "K", "_", "NON", "_", "ACCESSIBLE", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "IClasspath", "Entry", "<|s|>", "framework", "Classpath", "Entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "android", "_", "lib", ",", "<|nl|>", "<|16-s|>", "android", "_", "src", ",", "<|s|>", "//", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "path", "<|nl|>", "<|16-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "new", "<|s|>", "IAccess", "Rule", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "access", "Rule", "<|nl|>", "<|16-s|>", "}", ",", "<|s|>", "attributes", ",", "<|s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "list", ".", "add", "(", "framework", "Classpath", "Entry", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "deal", "<|s|>", "with", "<|s|>", "optional", "<|s|>", "libraries", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "paths", ".", "length", "<|s|>", ">=", "<|s|>", "5", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "doc", "Path", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "OPT", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "4", ";", "<|nl|>", "<|12-s|>", "while", "<|s|>", "(", "i", "<|s|>", "<", "<|s|>", "paths", ".", "length", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Path", "<|s|>", "jar", "Path", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "i", "++", "]", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "doc", "Path", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "doc", "Path", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", "};", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "IClasspath", "Entry", "<|s|>", "entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "jar", "Path", ",", "<|s|>", "null", ",", "<|s|>", "//", "<|s|>", "source", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "//", "<|s|>", "attachment", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "//", "<|s|>", "path", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "attributes", ",", "<|s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", ");", "<|nl|>", "<|16-s|>", "list", ".", "add", "(", "entry", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "android", "_", "src", ".", "to", "OSString", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "list", ".", "to", "Array", "(", "new", "<|s|>", "IClasspath", "Entry", "[", "list", ".", "size", "(", ")", "]", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 506, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1863", "comment_id": "AAAA63%2F%2F%2F%2Bg%3D", "class_list": ["AndroidClasspathContainerInitializer", "path."], "func_list": ["public AndroidClasspathContainerInitializer()", "public static IClasspathEntry getContainerEntry()", "public static boolean checkPath(IPath path)", "public static boolean updateProjects(IJavaProject[] androidProjects)", "private static IClasspathContainer allocateAndroidContainer(IJavaProject javaProject)", "public IClasspathEntry[] getClasspathEntries()", "public String getDescription()", "public int getKind()", "public IPath getPath()", "protected IStatus run(IProgressMonitor monitor)", "private static IClasspathEntry[] createClasspathEntries(IProject project,", "private static AndroidClasspathContainer getContainerFromCache(IProject project,", "private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths,", "private static Bundle getSourceBundle()", "private static String getAndroidSourceProperty(IAndroidTarget target)", "private static boolean testURL(String androidApiURL)", "public static void checkProjectsCache(ArrayList<IJavaProject> projects)", "private static String[] getTargetPaths(IAndroidTarget target)", "public boolean canUpdateClasspathContainer(IPath containerPath, IJavaProject project)", "public AndroidClasspathContainerInitializer()"], "prime_var_dic": {"path": 1, "String": 5, "int": 5}}, {"idx": 8445, "status": "update", "global_index": 17068, "project_name": "android_", "written_on": "2010-04-12 21:57:58", "tufano_target": "void METHOD_3 ( TYPE_1 VAR_1 ) { if ( VAR_2 . remove ( VAR_1 ) ) { VAR_3 . METHOD_2 ( new TYPE_2 ( null , VAR_1 , null ) ) ; } }", "comment": "In GSMPhone this is onMMIDone, your meets the convention, but lets make both the same and change this to onMMIDone.", "tokenized_comment": ["In", "<|s|>", "GSMPhone", "<|s|>", "this", "<|s|>", "is", "<|s|>", "on", "MMIDone", ",", "<|s|>", "your", "<|s|>", "meets", "<|s|>", "the", "<|s|>", "convention", ",", "<|s|>", "but", "<|s|>", "lets", "<|s|>", "make", "<|s|>", "both", "<|s|>", "the", "<|s|>", "same", "<|s|>", "and", "<|s|>", "change", "<|s|>", "this", "<|s|>", "to", "<|s|>", "on", "MMIDone", "."], "tufano_code": "void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . remove ( VAR_1 ) ) { VAR_3 . METHOD_2 ( new TYPE_2 ( null , VAR_1 , null ) ) ; } }", "our_target": "    void onMMIDone(CdmaMmiCode mmi) {\n", "our_code": "<|startfocus|>\n    void onMmiDone(CdmaMmiCode mmi) {\n<|endfocus|>\n        /*\n         * Only notify complete if it's on the pending list. Otherwise, it's\n         * already been handled (eg, previously canceled).\n         */\n        if (mPendingMmis.remove(mmi)) {\n            mMmiCompleteRegistrants.notifyRegistrants(new AsyncResult(null, mmi, null));\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "void", "<|s|>", "on", "Mmi", "Done", "(", "Cdma", "Mmi", "Code", "<|s|>", "mmi", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "/*", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "Only", "<|s|>", "notify", "<|s|>", "complete", "<|s|>", "if", "<|s|>", "it", "'", "s", "<|s|>", "on", "<|s|>", "the", "<|s|>", "pending", "<|s|>", "list", ".", "<|s|>", "Otherwise", ",", "<|s|>", "it", "'", "s", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "already", "<|s|>", "been", "<|s|>", "handled", "<|s|>", "(", "eg", ",", "<|s|>", "previously", "<|s|>", "canceled", ")", ".", "<|nl|>", "<|8-s|>", "<|s|>", "*/", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Pending", "Mmis", ".", "remove", "(", "mmi", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Mmi", "Complete", "Registrants", ".", "notify", "Registrants", "(", "new", "<|s|>", "Async", "Result", "(", "null", ",", "<|s|>", "mmi", ",", "<|s|>", "null", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 526, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4920", "comment_id": "AAAAwX%2F%2F%2Fkg%3D", "class_list": ["CDMAPhone"], "func_list": ["public void run()", "public CDMAPhone(Context context, CommandsInterface ci, PhoneNotifier notifier)", "public void dispose()", "public void removeReferences()", "protected void finalize()", "public ServiceState getServiceState()", "public String getPhoneName()", "public int getPhoneType()", "public boolean canTransfer()", "public CdmaCall getRingingCall()", "public void setMute(boolean muted)", "public boolean getMute()", "public void enableEnhancedVoicePrivacy(boolean enable, Message onComplete)", "public void getEnhancedVoicePrivacy(Message onComplete)", "public void clearDisconnected()", "public DataActivityState getDataActivityState()", "public SignalStrength getSignalStrength()", "public void registerForSuppServiceNotification(", "public CdmaCall getBackgroundCall()", "public boolean handleInCallMmiCommands(String dialString)", "boolean isInCall()", "public void unregisterForSuppServiceNotification(Handler h)", "public String getLine1Number()", "public String getCdmaPrlVersion()", "public String getCdmaMin()", "public boolean isMinInfoReady()", "public void getCallWaiting(Message onComplete)", "public String getEsn()", "public String getMeid()", "public String getDeviceId()", "public String getDeviceSvn()", "public String getSubscriberId()", "public boolean canConference()", "public CellLocation getCellLocation()", "public boolean disableDataConnectivity()", "public CdmaCall getForegroundCall()", "public void setOnPostDialCharacter(Handler h, int what, Object obj)", "public boolean handlePinMmi(String dialString)", "public boolean isDataConnectivityPossible()", "void onMmiDone(CdmaMmiCode mmi)", "public void setLine1Number(String alphaTag, String number, Message onComplete)", "public IccCard getIccCard()", "public String getIccSerialNumber()", "public void setCallWaiting(boolean enable, Message onComplete)", "public void updateServiceLocation()", "public void setDataRoamingEnabled(boolean enable)", "public void registerForCdmaOtaStatusChange(Handler h, int what, Object obj)", "public void unregisterForCdmaOtaStatusChange(Handler h)", "public void registerForSubscriptionInfoReady(Handler h, int what, Object obj)", "public void unregisterForSubscriptionInfoReady(Handler h)", "public void setOnEcbModeExitResponse(Handler h, int what, Object obj)", "public void unsetOnEcbModeExitResponse(Handler h)", "public void registerForCallWaiting(Handler h, int what, Object obj)", "public void unregisterForCallWaiting(Handler h)", "public DataState getDataConnectionState()", "public void sendUssdResponse(String ussdMessge)", "public void sendDtmf(char c)", "public void startDtmf(char c)", "public void stopDtmf()", "public void sendBurstDtmf(String dtmfString, int on, int off, Message onComplete)", "public void getAvailableNetworks(Message response)", "public void setOutgoingCallerIdDisplay(int commandInterfaceCLIRMode, Message onComplete)", "public void enableLocationUpdates()", "public void disableLocationUpdates()", "public void getPdpContextList(Message response)", "public void getDataCallList(Message response)", "public boolean getDataRoamingEnabled()", "public List<DataConnection> getCurrentDataConnectionList ()", "public void setVoiceMailNumber(String alphaTag,", "public String getVoiceMailNumber()", "public int getVoiceMessageCount()", "public String getVoiceMailAlphaTag()", "public boolean enableDataConnectivity()", "public boolean getIccRecordsLoaded()", "public void getCallForwardingOption(int commandInterfaceCFReason, Message onComplete)", "public void setCallForwardingOption(int commandInterfaceCFAction,", "public void explicitCallTransfer()", "public String getLine1AlphaTag()", "void notifyServiceStateChanged(ServiceState ss)", "void notifyLocationChanged()", "void notifyUnknownConnection()", "void sendEmergencyCallbackModeChange()", "public void exitEmergencyCallbackMode()", "private void handleEnterEmergencyCallbackMode(Message msg)", "private void handleExitEmergencyCallbackMode(Message msg)", "void handleTimerInEmergencyCallbackMode(int action)", "public void registerForEcmTimerReset(Handler h, int what, Object obj)", "public void unregisterForEcmTimerReset(Handler h)", "public void handleMessage(Message msg)", "public PhoneSubInfo getPhoneSubInfo()", "public IccSmsInterfaceManager getIccSmsInterfaceManager()", "public IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()", "public void registerForNvLoaded(Handler h, int what, Object obj)", "public void unregisterForNvLoaded(Handler h)", "public void registerForEriFileLoaded(Handler h, int what, Object obj)", "public void unregisterForEriFileLoaded(Handler h)", "public IccFileHandler getIccFileHandler()", "public void setTTYMode(int ttyMode, Message onComplete)", "public void queryTTYMode(Message onComplete)", "public void activateCellBroadcastSms(int activate, Message response)", "public void getCellBroadcastSmsConfig(Message response)", "public void setCellBroadcastSmsConfig(int[] configValuesArray, Message response)", "private boolean isIs683OtaSpDialStr(String dialStr)", "private int extractSelCodeFromOtaSpNum(String dialStr)", "private boolean isCarrierOtaSpNum(String dialStr)", "public  boolean isOtaSpNumber(String dialStr)", "public int getCdmaEriIconIndex()", "public int getCdmaEriIconMode()", "public String getCdmaEriText()", "private void storeVoiceMailNumber(String number)", "private void setIsoCountryProperty(String operatorNumeric)", "private boolean updateCurrentCarrierInProvider(String operatorNumeric)"], "prime_var_dic": {"LOG_TAG": 1, "boolean": 1, "String": 4, "int": 13, "VM_COUNT_CDMA": 1, "mode": 1, "this": 1, "Voicemails": 1, "to": 1, "message": 1, "in": 1, "broadcast": 1, "the": 1, "code": 1, "they": 1, "itself": 1, "ERI": 1, "GsmPhone": 1}}, {"idx": 88732, "status": "update", "global_index": 14880, "project_name": "android_", "written_on": "2014-04-23 17:28:10", "tufano_target": "static < TYPE_4 extends TYPE_2 > void METHOD_1 ( TYPE_1 < TYPE_4 > VAR_1 , TYPE_2 message , TYPE_3 out ) { out . METHOD_2 ( VAR_1 . getName ( ) ) ; out . METHOD_3 ( TYPE_2 . METHOD_4 ( message ) ) ; }", "comment": "probably here too", "tokenized_comment": ["probably", "<|s|>", "here", "<|s|>", "too"], "tufano_code": "static void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , TYPE_2 message , TYPE_3 out ) { out . METHOD_2 ( VAR_1 . getName ( ) ) ; out . METHOD_3 ( TYPE_2 . METHOD_4 ( message ) ) ; }", "our_target": "    static <T extends MessageNano> void writeToParcel(Class<T> clazz, MessageNano message,\n", "our_code": "<|startfocus|>\n    static void writeToParcel(Class<? extends MessageNano> clazz, MessageNano message,\n<|endfocus|>\n            Parcel out) {\n        out.writeString(clazz.getName());\n        out.writeByteArray(MessageNano.toByteArray(message));\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "static", "<|s|>", "void", "<|s|>", "write", "To", "Parcel", "(", "Class", "<", "?", "<|s|>", "extends", "<|s|>", "Message", "Nano", ">", "<|s|>", "clazz", ",", "<|s|>", "Message", "Nano", "<|s|>", "message", ",", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "Parcel", "<|s|>", "out", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "out", ".", "write", "String", "(", "clazz", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|8-s|>", "out", ".", "write", "Byte", "Array", "(", "Message", "Nano", ".", "to", "Byte", "Array", "(", "message", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 66, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_2698", "comment_id": "85fd0775_1c38ba59", "class_list": ["ParcelingUtil"], "func_list": ["static MessageNano createFromParcel(Parcel in)", "static void writeToParcel(Class<? extends MessageNano> clazz, MessageNano message,"], "prime_var_dic": {"String": 1}}, {"idx": 43420, "status": "update", "global_index": 19254, "project_name": "android_", "written_on": "2011-02-09 03:15:09", "tufano_target": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { assert VAR_1 != null ; VAR_2 . METHOD_1 ( VAR_1 ) ; }", "comment": "This won't work.  The code needs to send ACTION_DOWN for the first pointer down, then send ACTION_POINTER_DOWN | (n << ACTION_POINTER_SHIFT) for each subsequent pointer going down.\n\nDitto when the pointers go up.  Each pointer needs to go up one at a time (in any order).", "tokenized_comment": ["This", "<|s|>", "won", "'", "t", "<|s|>", "work", ".", "<|2-s|>", "The", "<|s|>", "code", "<|s|>", "needs", "<|s|>", "to", "<|s|>", "send", "<|s|>", "ACTION", "_", "DOWN", "<|s|>", "for", "<|s|>", "the", "<|s|>", "first", "<|s|>", "pointer", "<|s|>", "down", ",", "<|s|>", "then", "<|s|>", "send", "<|s|>", "ACTION", "_", "POINTER", "_", "DOWN", "<|s|>", "|", "<|s|>", "(", "n", "<|s|>", "<<", "<|s|>", "ACTION", "_", "POINTER", "_", "SHIFT", ")", "<|s|>", "for", "<|s|>", "each", "<|s|>", "subsequent", "<|s|>", "pointer", "<|s|>", "going", "<|s|>", "down", ".", "<|nl|>", "<|nl|>", "Ditto", "<|s|>", "when", "<|s|>", "the", "<|s|>", "pointers", "<|s|>", "go", "<|s|>", "up", ".", "<|2-s|>", "Each", "<|s|>", "pointer", "<|s|>", "needs", "<|s|>", "to", "<|s|>", "go", "<|s|>", "up", "<|s|>", "one", "<|s|>", "at", "<|s|>", "a", "<|s|>", "time", "<|s|>", "(", "in", "<|s|>", "any", "<|s|>", "order", ")", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( ) ; } VAR_2 . METHOD_1 ( VAR_1 ) ; }", "our_target": "        assert workingSets != null;\n", "our_code": "    public void setWorkingSets(IWorkingSet[] workingSets) {\n<|startfocus|>\n        if (workingSets == null) {\n            throw new IllegalArgumentException();\n        }\n<|endfocus|>\n        mWorkingSetGroup.setWorkingSets(workingSets);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Working", "Sets", "(", "IWorking", "Set", "[", "]", "<|s|>", "working", "Sets", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "working", "Sets", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Working", "Set", "Group", ".", "set", "Working", "Sets", "(", "working", "Sets", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1680, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_1907", "comment_id": "AAAA%2B3%2F%2F5FA%3D", "class_list": ["is", "NewProjectCreationPage", "MainInfo", "to"], "func_list": ["public NewProjectCreationPage()", "public void init(IStructuredSelection selection, IWorkbenchPart activePart)", "public IPath getLocationPath();", "public String getProjectName();", "public String getPackageName();", "public String getActivityName();", "public String getMinSdkVersion();", "public String getApplicationName();", "public boolean isNewProject();", "public boolean isCreateFromSample()", "public boolean isCreateActivity();", "public boolean useDefaultLocation();", "public String getSourceFolder();", "public IAndroidTarget getSdkTarget();", "public IWorkingSet[] getSelectedWorkingSets();", "public IMainInfo getMainInfo()", "public void setTestInfo(TestInfo testInfo)", "public void setVisible(boolean visible)", "public void createControl(Composite parent)", "public void controlResized(ControlEvent e)", "public void dispose()", "public void handleEvent(Event event)", "public void widgetSelected(SelectionEvent e)", "private void createTargetGroup(Composite parent)", "public void onSdkLoaded()", "public void onProjectTargetChange(IProject changedProject)", "public void onTargetLoaded(IAndroidTarget target)", "private String getLocationPathFieldValue()", "private String getSelectedSamplePath()", "private String getProjectLocation()", "private IProject getProjectHandle()", "private void onOpenDirectoryBrowser()", "private void onSampleSelected()", "private void enableLocationWidgets()", "private void updateLocationPathField(String abs_dir)", "private void onLocationPathFieldModified()", "private void onPackageNameFieldModified()", "private void onCreateActivityCheckModified()", "private void onActivityNameFieldModified()", "private void onSdkTargetModified()", "private void updatePackageAndActivityFields()", "private void extractNamesFromAndroidManifest()", "private void loadSamplesForTarget(IAndroidTarget target)", "private void findSamplesManifests(File samplesDir, ArrayList<String> samplesPaths)", "private boolean validatePage()", "private void validatePageComplete()", "private int validateProjectField(IWorkspace workspace)", "private int validateLocationPath(IWorkspace workspace)", "private int validateSdkTarget()", "private int validateMinSdkVersionField()", "private int validateActivityField()", "private int validatePackageField()", "private int validateSourceFolder()", "public boolean accept(File pathname)", "private int setStatus(String message, int messageType)", "public IWorkingSet[] getWorkingSets()", "public void setWorkingSets(IWorkingSet[] workingSets)", "public NewProjectCreationPage()", "public void init(IStructuredSelection selection, IWorkbenchPart activePart)", "public IPath getLocationPath();", "public String getProjectName();", "public String getPackageName();", "public String getActivityName();", "public String getMinSdkVersion();", "public String getApplicationName();", "public boolean isNewProject();", "public boolean isCreateFromSample()", "public boolean isCreateActivity();", "public boolean useDefaultLocation();", "public String getSourceFolder();", "public IAndroidTarget getSdkTarget();", "public IWorkingSet[] getSelectedWorkingSets();", "public IMainInfo getMainInfo()", "public void setTestInfo(TestInfo testInfo)", "public void setVisible(boolean visible)", "public void createControl(Composite parent)", "public void controlResized(ControlEvent e)", "public void dispose()", "public void handleEvent(Event event)", "public void widgetSelected(SelectionEvent e)", "private void createTargetGroup(Composite parent)", "public void onSdkLoaded()", "public void onProjectTargetChange(IProject changedProject)", "public void onTargetLoaded(IAndroidTarget target)", "private String getLocationPathFieldValue()", "private String getSelectedSamplePath()", "private String getProjectLocation()", "private IProject getProjectHandle()", "private void onOpenDirectoryBrowser()", "private void onSampleSelected()", "private void enableLocationWidgets()", "private void updateLocationPathField(String abs_dir)", "private void onLocationPathFieldModified()", "private void onPackageNameFieldModified()", "private void onCreateActivityCheckModified()", "private void onActivityNameFieldModified()", "private void onSdkTargetModified()", "private void updatePackageAndActivityFields()", "private void extractNamesFromAndroidManifest()", "private void loadSamplesForTarget(IAndroidTarget target)", "private void findSamplesManifests(File samplesDir, ArrayList<String> samplesPaths)", "private boolean validatePage()", "private void validatePageComplete()", "private int validateProjectField(IWorkspace workspace)", "private int validateLocationPath(IWorkspace workspace)", "private int validateSdkTarget()", "private int validateMinSdkVersionField()", "private int validateActivityField()", "private int validatePackageField()", "private int validateSourceFolder()", "public boolean accept(File pathname)", "private int setStatus(String message, int messageType)", "public IWorkingSet[] getWorkingSets()", "public void setWorkingSets(IWorkingSet[] workingSets)", "public NewProjectCreationPage()", "public NewProjectCreationPage()", "public void init(IStructuredSelection selection, IWorkbenchPart activePart)", "public IPath getLocationPath();", "public String getProjectName();", "public String getPackageName();", "public String getActivityName();", "public String getMinSdkVersion();", "public String getApplicationName();", "public boolean isNewProject();", "public boolean isCreateFromSample()", "public boolean isCreateActivity();", "public boolean useDefaultLocation();", "public String getSourceFolder();", "public IAndroidTarget getSdkTarget();", "public IWorkingSet[] getSelectedWorkingSets();", "public IMainInfo getMainInfo()", "public void setTestInfo(TestInfo testInfo)", "public void setVisible(boolean visible)", "public void createControl(Composite parent)", "public void controlResized(ControlEvent e)", "public void dispose()", "public void handleEvent(Event event)", "public void widgetSelected(SelectionEvent e)", "private void createTargetGroup(Composite parent)", "public void onSdkLoaded()", "public void onProjectTargetChange(IProject changedProject)", "public void onTargetLoaded(IAndroidTarget target)", "private String getLocationPathFieldValue()", "private String getSelectedSamplePath()", "private String getProjectLocation()", "private IProject getProjectHandle()", "private void onOpenDirectoryBrowser()", "private void onSampleSelected()", "private void enableLocationWidgets()", "private void updateLocationPathField(String abs_dir)", "private void onLocationPathFieldModified()", "private void onPackageNameFieldModified()", "private void onCreateActivityCheckModified()", "private void onActivityNameFieldModified()", "private void onSdkTargetModified()", "private void updatePackageAndActivityFields()", "private void extractNamesFromAndroidManifest()", "private void loadSamplesForTarget(IAndroidTarget target)", "private void findSamplesManifests(File samplesDir, ArrayList<String> samplesPaths)", "private boolean validatePage()", "private void validatePageComplete()", "private int validateProjectField(IWorkspace workspace)", "private int validateLocationPath(IWorkspace workspace)", "private int validateSdkTarget()", "private int validateMinSdkVersionField()", "private int validateActivityField()", "private int validatePackageField()", "private int validateSourceFolder()", "public boolean accept(File pathname)", "private int setStatus(String message, int messageType)", "public IWorkingSet[] getWorkingSets()", "public void setWorkingSets(IWorkingSet[] workingSets)"], "prime_var_dic": {"License": 1, "String": 2, "boolean": 5, "sCustomLocationOsPath": 1, "sAutoComputeCustomLocation": 1, "MSG_NONE": 1, "MSG_WARNING": 1, "MSG_ERROR": 1, "NewProjectWizard": 1, "made": 1, "field": 4, "parent": 3, "entry": 5, "existing": 1, "button": 1, "equal": 2, "group": 1, "an": 1, "label": 1, "the": 1, "name": 3, "path": 1, "target": 2}}, {"idx": 6763, "status": "update", "global_index": 5105, "project_name": "android_", "written_on": "2016-09-06 23:12:28", "tufano_target": "public String METHOD_1 ( String key ) { TYPE_1 VAR_1 = METHOD_3 ( key ) ; TYPE_2 item = VAR_1 . METHOD_2 ( ) ; return item == null ? STRING_1 : METHOD_1 ( item ) ; }", "comment": "Move this method into StringResource. Instead of StringResource having a ResourceItem getDefaultValue() method it should have a String getDefaultValue() method that replaces this one.", "tokenized_comment": ["Move", "<|s|>", "this", "<|s|>", "method", "<|s|>", "into", "<|s|>", "String", "Resource", ".", "<|s|>", "Instead", "<|s|>", "of", "<|s|>", "String", "Resource", "<|s|>", "having", "<|s|>", "a", "<|s|>", "Resource", "Item", "<|s|>", "get", "Default", "Value", "(", ")", "<|s|>", "method", "<|s|>", "it", "<|s|>", "should", "<|s|>", "have", "<|s|>", "a", "<|s|>", "String", "<|s|>", "get", "Default", "Value", "(", ")", "<|s|>", "method", "<|s|>", "that", "<|s|>", "replaces", "<|s|>", "this", "<|s|>", "one", "."], "tufano_code": "public String METHOD_1 ( String key ) { TYPE_1 VAR_1 = VAR_2 . get ( key ) ; assert VAR_1 != null ; TYPE_2 item = VAR_1 . METHOD_2 ( ) ; return item == null ? STRING_1 : METHOD_1 ( item ) ; }", "our_target": "    StringResource stringResource = getStringResource(key);\n", "our_code": "  public String resourceToString(@NotNull String key) {\n<|startfocus|>\n    StringResource stringResource = myKeyToResourceMap.get(key);\n    assert stringResource != null;\n<|endfocus|>\n    ResourceItem item = stringResource.getDefaultValue();\n    return item == null ? \"\" : resourceToString(item);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "resource", "To", "String", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "key", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "String", "Resource", "<|s|>", "string", "Resource", "<|s|>", "=", "<|s|>", "my", "Key", "To", "Resource", "Map", ".", "get", "(", "key", ");", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "string", "Resource", "<|s|>", "!=", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Resource", "Item", "<|s|>", "item", "<|s|>", "=", "<|s|>", "string", "Resource", ".", "get", "Default", "Value", "(", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "item", "<|s|>", "==", "<|s|>", "null", "<|s|>", "?", "<|s|>", "\"", "\"", "<|s|>", ":", "<|s|>", "resource", "To", "String", "(", "item", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 66, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_224", "comment_id": "f6efbfc0_b3a8c02a", "class_list": ["StringResourceData"], "func_list": ["public StringResourceData(@NotNull AndroidFacet facet,", "public List<String> getKeys()", "public List<Locale> getLocales()", "public String resourceToString(@NotNull String key)", "public void changeKeyName(int index, String name)", "public boolean setDoNotTranslate(String key, boolean doNotTranslate)", "public boolean setTranslation(@NotNull String key, @Nullable Locale locale, @NotNull String value)", "public String validateKey(@NotNull String key)", "public String validateTranslation(@NotNull String key, @Nullable Locale locale)", "else if (doNotTranslate && !translationMissing)", "Collection<Locale> getMissingTranslations(@NotNull String key)", "boolean isTranslationMissing(@NotNull String key, @NotNull Locale locale)", "static String summarizeLocales(@NotNull Collection<Locale> locales)", "private static List<Locale> getLowest(Collection<Locale> locales, int n)", "public int compare(Locale l1, Locale l2)", "private static String getLabels(Iterable<Locale> locales)", "public String apply(Locale locale)", "private static String getLabels(Iterable<Locale> locales)", "public StringResource getResource(@NotNull String key)", "public List<StringResource> getResources()"], "prime_var_dic": {"myFacet": 1}}, {"idx": 34150, "status": "update", "global_index": 20178, "project_name": "android_", "written_on": "2012-12-28 20:51:24", "tufano_target": "public byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 instanceof TYPE_2 ? ( ( TYPE_2 ) VAR_1 ) . METHOD_1 ( ) : null ; }", "comment": "no instanceof checks? not sure of callng context, but the above tried to support non-OpenSSLSocketImpl. the caller can provide a socket factory that does not return OpenSSLSokcetImpl presumably", "tokenized_comment": ["no", "<|s|>", "instanceof", "<|s|>", "checks", "?", "<|s|>", "not", "<|s|>", "sure", "<|s|>", "of", "<|s|>", "callng", "<|s|>", "context", ",", "<|s|>", "but", "<|s|>", "the", "<|s|>", "above", "<|s|>", "tried", "<|s|>", "to", "<|s|>", "support", "<|s|>", "non", "-", "Open", "SSLSocket", "Impl", ".", "<|s|>", "the", "<|s|>", "caller", "<|s|>", "can", "<|s|>", "provide", "<|s|>", "a", "<|s|>", "socket", "<|s|>", "factory", "<|s|>", "that", "<|s|>", "does", "<|s|>", "not", "<|s|>", "return", "<|s|>", "Open", "SSLSokcet", "Impl", "<|s|>", "presumably"], "tufano_code": "public byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( TYPE_2 ) VAR_1 ; return VAR_2 . METHOD_1 ( ) ; }", "our_target": "        return socket instanceof OpenSSLSocketImpl\n                ? ((OpenSSLSocketImpl) socket).getNpnSelectedProtocol()\n                : null;\n", "our_code": "    public byte[] getNpnSelectedProtocol(SSLSocket socket) {\n<|startfocus|>\n        OpenSSLSocketImpl openSSLSocket = (OpenSSLSocketImpl) socket;\n        return openSSLSocket.getNpnSelectedProtocol();\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "byte", "[", "]", "<|s|>", "get", "Npn", "Selected", "Protocol", "(", "SSLSocket", "<|s|>", "socket", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Open", "SSLSocket", "Impl", "<|s|>", "open", "SSLSocket", "<|s|>", "=", "<|s|>", "(", "Open", "SSLSocket", "Impl", ")", "<|s|>", "socket", ";", "<|nl|>", "<|8-s|>", "return", "<|s|>", "open", "SSLSocket", ".", "get", "Npn", "Selected", "Protocol", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 73, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_94", "comment_id": "NYoA1Vkw", "class_list": ["Platform"], "func_list": ["public static Platform get()", "public void logW(String warning)", "public void makeTlsTolerant(SSLSocket socket, String uriHost, boolean tlsTolerant)", "public byte[] getNpnSelectedProtocol(SSLSocket socket)", "public void setNpnProtocols(SSLSocket socket, byte[] npnProtocols)", "public OutputStream newDeflaterOutputStream("], "prime_var_dic": {"Platform": 1}}, {"idx": 36149, "status": "insert", "global_index": 6343, "project_name": "android_", "written_on": "2016-05-12 10:24:15", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { super ( VAR_2 ) ; this . VAR_3 = VAR_3 ; }", "comment": "Add propertyId", "tokenized_comment": ["Add", "<|s|>", "property", "Id"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { super ( VAR_2 ) ; }", "our_target": "      super(cause);\n      this.prop = prop;\n", "our_code": "    public BadBoostLockedRegionPriorityConfigurationException(@Nonnull Throwable cause) {\n<|startfocus|>\n      super(cause);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Bad", "Boost", "Locked", "Region", "Priority", "Configuration", "Exception", "(", "@", "Nonnull", "<|s|>", "Throwable", "<|s|>", "cause", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "super", "(", "cause", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 237, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_2497", "comment_id": "57431250_4f164d98", "class_list": ["", "BoostLockedRegionPriority", "Visitor", "BadBoostLockedRegionPriorityConfigurationException"], "func_list": ["public BoostLockedRegionPriority()", "public Visitor(@Nonnull JMethod method, @Nonnull TransformationRequest tr)", "public void endVisit(@Nonnull JSynchronizedBlock jSyncBock)", "private JExpressionStatement makeRequestCall(SourceInfo info)", "private JExpressionStatement makeResetCall(SourceInfo info)", "private JTryStatement makeTryStatement(SourceInfo info, JBlock tryBlock)", "public BadBoostLockedRegionPriorityConfigurationException(@Nonnull Throwable cause)", "public String getMessage()", "public ProblemLevel getDefaultProblemLevel()"], "prime_var_dic": {}}, {"idx": 52565, "status": "update", "global_index": 12439, "project_name": "android_", "written_on": "2014-09-02 21:09:24", "tufano_target": "public void METHOD_1 ( int state , String VAR_1 ) { if ( VAR_2 ) TYPE_1 . METHOD_2 ( VAR_3 , STRING_3 + state ) ; if ( state == VAR_4 ) { VAR_5 = false ; } }", "comment": "this is not needed", "tokenized_comment": ["this", "<|s|>", "is", "<|s|>", "not", "<|s|>", "needed"], "tufano_code": "public void METHOD_1 ( int state , String VAR_1 ) { if ( VAR_2 ) TYPE_1 . METHOD_2 ( VAR_3 , STRING_1 + STRING_2 + state ) ; if ( state == VAR_4 ) { VAR_5 = false ; } }", "our_target": "                if (DEBUG) Log.d(TAG, \"onCallStateChanged(): state is \"+ state);\n", "our_code": "            public void onCallStateChanged(int state, String incomingNumber) {\n<|startfocus|>\n                if (DEBUG) Log.d(TAG, \"onCallStateChanged(): \"+\"state is \"+ state);\n<|endfocus|>\n                // listening for emergency call ends\n                if (state == TelephonyManager.CALL_STATE_IDLE) {\n                    //mNIHandler.setEmergencyStatus(false);\n                    mIsInEmergency = false;\n                }\n            }", "tokenized_code": ["<|12-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Call", "State", "Changed", "(", "int", "<|s|>", "state", ",", "<|s|>", "String", "<|s|>", "incoming", "Number", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "DEBUG", ")", "<|s|>", "Log", ".", "d", "(", "TAG", ",", "<|s|>", "\"", "on", "Call", "State", "Changed", "(", "):", "<|s|>", "\"", "+", "\"", "state", "<|s|>", "is", "<|s|>", "\"", "+", "<|s|>", "state", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "//", "<|s|>", "listening", "<|s|>", "for", "<|s|>", "emergency", "<|s|>", "call", "<|s|>", "ends", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "state", "<|s|>", "==", "<|s|>", "Telephony", "Manager", ".", "CALL", "_", "STATE", "_", "IDLE", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "//", "m", "NIHandler", ".", "set", "Emergency", "Status", "(", "false", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "m", "Is", "In", "Emergency", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 182, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_2944", "comment_id": "d371918d_283a3300", "class_list": ["used", "GpsNetInitiatedHandler", "GpsNiNotification", "GpsNiResponse", "GpsNetInitiatedHandler"], "func_list": ["@Override public void onReceive(Context context, Intent intent)", "public GpsNetInitiatedHandler(Context context,", "public void onCallStateChanged(int state, String incomingNumber)", "public void handleNiNotification(GpsNiNotification notif)", "private void handleNiInEs(GpsNiNotification notif)", "@Override public void onReceive(Context context, Intent intent)", "public GpsNetInitiatedHandler(Context context,", "public void onCallStateChanged(int state, String incomingNumber)", "public void handleNiNotification(GpsNiNotification notif)", "private void handleNiInEs(GpsNiNotification notif)"], "prime_var_dic": {"String": 10, "boolean": 2, "int": 16, "mContext": 1, "mTelephonyManager": 1, "mPhoneStateListener": 1, "provider": 1, "mLocationManager": 1, "behavior": 1, "form": 1, "mIsSuplEsEnabled": 1, "mIsInEmergency": 1, "mNetInitiatedListener": 1, "mIsHexInput": 1, "GpsNiNotification": 1, "GpsNiResponse": 1, "from": 1, "notification": 1, "here": 1, "user": 1, "the": 1, "be": 1}}, {"idx": 94083, "status": "update", "global_index": 18995, "project_name": "android_", "written_on": "2010-10-26 00:42:29", "tufano_target": "public void METHOD_2 ( ) { }", "comment": "Please remove. It never actually worked.", "tokenized_comment": ["Please", "<|s|>", "remove", ".", "<|s|>", "It", "<|s|>", "never", "<|s|>", "actually", "<|s|>", "worked", "."], "tufano_code": "public void METHOD_1 ( ) { }", "our_target": "    public void testDummy() {\n        // Here to avoid warning that RulesEngineTest is empty\n", "our_code": "<|startfocus|>\n    public void testCreate() {\n// DISABLED to fix the build. EasyMock dependency not found on the build server,\n// will be fixed in next CL.\n//        // Creating a RulesEngine from a given project should ask for the location\n//        // of the projects' /gscripts folder.\n//        IProject projectMock = EasyMock.createMock(IProject.class);\n//        EasyMock.expect(projectMock.findMember(RulesEngine.FD_GSCRIPTS)).andReturn(null);\n//        EasyMock.replay(projectMock);\n//\n//        RulesEngine r = new RulesEngine(projectMock);\n//        assertNotNull(r);\n//\n//        EasyMock.verify(projectMock);\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Create", "(", ")", "<|s|>", "{", "<|nl|>", "//", "<|s|>", "DISABLED", "<|s|>", "to", "<|s|>", "fix", "<|s|>", "the", "<|s|>", "build", ".", "<|s|>", "Easy", "Mock", "<|s|>", "dependency", "<|s|>", "not", "<|s|>", "found", "<|s|>", "on", "<|s|>", "the", "<|s|>", "build", "<|s|>", "server", ",", "<|nl|>", "//", "<|s|>", "will", "<|s|>", "be", "<|s|>", "fixed", "<|s|>", "in", "<|s|>", "next", "<|s|>", "CL", ".", "<|nl|>", "//", "<|8-s|>", "//", "<|s|>", "Creating", "<|s|>", "a", "<|s|>", "Rules", "Engine", "<|s|>", "from", "<|s|>", "a", "<|s|>", "given", "<|s|>", "project", "<|s|>", "should", "<|s|>", "ask", "<|s|>", "for", "<|s|>", "the", "<|s|>", "location", "<|nl|>", "//", "<|8-s|>", "//", "<|s|>", "of", "<|s|>", "the", "<|s|>", "projects", "'", "<|s|>", "/", "gscripts", "<|s|>", "folder", ".", "<|nl|>", "//", "<|8-s|>", "IProject", "<|s|>", "project", "Mock", "<|s|>", "=", "<|s|>", "Easy", "Mock", ".", "create", "Mock", "(", "IProject", ".", "class", ");", "<|nl|>", "//", "<|8-s|>", "Easy", "Mock", ".", "expect", "(", "project", "Mock", ".", "find", "Member", "(", "Rules", "Engine", ".", "FD", "_", "GSCRIPTS", ")", ")", ".", "and", "Return", "(", "null", ");", "<|nl|>", "//", "<|8-s|>", "Easy", "Mock", ".", "replay", "(", "project", "Mock", ");", "<|nl|>", "//", "<|nl|>", "//", "<|8-s|>", "Rules", "Engine", "<|s|>", "r", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Rules", "Engine", "(", "project", "Mock", ");", "<|nl|>", "//", "<|8-s|>", "assert", "Not", "Null", "(", "r", ");", "<|nl|>", "//", "<|nl|>", "//", "<|8-s|>", "Easy", "Mock", ".", "verify", "(", "project", "Mock", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 33, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1957", "comment_id": "AAAA8H%2F%2F%2Bik%3D", "class_list": ["RulesEngineTest"], "func_list": ["public void testCreate()", "//    public void testCallGetDisplayName()"], "prime_var_dic": {}}, {"idx": 10979, "status": "update", "global_index": 21093, "project_name": "android_", "written_on": "2013-09-12 18:58:18", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 , int VAR_4 , TYPE_2 VAR_5 , TYPE_3 VAR_11 ) { VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = VAR_2 . METHOD_1 ( VAR_3 ) . METHOD_2 ( ) ; VAR_9 = VAR_4 ; VAR_10 = VAR_5 ; }", "comment": "If it's really a constant it should be LAYOUT_TIME_UNITS", "tokenized_comment": ["If", "<|s|>", "it", "'", "s", "<|s|>", "really", "<|s|>", "a", "<|s|>", "constant", "<|s|>", "it", "<|s|>", "should", "<|s|>", "be", "<|s|>", "LAYOUT", "_", "TIME", "_", "UNITS"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 , int VAR_4 , TYPE_2 VAR_5 ) { VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = VAR_2 . METHOD_1 ( VAR_3 ) . METHOD_2 ( ) ; VAR_9 = VAR_4 ; VAR_10 = VAR_5 ; }", "our_target": "            int yOffset, ClockType renderClock, TimeUnit defaultTimeUnits) {\n", "our_code": "    public CallHierarchyRenderer(@NonNull VmTraceData vmTraceData, @NonNull String threadName,\n<|startfocus|>\n            int yOffset, ClockType renderClock) {\n<|endfocus|>\n        mTraceData = vmTraceData;\n        mThreadName = threadName;\n        mTopCall = vmTraceData.getThread(threadName).getTopLevelCall();\n        mYOffset = yOffset;\n        mRenderClock = renderClock;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Call", "Hierarchy", "Renderer", "(", "@", "Non", "Null", "<|s|>", "Vm", "Trace", "Data", "<|s|>", "vm", "Trace", "Data", ",", "<|s|>", "@", "Non", "Null", "<|s|>", "String", "<|s|>", "thread", "Name", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "int", "<|s|>", "y", "Offset", ",", "<|s|>", "Clock", "Type", "<|s|>", "render", "Clock", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Trace", "Data", "<|s|>", "=", "<|s|>", "vm", "Trace", "Data", ";", "<|nl|>", "<|8-s|>", "m", "Thread", "Name", "<|s|>", "=", "<|s|>", "thread", "Name", ";", "<|nl|>", "<|8-s|>", "m", "Top", "Call", "<|s|>", "=", "<|s|>", "vm", "Trace", "Data", ".", "get", "Thread", "(", "thread", "Name", ")", ".", "get", "Top", "Level", "Call", "(", ");", "<|nl|>", "<|8-s|>", "m", "YOffset", "<|s|>", "=", "<|s|>", "y", "Offset", ";", "<|nl|>", "<|8-s|>", "m", "Render", "Clock", "<|s|>", "=", "<|s|>", "render", "Clock", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 60, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_3615", "comment_id": "277c55f0_4f39befe", "class_list": ["CallHierarchyRenderer"], "func_list": ["public CallHierarchyRenderer(@NonNull VmTraceData vmTraceData, @NonNull String threadName,", "public void setRenderClock(ClockType clockType)", "public void render(Graphics2D g, AffineTransform viewPortTransform)", "private Rectangle2D transformRect(AffineTransform viewPortTransform, Rectangle2D rect)", "private void drawString(Graphics2D g, String name, Rectangle2D bounds, Color fontColor)", "private void fillLayoutBounds(Call c, Rectangle2D layoutBounds)", "public String getToolTipFor(double x, double y)", "private String formatToolTip(Call c)", "private double getDurationPercentage(Call call, TimeSelector selector)", "private String getName(@NonNull Call c)", "private MethodInfo getMethodInfo(@NonNull Call c)", "private Color getFillColor(Call c)", "private Color getFontColor(Call c)", "private Color getFillColor(Call c)", "private int quantize(double inclusiveThreadPercent)", "public long get(MethodInfo info, String thread);"], "prime_var_dic": {"int": 4, "mTraceData": 1, "mThreadName": 1, "mTopCall": 1, "mYOffset": 1, "TimeUnit": 1, "current": 1, "time": 1, "Color": 1}}, {"idx": 96092, "status": "insert", "global_index": 11978, "project_name": "android_", "written_on": "2014-09-26 17:42:38", "tufano_target": "public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; return this ; }", "comment": "Make it return AndroidToolWindowFixture", "tokenized_comment": ["Make", "<|s|>", "it", "<|s|>", "return", "<|s|>", "Android", "Tool", "Window", "Fixture"], "tufano_code": "public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; }", "our_target": "    selectTab(\"Devices | logcat\");\n    return this;\n", "our_code": "  public void selectDevicesTab() {\n<|startfocus|>\n    selectTab(\"Devices | logcat\");\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "select", "Devices", "Tab", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "select", "Tab", "(", "\"", "Devices", "<|s|>", "|", "<|s|>", "logcat", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 122, "base_patch_number": 34, "changed_patch_number": 35, "code_file_name": "android_38", "comment_id": "103ddf9e_b4ee88d5", "class_list": ["AndroidToolWindowFixture", "ProcessListFixture"], "func_list": ["public void waitForProcess(@NotNull final String packageName)", "public boolean test()", "public ProcessListFixture selectItem(@NotNull final String packageName)", "public AndroidToolWindowFixture(@NotNull Project project, final @NotNull Robot robot)", "public ProcessListFixture getProcessList()", "public void selectDevicesTab()", "public void clickTerminateApplication()", "private AndroidToolWindowFixture selectTab(@NotNull final String tabName)", "protected boolean isMatching(TabLabel component)", "private ActionButtonFixture findAction(@NotNull String text)", "private JPanel getContentPanel()", "public void waitForProcess(@NotNull final String packageName)", "public boolean test()", "public ProcessListFixture selectItem(@NotNull final String packageName)"], "prime_var_dic": {}}, {"idx": 94481, "status": "update", "global_index": 17798, "project_name": "android_", "written_on": "2012-07-02 23:43:13", "tufano_target": "private boolean METHOD_2 ( String VAR_1 ) { return VAR_1 != null && TYPE_1 . contains ( VAR_1 ) ; }", "comment": "change hasX to isX", "tokenized_comment": ["change", "<|s|>", "has", "X", "<|s|>", "to", "<|s|>", "is", "X"], "tufano_code": "private boolean METHOD_1 ( String VAR_1 ) { return VAR_1 != null && TYPE_1 . contains ( VAR_1 ) ; }", "our_target": "    private boolean isWindowsExecutableExtension(String extension) {\n", "our_code": "<|startfocus|>\n    private boolean hasWindowsExecutableExtension(String extension) {\n<|endfocus|>\n        return extension != null && WINDOWS_NATIVE_EXECUTABLES.contains(extension);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "has", "Windows", "Executable", "Extension", "(", "String", "<|s|>", "extension", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "extension", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "WINDOWS", "_", "NATIVE", "_", "EXECUTABLES", ".", "contains", "(", "extension", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 130, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1947", "comment_id": "AAAHIX%2F%2F%2F80%3D", "class_list": ["NdkCommandLauncher"], "func_list": ["private boolean isWindowsExecutable(IPath commandPath)", "private IPath appendExecutableExtension(IPath commandPath)", "private String findWindowsExecutableExtension(IPath command)", "private boolean hasWindowsExecutableExtension(String extension)"], "prime_var_dic": {"sCygPath": 1}}, {"idx": 69342, "status": "update", "global_index": 12613, "project_name": "android_", "written_on": "2014-09-10 16:31:46", "tufano_target": "private static TYPE_1 METHOD_1 ( ) { TYPE_1 p = new TYPE_2 ( VAR_1 ) ; p . put ( STRING_1 , VAR_2 . METHOD_2 ( ) . VAR_3 ) ; p . put ( STRING_2 , STRING_3 ) ; return p ; }", "comment": "support", "tokenized_comment": ["support"], "tufano_code": "private static TYPE_1 METHOD_1 ( ) { TYPE_1 p = new TYPE_2 ( VAR_1 ) ; p . put ( STRING_1 , VAR_2 . METHOD_2 ( ) . VAR_3 ) ; p . put ( STRING_2 , STRING_3 ) ; return p ; }", "our_target": "        // To support apps running with native bridge, the os.arch should be changeable.\n", "our_code": "    private static Properties createSystemProperties() {\n        Properties p = new PropertiesWithNonOverrideableDefaults(unchangeableSystemProperties);\n\n<|startfocus|>\n        // To sypport apps running with native bridge, the os.arch should be changeable.\n<|endfocus|>\n        p.put(\"os.arch\", Libcore.os.uname().machine);\n\n        // On Android, each app gets its own temporary directory.\n        // (See android.app.ActivityThread.) This is just a fallback default,\n        // useful only on the host.\n        p.put(\"java.io.tmpdir\", \"/tmp\");\n        return p;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "Properties", "<|s|>", "create", "System", "Properties", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Properties", "<|s|>", "p", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Properties", "With", "Non", "Overrideable", "Defaults", "(", "unchangeable", "System", "Properties", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "To", "<|s|>", "sypport", "<|s|>", "apps", "<|s|>", "running", "<|s|>", "with", "<|s|>", "native", "<|s|>", "bridge", ",", "<|s|>", "the", "<|s|>", "os", ".", "arch", "<|s|>", "should", "<|s|>", "be", "<|s|>", "changeable", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "p", ".", "put", "(", "\"", "os", ".", "arch", "\"", ",", "<|s|>", "Libcore", ".", "os", ".", "uname", "(", ")", ".", "machine", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "On", "<|s|>", "Android", ",", "<|s|>", "each", "<|s|>", "app", "<|s|>", "gets", "<|s|>", "its", "<|s|>", "own", "<|s|>", "temporary", "<|s|>", "directory", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "(", "See", "<|s|>", "android", ".", "app", ".", "Activity", "Thread", ".", ")", "<|s|>", "This", "<|s|>", "is", "<|s|>", "just", "<|s|>", "a", "<|s|>", "fallback", "<|s|>", "default", ",", "<|nl|>", "<|8-s|>", "//", "<|s|>", "useful", "<|s|>", "only", "<|s|>", "on", "<|s|>", "the", "<|s|>", "host", ".", "<|nl|>", "<|8-s|>", "p", ".", "put", "(", "\"", "java", ".", "io", ".", "tmpdir", "\"", ",", "<|s|>", "\"", "/", "tmp", "\"", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "p", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 784, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2999", "comment_id": "d0fa6781_f23a404b", "class_list": ["are", "itself", "System", "from", "file", "path</td>", "has", "that", "PropertiesWithNonOverrideableDefaults", "SystemEnvironment"], "func_list": ["public static void setIn(InputStream newIn)", "public static void setOut(PrintStream newOut)", "public static void setErr(PrintStream newErr)", "private System()", "public static native void arraycopy(Object src, int srcPos,", "public static void exit(int code)", "public static void gc()", "public static String getenv(String name)", "public static Properties getProperties()", "private static Properties initUnchangeableSystemProperties()", "private static Properties createSystemProperties()", "private static void parsePropertyAssignments(Properties p, String[] assignments)", "public static String getProperty(String propertyName)", "public static String setProperty(String name, String value)", "public static String clearProperty(String name)", "private static void checkPropertyName(String name)", "public static Console console()", "public static SecurityManager getSecurityManager()", "private static final String lineSeparator;", "public static void load(String pathName)", "public static void loadLibrary(String libName)", "public static void logE(String message)", "public static void logI(String message)", "public static void logW(String message)", "public static void runFinalization()", "public static void runFinalizersOnExit(boolean flag)", "public static void setProperties(Properties p)", "public static void setSecurityManager(SecurityManager sm)", "public Object put(Object key, Object value)", "public Object remove(Object key)", "public SystemEnvironment(Map<String, String> map)", "public static String getenv(String name)", "@Override public boolean containsKey(Object key)", "@Override public boolean containsValue(Object value)", "private String toNonNullString(Object o)", "public static void setIn(InputStream newIn)", "public static void setOut(PrintStream newOut)", "public static void setErr(PrintStream newErr)", "private System()", "public static native void arraycopy(Object src, int srcPos,", "public static void exit(int code)", "public static void gc()", "public static String getenv(String name)", "public static Properties getProperties()", "private static Properties initUnchangeableSystemProperties()", "private static Properties createSystemProperties()", "private static void parsePropertyAssignments(Properties p, String[] assignments)", "public static String getProperty(String propertyName)", "public static String setProperty(String name, String value)", "public static String clearProperty(String name)", "private static void checkPropertyName(String name)", "public static Console console()", "public static SecurityManager getSecurityManager()", "private static final String lineSeparator;", "public static void load(String pathName)", "public static void loadLibrary(String libName)", "public static void logE(String message)", "public static void logI(String message)", "public static void logW(String message)", "public static void runFinalization()", "public static void runFinalizersOnExit(boolean flag)", "public static void setProperties(Properties p)", "public static void setSecurityManager(SecurityManager sm)", "public Object put(Object key, Object value)", "public Object remove(Object key)", "public SystemEnvironment(Map<String, String> map)", "public static String getenv(String name)", "@Override public boolean containsKey(Object key)", "@Override public boolean containsValue(Object value)", "private String toNonNullString(Object o)", "public static void setIn(InputStream newIn)", "public static void setOut(PrintStream newOut)", "public static void setErr(PrintStream newErr)", "private System()", "public static native void arraycopy(Object src, int srcPos,", "public static void exit(int code)", "public static void gc()", "public static String getenv(String name)", "public static Properties getProperties()", "private static Properties initUnchangeableSystemProperties()", "private static Properties createSystemProperties()", "private static void parsePropertyAssignments(Properties p, String[] assignments)", "public static String getProperty(String propertyName)", "public static String setProperty(String name, String value)", "public static String clearProperty(String name)", "private static void checkPropertyName(String name)", "public static Console console()", "public static SecurityManager getSecurityManager()", "private static final String lineSeparator;", "public static void load(String pathName)", "public static void loadLibrary(String libName)", "public static void logE(String message)", "public static void logI(String message)", "public static void logW(String message)", "public static void runFinalization()", "public static void runFinalizersOnExit(boolean flag)", "public static void setProperties(Properties p)", "public static void setSecurityManager(SecurityManager sm)", "public Object put(Object key, Object value)", "public Object remove(Object key)", "public SystemEnvironment(Map<String, String> map)", "public static String getenv(String name)", "@Override public boolean containsKey(Object key)", "@Override public boolean containsValue(Object value)", "private String toNonNullString(Object o)", "private System()", "public static void setIn(InputStream newIn)", "public static void setOut(PrintStream newOut)", "public static void setErr(PrintStream newErr)", "private System()", "public static native void arraycopy(Object src, int srcPos,", "public static void exit(int code)", "public static void gc()", "public static String getenv(String name)", "public static Properties getProperties()", "private static Properties initUnchangeableSystemProperties()", "private static Properties createSystemProperties()", "private static void parsePropertyAssignments(Properties p, String[] assignments)", "public static String getProperty(String propertyName)", "public static String setProperty(String name, String value)", "public static String clearProperty(String name)", "private static void checkPropertyName(String name)", "public static Console console()", "public static SecurityManager getSecurityManager()", "private static final String lineSeparator;", "public static void load(String pathName)", "public static void loadLibrary(String libName)", "public static void logE(String message)", "public static void logI(String message)", "public static void logW(String message)", "public static void runFinalization()", "public static void runFinalizersOnExit(boolean flag)", "public static void setProperties(Properties p)", "public static void setSecurityManager(SecurityManager sm)", "public Object put(Object key, Object value)", "public Object remove(Object key)", "public SystemEnvironment(Map<String, String> map)", "public static String getenv(String name)", "@Override public boolean containsKey(Object key)", "@Override public boolean containsValue(Object value)", "private String toNonNullString(Object o)", "private static native void arraycopyCharUnchecked(char[] src, int srcPos,", "private static void parsePropertyAssignments(Properties p, String[] assignments)"], "prime_var_dic": {}}, {"idx": 92012, "status": "update", "global_index": 20820, "project_name": "android_", "written_on": "2013-06-28 22:01:48", "tufano_target": "public static boolean METHOD_3 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; }", "comment": "Can we fix this to not be a negative case? Every use of this method adds negates the result of this, so it reads as \"!isNonGradleAndroidProject()\", and that sounds confusing.", "tokenized_comment": ["Can", "<|s|>", "we", "<|s|>", "fix", "<|s|>", "this", "<|s|>", "to", "<|s|>", "not", "<|s|>", "be", "<|s|>", "a", "<|s|>", "negative", "<|s|>", "case", "?", "<|s|>", "Every", "<|s|>", "use", "<|s|>", "of", "<|s|>", "this", "<|s|>", "method", "<|s|>", "adds", "<|s|>", "negates", "<|s|>", "the", "<|s|>", "result", "<|s|>", "of", "<|s|>", "this", ",", "<|s|>", "so", "<|s|>", "it", "<|s|>", "reads", "<|s|>", "as", "<|s|>", "\"", "!", "is", "Non", "Gradle", "Android", "Project", "(", ")", "\"", ",", "<|s|>", "and", "<|s|>", "that", "<|s|>", "sounds", "<|s|>", "confusing", "."], "tufano_code": "public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; }", "our_target": "  public static boolean isAndroidProjectWithoutGradleFacet(@NotNull JpsProject project) {\n    return isAndroidProjectWithoutGradleFacet(project.getModules());\n", "our_code": "<|startfocus|>\n  public static boolean isNonGradleAndroidProject(@NotNull JpsProject project) {\n    return isNonGradleAndroidProject(project.getModules());\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "is", "Non", "Gradle", "Android", "Project", "(", "@", "Not", "Null", "<|s|>", "Jps", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "return", "<|s|>", "is", "Non", "Gradle", "Android", "Project", "(", "project", ".", "get", "Modules", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 812, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_91", "comment_id": "0a2cb179_379462d4", "class_list": ["AndroidJpsUtil"], "func_list": ["private AndroidJpsUtil()", "public static boolean shouldProcessDependenciesRecursively(JpsModule module)", "public static void addMessages(@NotNull CompileContext context,", "public static JpsAndroidModuleExtension getExtension(@NotNull JpsModule module)", "public static String[] toPaths(@NotNull File[] files)", "public static List<String> toPaths(@NotNull Collection<File> files)", "public static File getDirectoryForIntermediateArtifacts(@NotNull CompileContext context,", "public static File createDirIfNotExist(@NotNull File dir, @NotNull CompileContext context, @NotNull String compilerName)", "public static void addSubdirectories(@NotNull File baseDir, @NotNull Collection<String> result)", "public static Set<String> getExternalLibraries(@NotNull CompileContext context,", "public void processExternalLibrary(@NotNull File file)", "public boolean isToProcess(@NotNull AndroidDependencyType type)", "private static void addAnnotationsJarIfNecessary(@NotNull AndroidPlatform platform, @NotNull Set<String> libs)", "public static void processClasspath(@NotNull BuildDataPaths paths,", "public boolean process(File file)", "public static void processClassFilesAndJarsRecursively(@NotNull File root, @NotNull final Processor<File> processor)", "public static void reportExceptionError(@NotNull CompileContext context,", "public static File getManifestFileForCompilationPath(@NotNull JpsAndroidModuleExtension extension)", "public static AndroidPlatform getAndroidPlatform(@NotNull JpsModule module,", "public static String[] collectResourceDirsForCompilation(@NotNull JpsAndroidModuleExtension extension,", "private static void addCompilableResourceDirsForModule(JpsAndroidModuleExtension extension,", "public static File getResourceDirForCompilationPath(@NotNull JpsAndroidModuleExtension extension)", "public static List<JpsAndroidModuleExtension> getAllAndroidDependencies(@NotNull JpsModule module, boolean librariesOnly)", "public static boolean isLightBuild(@NotNull CompileContext context)", "public static boolean isInstrumentationTestContext(@NotNull CompileContext context)", "public static String getRunConfigurationTypeId(@NotNull CompileContext context)", "public static boolean isReleaseBuild(@NotNull CompileContext context)", "public static List<JpsArtifact> getAndroidArtifactsToBuild(@NotNull CompileContext context)", "public static File getResourcesCacheDir(@NotNull JpsModule module, @NotNull BuildDataPaths dataPaths)", "private static void fillSourceRoots(@NotNull JpsModule module,", "public static File[] getSourceRootsForModuleAndDependencies(@NotNull JpsModule module)", "public static String getApkPath(@NotNull JpsAndroidModuleExtension extension, @NotNull File outputDirForPackagedArtifacts)", "public static String getApkName(@NotNull JpsModule module)", "public static File getGeneratedSourcesStorage(@NotNull JpsModule module, BuildDataManager dataManager)", "public static File getPreprocessedManifestDirectory(@NotNull JpsModule module, @NotNull BuildDataPaths dataPaths)", "public static File getPreprocessedManifestFile(@NotNull JpsAndroidModuleExtension extension, @NotNull BuildDataPaths dataPaths)", "public static File getCopiedSourcesStorage(@NotNull JpsModule module, @NotNull BuildDataPaths dataPaths)", "public static File getGeneratedResourcesStorage(@NotNull JpsModule module, BuildDataManager dataManager)", "public static File getStorageFile(@NotNull File dataStorageRoot, @NotNull String storageName)", "public static File getStorageDir(@NotNull File dataStorageRoot, @NotNull String storageName)", "private static Properties readPropertyFile(@NotNull File file)", "public static JpsAndroidModuleExtension getPackagedFacet(@NotNull JpsArtifact artifact)", "public static List<JpsAndroidModuleExtension> getAllPackagedFacets(JpsArtifact artifact)", "public static boolean isNonGradleAndroidProject(@NotNull JpsProject project)"], "prime_var_dic": {"ProjectBuildException": 1, "given": 2}}, {"idx": 88983, "status": "update", "global_index": 21919, "project_name": "android_", "written_on": "2014-01-23 17:10:31", "tufano_target": "private VAR_1 ( long VAR_5 ) { VAR_3 = VAR_5 ; VAR_4 = false ; }", "comment": "Useful if had prefix of native_ to indicate that it is a native object", "tokenized_comment": ["Useful", "<|s|>", "if", "<|s|>", "had", "<|s|>", "prefix", "<|s|>", "of", "<|s|>", "native", "_", "<|s|>", "to", "<|s|>", "indicate", "<|s|>", "that", "<|s|>", "it", "<|s|>", "is", "<|s|>", "a", "<|s|>", "native", "<|s|>", "object"], "tufano_code": "private VAR_1 ( long VAR_2 ) { VAR_3 = VAR_2 ; VAR_4 = false ; }", "our_target": "    private LargeBitmap(long nativeLbm) {\n        mNativeLargeBitmap = nativeLbm;\n", "our_code": "<|startfocus|>\n    private LargeBitmap(long lbm) {\n        mNativeLargeBitmap = lbm;\n<|endfocus|>\n        mRecycled = false;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "Large", "Bitmap", "(", "long", "<|s|>", "lbm", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Native", "Large", "Bitmap", "<|s|>", "=", "<|s|>", "lbm", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Recycled", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 48, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_2006", "comment_id": "3243be82_de0ac5a7", "class_list": ["LargeBitmap"], "func_list": ["private LargeBitmap(long lbm)", "public Bitmap decodeRegion(Rect rect, BitmapFactory.Options options)", "public int getWidth()", "public int getHeight()", "public void recycle()", "private void checkRecycled(String errorMessage)", "protected void finalize()"], "prime_var_dic": {"LargeBitmap": 1, "supported": 1, "recycled": 1}}, {"idx": 44, "status": "update", "global_index": 8003, "project_name": "android_", "written_on": "2016-01-06 01:20:18", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_4 , VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_5 , VAR_3 ) ; }", "comment": "move to constants section at top of file, same below", "tokenized_comment": ["move", "<|s|>", "to", "<|s|>", "constants", "<|s|>", "section", "<|s|>", "at", "<|s|>", "top", "<|s|>", "of", "<|s|>", "file", ",", "<|s|>", "same", "<|s|>", "below"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 , VAR_3 ) ; }", "our_target": "        outState.putString(STATE_CALL_ID, mCallId);\n        outState.putString(STATE_POST_CHARS, mPostDialStr);\n", "our_code": "    public void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n\n<|startfocus|>\n        outState.putString(\"CALL_ID\", mCallId);\n        outState.putString(\"POST_CHARS\", mPostDialStr);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Save", "Instance", "State", "(", "Bundle", "<|s|>", "out", "State", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Save", "Instance", "State", "(", "out", "State", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "out", "State", ".", "put", "String", "(", "\"", "CALL", "_", "ID", "\"", ",", "<|s|>", "m", "Call", "Id", ");", "<|nl|>", "<|8-s|>", "out", "State", ".", "put", "String", "(", "\"", "POST", "_", "CHARS", "\"", ",", "<|s|>", "m", "Post", "Dial", "Str", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 87, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4317", "comment_id": "6a481bfe_e4382eaf", "class_list": ["PostCharDialogFragment"], "func_list": ["public PostCharDialogFragment()", "public Dialog onCreateDialog(Bundle savedInstanceState)", "public void onClick(DialogInterface dialog, int whichButton)", "public void onCancel(DialogInterface dialog)", "public void onSaveInstanceState(Bundle outState)"], "prime_var_dic": {}}, {"idx": 37294, "status": "update", "global_index": 21297, "project_name": "android_", "written_on": "2013-10-24 20:19:13", "tufano_target": "protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ) ; }", "comment": "Any further explanation of why it might be hanging?", "tokenized_comment": ["Any", "<|s|>", "further", "<|s|>", "explanation", "<|s|>", "of", "<|s|>", "why", "<|s|>", "it", "<|s|>", "might", "<|s|>", "be", "<|s|>", "hanging", "?"], "tufano_code": "protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; }", "our_target": "    // TODO: I'm not sure if the above wait include the wait below, we should look into this\n    MavenProjectsManager.getInstance(myProject).waitForPluginsResolvingCompletion();\n", "our_code": "  protected void waitForMavenImport() {\n    MavenProjectsManager.getInstance(myProject).waitForResolvingCompletion();\n<|startfocus|>\n    //TODO : this is causing things to hang, leave out for now\n    //MavenProjectsManager.getInstance(myProject).waitForPluginsResolvingCompletion();\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "void", "<|s|>", "wait", "For", "Maven", "Import", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Maven", "Projects", "Manager", ".", "get", "Instance", "(", "my", "Project", ")", ".", "wait", "For", "Resolving", "Completion", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "TODO", "<|s|>", ":", "<|s|>", "this", "<|s|>", "is", "<|s|>", "causing", "<|s|>", "things", "<|s|>", "to", "<|s|>", "hang", ",", "<|s|>", "leave", "<|s|>", "out", "<|s|>", "for", "<|s|>", "now", "<|nl|>", "<|4-s|>", "//", "Maven", "Projects", "Manager", ".", "get", "Instance", "(", "my", "Project", ")", ".", "wait", "For", "Plugins", "Resolving", "Completion", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 94, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4597", "comment_id": "be5a14db_48925f55", "class_list": ["is", "AppEngineMavenGenerator"], "func_list": ["public AppEngineMavenGenerator(Project project, String moduleName, String rootPackage)", "protected void waitForMavenImport()", "public AppEngineMavenGenerator(Project project, String moduleName, String rootPackage)", "protected void waitForMavenImport()"], "prime_var_dic": {"AppEngineMavenGenerator": 1, "myProject": 1, "myModuleName": 1, "myRootPackage": 1, "directory": 1, "src": 1, "dirs": 1, "Callback": 1}}, {"idx": 53809, "status": "update", "global_index": 14429, "project_name": "android_", "written_on": "2014-03-20 19:44:58", "tufano_target": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 file ) { TYPE_4 < TYPE_1 > VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 , file , VAR_1 . METHOD_3 ( ) ) . iterator ( ) ; return VAR_2 . METHOD_4 ( ) ; }", "comment": "nit - trailing space", "tokenized_comment": ["nit", "<|s|>", "-", "<|s|>", "trailing", "<|s|>", "space"], "tufano_code": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 file ) { TYPE_4 < TYPE_1 > VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 , file , VAR_1 . METHOD_3 ( ) ) . iterator ( ) ; return VAR_2 . METHOD_4 ( ) ; }", "our_target": "    Iterator<SourceProvider> sourceProviderIterator =\n", "our_code": "  private static SourceProvider getFirstSourceProvider(AndroidFacet facet, @Nullable VirtualFile file) {\n<|startfocus|>\n    Iterator<SourceProvider> sourceProviderIterator = \n<|endfocus|>\n     IdeaSourceProvider.getSourceProvidersForFile(facet, file, facet.getMainSourceSet()).iterator();\n    return sourceProviderIterator.next();\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "Source", "Provider", "<|s|>", "get", "First", "Source", "Provider", "(", "Android", "Facet", "<|s|>", "facet", ",", "<|s|>", "@", "Nullable", "<|s|>", "Virtual", "File", "<|s|>", "file", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Iterator", "<", "Source", "Provider", ">", "<|s|>", "source", "Provider", "Iterator", "<|s|>", "=", "<|s|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|s|>", "Idea", "Source", "Provider", ".", "get", "Source", "Providers", "For", "File", "(", "facet", ",", "<|s|>", "file", ",", "<|s|>", "facet", ".", "get", "Main", "Source", "Set", "(", ")", ")", ".", "iterator", "(", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "source", "Provider", "Iterator", ".", "next", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 363, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_824", "comment_id": "9c21e133_6e61536b", "class_list": ["for", "NewTemplateObjectWizardTest"], "func_list": ["protected boolean requireRecentSdk()", "private static SourceProvider getFirstSourceProvider(AndroidFacet facet, @Nullable VirtualFile file)", "protected boolean requireRecentSdk()", "private static SourceProvider getFirstSourceProvider(AndroidFacet facet, @Nullable VirtualFile file)"], "prime_var_dic": {"package": 2, "module": 5, "on": 1, "another": 1}}, {"idx": 34213, "status": "update", "global_index": 20179, "project_name": "android_", "written_on": "2012-12-28 20:51:24", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 ) { if ( VAR_1 instanceof TYPE_2 ) { ( ( TYPE_2 ) VAR_1 ) . METHOD_1 ( VAR_2 ) ; } }", "comment": "no instanceof check?", "tokenized_comment": ["no", "<|s|>", "instanceof", "<|s|>", "check", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 ) { TYPE_2 VAR_3 = ( TYPE_2 ) VAR_1 ; VAR_3 . METHOD_1 ( VAR_2 ) ; }", "our_target": "        if (socket instanceof OpenSSLSocketImpl) {\n            ((OpenSSLSocketImpl) socket).setNpnProtocols(npnProtocols);\n        }\n", "our_code": "    public void setNpnProtocols(SSLSocket socket, byte[] npnProtocols) {\n<|startfocus|>\n        OpenSSLSocketImpl openSSLSocket = (OpenSSLSocketImpl) socket;\n        openSSLSocket.setNpnProtocols(npnProtocols);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Npn", "Protocols", "(", "SSLSocket", "<|s|>", "socket", ",", "<|s|>", "byte", "[", "]", "<|s|>", "npn", "Protocols", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Open", "SSLSocket", "Impl", "<|s|>", "open", "SSLSocket", "<|s|>", "=", "<|s|>", "(", "Open", "SSLSocket", "Impl", ")", "<|s|>", "socket", ";", "<|nl|>", "<|8-s|>", "open", "SSLSocket", ".", "set", "Npn", "Protocols", "(", "npn", "Protocols", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 82, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_94", "comment_id": "NYqA5ekU", "class_list": ["Platform"], "func_list": ["public static Platform get()", "public void logW(String warning)", "public void makeTlsTolerant(SSLSocket socket, String uriHost, boolean tlsTolerant)", "public byte[] getNpnSelectedProtocol(SSLSocket socket)", "public void setNpnProtocols(SSLSocket socket, byte[] npnProtocols)", "public OutputStream newDeflaterOutputStream("], "prime_var_dic": {"Platform": 1}}, {"idx": 15290, "status": "update", "global_index": 15169, "project_name": "android_", "written_on": "2014-05-28 23:52:50", "tufano_target": "public int METHOD_2 ( ) { return VAR_2 ; }", "comment": "maybe \"getSimulatedPlatformVersion\" instead?", "tokenized_comment": ["maybe", "<|s|>", "\"", "get", "Simulated", "Platform", "Version", "\"", "<|s|>", "instead", "?"], "tufano_code": "public int METHOD_1 ( ) { return VAR_1 ; }", "our_target": "    public int getSimulatedPlatformVersion() {\n        return mSimulatedPlatformVersion;\n", "our_code": "<|startfocus|>\n    public int getSimulatePlatformVersion() {\n        return mSimulatePlatformVersion;\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "int", "<|s|>", "get", "Simulate", "Platform", "Version", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "m", "Simulate", "Platform", "Version", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 169, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2820", "comment_id": "3f7c6cf0_68d20339", "class_list": ["SessionParams"], "func_list": ["private RenderingMode(boolean horizExpand, boolean vertExpand)", "public boolean isHorizExpand()", "public boolean isVertExpand()", "public SessionParams(", "public ILayoutPullParser getLayoutDescription()", "public RenderingMode getRenderingMode()", "public void setLayoutOnly()", "public boolean isLayoutOnly()", "public void addAdapterBinding(ResourceReference reference, AdapterBinding data)", "public void setExtendedViewInfoMode(boolean mode)", "public boolean getExtendedViewInfoMode()", "public int getSimulatePlatformVersion()"], "prime_var_dic": {"RenderingMode": 1, "mHorizExpand": 1, "mVertExpand": 1, "mLayoutDescription": 1, "mRenderingMode": 1, "mSimulatePlatformVersion": 1, "rendering": 2, "HardwareConfig": 2}}, {"idx": 15406, "status": "update", "global_index": 6131, "project_name": "android_", "written_on": "2016-05-03 08:57:59", "tufano_target": "public TYPE_1 METHOD_2 ( ) { return VAR_2 ; }", "comment": "Not sure about the name. Is it really a SubLocation? Something like ParentLocation? ContainerLocation?", "tokenized_comment": ["Not", "<|s|>", "sure", "<|s|>", "about", "<|s|>", "the", "<|s|>", "name", ".", "<|s|>", "Is", "<|s|>", "it", "<|s|>", "really", "<|s|>", "a", "<|s|>", "Sub", "Location", "?", "<|s|>", "Something", "<|s|>", "like", "<|s|>", "Parent", "Location", "?", "<|s|>", "Container", "Location", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }", "our_target": "  public Location getParentLocation() {\n    return parentLocation;\n", "our_code": "<|startfocus|>\n  public Location getSubLocation() {\n    return location;\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Location", "<|s|>", "get", "Sub", "Location", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "return", "<|s|>", "location", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 55, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3774", "comment_id": "cd9ccf2c_fbf5af94", "class_list": ["LineRangeLocation"], "func_list": ["public LineRangeLocation(@Nonnull Location location, @Nonnegative int startLine,", "public String getDescription()", "public Location getSubLocation()", "public int getStartLine()", "public int getEndLine()"], "prime_var_dic": {"startLine": 1, "endLine": 1, "location": 1}}, {"idx": 90089, "status": "update", "global_index": 12874, "project_name": "android_", "written_on": "2014-10-03 12:33:47", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { super ( VAR_2 ) ; }", "comment": "JSR305", "tokenized_comment": ["JSR", "305"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { super ( VAR_2 ) ; }", "our_target": "  public DirectDirOutputVDirCodec(@Nonnull Existence existence) {\n", "our_code": "<|startfocus|>\n  public DirectDirOutputVDirCodec(Existence existence) {\n<|endfocus|>\n    super(existence);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Direct", "Dir", "Output", "VDir", "Codec", "(", "Existence", "<|s|>", "existence", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "existence", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 40, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3725", "comment_id": "d0bfc88a_f20dbe56", "class_list": ["DirectDirOutputVDirCodec"], "func_list": ["public DirectDirOutputVDirCodec(Existence existence)", "public String getUsage()"], "prime_var_dic": {}}, {"idx": 90450, "status": "update", "global_index": 18760, "project_name": "android_", "written_on": "2010-08-24 21:30:36", "tufano_target": "public static TYPE_1 METHOD_1 ( ) { if ( VAR_1 == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; }", "comment": "extra return not required.", "tokenized_comment": ["extra", "<|s|>", "return", "<|s|>", "not", "<|s|>", "required", "."], "tufano_code": "public static TYPE_1 METHOD_1 ( ) { if ( VAR_1 == null ) { return VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; }", "our_target": "            model = new TreeViewModel();\n", "our_code": "    public static TreeViewModel getModel() {\n        if (model == null) {\n<|startfocus|>\n            return model = new TreeViewModel();\n<|endfocus|>\n        }\n        return model;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "Tree", "View", "Model", "<|s|>", "get", "Model", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "model", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "model", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Tree", "View", "Model", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "model", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 49, "base_patch_number": 10, "changed_patch_number": 12, "code_file_name": "android_2092", "comment_id": "AAAA6X%2F%2F%2F8I%3D", "class_list": ["TreeViewModel"], "func_list": ["public static TreeViewModel getModel()", "public void setData(Window window, ViewNode viewNode)", "public void setSelection(DrawableViewNode selectedNode)", "public void setViewport(Rectangle viewport)", "public void setZoom(double newZoom)", "public void zoomOnPoint(double newZoom, Point zoomPoint)", "public DrawableViewNode getTree()", "public Window getWindow()", "public Rectangle getViewport()", "public double getZoom()", "public DrawableViewNode getSelection()", "private TreeChangeListener[] getTreeChangeListenerList()", "public void notifyTreeChanged()", "public void notifySelectionChanged()", "public void notifyViewportChanged()", "public void notifyZoomChanged()", "public void addTreeChangeListener(TreeChangeListener listener)", "public void removeTreeChangeListener(TreeChangeListener listener)"], "prime_var_dic": {"double": 2, "model": 1, "TreeChangeListener": 1}}, {"idx": 33793, "status": "update", "global_index": 1402, "project_name": "android_", "written_on": "2015-04-23 17:26:33", "tufano_target": "private static String METHOD_1 ( String name ) { if ( name == null || name . startsWith ( STRING_1 ) ) { return null ; } return name ; }", "comment": "this might be obsolete now...", "tokenized_comment": ["this", "<|s|>", "might", "<|s|>", "be", "<|s|>", "obsolete", "<|s|>", "now", "..."], "tufano_code": "private static String METHOD_1 ( String name ) { if ( name == null || name . startsWith ( STRING_1 ) ) { return null ; } return name ; }", "our_target": "        // We don't need to use ICU for GMT or GMT(+-) zones because TimeZone.getDisplayName creates\n        // names on demand using the timezone data. This way we will never rely on ICU calculating\n        // the zone offset correctly.\n", "our_code": "    private static String filterGmt(String name) {\n<|startfocus|>\n        // We don't use the display names if they're \"GMT[+-]xx:xx\" because icu doesn't use the\n        // up-to-date time zone transition data, so it gets these wrong. TimeZone.getDisplayName\n        // creates accurate names on demand.\n<|endfocus|>\n        if (name == null || name.startsWith(\"GMT\")) {\n            return null;\n        }\n        return name;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "filter", "Gmt", "(", "String", "<|s|>", "name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "We", "<|s|>", "don", "'", "t", "<|s|>", "use", "<|s|>", "the", "<|s|>", "display", "<|s|>", "names", "<|s|>", "if", "<|s|>", "they", "'", "re", "<|s|>", "\"", "GMT", "[", "+", "-", "]", "xx", ":", "xx", "\"", "<|s|>", "because", "<|s|>", "icu", "<|s|>", "doesn", "'", "t", "<|s|>", "use", "<|s|>", "the", "<|nl|>", "<|8-s|>", "//", "<|s|>", "up", "-", "to", "-", "date", "<|s|>", "time", "<|s|>", "zone", "<|s|>", "transition", "<|s|>", "data", ",", "<|s|>", "so", "<|s|>", "it", "<|s|>", "gets", "<|s|>", "these", "<|s|>", "wrong", ".", "<|s|>", "Time", "Zone", ".", "get", "Display", "Name", "<|nl|>", "<|8-s|>", "//", "<|s|>", "creates", "<|s|>", "accurate", "<|s|>", "names", "<|s|>", "on", "<|s|>", "demand", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "name", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "name", ".", "starts", "With", "(", "\"", "GMT", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "name", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 203, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_3107", "comment_id": "309d9a70_3f42ea00", "class_list": ["TimeZoneNames", "ZoneStringsCache"], "func_list": ["public ZoneStringsCache()", "@Override protected String[][] create(Locale locale)", "public int compare(String[] lhs, String[] rhs)", "private TimeZoneNames() }", "public static String getDisplayName(String[][] zoneStrings, String id, boolean daylight, int style)", "public static String[][] getZoneStrings(Locale locale)", "public static String[] forLocale(Locale locale)", "public static String getExemplarLocation(String localeName, String tz)", "private static String[][] createZoneStrings(Locale locale)", "private static void fillZoneStrings(Locale locale, String[][] result)", "private static String filterGmt(String name)", "private static boolean isUtc(String zoneId)"], "prime_var_dic": {}}, {"idx": 94742, "status": "update", "global_index": 5474, "project_name": "android_", "written_on": "2016-09-29 09:19:04", "tufano_target": "static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_7 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; TYPE_2 . METHOD_2 ( VAR_5 , VAR_6 ) ; }", "comment": "Perhaps put this method on Locales called setDefaultLocales(), perhaps.\n\nAlternative suggestion (bit more work, feel free to ignore):\n\nIt might be clearer to have the helper actually store the defaults.\n\ne.g.\n\nclass DefaultLocalesTestHelper {\n\n  private Locale originalUncategorizedLocale;\n  private Locale originalDisplayLocale;\n  private Locale originalFormatLocale;\n\n  public DefaultLocalesTestHelper setDefaultUncategorizedLocale(Locale newUncategorizedDefault) {\n    assertNull(originalUncategorizedLocale);\n    originalUncategorizedLocale = Locale.getDefault();\n    Locale.setDefault(newUncategorizedDefault);\n  }\n... others category impls...\n  public void resetDefaults() {\n    ...\n    if (originalUncategorizedLocale != null) {\n      Locale.setDefault(originalUncategorizedLocale);\n    }\n  }\n}\n\nIt's a bit more work, but the test becomes:\n\nDefaultLocalesTestHelper helper = new DefaultLocalesTestHelper();\nhelper.setDefaultUncategorizedLocale(x).setDefaultDisplayLocale(y).setDefaultFormatLocale(z);\ntry {\n....\n} finally {\n  helper.resetDefaults();\n}\n\nClearly, if you want to keep knowledge of the ordering requirements hidden then just having a single setDefault(x,y,z) method would do.", "tokenized_comment": ["Perhaps", "<|s|>", "put", "<|s|>", "this", "<|s|>", "method", "<|s|>", "on", "<|s|>", "Locales", "<|s|>", "called", "<|s|>", "set", "Default", "Locales", "(", ")", ",", "<|s|>", "perhaps", ".", "<|nl|>", "<|nl|>", "Alternative", "<|s|>", "suggestion", "<|s|>", "(", "bit", "<|s|>", "more", "<|s|>", "work", ",", "<|s|>", "feel", "<|s|>", "free", "<|s|>", "to", "<|s|>", "ignore", "):", "<|nl|>", "<|nl|>", "It", "<|s|>", "might", "<|s|>", "be", "<|s|>", "clearer", "<|s|>", "to", "<|s|>", "have", "<|s|>", "the", "<|s|>", "helper", "<|s|>", "actually", "<|s|>", "store", "<|s|>", "the", "<|s|>", "defaults", ".", "<|nl|>", "<|nl|>", "e", ".", "g", ".", "<|nl|>", "<|nl|>", "class", "<|s|>", "Default", "Locales", "Test", "Helper", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "Locale", "<|s|>", "original", "Uncategorized", "Locale", ";", "<|nl|>", "<|2-s|>", "private", "<|s|>", "Locale", "<|s|>", "original", "Display", "Locale", ";", "<|nl|>", "<|2-s|>", "private", "<|s|>", "Locale", "<|s|>", "original", "Format", "Locale", ";", "<|nl|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Default", "Locales", "Test", "Helper", "<|s|>", "set", "Default", "Uncategorized", "Locale", "(", "Locale", "<|s|>", "new", "Uncategorized", "Default", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "assert", "Null", "(", "original", "Uncategorized", "Locale", ");", "<|nl|>", "<|4-s|>", "original", "Uncategorized", "Locale", "<|s|>", "=", "<|s|>", "Locale", ".", "get", "Default", "(", ");", "<|nl|>", "<|4-s|>", "Locale", ".", "set", "Default", "(", "new", "Uncategorized", "Default", ");", "<|nl|>", "<|2-s|>", "}", "<|nl|>", "...", "<|s|>", "others", "<|s|>", "category", "<|s|>", "impls", "...", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "reset", "Defaults", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "...", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "original", "Uncategorized", "Locale", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Locale", ".", "set", "Default", "(", "original", "Uncategorized", "Locale", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}", "<|nl|>", "}", "<|nl|>", "<|nl|>", "It", "'", "s", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "more", "<|s|>", "work", ",", "<|s|>", "but", "<|s|>", "the", "<|s|>", "test", "<|s|>", "becomes", ":", "<|nl|>", "<|nl|>", "Default", "Locales", "Test", "Helper", "<|s|>", "helper", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Default", "Locales", "Test", "Helper", "(", ");", "<|nl|>", "helper", ".", "set", "Default", "Uncategorized", "Locale", "(", "x", ")", ".", "set", "Default", "Display", "Locale", "(", "y", ")", ".", "set", "Default", "Format", "Locale", "(", "z", ");", "<|nl|>", "try", "<|s|>", "{", "<|nl|>", "...", "<|nl|>", "}", "<|s|>", "finally", "<|s|>", "{", "<|nl|>", "<|2-s|>", "helper", ".", "reset", "Defaults", "(", ");", "<|nl|>", "}", "<|nl|>", "<|nl|>", "Clearly", ",", "<|s|>", "if", "<|s|>", "you", "<|s|>", "want", "<|s|>", "to", "<|s|>", "keep", "<|s|>", "knowledge", "<|s|>", "of", "<|s|>", "the", "<|s|>", "ordering", "<|s|>", "requirements", "<|s|>", "hidden", "<|s|>", "then", "<|s|>", "just", "<|s|>", "having", "<|s|>", "a", "<|s|>", "single", "<|s|>", "set", "Default", "(", "x", ",", "y", ",", "z", ")", "<|s|>", "method", "<|s|>", "would", "<|s|>", "do", "."], "tufano_code": "static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; TYPE_2 . METHOD_2 ( VAR_5 , VAR_6 ) ; }", "our_target": "        // The lines below must set the Locales in this order because setDefault(Locale)\n        // overwrites the other ones.\n        Locale.setDefault(locales.uncategorizedLocale);\n", "our_code": "    static void setDefaultLocales(Locales locales) {\n<|startfocus|>\n        // need to set these in this order because setDefault(Locale) overwrites the other\n        // ones, at least on Android\n        Locale.setDefault(locales.locale);\n<|endfocus|>\n        Locale.setDefault(DISPLAY, locales.displayLocale);\n        Locale.setDefault(FORMAT, locales.formatLocale);\n    }", "tokenized_code": ["<|4-s|>", "static", "<|s|>", "void", "<|s|>", "set", "Default", "Locales", "(", "Locales", "<|s|>", "locales", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "need", "<|s|>", "to", "<|s|>", "set", "<|s|>", "these", "<|s|>", "in", "<|s|>", "this", "<|s|>", "order", "<|s|>", "because", "<|s|>", "set", "Default", "(", "Locale", ")", "<|s|>", "overwrites", "<|s|>", "the", "<|s|>", "other", "<|nl|>", "<|8-s|>", "//", "<|s|>", "ones", ",", "<|s|>", "at", "<|s|>", "least", "<|s|>", "on", "<|s|>", "Android", "<|nl|>", "<|8-s|>", "Locale", ".", "set", "Default", "(", "locales", ".", "locale", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Locale", ".", "set", "Default", "(", "DISPLAY", ",", "<|s|>", "locales", ".", "display", "Locale", ");", "<|nl|>", "<|8-s|>", "Locale", ".", "set", "Default", "(", "FORMAT", ",", "<|s|>", "locales", ".", "format", "Locale", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 178, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_3291", "comment_id": "420d292b_7a72d53e", "class_list": ["CurrencyTest", "Locales"], "func_list": ["public void test_getSymbol_locale()", "public void test_getSymbol_noLocaleArgument()", "public void test_getDisplayName_null()", "public void test_getDisplayName_noLocaleArgument()", "public void test_nullLocales()", "static Locales getDefaultLocales()", "static void setDefaultLocales(Locales locales)", "public Locales(Locale locale, Locale displayLocale, Locale formatLocale)"], "prime_var_dic": {}}, {"idx": 52569, "status": "update", "global_index": 2408, "project_name": "android_", "written_on": "2017-02-27 17:55:09", "tufano_target": "private boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = ( TYPE_1 ) VAR_2 . getContext ( ) . METHOD_2 ( VAR_3 ) ; return VAR_1 . METHOD_3 ( ) ; }", "comment": "final?", "tokenized_comment": ["final", "?"], "tufano_code": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( TYPE_1 ) VAR_2 . getContext ( ) . METHOD_2 ( VAR_3 ) ; return VAR_1 . METHOD_3 ( ) ; }", "our_target": "        final PowerManager pm = (PowerManager) mPhone.getContext().getSystemService(\n", "our_code": "    private boolean isPowerSaveModeOn() {\n<|startfocus|>\n        PowerManager pm = (PowerManager) mPhone.getContext().getSystemService(\n<|endfocus|>\n                Context.POWER_SERVICE);\n        return pm.isPowerSaveMode();\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Power", "Save", "Mode", "On", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Power", "Manager", "<|s|>", "pm", "<|s|>", "=", "<|s|>", "(", "Power", "Manager", ")", "<|s|>", "m", "Phone", ".", "get", "Context", "(", ")", ".", "get", "System", "Service", "(", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "Context", ".", "POWER", "_", "SERVICE", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "pm", ".", "is", "Power", "Save", "Mode", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 429, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4660", "comment_id": "ae81df5d_44507f95", "class_list": ["DeviceStateMonitor"], "func_list": ["int getValue()", "public void onReceive(Context context, Intent intent)", "public DeviceStateMonitor(Phone phone)", "private boolean shouldInvokeLegacyScreenOn()", "private boolean isLowDataExpected()", "private boolean shouldTurnOffSignalStrength()", "private boolean shouldTurnOffFullNetworkUpdate()", "private boolean shouldTurnOffDormancyUpdate()", "public void handleMessage(Message msg)", "private void updateDeviceState(int eventType, boolean state)", "private void onRilConnected()", "private void updateLegacyScreenState(boolean screenOn)", "private void sendDeviceState(DeviceStateType type, boolean state)", "private void setUnsolResponseFilter(int filter)", "private boolean isPowerSaveModeOn()", "private boolean isDeviceCharging()", "private boolean isInteractive()", "private void log(String msg)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {"int": 5, "expected": 1, "in": 1, "mValue": 1, "mPhone": 1, "been": 1, "receiver": 1, "object": 1, "message": 1, "and": 1, "bit": 1}}, {"idx": 85883, "status": "update", "global_index": 10968, "project_name": "android_", "written_on": "2015-06-08 17:23:26", "tufano_target": "public String getName ( ) { TYPE_2 VAR_1 = METHOD_1 ( ) ; return VAR_1 == null ? null : TYPE_1 . METHOD_2 ( VAR_1 ) ; }", "comment": "in what situation will it return null? can you add javadoc", "tokenized_comment": ["in", "<|s|>", "what", "<|s|>", "situation", "<|s|>", "will", "<|s|>", "it", "<|s|>", "return", "<|s|>", "null", "?", "<|s|>", "can", "<|s|>", "you", "<|s|>", "add", "<|s|>", "javadoc"], "tufano_code": "public String getName ( ) { if ( METHOD_1 ( ) == null ) { return null ; } return TYPE_1 . METHOD_2 ( METHOD_1 ( ) ) ; }", "our_target": "    StyleResourceValue style = getStyleResourceValue();\n    return style == null ? null : StyleResolver.getQualifiedStyleName(style);\n", "our_code": "  public String getName() {\n<|startfocus|>\n    if (getStyleResourceValue() == null) {\n      return null;\n    }\n    return StyleResolver.getQualifiedStyleName(getStyleResourceValue());\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Name", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "get", "Style", "Resource", "Value", "(", ")", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "Style", "Resolver", ".", "get", "Qualified", "Style", "Name", "(", "get", "Style", "Resource", "Value", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 114, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_284", "comment_id": "79c9c09b_76094ee2", "class_list": ["ThemeEditorStyle", "ApiInformation"], "func_list": ["public ThemeEditorStyle(@NotNull StyleResolver resolver,", "public boolean isProjectStyle()", "public StyleResourceValue getStyleResourceValue()", "private List<ResourceItem> getResources()", "public boolean isReadOnly()", "public String getName()", "public String getSimpleName()", "public Collection<ItemResourceValue> getValues()", "public boolean hasItem(@Nullable EditedStyleItem item)", "public ThemeEditorStyle getParent()", "private XmlTag getValueTag(@NotNull XmlTag sourceTag, @NotNull final String attribute)", "public void visitElement(PsiElement element)", "public String getValue(@NotNull final String attribute)", "public void setValue(@NotNull final String attribute, @NotNull final String value)", "protected void run()", "public void setParent(@NotNull final String newParent)", "public StyleResolver getResolver()", "public String toString()", "public boolean equals(Object obj)", "public int hashCode()", "public Configuration getConfiguration()", "public void removeAttribute(@NotNull final String attribute)", "public PsiElement getNamePsiElement()", "private ApiInformation(int minAcceptableApi)", "public boolean isPublic()"], "prime_var_dic": {}}, {"idx": 94703, "status": "update", "global_index": 11620, "project_name": "android_", "written_on": "2014-09-19 16:09:53", "tufano_target": "public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }", "comment": "searchbox should be the preferred focus, yes?", "tokenized_comment": ["searchbox", "<|s|>", "should", "<|s|>", "be", "<|s|>", "the", "<|s|>", "preferred", "<|s|>", "focus", ",", "<|s|>", "yes", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return null ; }", "our_target": "    return mySearchBox;\n", "our_code": "  public JComponent getPreferredFocusedComponent() {\n<|startfocus|>\n    return null;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "JComponent", "<|s|>", "get", "Preferred", "Focused", "Component", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 106, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_685", "comment_id": "30690375_5052024d", "class_list": ["SampleBrowserStep", "SampleSelectionListener", "SampleUrlValueDeriver", "DescriptionValueDeriver", "EditorPaneComponentBinding", "ImageListToStringDeriver"], "func_list": ["public SampleBrowserStep(@NotNull SampleCollection sampleList, Disposable parentDisposable)", "public void init()", "public void setValue(@Nullable String newValue, @NotNull HyperlinkLabel component)", "protected void textChanged(DocumentEvent e)", "public JComponent getPreferredFocusedComponent()", "public String getStepName()", "public boolean validate()", "protected void initSamplesTree()", "public Sample getValue(@NotNull Tree component)", "public void addActionListener(@NotNull ActionListener listener, @NotNull Tree component)", "public SampleSelectionListener(ActionListener externalListener)", "public void valueChanged(TreeSelectionEvent e)", "public String deriveValue(@NotNull ScopedStateStore state, Key changedKey, @Nullable String currentValue)", "public JLabel getDescriptionText()", "protected JComponent getHeader()", "public SampleSelectionListener(ActionListener externalListener)", "public void valueChanged(TreeSelectionEvent e)", "protected void textChanged(DocumentEvent e)", "protected void textChanged(DocumentEvent e)", "protected void textChanged(DocumentEvent e)", "protected void textChanged(DocumentEvent e)"], "prime_var_dic": {}}, {"idx": 2810, "status": "update", "global_index": 14043, "project_name": "android_", "written_on": "2015-02-05 21:48:35", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }", "comment": "@NotNull, likewise below for next method", "tokenized_comment": ["@", "Not", "Null", ",", "<|s|>", "likewise", "<|s|>", "below", "<|s|>", "for", "<|s|>", "next", "<|s|>", "method"], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }", "our_target": "  public static CaptureService getInstance(@NotNull Project project) {\n", "our_code": "<|startfocus|>\n  public static CaptureService getInstance(Project project) {\n<|endfocus|>\n    return ServiceManager.getService(project, CaptureService.class);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Capture", "Service", "<|s|>", "get", "Instance", "(", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "Service", "Manager", ".", "get", "Service", "(", "project", ",", "<|s|>", "Capture", "Service", ".", "class", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 57, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_493", "comment_id": "dc99ac84_521ed48f", "class_list": ["CaptureService"], "func_list": ["public CaptureService(@NotNull Project project)", "public static CaptureService getInstance(Project project)", "private static Set<VirtualFile> findCaptureFiles(VirtualFile[] files, CaptureType type)", "public void update()", "public VirtualFile getCapturesDirectory()", "public Collection<Capture> getCaptures()", "public Collection<CaptureType> getTypes()", "public void addListener(CaptureListener listener)"], "prime_var_dic": {"String": 1, "Project": 1}}, {"idx": 10187, "status": "update", "global_index": 2093, "project_name": "android_", "written_on": "2017-02-28 00:56:22", "tufano_target": "public int METHOD_1 ( TYPE_1 msg ) { int key = VAR_1 . METHOD_2 ( ) ; synchronized ( VAR_3 ) { VAR_3 . put ( key , msg ) ; } return key ; }", "comment": "very generic name for a public function.  Who calls?", "tokenized_comment": ["very", "<|s|>", "generic", "<|s|>", "name", "<|s|>", "for", "<|s|>", "a", "<|s|>", "public", "<|s|>", "function", ".", "<|2-s|>", "Who", "<|s|>", "calls", "?"], "tufano_code": "public int METHOD_1 ( TYPE_1 msg ) { int key = VAR_1 . METHOD_2 ( ) ; synchronized ( VAR_2 ) { VAR_2 . put ( key , msg ) ; } return key ; }", "our_target": "        synchronized (mPendingResponses) {\n            mPendingResponses.put(key, msg);\n", "our_code": "    public int addPendingRequest(Message msg) {\n        int key = sNextRequestId.getAndIncrement();\n<|startfocus|>\n        synchronized (mPendingRequests) {\n            mPendingRequests.put(key, msg);\n<|endfocus|>\n        }\n        return key;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "add", "Pending", "Request", "(", "Message", "<|s|>", "msg", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "key", "<|s|>", "=", "<|s|>", "s", "Next", "Request", "Id", ".", "get", "And", "Increment", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Pending", "Requests", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Pending", "Requests", ".", "put", "(", "key", ",", "<|s|>", "msg", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "key", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 220, "base_patch_number": 12, "changed_patch_number": 13, "code_file_name": "android_4705", "comment_id": "42dcd44f_551814de", "class_list": ["IccRecords", "will"], "func_list": ["public String toString()", "public IccRecords(UiccCardApplication app, Context c, CommandsInterface ci)", "public void dispose()", "public AdnRecordCache getAdnCache()", "public int addPendingRequest(Message msg)", "public Message removePendingRequest(Integer key)", "public String getIccId()", "public String getFullIccId()", "public void registerForRecordsLoaded(Handler h, int what, Object obj)", "public void unregisterForRecordsLoaded(Handler h)", "public void registerForImsiReady(Handler h, int what, Object obj)", "public void unregisterForImsiReady(Handler h)", "public void registerForRecordsEvents(Handler h, int what, Object obj)", "public void unregisterForRecordsEvents(Handler h)", "public void registerForNewSms(Handler h, int what, Object obj)", "public void unregisterForNewSms(Handler h)", "public void registerForNetworkSelectionModeAutomatic(", "public void unregisterForNetworkSelectionModeAutomatic(Handler h)", "public String getIMSI()", "public void setImsi(String imsi)", "public String getNAI()", "public String getMsisdnNumber()", "public String getGid1()", "public String getGid2()", "public void setMsisdnNumber(String alphaTag, String number,", "public String getMsisdnAlphaTag()", "public String getVoiceMailNumber()", "public String getServiceProviderName()", "protected void setServiceProviderName(String spn)", "public String getVoiceMailAlphaTag()", "protected void onIccRefreshInit()", "public boolean getRecordsLoaded()", "public void handleMessage(Message msg)", "public String getSimLanguage()", "protected void setSimLanguage(byte[] efLi, byte[] efPl)", "public boolean isCspPlmnEnabled()", "public String getOperatorNumeric()", "public int getVoiceCallForwardingFlag()", "public void setVoiceCallForwardingFlag(int line, boolean enable, String number)", "public boolean isProvisioned ()", "public IsimRecords getIsimRecords()", "public UsimServiceTable getUsimServiceTable()", "protected void setSystemProperty(String key, String val)", "public String getIccSimChallengeResponse(int authContext, String data)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {}}, {"idx": 87413, "status": "update", "global_index": 12839, "project_name": "android_", "written_on": "2014-09-30 09:03:39", "tufano_target": "public void METHOD_1 ( TYPE_2 VAR_2 ) { VAR_7 . METHOD_2 ( VAR_5 , VAR_2 . METHOD_3 ( ) ) ; }", "comment": "JSR 305", "tokenized_comment": ["JSR", "<|s|>", "305"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; if ( VAR_1 == VAR_4 ) { VAR_3 = VAR_5 ; } else { VAR_3 = VAR_6 ; } VAR_7 . METHOD_2 ( VAR_3 , VAR_2 . METHOD_3 ( ) ) ; }", "our_target": "  public void report(@SuppressWarnings(\"unused\") @Nonnull Severity severity,\n      @Nonnull Reportable reportable) {\n    // default behavior\n    logger.log(Level.SEVERE, reportable.getMessage());\n", "our_code": "<|startfocus|>\n  public void report(Severity severity, Reportable reportable) {\n    Level level;\n    if (severity == Severity.FATAL) {\n      level = Level.SEVERE;\n    } else {\n      level = Level.WARNING;\n    }\n    logger.log(level, reportable.getMessage());\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "report", "(", "Severity", "<|s|>", "severity", ",", "<|s|>", "Reportable", "<|s|>", "reportable", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Level", "<|s|>", "level", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "severity", "<|s|>", "==", "<|s|>", "Severity", ".", "FATAL", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "level", "<|s|>", "=", "<|s|>", "Level", ".", "SEVERE", ";", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "level", "<|s|>", "=", "<|s|>", "Level", ".", "WARNING", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "logger", ".", "log", "(", "level", ",", "<|s|>", "reportable", ".", "get", "Message", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 39, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2452", "comment_id": "f0e76c92_258f98ba", "class_list": ["Reporter"], "func_list": ["public void report(Severity severity, Reportable reportable)"], "prime_var_dic": {"Severity": 1}}, {"idx": 92626, "status": "update", "global_index": 17671, "project_name": "android_", "written_on": "2012-05-18 21:00:08", "tufano_target": "public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , TYPE_1 . toString ( VAR_1 ) ) ; }", "comment": "100 cols", "tokenized_comment": ["100", "<|s|>", "cols"], "tufano_code": "public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , TYPE_1 . toString ( VAR_1 ) ) ; }", "our_target": "        mSettings.mProperties.setProperty(\n                ISettingsPage.KEY_MONITOR_DENSITY, Integer.toString(density));\n", "our_code": "    public void setMonitorDensity(int density) {\n<|startfocus|>\n        mSettings.mProperties.setProperty(ISettingsPage.KEY_MONITOR_DENSITY, Integer.toString(density));\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Monitor", "Density", "(", "int", "<|s|>", "density", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Settings", ".", "m", "Properties", ".", "set", "Property", "(", "ISettings", "Page", ".", "KEY", "_", "MONITOR", "_", "DENSITY", ",", "<|s|>", "Integer", ".", "to", "String", "(", "density", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 170, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3976", "comment_id": "AAAFeX%2F%2F%2F4A%3D", "class_list": ["to", "must", "SettingsController", "Settings"], "func_list": ["public SettingsController(ISdkLog sdkLog)", "public Settings getSettings()", "public void registerOnChangedListener(OnChangedListener listener)", "public void unregisterOnChangedListener(OnChangedListener listener)", "public SettingsController(ISdkLog sdkLog)", "public boolean getForceHttp()", "public boolean getAskBeforeAdbRestart()", "public boolean getUseDownloadCache()", "public boolean getShowUpdateOnly()", "public int getMonitorDensity()", "public void setShowUpdateOnly(boolean enabled)", "public void setMonitorDensity(int density)", "void setSetting(String key, boolean value)", "public void setSettingsPage(ISettingsPage settingsPage)", "public void onSettingsChanged(SettingsController controller, Settings oldSettings);", "public void loadSettings()", "public void saveSettings()", "public void applySettings()"], "prime_var_dic": {}}, {"idx": 92582, "status": "update", "global_index": 1764, "project_name": "android_", "written_on": "2017-04-20 14:47:53", "tufano_target": "public static TYPE_1 METHOD_3 ( TYPE_2 context ) { TYPE_3 t = new TYPE_3 ( STRING_1 ) ; t . start ( ) ; return new TYPE_1 ( t . METHOD_2 ( ) , context ) ; }", "comment": "This type of method is usually called \"create\" or \"from\".", "tokenized_comment": ["This", "<|s|>", "type", "<|s|>", "of", "<|s|>", "method", "<|s|>", "is", "<|s|>", "usually", "<|s|>", "called", "<|s|>", "\"", "create", "\"", "<|s|>", "or", "<|s|>", "\"", "from", "\"", "."], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 context ) { TYPE_3 t = new TYPE_3 ( STRING_1 ) ; t . start ( ) ; return new TYPE_1 ( t . METHOD_2 ( ) , context ) ; }", "our_target": "        public static MockServiceHandler create(Context context) {\n", "our_code": "<|startfocus|>\n        public static MockServiceHandler make(Context context) {\n<|endfocus|>\n            HandlerThread t = new HandlerThread(\"mock-service-handler\");\n            t.start();\n            return new MockServiceHandler(t.getLooper(), context);\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "public", "<|s|>", "static", "<|s|>", "Mock", "Service", "Handler", "<|s|>", "make", "(", "Context", "<|s|>", "context", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "Handler", "Thread", "<|s|>", "t", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Handler", "Thread", "(", "\"", "mock", "-", "service", "-", "handler", "\"", ");", "<|nl|>", "<|12-s|>", "t", ".", "start", "(", ");", "<|nl|>", "<|12-s|>", "return", "<|s|>", "new", "<|s|>", "Mock", "Service", "Handler", "(", "t", ".", "get", "Looper", "(", ")", ",", "<|s|>", "context", ");", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 163, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5270", "comment_id": "3dbb5ff1_b241b2c2", "class_list": ["NsdManagerTest", "MockServiceHandler"], "func_list": ["public void testResolveService()", "public void testParallelResolveService()", "NsdManager makeManager()", "int verifyRequest(int expectedMessageType)", "void sendResponse(int replyType, int arg, int key, Object obj)", "public void handleMessage(Message msg)", "public static MockServiceHandler make(Context context)"], "prime_var_dic": {}}, {"idx": 14086, "status": "update", "global_index": 4088, "project_name": "android_", "written_on": "2016-07-07 17:16:54", "tufano_target": "private VAR_1 ( TYPE_1 VAR_2 ) { this . VAR_3 = ! VAR_4 . getType ( ) . equals ( TYPE_2 . getType ( ) ) ; }", "comment": "@Nonnull?", "tokenized_comment": ["@", "Nonnull", "?"], "tufano_code": "private VAR_1 ( TYPE_1 VAR_2 ) { this . VAR_3 = ! VAR_4 . getType ( ) . equals ( TYPE_2 . getType ( ) ) ; }", "our_target": "    private EpilogueInfo(@Nonnull CandidateInfo candidate) {\n", "our_code": "<|startfocus|>\n    private EpilogueInfo(CandidateInfo candidate) {\n<|endfocus|>\n      this.needsReturnLocal =\n          !candidate.callSite.getType().equals(JPrimitiveTypeEnum.VOID.getType());\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "Epilogue", "Info", "(", "Candidate", "Info", "<|s|>", "candidate", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "needs", "Return", "Local", "<|s|>", "=", "<|nl|>", "<|8-s|>", "<|2-s|>", "!", "candidate", ".", "call", "Site", ".", "get", "Type", "(", ")", ".", "equals", "(", "JPrimitive", "Type", "Enum", ".", "VOID", ".", "get", "Type", "(", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 139, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2424", "comment_id": "5db89ed4_5344fc5a", "class_list": ["makes", "JMethodInliner", "contains", "should", "CandidateInfo", "contains", "PrologueInfo", "contains", "EpilogueInfo", "Visitor"], "func_list": ["private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private PrologueInfo(CandidateInfo candidate)", "private EpilogueInfo(CandidateInfo candidate)", "private static void inline(", "private static void preparePrologue(", "private static void prepareBody(", "private static void prepareEpilogue(", "private Visitor(TransformationRequest tr)", "public boolean visit(JMethod jm)", "public void endVisit(@Nonnull JMethodCall jmc)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private PrologueInfo(CandidateInfo candidate)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private EpilogueInfo(CandidateInfo candidate)"], "prime_var_dic": {}}, {"idx": 92617, "status": "update", "global_index": 18904, "project_name": "android_", "written_on": "2010-10-06 23:12:05", "tufano_target": "public void METHOD_1 ( TYPE_1 i ) { VAR_1 = i ; }", "comment": "style: no space before opening parenthesis", "tokenized_comment": ["style", ":", "<|s|>", "no", "<|s|>", "space", "<|s|>", "before", "<|s|>", "opening", "<|s|>", "parenthesis"], "tufano_code": "public void METHOD_1 ( TYPE_1 i ) { VAR_1 = i ; }", "our_target": "    public void setLogCatViewInterface(LogCatViewInterface i) {\n", "our_code": "<|startfocus|>\n    public void setLogCatViewInterface (LogCatViewInterface i) {\n<|endfocus|>\n        mLogCatViewInterface = i;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Log", "Cat", "View", "Interface", "<|s|>", "(", "Log", "Cat", "View", "Interface", "<|s|>", "i", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Log", "Cat", "View", "Interface", "<|s|>", "=", "<|s|>", "i", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1600, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1659", "comment_id": "AAAA73%2F%2F%2FpE%3D", "class_list": ["LogPanel", "LogMessageInfo", "LogMessage", "LogCatOuputReceiver", "for", "looks", "PsOutputReceiver"], "func_list": ["public String toString()", "public LogCatOuputReceiver()", "public void processNewLines(String[] lines)", "public boolean isCancelled = false;", "public void run()", "public LogPanel(LogColors colors,", "public void setActions(ICommonAction deleteAction, ICommonAction editAction,", "public void setColumnMode(int mode)", "public void setFont(Font font)", "public void deviceSelected()", "public void clientSelected()", "protected Control createControl(Composite parent)", "public void widgetSelected(SelectionEvent e)", "public void modifyText(ModifyEvent e)", "protected void postCreation()", "public void setFocus()", "public void startLogCat(final IDevice device)", "new Thread(\"Logcat\")   //$NON-NLS-1$", "public void stopLogCat(boolean inUiThread)", "public void addFilter()", "public void editFilter()", "public void deleteFilter()", "public boolean save()", "public void clear()", "public void copy(Clipboard clipboard)", "public void selectAll()", "public void setTableFocusListener(ITableFocusListener listener)", "private void addTableToFocusListener(final Table table)", "public void focusGained(FocusEvent e)", "public void focusLost(FocusEvent e)", "private static void copyTable(Clipboard clipboard, Table table)", "public void setCurrentFilterLogLevel(int i)", "private TabItem createTab(LogFilter filter, int index, boolean fillTable)", "public void widgetDefaultSelected(SelectionEvent e)", "public void controlMoved(ControlEvent e)", "public void controlResized(ControlEvent e)", "protected void updateColumns(Table table)", "public void resetUI(boolean inUiThread)", "protected void processLogLines(String[] lines)", "private void asyncRefresh()", "private void processNewMessage(LogMessage newMessage)", "private void createFilters()", "private boolean checkFilter(final LogMessageInfo md)", "private void addFilterToArray(LogFilter newFilter)", "private void removeFilterFromArray(LogFilter oldFilter)", "private void initFilter(LogFilter filter)", "private void initDefaultFilter()", "private void resetFilters()", "private LogFilter getCurrentFilter()", "private void emptyTables()", "protected void updateFilteringWith(String text)", "private void selectionChanged(LogFilter selectedFilter)", "public String getSelectedErrorLineMessage()", "public void setLogCatViewInterface (LogCatViewInterface i)", "public String toString()", "public LogCatOuputReceiver()", "public void processNewLines(String[] lines)", "public boolean isCancelled = false;", "public void run()", "public LogPanel(LogColors colors,", "public void setActions(ICommonAction deleteAction, ICommonAction editAction,", "public void setColumnMode(int mode)", "public void setFont(Font font)", "public void deviceSelected()", "public void clientSelected()", "protected Control createControl(Composite parent)", "public void widgetSelected(SelectionEvent e)", "public void modifyText(ModifyEvent e)", "protected void postCreation()", "public void setFocus()", "public void startLogCat(final IDevice device)", "new Thread(\"Logcat\")   //$NON-NLS-1$", "public void stopLogCat(boolean inUiThread)", "public void addFilter()", "public void editFilter()", "public void deleteFilter()", "public boolean save()", "public void clear()", "public void copy(Clipboard clipboard)", "public void selectAll()", "public void setTableFocusListener(ITableFocusListener listener)", "private void addTableToFocusListener(final Table table)", "public void focusGained(FocusEvent e)", "public void focusLost(FocusEvent e)", "private static void copyTable(Clipboard clipboard, Table table)", "public void setCurrentFilterLogLevel(int i)", "private TabItem createTab(LogFilter filter, int index, boolean fillTable)", "public void widgetDefaultSelected(SelectionEvent e)", "public void controlMoved(ControlEvent e)", "public void controlResized(ControlEvent e)", "protected void updateColumns(Table table)", "public void resetUI(boolean inUiThread)", "protected void processLogLines(String[] lines)", "private void asyncRefresh()", "private void processNewMessage(LogMessage newMessage)", "private void createFilters()", "private boolean checkFilter(final LogMessageInfo md)", "private void addFilterToArray(LogFilter newFilter)", "private void removeFilterFromArray(LogFilter oldFilter)", "private void initFilter(LogFilter filter)", "private void initDefaultFilter()", "private void resetFilters()", "private LogFilter getCurrentFilter()", "private void emptyTables()", "protected void updateFilteringWith(String text)", "private void selectionChanged(LogFilter selectedFilter)", "public String getSelectedErrorLineMessage()", "public void setLogCatViewInterface (LogCatViewInterface i)", "public boolean isCancelled()", "public void processNewLines(String[] lines)", "public void run()"], "prime_var_dic": {}}, {"idx": 55591, "status": "update", "global_index": 2433, "project_name": "android_", "written_on": "2017-02-28 10:26:21", "tufano_target": "public int METHOD_1 ( ) { if ( ! METHOD_2 ( ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_1 ; }", "comment": "IllegalStateException ?", "tokenized_comment": ["Illegal", "State", "Exception", "<|s|>", "?"], "tufano_code": "public int METHOD_1 ( ) { if ( ! METHOD_2 ( ) ) { throw new TYPE_1 ( STRING_1 ) ; } return VAR_1 ; }", "our_target": "            throw new IllegalStateException(\"class index not yet set\");\n", "our_code": "    public int getClassIndex() {\n        if (!hasClassIndex()) {\n<|startfocus|>\n            throw new RuntimeException(\"class index not yet set\");\n<|endfocus|>\n        }\n\n        return classIndex;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "get", "Class", "Index", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "has", "Class", "Index", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "\"", "class", "<|s|>", "index", "<|s|>", "not", "<|s|>", "yet", "<|s|>", "set", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "class", "Index", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 174, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_1702", "comment_id": "b2c408a7_3fbfa881", "class_list": ["MultiCstInsn", "reference", "index", "index", "index", "index", "index", "referred", "", "index"], "func_list": ["public MultiCstInsn(Dop opcode, SourcePosition position,", "private MultiCstInsn(Dop opcode, SourcePosition position,", "public DalvInsn withOpcode(Dop opcode)", "public DalvInsn withRegisters(RegisterSpecList registers)", "public int getNumberOfConstants()", "public Constant getConstant(int position)", "public int getIndex(int position)", "public boolean hasIndex(int position)", "public void setIndex(int position, int index)", "public int getClassIndex()", "public boolean hasClassIndex()", "public void setClassIndex(int index)", "protected String argString()", "public String cstString()", "public String cstComment()", "public MultiCstInsn(Dop opcode, SourcePosition position,", "private MultiCstInsn(Dop opcode, SourcePosition position,", "public DalvInsn withOpcode(Dop opcode)", "public DalvInsn withRegisters(RegisterSpecList registers)", "public int getNumberOfConstants()", "public Constant getConstant(int position)", "public int getIndex(int position)", "public boolean hasIndex(int position)", "public void setIndex(int position, int index)", "public int getClassIndex()", "public boolean hasClassIndex()", "public void setClassIndex(int index)", "protected String argString()", "public String cstString()", "public String cstComment()"], "prime_var_dic": {}}, {"idx": 95363, "status": "update", "global_index": 17884, "project_name": "android_", "written_on": "2009-01-15 13:36:14", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_2 + STRING_3 ) ; }", "comment": "ok, fixed with next update\n", "tokenized_comment": ["ok", ",", "<|s|>", "fixed", "<|s|>", "with", "<|s|>", "next", "<|s|>", "update", "<|nl|>"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 ) ; }", "our_target": "        // This function should be overridden by the class CDMAPhone.\n        // It is not implemented in the class GSMPhone.\n        Log.e(LOG_TAG, \"Error! This function should never be executed, because we have an \" +\n                \"inactive CDMAPhone then.\");\n", "our_code": "    public void getEnhancedVoicePrivacy(Message onComplete) {\n<|startfocus|>\n        // This function should be overridden by the class CDMAPhone. It is not implemented in the class GSMPhone.\n        Log.e(LOG_TAG, \"Error! This function should never be executed, because we have an inactive CDMAPhone then.\");\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "get", "Enhanced", "Voice", "Privacy", "(", "Message", "<|s|>", "on", "Complete", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "This", "<|s|>", "function", "<|s|>", "should", "<|s|>", "be", "<|s|>", "overridden", "<|s|>", "by", "<|s|>", "the", "<|s|>", "class", "<|s|>", "CDMAPhone", ".", "<|s|>", "It", "<|s|>", "is", "<|s|>", "not", "<|s|>", "implemented", "<|s|>", "in", "<|s|>", "the", "<|s|>", "class", "<|s|>", "GSMPhone", ".", "<|nl|>", "<|8-s|>", "Log", ".", "e", "(", "LOG", "_", "TAG", ",", "<|s|>", "\"", "Error", "!", "<|s|>", "This", "<|s|>", "function", "<|s|>", "should", "<|s|>", "never", "<|s|>", "be", "<|s|>", "executed", ",", "<|s|>", "because", "<|s|>", "we", "<|s|>", "have", "<|s|>", "an", "<|s|>", "inactive", "<|s|>", "CDMAPhone", "<|s|>", "then", ".", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 571, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4956", "comment_id": "z425442c9d9a8deac416e4155d36c953a", "class_list": ["PhoneBase", "CDMAPhone.", "GSMPhone.", "CDMAPhone.", "GSMPhone.", "CDMAPhone.", "GSMPhone.", "CDMAPhone.", "GSMPhone."], "func_list": ["protected PhoneBase(PhoneNotifier notifier, Context context)", "public Context getContext()", "public void registerForPhoneStateChanged(Handler h, int what, Object obj)", "public void unregisterForPhoneStateChanged(Handler h)", "protected void notifyCallStateChangedP()", "public void registerForUnknownConnection(Handler h, int what, Object obj)", "public void unregisterForUnknownConnection(Handler h)", "public void registerForNewRingingConnection(", "public void unregisterForNewRingingConnection(Handler h)", "protected void notifyNewRingingConnectionP(Connection cn)", "public void registerForIncomingRing(", "public void unregisterForIncomingRing(Handler h)", "public void registerForDisconnect(Handler h, int what, Object obj)", "public void unregisterForDisconnect(Handler h)", "public void registerForSuppServiceFailed(Handler h, int what, Object obj)", "public void unregisterForSuppServiceFailed(Handler h)", "public void registerForMmiInitiate(Handler h, int what, Object obj)", "public void unregisterForMmiInitiate(Handler h)", "public void registerForMmiComplete(Handler h, int what, Object obj)", "public void unregisterForMmiComplete(Handler h)", "private String getSavedNetworkSelection()", "public void restoreSavedNetworkSelection(Message response)", "public void setUnitTestMode(boolean f)", "public boolean getUnitTestMode()", "protected void notifyDisconnectP(Connection cn)", "public void registerForServiceStateChanged(", "public void unregisterForServiceStateChanged(Handler h)", "protected void notifyServiceStateChangedP(ServiceState ss)", "public SimulatedRadioControl getSimulatedRadioControl()", "private void checkCorrectThread(Handler h)", "public void queryCdmaRoamingPreference(Message response)", "public void setCdmaRoamingPreference(int cdmaRoamingType, Message response)", "public void setCdmaSubscription(int cdmaSubscriptionType, Message response)", "public void setPreferredNetworkType(int networkType, Message response)", "public void getPreferredNetworkType(Message response)", "public void setTTYModeEnabled(boolean enable, Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "protected  boolean isValidCommandInterfaceCFReason (int commandInterfaceCFReason)", "protected  boolean isValidCommandInterfaceCFAction (int commandInterfaceCFAction)", "protected  boolean isCfEnable(int action)", "protected  void syncClirSetting()", "public void getCallForwardingOption(int commandInterfaceCFReason, Message onComplete)", "public  void saveClirSetting(int commandInterfaceCLIRMode)", "public void setCallForwardingOption(int commandInterfaceCFAction,", "public void enableEnhancedVoicePrivacy(boolean enable, Message onComplete)", "public void getEnhancedVoicePrivacy(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)", "public void queryTTYModeEnabled(Message onComplete)"], "prime_var_dic": {}}, {"idx": 19315, "status": "update", "global_index": 9189, "project_name": "android_", "written_on": "2015-09-01 15:11:39", "tufano_target": "public static TYPE_1 < TYPE_2 > METHOD_2 ( ) { return METHOD_2 ( new String [ ] { STRING_1 } ) ; }", "comment": "Consider rename: getIcuTestAll, or getAllIcuTests().", "tokenized_comment": ["Consider", "<|s|>", "rename", ":", "<|s|>", "get", "Icu", "Test", "All", ",", "<|s|>", "or", "<|s|>", "get", "All", "Icu", "Tests", "(", ")", "."], "tufano_code": "public static TYPE_1 < TYPE_2 > METHOD_1 ( ) { return METHOD_1 ( new String [ ] { STRING_1 } ) ; }", "our_target": "    public static Set<IcuTestWrapper> findWrapBaseTests() {\n        return findWrapBaseTests(new String[]{\"com.ibm.icu.dev.test.TestAll\"});\n", "our_code": "<|startfocus|>\n    public static Set<IcuTestWrapper> getIcuClass() {\n        return getIcuClass(new String[] {\"com.ibm.icu.dev.test.TestAll\"});\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "static", "<|s|>", "Set", "<", "Icu", "Test", "Wrapper", ">", "<|s|>", "get", "Icu", "Class", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "get", "Icu", "Class", "(", "new", "<|s|>", "String", "[", "]", "<|s|>", "{", "\"", "com", ".", "ibm", ".", "icu", ".", "dev", ".", "test", ".", "Test", "All", "\"", "}", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 98, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_5357", "comment_id": "247566b9_d321b4ae", "class_list": ["IcuTestProxy", "which", "in", "names", "to", "is", "name", "name", "name.", "is", "names.", "names", "*/", "that", "not", "which", "FailTest", "and", "IcuTestDelegate", "was"], "func_list": ["public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass(String[] classNames)", "public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass()", "public FailTest(String attemptedClassName, Exception error)", "String getTestClassName();", "boolean isError();", "public IcuTestDelegate(Class<?> testClass)", "int call(PrintWriter pw) throws Exception;", "public static Set<IcuTestWrapper> getIcuClass()"], "prime_var_dic": {}}, {"idx": 94108, "status": "update", "global_index": 8978, "project_name": "android_", "written_on": "2015-08-20 08:33:14", "tufano_target": "private static byte [ ] METHOD_1 ( ) { return STRING_1 . METHOD_2 ( VAR_2 ) ; }", "comment": "\"ASCII\" -> StandardCharsets.US_ASCII", "tokenized_comment": ["\"", "ASCII", "\"", "<|s|>", "->", "<|s|>", "Standard", "Charsets", ".", "US", "_", "ASCII"], "tufano_code": "private static byte [ ] METHOD_1 ( ) { try { return STRING_1 . METHOD_2 ( STRING_2 ) ; } catch ( TYPE_1 VAR_1 ) { throw new TYPE_2 ( VAR_1 ) ; } }", "our_target": "        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n                    .getBytes(StandardCharsets.US_ASCII);\n", "our_code": "    private static byte[] initializeBase64Alphabet() {\n<|startfocus|>\n        try {\n            return \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n                    .getBytes(\"ASCII\");\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "byte", "[", "]", "<|s|>", "initialize", "Base", "64", "Alphabet", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "\"", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", "01234567", "89", "+", "/", "\"", "<|nl|>", "<|16-s|>", "<|4-s|>", ".", "get", "Bytes", "(", "\"", "ASCII", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Unsupported", "Encoding", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "e", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 32, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_3108", "comment_id": "64b59dd9_3d94bb49", "class_list": ["Base64"], "func_list": ["private static byte[] initializeBase64Alphabet()", "public static String encode(byte[] in)", "private static int computeEncodingOutputLen(int inLength)", "public static byte[] decode(byte[] in)", "private static byte base64AlphabetToInt(byte c)"], "prime_var_dic": {"Base64": 1, "int": 4, "byte": 2}}, {"idx": 90852, "status": "update", "global_index": 18781, "project_name": "android_", "written_on": "2010-08-30 20:32:38", "tufano_target": "<ERROR>", "comment": "Please don't name your variables \"android_src\" and \"androidSrc\". First our naming scheme is to use the camel version and second please find some more descriptive names, these are just to similar and confusing.\n\nWhen it's a string path, please use \"OsPath\" to denote a filesystem path vs \"WsPath\" for a workspace path.\n\nI suggest:\nIPath androidSrc;\nString androidSrcOsPath;", "tokenized_comment": ["Please", "<|s|>", "don", "'", "t", "<|s|>", "name", "<|s|>", "your", "<|s|>", "variables", "<|s|>", "\"", "android", "_", "src", "\"", "<|s|>", "and", "<|s|>", "\"", "android", "Src", "\"", ".", "<|s|>", "First", "<|s|>", "our", "<|s|>", "naming", "<|s|>", "scheme", "<|s|>", "is", "<|s|>", "to", "<|s|>", "use", "<|s|>", "the", "<|s|>", "camel", "<|s|>", "version", "<|s|>", "and", "<|s|>", "second", "<|s|>", "please", "<|s|>", "find", "<|s|>", "some", "<|s|>", "more", "<|s|>", "descriptive", "<|s|>", "names", ",", "<|s|>", "these", "<|s|>", "are", "<|s|>", "just", "<|s|>", "to", "<|s|>", "similar", "<|s|>", "and", "<|s|>", "confusing", ".", "<|nl|>", "<|nl|>", "When", "<|s|>", "it", "'", "s", "<|s|>", "a", "<|s|>", "string", "<|s|>", "path", ",", "<|s|>", "please", "<|s|>", "use", "<|s|>", "\"", "Os", "Path", "\"", "<|s|>", "to", "<|s|>", "denote", "<|s|>", "a", "<|s|>", "filesystem", "<|s|>", "path", "<|s|>", "vs", "<|s|>", "\"", "Ws", "Path", "\"", "<|s|>", "for", "<|s|>", "a", "<|s|>", "workspace", "<|s|>", "path", ".", "<|nl|>", "<|nl|>", "I", "<|s|>", "suggest", ":", "<|nl|>", "IPath", "<|s|>", "android", "Src", ";", "<|nl|>", "String", "<|s|>", "android", "Src", "Os", "Path", ";"], "tufano_code": "<ERROR>", "our_target": "        IPath androidSrc = null;\n        String androidSrcOsPath = null;\n", "our_code": "    private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths,\n            IAndroidTarget target) {\n        ArrayList<IClasspathEntry> list = new ArrayList<IClasspathEntry>();\n\n        // First, we create the IClasspathEntry for the framework.\n        // now add the android framework to the class path.\n        // create the path object.\n        IPath android_lib = new Path(paths[CACHE_INDEX_JAR]);\n        \n<|startfocus|>\n        IPath android_src = null;\n        String androidSrc = null;\n<|endfocus|>\n        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n        if (target != null) {\n            androidSrc = ProjectHelper.loadStringProperty(root, getAndroidSourceProperty(target));\n        }\n        if (androidSrc != null && androidSrc.trim().length() > 0) {\n            android_src = new Path(androidSrc);\n        }\n        if (android_src == null) {\n            android_src = new Path(paths[CACHE_INDEX_SRC]);\n            File androidSrcFile = new File(paths[CACHE_INDEX_SRC]);\n            if (!androidSrcFile.isDirectory()) {\n                android_src = null;\n            }\n        }\n\n        if (android_src == null && target != null) {\n            Bundle bundle = getSourceBundle();\n\n            if (bundle != null) {\n                AndroidVersion version = target.getVersion();\n                String apiString = version.getApiString();\n                String sourcePath = apiString + SOURCES_ZIP;\n                // FIXME API level 6 (SDK 2.0.1) and API Level 5 (SDK 2.0) are\n                // same; Cannot find source for API level 5\n                if (\"6\".equals(apiString)) {\n                    sourcePath = \"5\" + SOURCES_ZIP;\n                }\n                URL sourceURL = bundle.getEntry(sourcePath);\n                if (sourceURL != null) {\n                    URL url = null;\n                    try {\n                        url = FileLocator.resolve(sourceURL);\n                    } catch (IOException ignore) {\n                    }\n                    if (url != null) {\n                        androidSrc = url.getFile();\n                        if (new File(androidSrc).isFile()) {\n                            android_src = new Path(androidSrc);\n                        }\n                    }\n                }\n            }\n        }\n\n        // create the java doc link.\n        String androidApiURL = ProjectHelper.loadStringProperty(root, PROPERTY_ANDROID_API);\n        String apiURL = null;\n        if (androidApiURL != null) {\n            apiURL = androidApiURL;\n        } else {\n            if (testURL(androidApiURL)) {\n                apiURL = androidApiURL;\n            } else if (testURL(paths[CACHE_INDEX_DOCS_URI])) {\n                apiURL = paths[CACHE_INDEX_DOCS_URI];\n            } else if (testURL(ANDROID_API_REFERENCE)) {\n                apiURL = ANDROID_API_REFERENCE;\n            }\n        }\n        IClasspathAttribute[] attributes = null;\n        if (apiURL != null) {\n\n            IClasspathAttribute cpAttribute = JavaCore.newClasspathAttribute(\n                    IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, apiURL);\n            attributes = new IClasspathAttribute[] {\n                cpAttribute\n            };\n        }\n        // create the access rule to restrict access to classes in\n        // com.android.internal\n        IAccessRule accessRule = JavaCore.newAccessRule(new Path(\"com/android/internal/**\"), //$NON-NLS-1$\n                IAccessRule.K_NON_ACCESSIBLE);\n\n        IClasspathEntry frameworkClasspathEntry = JavaCore.newLibraryEntry(android_lib,\n                android_src, // source attachment path\n                null, // default source attachment root path.\n                new IAccessRule[] {\n                    accessRule\n                }, attributes, false // not exported.\n                );\n\n        list.add(frameworkClasspathEntry);\n\n        // now deal with optional libraries\n        if (paths.length >= 5) {\n            String docPath = paths[CACHE_INDEX_OPT_DOCS_URI];\n            int i = 4;\n            while (i < paths.length) {\n                Path jarPath = new Path(paths[i++]);\n\n                attributes = null;\n                if (docPath.length() > 0) {\n                    attributes = new IClasspathAttribute[] {\n                        JavaCore.newClasspathAttribute(\n                                IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, docPath)\n                    };\n                }\n\n                IClasspathEntry entry = JavaCore.newLibraryEntry(jarPath, null, // source\n                                                                                // attachment\n                                                                                // path\n                        null, // default source attachment root path.\n                        null, attributes, false // not exported.\n                        );\n                list.add(entry);\n            }\n        }\n\n        if (apiURL != null) {\n            ProjectHelper.saveStringProperty(root, PROPERTY_ANDROID_API, apiURL);\n        }\n        if (android_src != null && target != null) {\n            ProjectHelper.saveStringProperty(root, getAndroidSourceProperty(target),\n                    android_src.toOSString());\n        }\n        return list.toArray(new IClasspathEntry[list.size()]);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "IClasspath", "Entry", "[", "]", "<|s|>", "create", "Classpath", "Entries", "From", "Paths", "(", "String", "[", "]", "<|s|>", "paths", ",", "<|nl|>", "<|12-s|>", "IAndroid", "Target", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "<|s|>", "list", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "First", ",", "<|s|>", "we", "<|s|>", "create", "<|s|>", "the", "<|s|>", "IClasspath", "Entry", "<|s|>", "for", "<|s|>", "the", "<|s|>", "framework", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "add", "<|s|>", "the", "<|s|>", "android", "<|s|>", "framework", "<|s|>", "to", "<|s|>", "the", "<|s|>", "class", "<|s|>", "path", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "path", "<|s|>", "object", ".", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "_", "lib", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "JAR", "]", ");", "<|nl|>", "<|8-s|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "IWorkspace", "Root", "<|s|>", "root", "<|s|>", "=", "<|s|>", "Resources", "Plugin", ".", "get", "Workspace", "(", ")", ".", "get", "Root", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Src", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "android", "Src", ".", "trim", "(", ")", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "File", "<|s|>", "android", "Src", "File", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "android", "Src", "File", ".", "is", "Directory", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "==", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Bundle", "<|s|>", "bundle", "<|s|>", "=", "<|s|>", "get", "Source", "Bundle", "(", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "bundle", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Android", "Version", "<|s|>", "version", "<|s|>", "=", "<|s|>", "target", ".", "get", "Version", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "api", "String", "<|s|>", "=", "<|s|>", "version", ".", "get", "Api", "String", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "source", "Path", "<|s|>", "=", "<|s|>", "api", "String", "<|s|>", "+", "<|s|>", "SOURCES", "_", "ZIP", ";", "<|nl|>", "<|16-s|>", "//", "<|s|>", "FIXME", "<|s|>", "API", "<|s|>", "level", "<|s|>", "6", "<|s|>", "(", "SDK", "<|s|>", "2", ".", "0", ".", "1", ")", "<|s|>", "and", "<|s|>", "API", "<|s|>", "Level", "<|s|>", "5", "<|s|>", "(", "SDK", "<|s|>", "2", ".", "0", ")", "<|s|>", "are", "<|nl|>", "<|16-s|>", "//", "<|s|>", "same", ";", "<|s|>", "Cannot", "<|s|>", "find", "<|s|>", "source", "<|s|>", "for", "<|s|>", "API", "<|s|>", "level", "<|s|>", "5", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "\"", "6", "\"", ".", "equals", "(", "api", "String", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "source", "Path", "<|s|>", "=", "<|s|>", "\"", "5", "\"", "<|s|>", "+", "<|s|>", "SOURCES", "_", "ZIP", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "URL", "<|s|>", "source", "URL", "<|s|>", "=", "<|s|>", "bundle", ".", "get", "Entry", "(", "source", "Path", ");", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "source", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "URL", "<|s|>", "url", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "url", "<|s|>", "=", "<|s|>", "File", "Locator", ".", "resolve", "(", "source", "URL", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "ignore", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "url", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "url", ".", "get", "File", "(", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "new", "<|s|>", "File", "(", "android", "Src", ")", ".", "is", "File", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "android", "_", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "java", "<|s|>", "doc", "<|s|>", "link", ".", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Api", "URL", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ");", "<|nl|>", "<|8-s|>", "String", "<|s|>", "api", "URL", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "test", "URL", "(", "android", "Api", "URL", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "]", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "ANDROID", "_", "API", "_", "REFERENCE", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "ANDROID", "_", "API", "_", "REFERENCE", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|12-s|>", "IClasspath", "Attribute", "<|s|>", "cp", "Attribute", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|12-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "cp", "Attribute", "<|nl|>", "<|12-s|>", "};", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "access", "<|s|>", "rule", "<|s|>", "to", "<|s|>", "restrict", "<|s|>", "access", "<|s|>", "to", "<|s|>", "classes", "<|s|>", "in", "<|nl|>", "<|8-s|>", "//", "<|s|>", "com", ".", "android", ".", "internal", "<|nl|>", "<|8-s|>", "IAccess", "Rule", "<|s|>", "access", "Rule", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Access", "Rule", "(", "new", "<|s|>", "Path", "(", "\"", "com", "/", "android", "/", "internal", "/*", "*", "\"", ")", ",", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "1", "$", "<|nl|>", "<|16-s|>", "IAccess", "Rule", ".", "K", "_", "NON", "_", "ACCESSIBLE", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "IClasspath", "Entry", "<|s|>", "framework", "Classpath", "Entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "android", "_", "lib", ",", "<|nl|>", "<|16-s|>", "android", "_", "src", ",", "<|s|>", "//", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "path", "<|nl|>", "<|16-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "new", "<|s|>", "IAccess", "Rule", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "access", "Rule", "<|nl|>", "<|16-s|>", "}", ",", "<|s|>", "attributes", ",", "<|s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "list", ".", "add", "(", "framework", "Classpath", "Entry", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "deal", "<|s|>", "with", "<|s|>", "optional", "<|s|>", "libraries", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "paths", ".", "length", "<|s|>", ">=", "<|s|>", "5", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "doc", "Path", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "OPT", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "4", ";", "<|nl|>", "<|12-s|>", "while", "<|s|>", "(", "i", "<|s|>", "<", "<|s|>", "paths", ".", "length", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Path", "<|s|>", "jar", "Path", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "i", "++", "]", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "doc", "Path", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "doc", "Path", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", "};", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "IClasspath", "Entry", "<|s|>", "entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "jar", "Path", ",", "<|s|>", "null", ",", "<|s|>", "//", "<|s|>", "source", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "//", "<|s|>", "attachment", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "//", "<|s|>", "path", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "attributes", ",", "<|s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", ");", "<|nl|>", "<|16-s|>", "list", ".", "add", "(", "entry", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "_", "src", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "android", "_", "src", ".", "to", "OSString", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "list", ".", "to", "Array", "(", "new", "<|s|>", "IClasspath", "Entry", "[", "list", ".", "size", "(", ")", "]", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 481, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1863", "comment_id": "AAAA63%2F%2F%2F%2Bc%3D", "class_list": ["AndroidClasspathContainerInitializer", "path."], "func_list": ["public AndroidClasspathContainerInitializer()", "public static IClasspathEntry getContainerEntry()", "public static boolean checkPath(IPath path)", "public static boolean updateProjects(IJavaProject[] androidProjects)", "private static IClasspathContainer allocateAndroidContainer(IJavaProject javaProject)", "public IClasspathEntry[] getClasspathEntries()", "public String getDescription()", "public int getKind()", "public IPath getPath()", "protected IStatus run(IProgressMonitor monitor)", "private static IClasspathEntry[] createClasspathEntries(IProject project,", "private static AndroidClasspathContainer getContainerFromCache(IProject project,", "private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths,", "private static Bundle getSourceBundle()", "private static String getAndroidSourceProperty(IAndroidTarget target)", "private static boolean testURL(String androidApiURL)", "public static void checkProjectsCache(ArrayList<IJavaProject> projects)", "private static String[] getTargetPaths(IAndroidTarget target)", "public boolean canUpdateClasspathContainer(IPath containerPath, IJavaProject project)", "public AndroidClasspathContainerInitializer()"], "prime_var_dic": {"path": 1, "String": 5, "int": 5}}, {"idx": 51930, "status": "insert", "global_index": 1467, "project_name": "android_", "written_on": "2017-01-23 19:36:45", "tufano_target": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . start ( ) ; VAR_4 . start ( ) ; VAR_3 = true ; METHOD_4 ( VAR_3 ) ; VAR_3 = ! VAR_3 ; }", "comment": "Out of curiosity - do you know what this will look like when we might not want an upstream attached?  (well, this and the code below).\n\nWhat if we want to tether usb to cell but then have an app create a local only hotspot?", "tokenized_comment": ["Out", "<|s|>", "of", "<|s|>", "curiosity", "<|s|>", "-", "<|s|>", "do", "<|s|>", "you", "<|s|>", "know", "<|s|>", "what", "<|s|>", "this", "<|s|>", "will", "<|s|>", "look", "<|s|>", "like", "<|s|>", "when", "<|s|>", "we", "<|s|>", "might", "<|s|>", "not", "<|s|>", "want", "<|s|>", "an", "<|s|>", "upstream", "<|s|>", "attached", "?", "<|2-s|>", "(", "well", ",", "<|s|>", "this", "<|s|>", "and", "<|s|>", "the", "<|s|>", "code", "<|s|>", "below", ")", ".", "<|nl|>", "<|nl|>", "What", "<|s|>", "if", "<|s|>", "we", "<|s|>", "want", "<|s|>", "to", "<|s|>", "tether", "<|s|>", "usb", "<|s|>", "to", "<|s|>", "cell", "<|s|>", "but", "<|s|>", "then", "<|s|>", "have", "<|s|>", "an", "<|s|>", "app", "<|s|>", "create", "<|s|>", "a", "<|s|>", "local", "<|s|>", "only", "<|s|>", "hotspot", "?"], "tufano_code": "public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . start ( ) ; VAR_3 = true ; METHOD_4 ( VAR_3 ) ; VAR_3 = ! VAR_3 ; }", "our_target": "                mUpstreamNetworkMonitor.start();\n                mOffloadController.start();\n", "our_code": "            public void enter() {\n                // TODO: examine if we should check the return value.\n                turnOnMasterTetherSettings(); // may transition us out\n                mSimChange.startListening();\n<|startfocus|>\n                mUpstreamNetworkMonitor.start();\n<|endfocus|>\n\n                mTryCell = true;  // better try something first pass or crazy tests cases will fail\n                chooseUpstreamType(mTryCell);\n                mTryCell = !mTryCell;\n            }", "tokenized_code": ["<|12-s|>", "public", "<|s|>", "void", "<|s|>", "enter", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "examine", "<|s|>", "if", "<|s|>", "we", "<|s|>", "should", "<|s|>", "check", "<|s|>", "the", "<|s|>", "return", "<|s|>", "value", ".", "<|nl|>", "<|16-s|>", "turn", "On", "Master", "Tether", "Settings", "(", ");", "<|s|>", "//", "<|s|>", "may", "<|s|>", "transition", "<|s|>", "us", "<|s|>", "out", "<|nl|>", "<|16-s|>", "m", "Sim", "Change", ".", "start", "Listening", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "m", "Upstream", "Network", "Monitor", ".", "start", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|16-s|>", "m", "Try", "Cell", "<|s|>", "=", "<|s|>", "true", ";", "<|2-s|>", "//", "<|s|>", "better", "<|s|>", "try", "<|s|>", "something", "<|s|>", "first", "<|s|>", "pass", "<|s|>", "or", "<|s|>", "crazy", "<|s|>", "tests", "<|s|>", "cases", "<|s|>", "will", "<|s|>", "fail", "<|nl|>", "<|16-s|>", "choose", "Upstream", "Type", "(", "m", "Try", "Cell", ");", "<|nl|>", "<|16-s|>", "m", "Try", "Cell", "<|s|>", "=", "<|s|>", "!", "m", "Try", "Cell", ";", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 1319, "base_patch_number": 8, "changed_patch_number": 10, "code_file_name": "android_4099", "comment_id": "284ae270_b50cb162", "class_list": ["holds", "Tethering", "", "TetherState", "StateReceiver", "TetherMasterSM", "TetherMasterUtilState", "InitialState", "TetherModeAliveState", "ErrorState", "SetIpForwardingEnabledErrorState", "SetIpForwardingDisabledErrorState", "StartTetheringErrorState", "StopTetheringErrorState", "SetDnsForwardersErrorState"], "func_list": ["public TetherState(TetherInterfaceStateMachine sm)", "public Tethering(Context context, INetworkManagementService nmService,", "public void onSimCardLoaded()", "private ConnectivityManager getConnectivityManager()", "private void updateConfiguration()", "public void interfaceStatusChanged(String iface, boolean up)", "public void interfaceLinkStateChanged(String iface, boolean up)", "private int ifaceNameToType(String iface)", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "public void startTethering(int type, ResultReceiver receiver,", "public void stopTethering(int type)", "protected boolean isTetherProvisioningRequired()", "private boolean hasMobileHotspotProvisionApp()", "private void enableTetheringInternal(int type, boolean enable, ResultReceiver receiver)", "private void sendTetherResult(ResultReceiver receiver, int result)", "private int setWifiTethering(final boolean enable)", "private void setBluetoothTethering(final boolean enable, final ResultReceiver receiver)", "public void onServiceDisconnected(int profile)  }", "public void onServiceConnected(int profile, BluetoothProfile proxy)", "private void runUiTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendUiTetherProvisionIntent(int type, ResultReceiver receiver)", "private ResultReceiver getProxyReceiver(final int type, final ResultReceiver receiver)", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void scheduleProvisioningRechecks(int type)", "private void runSilentTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendSilentTetherProvisionIntent(int type, ResultReceiver receiver)", "private void cancelTetherProvisioningRechecks(int type)", "private void startProvisionIntent(int tetherType)", "private void startProvisionIntent(int tetherType)", "public int untether(String iface)", "public void untetherAll()", "public int getLastTetherError(String iface)", "private void sendTetherStateChangedBroadcast()", "private void showTetheredNotification(int icon)", "private void clearTetheredNotification()", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void handleConnectivityAction(Intent intent)", "private void handleUsbAction(Intent intent)", "private void handleWifiApAction(Intent intent)", "private void tetherMatchingInterfaces(boolean enable, int interfaceType)", "public TetheringConfiguration getTetheringConfiguration()", "public boolean hasTetherableConfiguration()", "public String[] getTetherableUsbRegexs()", "public String[] getTetherableWifiRegexs()", "public String[] getTetherableBluetoothRegexs()", "public int setUsbTethering(boolean enable)", "public String[] getTetheredIfaces()", "public String[] getTetherableIfaces()", "public String[] getTetheredDhcpRanges()", "public String[] getErroredIfaces()", "private void maybeLogMessage(State state, int what)", "boolean pertainsToCurrentUpstream(NetworkState ns)", "private void reevaluateSimCardProvisioning()", "public boolean processMessage(Message m)", "protected boolean requestUpstreamMobileConnection(int apnType)", "protected void unrequestUpstreamMobileConnection()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)", "public void enter()", "public void exit()", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public void notifyInterfaceStateChange(String iface, TetherInterfaceStateMachine who,", "private void trackNewTetherableInterface(String iface, int interfaceType)", "private static String[] copy(String[] strarray)", "public TetherState(TetherInterfaceStateMachine sm)", "public Tethering(Context context, INetworkManagementService nmService,", "public void onSimCardLoaded()", "private ConnectivityManager getConnectivityManager()", "private void updateConfiguration()", "public void interfaceStatusChanged(String iface, boolean up)", "public void interfaceLinkStateChanged(String iface, boolean up)", "private int ifaceNameToType(String iface)", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "public void startTethering(int type, ResultReceiver receiver,", "public void stopTethering(int type)", "protected boolean isTetherProvisioningRequired()", "private boolean hasMobileHotspotProvisionApp()", "private void enableTetheringInternal(int type, boolean enable, ResultReceiver receiver)", "private void sendTetherResult(ResultReceiver receiver, int result)", "private int setWifiTethering(final boolean enable)", "private void setBluetoothTethering(final boolean enable, final ResultReceiver receiver)", "public void onServiceDisconnected(int profile)  }", "public void onServiceConnected(int profile, BluetoothProfile proxy)", "private void runUiTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendUiTetherProvisionIntent(int type, ResultReceiver receiver)", "private ResultReceiver getProxyReceiver(final int type, final ResultReceiver receiver)", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void scheduleProvisioningRechecks(int type)", "private void runSilentTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendSilentTetherProvisionIntent(int type, ResultReceiver receiver)", "private void cancelTetherProvisioningRechecks(int type)", "private void startProvisionIntent(int tetherType)", "private void startProvisionIntent(int tetherType)", "public int untether(String iface)", "public void untetherAll()", "public int getLastTetherError(String iface)", "private void sendTetherStateChangedBroadcast()", "private void showTetheredNotification(int icon)", "private void clearTetheredNotification()", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void handleConnectivityAction(Intent intent)", "private void handleUsbAction(Intent intent)", "private void handleWifiApAction(Intent intent)", "private void tetherMatchingInterfaces(boolean enable, int interfaceType)", "public TetheringConfiguration getTetheringConfiguration()", "public boolean hasTetherableConfiguration()", "public String[] getTetherableUsbRegexs()", "public String[] getTetherableWifiRegexs()", "public String[] getTetherableBluetoothRegexs()", "public int setUsbTethering(boolean enable)", "public String[] getTetheredIfaces()", "public String[] getTetherableIfaces()", "public String[] getTetheredDhcpRanges()", "public String[] getErroredIfaces()", "private void maybeLogMessage(State state, int what)", "boolean pertainsToCurrentUpstream(NetworkState ns)", "private void reevaluateSimCardProvisioning()", "public boolean processMessage(Message m)", "protected boolean requestUpstreamMobileConnection(int apnType)", "protected void unrequestUpstreamMobileConnection()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)", "public void enter()", "public void exit()", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public void notifyInterfaceStateChange(String iface, TetherInterfaceStateMachine who,", "private void trackNewTetherableInterface(String iface, int interfaceType)", "private static String[] copy(String[] strarray)", "public TetherState(TetherInterfaceStateMachine sm)", "public Tethering(Context context, INetworkManagementService nmService,", "public void onSimCardLoaded()", "private ConnectivityManager getConnectivityManager()", "private void updateConfiguration()", "public void interfaceStatusChanged(String iface, boolean up)", "public void interfaceLinkStateChanged(String iface, boolean up)", "private int ifaceNameToType(String iface)", "public void interfaceAdded(String iface)", "public void interfaceRemoved(String iface)", "public void startTethering(int type, ResultReceiver receiver,", "public void stopTethering(int type)", "protected boolean isTetherProvisioningRequired()", "private boolean hasMobileHotspotProvisionApp()", "private void enableTetheringInternal(int type, boolean enable, ResultReceiver receiver)", "private void sendTetherResult(ResultReceiver receiver, int result)", "private int setWifiTethering(final boolean enable)", "private void setBluetoothTethering(final boolean enable, final ResultReceiver receiver)", "public void onServiceDisconnected(int profile)  }", "public void onServiceConnected(int profile, BluetoothProfile proxy)", "private void runUiTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendUiTetherProvisionIntent(int type, ResultReceiver receiver)", "private ResultReceiver getProxyReceiver(final int type, final ResultReceiver receiver)", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void scheduleProvisioningRechecks(int type)", "private void runSilentTetherProvisioningAndEnable(int type, ResultReceiver receiver)", "private void sendSilentTetherProvisionIntent(int type, ResultReceiver receiver)", "private void cancelTetherProvisioningRechecks(int type)", "private void startProvisionIntent(int tetherType)", "private void startProvisionIntent(int tetherType)", "public int untether(String iface)", "public void untetherAll()", "public int getLastTetherError(String iface)", "private void sendTetherStateChangedBroadcast()", "private void showTetheredNotification(int icon)", "private void clearTetheredNotification()", "protected void onReceiveResult(int resultCode, Bundle resultData)", "private void handleConnectivityAction(Intent intent)", "private void handleUsbAction(Intent intent)", "private void handleWifiApAction(Intent intent)", "private void tetherMatchingInterfaces(boolean enable, int interfaceType)", "public TetheringConfiguration getTetheringConfiguration()", "public boolean hasTetherableConfiguration()", "public String[] getTetherableUsbRegexs()", "public String[] getTetherableWifiRegexs()", "public String[] getTetherableBluetoothRegexs()", "public int setUsbTethering(boolean enable)", "public String[] getTetheredIfaces()", "public String[] getTetherableIfaces()", "public String[] getTetheredDhcpRanges()", "public String[] getErroredIfaces()", "private void maybeLogMessage(State state, int what)", "boolean pertainsToCurrentUpstream(NetworkState ns)", "private void reevaluateSimCardProvisioning()", "public boolean processMessage(Message m)", "protected boolean requestUpstreamMobileConnection(int apnType)", "protected void unrequestUpstreamMobileConnection()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)", "public void enter()", "public void exit()", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "public void dump(FileDescriptor fd, PrintWriter writer, String[] args)", "public void notifyInterfaceStateChange(String iface, TetherInterfaceStateMachine who,", "private void trackNewTetherableInterface(String iface, int interfaceType)", "private static String[] copy(String[] strarray)", "public TetherState(TetherInterfaceStateMachine sm)", "public boolean processMessage(Message m)", "protected boolean requestUpstreamMobileConnection(int apnType)", "protected void unrequestUpstreamMobileConnection()", "protected boolean turnOnMasterTetherSettings()", "protected boolean turnOffMasterTetherSettings()", "protected void chooseUpstreamType(boolean tryCell)", "protected void setDnsForwarders(final Network network, final LinkProperties lp)", "protected void notifyTetheredOfNewUpstreamIface(String ifaceName)", "protected void handleNewUpstreamNetworkState(NetworkState ns)"], "prime_var_dic": {"down": 1, "mIPv6TetheringCoordinator": 1, "int": 1}}, {"idx": 32618, "status": "update", "global_index": 13354, "project_name": "android_", "written_on": "2014-11-21 17:17:53", "tufano_target": "private boolean METHOD_3 ( TYPE_4 VAR_4 ) { for ( TYPE_2 VAR_2 : VAR_4 . METHOD_4 ( ) ) { if ( VAR_2 instanceof TYPE_3 && ( ( ( TYPE_3 ) VAR_2 ) . METHOD_2 ( ) == VAR_3 ) ) { return true ; } } return false ; }", "comment": "annotable.getAnnotationsTypes()", "tokenized_comment": ["annotable", ".", "get", "Annotations", "Types", "(", ")"], "tufano_code": "private boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 ) { if ( VAR_2 instanceof TYPE_3 && ( ( ( TYPE_3 ) VAR_2 ) . METHOD_2 ( ) == VAR_3 ) ) { return true ; } } return false ; }", "our_target": "  private boolean isAnnotatedByRuntimeAnnotation(@Nonnull Annotable annotable) {\n    for (JAnnotation annotation: annotable.getAnnotationTypes()) {\n", "our_code": "<|startfocus|>\n  private boolean containsRuntimeAnnotation(@Nonnull Collection<JAnnotation> annotationTypes) {\n    for (JAnnotation annotation: annotationTypes) {\n<|endfocus|>\n      if (annotation instanceof JDefinedAnnotation\n          && (((JDefinedAnnotation) annotation).getRetentionPolicy() == JRetentionPolicy.RUNTIME)) {\n        return true;\n      }\n    }\n    return false;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "boolean", "<|s|>", "contains", "Runtime", "Annotation", "(", "@", "Nonnull", "<|s|>", "Collection", "<", "JAnnotation", ">", "<|s|>", "annotation", "Types", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "JAnnotation", "<|s|>", "annotation", ":", "<|s|>", "annotation", "Types", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "annotation", "<|s|>", "instanceof", "<|s|>", "JDefined", "Annotation", "<|nl|>", "<|8-s|>", "<|2-s|>", "&&", "<|s|>", "(", "(", "(", "JDefined", "Annotation", ")", "<|s|>", "annotation", ")", ".", "get", "Retention", "Policy", "(", ")", "<|s|>", "==", "<|s|>", "JRetention", "Policy", ".", "RUNTIME", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 82, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_2232", "comment_id": "df3a79c4_34aa3e67", "class_list": ["AnnotatedFinder"], "func_list": ["private boolean hasRuntimeAnnotation(@Nonnull JDefinedClassOrInterface type)", "private boolean containsRuntimeAnnotation(@Nonnull Collection<JAnnotation> annotationTypes)"], "prime_var_dic": {"implements": 1}}, {"idx": 52928, "status": "update", "global_index": 16361, "project_name": "android_", "written_on": "2015-03-31 14:45:33", "tufano_target": "private static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; while ( VAR_1 . list ( ) . length > 1 ) { TYPE_2 . METHOD_3 ( ) ; } }", "comment": "if Daemons.stop doesn't return until all other threads have stopped, why do you ever find yourself in this loop?", "tokenized_comment": ["if", "<|s|>", "Daemons", ".", "stop", "<|s|>", "doesn", "'", "t", "<|s|>", "return", "<|s|>", "until", "<|s|>", "all", "<|s|>", "other", "<|s|>", "threads", "<|s|>", "have", "<|s|>", "stopped", ",", "<|s|>", "why", "<|s|>", "do", "<|s|>", "you", "<|s|>", "ever", "<|s|>", "find", "<|s|>", "yourself", "<|s|>", "in", "<|s|>", "this", "<|s|>", "loop", "?"], "tufano_code": "private static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; while ( VAR_1 . list ( ) . length > 1 ) { try { TYPE_2 . METHOD_2 ( 1 ) ; } catch ( TYPE_3 VAR_2 ) { } } }", "our_target": "          Thread.yield();\n", "our_code": "    private static void waitUntilAllThreadsStopped() {\n        File tasks = new File(\"/proc/self/task\");\n        while (tasks.list().length > 1) {\n<|startfocus|>\n            try {\n                Thread.sleep(1);\n            } catch (InterruptedException ignored) {\n            }\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "wait", "Until", "All", "Threads", "Stopped", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "File", "<|s|>", "tasks", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "\"", "/", "proc", "/", "self", "/", "task", "\"", ");", "<|nl|>", "<|8-s|>", "while", "<|s|>", "(", "tasks", ".", "list", "(", ")", ".", "length", "<|s|>", ">", "<|s|>", "1", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Thread", ".", "sleep", "(", "1", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Interrupted", "Exception", "<|s|>", "ignored", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 76, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1607", "comment_id": "83143e89_8bb62eee", "class_list": ["ZygoteHooks"], "func_list": ["public void preFork()", "public void postForkChild(int debugFlags, String instructionSet)", "public void postForkCommon()", "private static void waitUntilAllThreadsStopped()"], "prime_var_dic": {"ZygoteHooks": 1, "one": 1}}, {"idx": 15043, "status": "insert", "global_index": 11101, "project_name": "android_", "written_on": "2015-06-15 17:16:50", "tufano_target": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 . compareTo ( TYPE_2 . METHOD_3 ( VAR_3 ) ) >= 0 ; } else { return false ; } return false ; }", "comment": "unnecessary. remove please.", "tokenized_comment": ["unnecessary", ".", "<|s|>", "remove", "<|s|>", "please", "."], "tufano_code": "private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 . compareTo ( TYPE_2 . METHOD_3 ( VAR_3 ) ) >= 0 ; } else { return false ; } }", "our_target": "    }\n    return false;\n", "our_code": "  private static boolean gradleModelIsRecent(@NotNull Project project) {\n    // Sync has failed, so we can only check the build file.\n    FullRevision fromBuildFile = GradleUtil.getAndroidGradleModelVersionFromBuildFile(project);\n    if (fromBuildFile != null) {\n      return fromBuildFile.compareTo(FullRevision.parseRevision(GRADLE_PLUGIN_RECOMMENDED_VERSION)) >= 0;\n    } else {\n      return false;\n<|startfocus|>\n    }\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "gradle", "Model", "Is", "Recent", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Sync", "<|s|>", "has", "<|s|>", "failed", ",", "<|s|>", "so", "<|s|>", "we", "<|s|>", "can", "<|s|>", "only", "<|s|>", "check", "<|s|>", "the", "<|s|>", "build", "<|s|>", "file", ".", "<|nl|>", "<|4-s|>", "Full", "Revision", "<|s|>", "from", "Build", "File", "<|s|>", "=", "<|s|>", "Gradle", "Util", ".", "get", "Android", "Gradle", "Model", "Version", "From", "Build", "File", "(", "project", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "from", "Build", "File", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "from", "Build", "File", ".", "compare", "To", "(", "Full", "Revision", ".", "parse", "Revision", "(", "GRADLE", "_", "PLUGIN", "_", "RECOMMENDED", "_", "VERSION", ")", ")", "<|s|>", ">=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 122, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_414", "comment_id": "f9d3f093_ca86e31a", "class_list": ["GradleDslMethodNotFoundErrorHandler"], "func_list": ["public boolean handleError(@NotNull List<String> message,", "private static NotificationHyperlink getGradleSettingsHyperlink(@NotNull Project project)", "protected void execute(@NotNull Project project)", "private static boolean gradleModelIsRecent(@NotNull Project project)", "private static boolean isUsingWrapper(@NotNull Project project)", "private static NotificationHyperlink getApplyGradlePluginHyperlink(@NotNull final VirtualFile virtualFile,", "private static void openFile(@NotNull VirtualFile virtualFile, @NotNull NotificationData notification, @NotNull Project project)"], "prime_var_dic": {}}, {"idx": 81302, "status": "update", "global_index": 10873, "project_name": "android_", "written_on": "2015-05-26 15:30:33", "tufano_target": "public int METHOD_5 ( ) { int size = 0 ; TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) ; while ( VAR_1 . METHOD_3 ( ) ) { size ++ ; VAR_1 . METHOD_4 ( ) ; } return size ; }", "comment": "getJayceCount ?", "tokenized_comment": ["get", "Jayce", "Count", "<|s|>", "?"], "tufano_code": "public int METHOD_1 ( ) { int size = 0 ; TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) ; while ( VAR_1 . METHOD_3 ( ) ) { size ++ ; VAR_1 . METHOD_4 ( ) ; } return size ; }", "our_target": "  public int getJayceCount() {\n", "our_code": "<|startfocus|>\n  public int getJayceSize() {\n<|endfocus|>\n    int size = 0;\n    Iterator<InputVFile> jayceIter = getJayceIterator();\n    while (jayceIter.hasNext()) {\n      size++;\n      jayceIter.next();\n    }\n    return size;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "int", "<|s|>", "get", "Jayce", "Size", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "size", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "Iterator", "<", "Input", "VFile", ">", "<|s|>", "jayce", "Iter", "<|s|>", "=", "<|s|>", "get", "Jayce", "Iterator", "(", ");", "<|nl|>", "<|4-s|>", "while", "<|s|>", "(", "jayce", "Iter", ".", "has", "Next", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "size", "++", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "jayce", "Iter", ".", "next", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "size", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 229, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_2580", "comment_id": "ed8889a6_28b6afcb", "class_list": ["is", "IncrementalTestHelper"], "func_list": ["public void setOut(OutputStream out)", "public void setErr(OutputStream err)", "public void setIsApiTest()", "public File getCompilerStateFolder()", "public void cleanSnapshot()", "public void snapshotJackFilesModificationDate()", "public List<String> getFQNOfRebuiltTypes()", "public File getDexFile()", "public Iterator<InputVFile> getJayceIterator()", "public int getJayceSize()", "public void setOut(OutputStream out)", "public void setErr(OutputStream err)", "public void setIsApiTest()", "public File getCompilerStateFolder()", "public void cleanSnapshot()", "public void snapshotJackFilesModificationDate()", "public List<String> getFQNOfRebuiltTypes()", "public File getDexFile()", "public Iterator<InputVFile> getJayceIterator()", "public int getJayceSize()"], "prime_var_dic": {"testingFolder": 1, "sourceFolder": 1, "dexOutDir": 1, "dexFile": 1, "compilerStateFolder": 1, "IOException": 1, "Exception": 1}}, {"idx": 9111, "status": "update", "global_index": 15104, "project_name": "android_", "written_on": "2014-05-30 13:59:11", "tufano_target": "public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }", "comment": "lowercase boolean", "tokenized_comment": ["lowercase", "<|s|>", "boolean"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }", "our_target": "  public boolean isActiveUser() {\n", "our_code": "<|startfocus|>\n  public Boolean isActiveUser() {\n<|endfocus|>\n    return myUser.isActive();\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Boolean", "<|s|>", "is", "Active", "User", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "my", "User", ".", "is", "Active", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 38, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_2963", "comment_id": "bfe21c19_b2deb873", "class_list": ["UsersListItem"], "func_list": ["public UsersListItem (User aUser)", "public String getUserEmail()", "public Boolean isActiveUser()", "public String getUserName()", "public Image getUserPicture()"], "prime_var_dic": {}}, {"idx": 492, "status": "update", "global_index": 9019, "project_name": "android_", "written_on": "2015-08-10 15:31:54", "tufano_target": "private VAR_1 ( TYPE_1 VAR_2 , TYPE_2 value , TYPE_3 VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = value ; VAR_6 = VAR_3 ; }", "comment": "Nit: parameters indentation", "tokenized_comment": ["Nit", ":", "<|s|>", "parameters", "<|s|>", "indentation"], "tufano_code": "private VAR_1 ( TYPE_1 VAR_2 , TYPE_2 value , TYPE_3 VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = value ; VAR_6 = VAR_3 ; }", "our_target": "  private ConfiguredElement(@NotNull FolderConfiguration folderConfiguration, @NotNull T value, @NotNull ThemeEditorStyle sourceStyle) {\n", "our_code": "<|startfocus|>\n  private ConfiguredElement(@NotNull FolderConfiguration folderConfiguration,\n                           @NotNull T value,\n                           @NotNull ThemeEditorStyle sourceStyle) {\n<|endfocus|>\n    myFolderConfiguration = folderConfiguration;\n    myValue = value;\n    mySourceStyle = sourceStyle;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "Configured", "Element", "(", "@", "Not", "Null", "<|s|>", "Folder", "Configuration", "<|s|>", "folder", "Configuration", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|2-s|>", "<|s|>", "@", "Not", "Null", "<|s|>", "T", "<|s|>", "value", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|2-s|>", "<|s|>", "@", "Not", "Null", "<|s|>", "Theme", "Editor", "Style", "<|s|>", "source", "Style", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Folder", "Configuration", "<|s|>", "=", "<|s|>", "folder", "Configuration", ";", "<|nl|>", "<|4-s|>", "my", "Value", "<|s|>", "=", "<|s|>", "value", ";", "<|nl|>", "<|4-s|>", "my", "Source", "Style", "<|s|>", "=", "<|s|>", "source", "Style", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 33, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_280", "comment_id": "a72a3712_742b6835", "class_list": ["is", "ConfiguredElement<T>"], "func_list": ["private ConfiguredElement(@NotNull FolderConfiguration folderConfiguration,", "public FolderConfiguration getConfiguration()", "public T getElement()", "public ThemeEditorStyle getSourceStyle()"], "prime_var_dic": {"Configurable": 1, "element": 1}}, {"idx": 88801, "status": "update", "global_index": 20718, "project_name": "android_", "written_on": "2013-05-31 14:42:12", "tufano_target": "void METHOD_5 ( boolean VAR_3 ) { VAR_4 = VAR_3 ; METHOD_2 ( VAR_4 ) ; String text ; if ( VAR_2 ) { METHOD_3 ( ) ; text = STRING_1 ; } else { text = STRING_2 ; } METHOD_4 ( ) . setText ( text ) ; }", "comment": "Here too I would drop the \"Is\" on the method name. Your call.", "tokenized_comment": ["Here", "<|s|>", "too", "<|s|>", "I", "<|s|>", "would", "<|s|>", "drop", "<|s|>", "the", "<|s|>", "\"", "Is", "\"", "<|s|>", "on", "<|s|>", "the", "<|s|>", "method", "<|s|>", "name", ".", "<|s|>", "Your", "<|s|>", "call", "."], "tufano_code": "void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; METHOD_2 ( VAR_2 ) ; String text ; if ( VAR_2 ) { METHOD_3 ( ) ; text = STRING_1 ; } else { text = STRING_2 ; } METHOD_4 ( ) . setText ( text ) ; }", "our_target": "    void setLoading(boolean loading) {\n      myLoading = loading;\n      setPaintBusy(myLoading);\n", "our_code": "<|startfocus|>\n    void setIsLoading(boolean isLoading) {\n      myIsLoading = isLoading;\n      setPaintBusy(myIsLoading);\n<|endfocus|>\n      String text;\n      if (myIsLoading) {\n        clearContents();\n        text = \"Loading...\";\n      } else {\n        text = \"Nothing to Show\";\n      }\n      getEmptyText().setText(text);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "void", "<|s|>", "set", "Is", "Loading", "(", "boolean", "<|s|>", "is", "Loading", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Is", "Loading", "<|s|>", "=", "<|s|>", "is", "Loading", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "set", "Paint", "Busy", "(", "my", "Is", "Loading", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "text", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "my", "Is", "Loading", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "clear", "Contents", "(", ");", "<|nl|>", "<|8-s|>", "text", "<|s|>", "=", "<|s|>", "\"", "Loading", "...", "\"", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|8-s|>", "text", "<|s|>", "=", "<|s|>", "\"", "Nothing", "<|s|>", "to", "<|s|>", "Show", "\"", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "get", "Empty", "Text", "(", ")", ".", "set", "Text", "(", "text", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 260, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_443", "comment_id": "bdde9125_e158e00b", "class_list": ["BuildVariantView", "BuildVariantItem", "BuildVariantTable", "BuildVariantTableModel"], "func_list": ["public BuildVariantView(@NotNull Project project)", "void setUpdater(@NotNull BuildVariantUpdater updater)", "public static BuildVariantView getInstance(@NotNull Project project)", "public void addListener(@NotNull BuildVariantSelectionChangeListener listener)", "public void removeListener(@NotNull BuildVariantSelectionChangeListener listener)", "private void createUIComponents()", "public void projectImportStarted()", "public void createToolWindowContent(@NotNull ToolWindow toolWindow)", "public void moduleAdded(Project project, Module module)", "public void moduleRemoved(Project project, Module module)", "public void updateContents()", "public void run()", "private BuildVariantTable getVariantsTable()", "private static BuildVariantItem[] getVariantNames(@NotNull Module module)", "private static IdeaAndroidProject getAndroidProject(@NotNull Module module)", "public int compareTo(BuildVariantItem o)", "boolean hasBuildVariantName(@Nullable Object name)", "public String toString()", "public Component getTableCellRendererComponent(JTable table,", "void setIsLoading(boolean isLoading)", "private void clearContents()", "void setModel(@NotNull List<String[]> rows, @NotNull List<BuildVariantItem[]> variantNamesPerRow)", "private void addBuildVariants(@NotNull List<BuildVariantItem[]> variantNamesPerRow)", "public void itemStateChanged(ItemEvent e)", "public TableCellEditor getCellEditor(int row, int column)", "void buildVariantSelected(@NotNull AndroidFacet facet);", "public boolean isCellEditable(int row, int column)", "public void projectImportStarted()", "void setModel(@NotNull List<String[]> rows, @NotNull List<BuildVariantItem[]> variantNamesPerRow)"], "prime_var_dic": {}}, {"idx": 4748, "status": "update", "global_index": 12065, "project_name": "android_", "written_on": "2014-07-30 22:05:41", "tufano_target": "public boolean METHOD_2 ( ) { return VAR_4 && VAR_2 == VAR_3 ; }", "comment": "I think you should probably explicitly say secondaryActions instead of secondaries.", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "you", "<|s|>", "should", "<|s|>", "probably", "<|s|>", "explicitly", "<|s|>", "say", "<|s|>", "secondary", "Actions", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "secondaries", "."], "tufano_code": "public boolean METHOD_1 ( ) { return VAR_1 && VAR_2 == VAR_3 ; }", "our_target": "  public boolean getRightAlignedSecondaryActions() {\n    return myRightAlignedSecondaryActions && myOrientation == SwingConstants.HORIZONTAL;\n", "our_code": "<|startfocus|>\n  public boolean getRightAlignSecondaries() {\n    return myRightAlignSecondaries && myOrientation == SwingConstants.HORIZONTAL;\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "get", "Right", "Align", "Secondaries", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "return", "<|s|>", "my", "Right", "Align", "Secondaries", "<|s|>", "&&", "<|s|>", "my", "Orientation", "<|s|>", "==", "<|s|>", "Swing", "Constants", ".", "HORIZONTAL", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 271, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3646", "comment_id": "f6f76345_26a31c56", "class_list": ["ActionToolbarImpl", "MySeparator", "MyKeymapManagerListener", "MyTimerListener", "PopupToolbar", "ActionTarget"], "func_list": ["public static void updateAllToolbarsImmediately()", "public ActionButton getSecondaryActionsButton()", "public ActionToolbarImpl(final String place,", "public void updateUI()", "public void addNotify()", "private boolean doMacEnhancementsForMainToolbar()", "public void setForceUseMacEnhancements(boolean useMacEnhancements)", "private boolean isInsideNavBar()", "public void removeNotify()", "public JComponent getComponent()", "public int getLayoutPolicy()", "public void setLayoutPolicy(final int layoutPolicy)", "protected void paintComponent(final Graphics g)", "public boolean getRightAlignSecondaries()", "public void setRightAlignSecondaries(boolean rightAlign)", "private JComponent addComponent(AnAction action, boolean atEnd)", "else if (action instanceof CustomComponentAction)", "private void fillToolBar(final List<AnAction> actions, boolean layoutSecondaries)", "private JComponent getCustomComponent(AnAction action)", "private void tweakActionComponentUI(@NotNull Component actionComponent)", "private Dimension getMinimumButtonSize()", "public ActionButton createToolbarButton(final AnAction action, final ActionButtonLook look, final String place, final Presentation presentation, final Dimension minimumSize)", "protected DataContext getDataContext()", "public void doLayout()", "public void validate()", "private Dimension getChildPreferredSize(int index)", "private int getMaxButtonWidth()", "public int getMaxButtonHeight()", "private void calculateBoundsNowrapImpl(List<Rectangle> bounds)", "private void calculateBoundsAutoImp(Dimension sizeToFit, List<Rectangle> bounds)", "private void calculateBoundsWrapImpl(Dimension sizeToFit, List<Rectangle> bounds)", "private void calculateBoundsNowrapImpl(List<Rectangle> bounds)", "public Dimension getPreferredSize()", "public Dimension getMinimumSize()", "public MySeparator()", "public void activeKeymapChanged(final Keymap keymap)", "public ModalityState getModalityState()", "public void run()", "public void adjustTheSameSize(final boolean value)", "public void setMinimumButtonSize(@NotNull final Dimension size)", "public void setOrientation(final int orientation)", "public void updateActionsImmediately()", "public void updateActionsImmediately()", "public boolean hasVisibleActions()", "public void setTargetComponent(final JComponent component)", "public DataContext getToolbarDataContext()", "protected void processMouseMotionEvent(final MouseEvent e)", "private void showAutoPopup()", "protected void onOtherActionPerformed()", "public Boolean compute()", "public boolean check(final MouseEvent event)", "public void onClosed(LightweightWindowEvent event)", "public void afterActionPerformed(AnAction action, DataContext dataContext, AnActionEvent event)", "public void dispose()", "public void componentResized(final ComponentEvent e)", "public void componentMoved(final ComponentEvent e)", "public void componentShown(final ComponentEvent e)", "public void componentHidden(final ComponentEvent e)", "private boolean isPopupShowing()", "private void hidePopup()", "private void processClosed()", "public PopupToolbar(final String place,", "public Container getParent()", "public void beforeActionPerformed(final AnAction action, final DataContext dataContext, AnActionEvent event)", "public void beforeEditorTyping(final char c, final DataContext dataContext)", "public void setReservePlaceAutoPopupIcon(final boolean reserve)", "public void setSecondaryActionsTooltip(String secondaryActionsTooltip)", "public List<SwitchTarget> getTargets(boolean onlyVisible, boolean originalProvider)", "private ActionTarget(ActionButton button)", "public ActionCallback switchTo(boolean requestFocus)", "public boolean isVisible()", "public RelativeRectangle getRectangle()", "public JComponent getComponent()", "public String toString()", "public SwitchTarget getCurrentTarget()", "public boolean isCycleRoot()", "public List<AnAction> getActions(boolean originalProvider)", "public void setMiniMode(boolean minimalMode)", "public void setAddSeparatorFirst(boolean addSeparatorFirst)", "else if (action instanceof CustomComponentAction)", "private void fillToolBar(final List<AnAction> actions, boolean layoutSecondaries)", "public ActionButton getSecondaryActionsButton()", "protected void onOtherActionPerformed()", "protected DataContext getDataContext()", "private ActionTarget(ActionButton button)", "public ActionCallback switchTo(boolean requestFocus)", "public boolean isVisible()", "public RelativeRectangle getRectangle()", "public Component getComponent()", "public String toString()", "public SwitchTarget getCurrentTarget()", "public boolean isCycleRoot()", "public List<AnAction> getActions(boolean originalProvider)"], "prime_var_dic": {"implements": 1, "myButton": 1}}, {"idx": 85817, "status": "update", "global_index": 14791, "project_name": "android_", "written_on": "2014-04-17 23:40:27", "tufano_target": "public boolean METHOD_1 ( ) { return VAR_2 ; }", "comment": "this really means \"is unresolved\" right? Perhaps apply the Invert Boolean refactoring on this method and call it \"isResolved\" ?", "tokenized_comment": ["this", "<|s|>", "really", "<|s|>", "means", "<|s|>", "\"", "is", "<|s|>", "unresolved", "\"", "<|s|>", "right", "?", "<|s|>", "Perhaps", "<|s|>", "apply", "<|s|>", "the", "<|s|>", "Invert", "<|s|>", "Boolean", "<|s|>", "refactoring", "<|s|>", "on", "<|s|>", "this", "<|s|>", "method", "<|s|>", "and", "<|s|>", "call", "<|s|>", "it", "<|s|>", "\"", "is", "Resolved", "\"", "<|s|>", "?"], "tufano_code": "public boolean METHOD_1 ( ) { return VAR_1 ; }", "our_target": "      return myActive;\n", "our_code": "    public boolean isActive() {\n<|startfocus|>\n      return active;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Active", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "active", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 131, "base_patch_number": 15, "changed_patch_number": 16, "code_file_name": "android_440", "comment_id": "c51d3f5e_312eb781", "class_list": ["SelectionConflict", "AffectedModule"], "func_list": ["public SelectionConflict(@NotNull Module source, @NotNull String selectedVariant)", "public void addAffectedModule(@NotNull Module target, @NotNull String expectedVariant)", "public Collection<String> getExpectedVariants()", "public Collection<AffectedModule> getModulesExpectingVariant(@NotNull String variant)", "public Module getSource()", "public String getSelectedVariant()", "public List<AffectedModule> getAffectedModules()", "public boolean isAffectingDirectly(@NotNull Module module)", "public void refreshStatus()", "public boolean isResolved()", "public void setResolved(boolean resolved)", "public SelectionConflict getConflict()", "public Module getTarget()", "public String getExpectedVariant()", "public boolean isActive()", "public void setActive(boolean active)", "public SelectionConflict(@NotNull Module source, @NotNull String selectedVariant)"], "prime_var_dic": {}}, {"idx": 37782, "status": "update", "global_index": 20213, "project_name": "android_", "written_on": "2013-01-18 01:03:18", "tufano_target": "public void METHOD_1 ( TYPE_3 VAR_1 ) { if ( ! METHOD_2 ( ) ) { throw new TYPE_2 ( STRING_3 ) ; } if ( VAR_2 ) { throw new TYPE_2 ( STRING_1 + STRING_2 ) ; } this . VAR_3 = VAR_1 ; }", "comment": "could we constrain to more that PrivateKey if it needs to be EC?", "tokenized_comment": ["could", "<|s|>", "we", "<|s|>", "constrain", "<|s|>", "to", "<|s|>", "more", "<|s|>", "that", "<|s|>", "Private", "Key", "<|s|>", "if", "<|s|>", "it", "<|s|>", "needs", "<|s|>", "to", "<|s|>", "be", "<|s|>", "EC", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { throw new TYPE_2 ( STRING_1 + STRING_2 ) ; } this . VAR_3 = VAR_1 ; }", "our_target": "    public void setChannelIdPrivateKey(ECPrivateKey privateKey) {\n        if (!getUseClientMode()) {\n            throw new IllegalStateException(\"Server mode\");\n        }\n", "our_code": "<|startfocus|>\n    public void setChannelIdPrivateKey(PrivateKey privateKey) {\n<|endfocus|>\n        if (handshakeStarted) {\n            throw new IllegalStateException(\n                    \"Could not change Channel ID private key after the initial handshake has\"\n                    + \" begun.\");\n        }\n        this.channelIdPrivateKey = privateKey;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Channel", "Id", "Private", "Key", "(", "Private", "Key", "<|s|>", "private", "Key", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "handshake", "Started", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "Could", "<|s|>", "not", "<|s|>", "change", "<|s|>", "Channel", "<|s|>", "ID", "<|s|>", "private", "<|s|>", "key", "<|s|>", "after", "<|s|>", "the", "<|s|>", "initial", "<|s|>", "handshake", "<|s|>", "has", "\"", "<|nl|>", "<|16-s|>", "<|4-s|>", "+", "<|s|>", "\"", "<|s|>", "begun", ".", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "this", ".", "channel", "Id", "Private", "Key", "<|s|>", "=", "<|s|>", "private", "Key", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 859, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_3159", "comment_id": "OZRAULVM", "class_list": ["OpenSSLSocketImpl", "OpenSSLSocketImpl", "provides", "SSLInputStream", "provides", "SSLOutputStream"], "func_list": ["private OpenSSLSessionImpl getCachedClientSession(ClientSessionContext sessionContext)", "String getPeerHostName()", "int getPeerPort()", "private static X509Certificate[] createCertChain(byte[][] certificatesBytes)", "public void handshakeCompleted()", "private void notifyHandshakeCompletedListeners()", "@Override public SSLSession getSession()", "@Override public void addHandshakeCompletedListener(", "@Override public void removeHandshakeCompletedListener(", "@Override public boolean getEnableSessionCreation()", "@Override public void setEnableSessionCreation(boolean flag)", "@Override public String[] getSupportedCipherSuites()", "@Override public String[] getEnabledCipherSuites()", "@Override public void setEnabledCipherSuites(String[] suites)", "@Override public String[] getSupportedProtocols()", "@Override public String[] getEnabledProtocols()", "@Override public void setEnabledProtocols(String[] protocols)", "public void setUseSessionTickets(boolean useSessionTickets)", "public void setHostname(String hostname)", "public void setChannelIdEnabled(boolean enabled)", "public void setChannelIdPrivateKey(PrivateKey privateKey)", "@Override public boolean getUseClientMode()", "@Override public void setUseClientMode(boolean mode)", "@Override public boolean getWantClientAuth()", "@Override public boolean getNeedClientAuth()", "@Override public void setNeedClientAuth(boolean need)", "@Override public void setWantClientAuth(boolean want)", "private void free()", "public byte[] getNpnSelectedProtocol()", "public void setNpnProtocols(byte[] npnProtocols)", "private OpenSSLSessionImpl getCachedClientSession(ClientSessionContext sessionContext)", "String getPeerHostName()", "int getPeerPort()", "private static X509Certificate[] createCertChain(byte[][] certificatesBytes)", "public void handshakeCompleted()", "private void notifyHandshakeCompletedListeners()", "@Override public SSLSession getSession()", "@Override public void addHandshakeCompletedListener(", "@Override public void removeHandshakeCompletedListener(", "@Override public boolean getEnableSessionCreation()", "@Override public void setEnableSessionCreation(boolean flag)", "@Override public String[] getSupportedCipherSuites()", "@Override public String[] getEnabledCipherSuites()", "@Override public void setEnabledCipherSuites(String[] suites)", "@Override public String[] getSupportedProtocols()", "@Override public String[] getEnabledProtocols()", "@Override public void setEnabledProtocols(String[] protocols)", "public void setUseSessionTickets(boolean useSessionTickets)", "public void setHostname(String hostname)", "public void setChannelIdEnabled(boolean enabled)", "public void setChannelIdPrivateKey(PrivateKey privateKey)", "@Override public boolean getUseClientMode()", "@Override public void setUseClientMode(boolean mode)", "@Override public boolean getWantClientAuth()", "@Override public boolean getNeedClientAuth()", "@Override public void setNeedClientAuth(boolean need)", "@Override public void setWantClientAuth(boolean want)", "private void free()", "public byte[] getNpnSelectedProtocol()", "public void setNpnProtocols(byte[] npnProtocols)"], "prime_var_dic": {"be": 1}}, {"idx": 90538, "status": "update", "global_index": 18763, "project_name": "android_", "written_on": "2010-08-30 23:12:48", "tufano_target": "<ERROR>", "comment": "May I suggest this variable be renamed to androidLib to match the style?", "tokenized_comment": ["May", "<|s|>", "I", "<|s|>", "suggest", "<|s|>", "this", "<|s|>", "variable", "<|s|>", "be", "<|s|>", "renamed", "<|s|>", "to", "<|s|>", "android", "Lib", "<|s|>", "to", "<|s|>", "match", "<|s|>", "the", "<|s|>", "style", "?"], "tufano_code": "<ERROR>", "our_target": "        IPath androidLib = new Path(paths[CACHE_INDEX_JAR]);\n", "our_code": "    private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths,\n            IAndroidTarget target) {\n        ArrayList<IClasspathEntry> list = new ArrayList<IClasspathEntry>();\n\n        // First, we create the IClasspathEntry for the framework.\n        // now add the android framework to the class path.\n        // create the path object.\n<|startfocus|>\n        IPath android_lib = new Path(paths[CACHE_INDEX_JAR]);\n<|endfocus|>\n\n        IPath androidSrc = null;\n        String androidSrcOsPath = null;\n        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n        if (target != null) {\n            androidSrcOsPath = ProjectHelper.loadStringProperty(root, getAndroidSourceProperty(target));\n        }\n        if (androidSrcOsPath != null && androidSrcOsPath.trim().length() > 0) {\n            androidSrc = new Path(androidSrcOsPath);\n        }\n        if (androidSrc == null) {\n            androidSrc = new Path(paths[CACHE_INDEX_SRC]);\n            File androidSrcFile = new File(paths[CACHE_INDEX_SRC]);\n            if (!androidSrcFile.isDirectory()) {\n                androidSrc = null;\n            }\n        }\n\n        if (androidSrc == null && target != null) {\n            Bundle bundle = getSourceBundle();\n\n            if (bundle != null) {\n                AndroidVersion version = target.getVersion();\n                String apiString = version.getApiString();\n                String sourcePath = apiString + SOURCES_ZIP;\n                URL sourceURL = bundle.getEntry(sourcePath);\n                if (sourceURL != null) {\n                    URL url = null;\n                    try {\n                        url = FileLocator.resolve(sourceURL);\n                    } catch (IOException ignore) {\n                    }\n                    if (url != null) {\n                        androidSrcOsPath = url.getFile();\n                        if (new File(androidSrcOsPath).isFile()) {\n                            androidSrc = new Path(androidSrcOsPath);\n                        }\n                    }\n                }\n            }\n        }\n\n        // create the java doc link.\n        String androidApiURL = ProjectHelper.loadStringProperty(root, PROPERTY_ANDROID_API);\n        String apiURL = null;\n        if (androidApiURL != null) {\n            apiURL = androidApiURL;\n        } else {\n            if (testURL(androidApiURL)) {\n                apiURL = androidApiURL;\n            } else if (testURL(paths[CACHE_INDEX_DOCS_URI])) {\n                apiURL = paths[CACHE_INDEX_DOCS_URI];\n            } else if (testURL(ANDROID_API_REFERENCE)) {\n                apiURL = ANDROID_API_REFERENCE;\n            }\n        }\n        IClasspathAttribute[] attributes = null;\n        if (apiURL != null) {\n\n            IClasspathAttribute cpAttribute = JavaCore.newClasspathAttribute(\n                    IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, apiURL);\n            attributes = new IClasspathAttribute[] {\n                cpAttribute\n            };\n        }\n        // create the access rule to restrict access to classes in\n        // com.android.internal\n        IAccessRule accessRule = JavaCore.newAccessRule(new Path(\"com/android/internal/**\"), //$NON-NLS-1$\n                IAccessRule.K_NON_ACCESSIBLE);\n\n        IClasspathEntry frameworkClasspathEntry = JavaCore.newLibraryEntry(android_lib,\n                androidSrc, // source attachment path\n                null, // default source attachment root path.\n                new IAccessRule[] { accessRule },\n                attributes,\n                false // not exported.\n                );\n\n        list.add(frameworkClasspathEntry);\n\n        // now deal with optional libraries\n        if (paths.length >= 5) {\n            String docPath = paths[CACHE_INDEX_OPT_DOCS_URI];\n            int i = 4;\n            while (i < paths.length) {\n                Path jarPath = new Path(paths[i++]);\n\n                attributes = null;\n                if (docPath.length() > 0) {\n                    attributes = new IClasspathAttribute[] {\n                        JavaCore.newClasspathAttribute(\n                                IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, docPath)\n                    };\n                }\n\n                IClasspathEntry entry = JavaCore.newLibraryEntry(\n                        jarPath,\n                        null, // source attachment path\n                        null, // default source attachment root path.\n                        null,\n                        attributes,\n                        false // not exported.\n                        );\n                list.add(entry);\n            }\n        }\n\n        if (apiURL != null) {\n            ProjectHelper.saveStringProperty(root, PROPERTY_ANDROID_API, apiURL);\n        }\n        if (androidSrc != null && target != null) {\n            ProjectHelper.saveStringProperty(root, getAndroidSourceProperty(target),\n                    androidSrc.toOSString());\n        }\n        return list.toArray(new IClasspathEntry[list.size()]);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "IClasspath", "Entry", "[", "]", "<|s|>", "create", "Classpath", "Entries", "From", "Paths", "(", "String", "[", "]", "<|s|>", "paths", ",", "<|nl|>", "<|12-s|>", "IAndroid", "Target", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "<|s|>", "list", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "IClasspath", "Entry", ">", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "First", ",", "<|s|>", "we", "<|s|>", "create", "<|s|>", "the", "<|s|>", "IClasspath", "Entry", "<|s|>", "for", "<|s|>", "the", "<|s|>", "framework", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "add", "<|s|>", "the", "<|s|>", "android", "<|s|>", "framework", "<|s|>", "to", "<|s|>", "the", "<|s|>", "class", "<|s|>", "path", ".", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "path", "<|s|>", "object", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "_", "lib", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "JAR", "]", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "IPath", "<|s|>", "android", "Src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Src", "Os", "Path", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "IWorkspace", "Root", "<|s|>", "root", "<|s|>", "=", "<|s|>", "Resources", "Plugin", ".", "get", "Workspace", "(", ")", ".", "get", "Root", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "Src", "Os", "Path", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Src", "Os", "Path", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "android", "Src", "Os", "Path", ".", "trim", "(", ")", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", "Os", "Path", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Src", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "File", "<|s|>", "android", "Src", "File", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "SRC", "]", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "android", "Src", "File", ".", "is", "Directory", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Src", "<|s|>", "==", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Bundle", "<|s|>", "bundle", "<|s|>", "=", "<|s|>", "get", "Source", "Bundle", "(", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "bundle", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Android", "Version", "<|s|>", "version", "<|s|>", "=", "<|s|>", "target", ".", "get", "Version", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "api", "String", "<|s|>", "=", "<|s|>", "version", ".", "get", "Api", "String", "(", ");", "<|nl|>", "<|16-s|>", "String", "<|s|>", "source", "Path", "<|s|>", "=", "<|s|>", "api", "String", "<|s|>", "+", "<|s|>", "SOURCES", "_", "ZIP", ";", "<|nl|>", "<|16-s|>", "URL", "<|s|>", "source", "URL", "<|s|>", "=", "<|s|>", "bundle", ".", "get", "Entry", "(", "source", "Path", ");", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "source", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "URL", "<|s|>", "url", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "url", "<|s|>", "=", "<|s|>", "File", "Locator", ".", "resolve", "(", "source", "URL", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "ignore", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "url", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "android", "Src", "Os", "Path", "<|s|>", "=", "<|s|>", "url", ".", "get", "File", "(", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "new", "<|s|>", "File", "(", "android", "Src", "Os", "Path", ")", ".", "is", "File", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "android", "Src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "android", "Src", "Os", "Path", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "java", "<|s|>", "doc", "<|s|>", "link", ".", "<|nl|>", "<|8-s|>", "String", "<|s|>", "android", "Api", "URL", "<|s|>", "=", "<|s|>", "Project", "Helper", ".", "load", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ");", "<|nl|>", "<|8-s|>", "String", "<|s|>", "api", "URL", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "test", "URL", "(", "android", "Api", "URL", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "android", "Api", "URL", ";", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "]", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "test", "URL", "(", "ANDROID", "_", "API", "_", "REFERENCE", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "api", "URL", "<|s|>", "=", "<|s|>", "ANDROID", "_", "API", "_", "REFERENCE", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|12-s|>", "IClasspath", "Attribute", "<|s|>", "cp", "Attribute", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|12-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "cp", "Attribute", "<|nl|>", "<|12-s|>", "};", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "//", "<|s|>", "create", "<|s|>", "the", "<|s|>", "access", "<|s|>", "rule", "<|s|>", "to", "<|s|>", "restrict", "<|s|>", "access", "<|s|>", "to", "<|s|>", "classes", "<|s|>", "in", "<|nl|>", "<|8-s|>", "//", "<|s|>", "com", ".", "android", ".", "internal", "<|nl|>", "<|8-s|>", "IAccess", "Rule", "<|s|>", "access", "Rule", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Access", "Rule", "(", "new", "<|s|>", "Path", "(", "\"", "com", "/", "android", "/", "internal", "/*", "*", "\"", ")", ",", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "1", "$", "<|nl|>", "<|16-s|>", "IAccess", "Rule", ".", "K", "_", "NON", "_", "ACCESSIBLE", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "IClasspath", "Entry", "<|s|>", "framework", "Classpath", "Entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "android", "_", "lib", ",", "<|nl|>", "<|16-s|>", "android", "Src", ",", "<|s|>", "//", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "path", "<|nl|>", "<|16-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "new", "<|s|>", "IAccess", "Rule", "[", "]", "<|s|>", "{", "<|s|>", "access", "Rule", "<|s|>", "}", ",", "<|nl|>", "<|16-s|>", "attributes", ",", "<|nl|>", "<|16-s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "list", ".", "add", "(", "framework", "Classpath", "Entry", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "now", "<|s|>", "deal", "<|s|>", "with", "<|s|>", "optional", "<|s|>", "libraries", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "paths", ".", "length", "<|s|>", ">=", "<|s|>", "5", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "doc", "Path", "<|s|>", "=", "<|s|>", "paths", "[", "CACHE", "_", "INDEX", "_", "OPT", "_", "DOCS", "_", "URI", "];", "<|nl|>", "<|12-s|>", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "4", ";", "<|nl|>", "<|12-s|>", "while", "<|s|>", "(", "i", "<|s|>", "<", "<|s|>", "paths", ".", "length", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Path", "<|s|>", "jar", "Path", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Path", "(", "paths", "[", "i", "++", "]", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "attributes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "doc", "Path", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "attributes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "IClasspath", "Attribute", "[", "]", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "Java", "Core", ".", "new", "Classpath", "Attribute", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "IClasspath", "Attribute", ".", "JAVADOC", "_", "LOCATION", "_", "ATTRIBUTE", "_", "NAME", ",", "<|s|>", "doc", "Path", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", "};", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "IClasspath", "Entry", "<|s|>", "entry", "<|s|>", "=", "<|s|>", "Java", "Core", ".", "new", "Library", "Entry", "(", "<|nl|>", "<|16-s|>", "<|8-s|>", "jar", "Path", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "//", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "path", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|s|>", "//", "<|s|>", "default", "<|s|>", "source", "<|s|>", "attachment", "<|s|>", "root", "<|s|>", "path", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", "null", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "attributes", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "false", "<|s|>", "//", "<|s|>", "not", "<|s|>", "exported", ".", "<|nl|>", "<|16-s|>", "<|8-s|>", ");", "<|nl|>", "<|16-s|>", "list", ".", "add", "(", "entry", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "api", "URL", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "PROPERTY", "_", "ANDROID", "_", "API", ",", "<|s|>", "api", "URL", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "android", "Src", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "target", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Project", "Helper", ".", "save", "String", "Property", "(", "root", ",", "<|s|>", "get", "Android", "Source", "Property", "(", "target", ")", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "android", "Src", ".", "to", "OSString", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "list", ".", "to", "Array", "(", "new", "<|s|>", "IClasspath", "Entry", "[", "list", ".", "size", "(", ")", "]", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 479, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_1863", "comment_id": "AAAA63%2F%2F%2F5s%3D", "class_list": ["AndroidClasspathContainerInitializer", "path."], "func_list": ["public AndroidClasspathContainerInitializer()", "public static IClasspathEntry getContainerEntry()", "public static boolean checkPath(IPath path)", "public static boolean updateProjects(IJavaProject[] androidProjects)", "private static IClasspathContainer allocateAndroidContainer(IJavaProject javaProject)", "public IClasspathEntry[] getClasspathEntries()", "public String getDescription()", "public int getKind()", "public IPath getPath()", "protected IStatus run(IProgressMonitor monitor)", "private static IClasspathEntry[] createClasspathEntries(IProject project,", "private static AndroidClasspathContainer getContainerFromCache(IProject project,", "private static IClasspathEntry[] createClasspathEntriesFromPaths(String[] paths,", "private static Bundle getSourceBundle()", "private static String getAndroidSourceProperty(IAndroidTarget target)", "private static boolean testURL(String androidApiURL)", "public static void checkProjectsCache(ArrayList<IJavaProject> projects)", "private static String[] getTargetPaths(IAndroidTarget target)", "public boolean canUpdateClasspathContainer(IPath containerPath, IJavaProject project)", "public AndroidClasspathContainerInitializer()"], "prime_var_dic": {"path": 1, "String": 5, "int": 5}}, {"idx": 68987, "status": "update", "global_index": 21618, "project_name": "android_", "written_on": "2013-12-10 01:01:35", "tufano_target": "public boolean METHOD_1 ( ) { return ! VAR_5 . equals ( METHOD_4 ( ) . METHOD_5 ( ) ) || ! VAR_6 . equals ( METHOD_6 ( ) . METHOD_5 ( ) ) ; }", "comment": "I think urlToPath will always create forward slashes whereas I'm assuming the edited text will use File.separator. (Also, not sure where the URL is coming from but is there any chance of the URL containing escape characters, like + (which must be escaped in URLs) no longer matching with pluses in the path?", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "url", "To", "Path", "<|s|>", "will", "<|s|>", "always", "<|s|>", "create", "<|s|>", "forward", "<|s|>", "slashes", "<|s|>", "whereas", "<|s|>", "I", "'", "m", "<|s|>", "assuming", "<|s|>", "the", "<|s|>", "edited", "<|s|>", "text", "<|s|>", "will", "<|s|>", "use", "<|s|>", "File", ".", "separator", ".", "<|s|>", "(", "Also", ",", "<|s|>", "not", "<|s|>", "sure", "<|s|>", "where", "<|s|>", "the", "<|s|>", "URL", "<|s|>", "is", "<|s|>", "coming", "<|s|>", "from", "<|s|>", "but", "<|s|>", "is", "<|s|>", "there", "<|s|>", "any", "<|s|>", "chance", "<|s|>", "of", "<|s|>", "the", "<|s|>", "URL", "<|s|>", "containing", "<|s|>", "escape", "<|s|>", "characters", ",", "<|s|>", "like", "<|s|>", "+", "<|s|>", "(", "which", "<|s|>", "must", "<|s|>", "be", "<|s|>", "escaped", "<|s|>", "in", "<|s|>", "URLs", ")", "<|s|>", "no", "<|s|>", "longer", "<|s|>", "matching", "<|s|>", "with", "<|s|>", "pluses", "<|s|>", "in", "<|s|>", "the", "<|s|>", "path", "?"], "tufano_code": "public boolean METHOD_1 ( ) { return ! METHOD_2 ( METHOD_3 ( VAR_1 ) , VAR_2 . getText ( ) ) || ! METHOD_2 ( METHOD_3 ( VAR_3 ) , VAR_4 . getText ( ) ) ; }", "our_target": "    return !myOriginalSdkHomePath.equals(getAndroidHomeLocation().getPath()) ||\n           !myOriginalJdkHomePath.equals(getJavaHomeLocation().getPath());\n", "our_code": "  public boolean isModified() {\n<|startfocus|>\n    return !equalPaths(urlToPath(myOriginalSdkHome), myAndroidHomeLocation.getText()) ||\n           !equalPaths(urlToPath(myOriginalJdkHome), myJavaHomeLocation.getText());\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Modified", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "!", "equal", "Paths", "(", "url", "To", "Path", "(", "my", "Original", "Sdk", "Home", ")", ",", "<|s|>", "my", "Android", "Home", "Location", ".", "get", "Text", "(", ")", ")", "<|s|>", "||", "<|nl|>", "<|8-s|>", "<|2-s|>", "<|s|>", "!", "equal", "Paths", "(", "url", "To", "Path", "(", "my", "Original", "Jdk", "Home", ")", ",", "<|s|>", "my", "Java", "Home", "Location", ".", "get", "Text", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 238, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_579", "comment_id": "83e41a52_4a7ca2ce", "class_list": ["will", "AndroidHomeConfigurable"], "func_list": ["public AndroidHomeConfigurable()", "protected void textChanged(DocumentEvent e)", "private static void setBackground(@NotNull FieldPanel fieldPanel, boolean validValue)", "public void disposeUIResources()", "public void reset()", "public void run()", "private File getAndroidHomeLocation()", "private static void deleteSdks(@NotNull List<Sdk> sdksToDelete)", "private static void setJdkPath(@NotNull Sdk sdk, @NotNull String path)", "private void createUIComponents()", "public String getDisplayName()", "public String getHelpTopic()", "public JComponent createComponent()", "public boolean isModified()", "private static boolean equalPaths(@NotNull String path1, @NotNull String path2)", "private static String resolvePath(@NotNull String path)", "private static Sdk getFirstDefaultAndroidSdk(boolean create)", "private static void updateAllSdks(@NotNull Sdk jdk)", "private static String getDefaultAndroidHome()", "private static String getDefaultJavaHome()", "private boolean validateJavaHome()"], "prime_var_dic": {}}, {"idx": 14156, "status": "update", "global_index": 21132, "project_name": "android_", "written_on": "2013-09-24 18:20:36", "tufano_target": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( STRING_3 + VAR_1 + STRING_2 ) ; }", "comment": "rewording:\n\nOlder clients (API level < 10) are not supported yet.", "tokenized_comment": ["rewording", ":", "<|nl|>", "<|nl|>", "Older", "<|s|>", "clients", "<|s|>", "(", "API", "<|s|>", "level", "<|s|>", "<", "<|s|>", "10", ")", "<|s|>", "are", "<|s|>", "not", "<|s|>", "supported", "<|s|>", "yet", "."], "tufano_code": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( STRING_1 + VAR_1 + STRING_2 ) ; }", "our_target": "    showError(\"Method profiling: Older devices (API level < 10) are not supported yet. Please manually retrieve the file \"\n", "our_code": "  public void onSuccess(String remoteFilePath, Client client) {\n    // TODO: Devices older than API 10 don't return profile results via JDWP. Instead they save the results on the sdcard.\n    // We don't support this yet.\n<|startfocus|>\n    showError(\"Method profiling: Older client (API level < 10) not supported yet. Please manually retrieve the file \"\n<|endfocus|>\n              + remoteFilePath + \" from the device and open the file to view the results.\");\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Success", "(", "String", "<|s|>", "remote", "File", "Path", ",", "<|s|>", "Client", "<|s|>", "client", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "Devices", "<|s|>", "older", "<|s|>", "than", "<|s|>", "API", "<|s|>", "10", "<|s|>", "don", "'", "t", "<|s|>", "return", "<|s|>", "profile", "<|s|>", "results", "<|s|>", "via", "<|s|>", "JDWP", ".", "<|s|>", "Instead", "<|s|>", "they", "<|s|>", "save", "<|s|>", "the", "<|s|>", "results", "<|s|>", "on", "<|s|>", "the", "<|s|>", "sdcard", ".", "<|nl|>", "<|4-s|>", "//", "<|s|>", "We", "<|s|>", "don", "'", "t", "<|s|>", "support", "<|s|>", "this", "<|s|>", "yet", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "show", "Error", "(", "\"", "Method", "<|s|>", "profiling", ":", "<|s|>", "Older", "<|s|>", "client", "<|s|>", "(", "API", "<|s|>", "level", "<|s|>", "<", "<|s|>", "10", ")", "<|s|>", "not", "<|s|>", "supported", "<|s|>", "yet", ".", "<|s|>", "Please", "<|s|>", "manually", "<|s|>", "retrieve", "<|s|>", "the", "<|s|>", "file", "<|s|>", "\"", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "<|2-s|>", "+", "<|s|>", "remote", "File", "Path", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "from", "<|s|>", "the", "<|s|>", "device", "<|s|>", "and", "<|s|>", "open", "<|s|>", "the", "<|s|>", "file", "<|s|>", "to", "<|s|>", "view", "<|s|>", "the", "<|s|>", "results", ".", "\"", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 48, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_158", "comment_id": "e4195bc0_af785930", "class_list": ["OpenVmTraceHandler"], "func_list": ["public OpenVmTraceHandler(Project project)", "public void onSuccess(String remoteFilePath, Client client)", "public void run()", "public void onStartFailure(Client client, String message)", "public void onEndFailure(Client client, String message)", "private void showError(final String message)"], "prime_var_dic": {"implements": 1, "myProject": 1}}, {"idx": 96147, "status": "update", "global_index": 5684, "project_name": "android_", "written_on": "2016-03-07 20:53:55", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_4 = VAR_3 || METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 , VAR_4 ) ; }", "comment": "This has to diverged internally. Mady, can you incorporate this?", "tokenized_comment": ["This", "<|s|>", "has", "<|s|>", "to", "<|s|>", "diverged", "<|s|>", "internally", ".", "<|s|>", "Mady", ",", "<|s|>", "can", "<|s|>", "you", "<|s|>", "incorporate", "<|s|>", "this", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; }", "our_target": "        boolean animate = mIsExpanded || isPinnedHeadsUp(child);\n        mSwipeHelper.snapChildIfNeeded(child, animate);\n", "our_code": "    public void snapViewIfNeeded(View child) {\n<|startfocus|>\n        mSwipeHelper.snapChildIfNeeded(child, mIsExpanded /* animate */);\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "snap", "View", "If", "Needed", "(", "View", "<|s|>", "child", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Swipe", "Helper", ".", "snap", "Child", "If", "Needed", "(", "child", ",", "<|s|>", "m", "Is", "Expanded", "<|s|>", "/*", "<|s|>", "animate", "<|s|>", "*/", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 806, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_3589", "comment_id": "97be618f_892539f4", "class_list": ["NotificationStackScrollLayout", "AnimationEvent"], "func_list": ["public boolean onPreDraw()", "public NotificationStackScrollLayout(Context context)", "protected void onDraw(Canvas canvas)", "private void initView(Context context)", "private void updatePadding(boolean dimmed)", "private void notifyHeightChangeListener(ExpandableView view)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "private void requestAnimationOnViewResize()", "public void updateSpeedBumpIndex(int newIndex)", "public void setChildLocationsChangedListener(OnChildLocationsChangedListener listener)", "public int getChildLocation(View child)", "private void setMaxLayoutHeight(int maxLayoutHeight)", "private void updateAlgorithmHeightAndPadding()", "private boolean needsHeightAdaption()", "private void updateChildren()", "private void requestChildrenUpdate()", "private boolean isCurrentlyAnimating()", "private void clampScrollPosition()", "public int getTopPadding()", "private void setTopPadding(int topPadding, boolean animate)", "public void setStackHeight(float height)", "public float getStackTranslation()", "private void setStackTranslation(float stackTranslation)", "private int getLayoutHeight()", "public int getItemHeight()", "public int getBottomStackPeekSize()", "public int getCollapseSecondCardPadding()", "public void setLongPressListener(SwipeHelper.LongPressListener listener)", "public void setScrollView(ViewGroup scrollView)", "public void setInterceptDelegateEnabled(boolean interceptDelegateEnabled)", "public void onChildDismissed(View v)", "public void onChildSnappedBack(View animView)", "public boolean updateSwipeProgress(View animView, boolean dismissable, float swipeProgress)", "public void onBeginDrag(View v)", "public static boolean isPinnedHeadsUp(View v)", "private boolean isHeadsUp(View v)", "public void onDragCancelled(View v)", "public float getFalsingThresholdFactor()", "public View getChildAtPosition(MotionEvent ev)", "public ExpandableView getClosestChildAtRawPosition(float touchX, float touchY)", "public ExpandableView getChildAtRawPosition(float touchX, float touchY)", "public ExpandableView getChildAtPosition(float touchX, float touchY)", "public boolean canChildBeExpanded(View v)", "public void setUserExpandedChild(View v, boolean userExpanded)", "public void setUserLockedChild(View v, boolean userLocked)", "public void expansionStateChanged(boolean isExpanding)", "public void setScrollingEnabled(boolean enable)", "public void setExpandingEnabled(boolean enable)", "private boolean isScrollingEnabled()", "public View getChildContentView(View v)", "public boolean canChildBeDismissed(View v)", "public boolean isAntiFalsingNeeded()", "private void setSwipingInProgress(boolean isSwiped)", "protected void onConfigurationChanged(Configuration newConfig)", "public void dismissViewAnimated(View child, Runnable endRunnable, int delay, long duration)", "public void snapViewIfNeeded(View child)", "public boolean onTouchEvent(MotionEvent ev)", "private void dispatchDownEventToScroller(MotionEvent ev)", "private boolean onScrollTouch(MotionEvent ev)", "private void onOverScrollFling(boolean open, int initialVelocity)", "private float overScrollUp(int deltaY, int range)", "private float overScrollDown(int deltaY)", "private void onSecondaryPointerUp(MotionEvent ev)", "private void initVelocityTrackerIfNotExists()", "private void recycleVelocityTracker()", "private void initOrResetVelocityTracker()", "public void computeScroll()", "protected boolean overScrollBy(int deltaX, int deltaY,", "public void setOverScrolledPixels(float numPixels, boolean onTop, boolean animate)", "public void setOverScrollAmount(float amount, boolean onTop, boolean animate)", "private void setOverScrollAmountInternal(float amount, boolean onTop, boolean animate,", "private void notifyOverscrollTopListener(float amount, boolean isRubberbanded)", "public void setOverscrollTopChangedListener(", "public float getCurrentOverScrollAmount(boolean top)", "public float getCurrentOverScrolledPixels(boolean top)", "private void customScrollTo(int y)", "protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)", "private void springBack()", "private int getScrollRange()", "private View getFirstChildNotGone()", "private View getFirstChildBelowTranlsationY(float translationY)", "public View getLastChildNotGone()", "public int getNotGoneChildCount()", "private int getMaxExpandHeight(View view)", "public int getContentHeight()", "private void updateContentHeight()", "private void fling(int velocityY)", "private boolean shouldOverScrollFling(int initialVelocity)", "public void updateTopPadding(float qsHeight, int scrollY, boolean animate,", "public int getNotificationTopPadding()", "public int getMinStackHeight()", "public float getTopPaddingOverflow()", "public int getPeekHeight()", "private int clampPadding(int desiredPadding)", "private float getRubberBandFactor(boolean onTop)", "boolean cancelAnimators, boolean isRubberbanded)", "private void endDrag()", "private void transformTouchEvent(MotionEvent ev, View sourceView, View targetView)", "public boolean onInterceptTouchEvent(MotionEvent ev)", "private void handleEmptySpaceClick(MotionEvent ev)", "private void initDownStates(MotionEvent ev)", "public void onViewRemoved(View child)", "private void onViewRemovedInternal(View child)", "private boolean isChildInGroup(View child)", "private boolean generateRemoveAnimation(View child)", "private boolean isClickedHeadsUp(View child)", "private boolean removeRemovedChildFromHeadsUpChangeAnimations(View child)", "private boolean isChildInInvisibleGroup(View child)", "private void updateScrollStateForRemovedChild(View removedChild)", "private int getIntrinsicHeight(View view)", "private int getPositionInLinearLayout(View requestedChild)", "public void onViewAdded(View child)", "private void onViewAddedInternal(View child)", "private void updateHideSensitiveForChild(View child)", "public void notifyGroupChildRemoved(View row)", "public void notifyGroupChildAdded(View row)", "public void setAnimationsEnabled(boolean animationsEnabled)", "private void updateNotificationAnimationStates()", "private void updateAnimationState(View child)", "public boolean isAddOrRemoveAnimationPending()", "public void generateAddAnimation(View child, boolean fromMoreCard)", "public void changeViewPosition(View child, int newIndex)", "private void startAnimationToState()", "private void generateChildHierarchyEvents()", "private void generateHeadsUpAnimationEvents()", "private boolean shouldHunAppearFromBottom(StackViewState viewState)", "private void generateGroupExpansionEvent()", "private void generateViewResizeEvent()", "private void generateSnapBackEvents()", "private void generateDragEvents()", "private void generateChildRemovalEvents()", "private void generatePositionChangeEvents()", "private void generateChildAdditionEvents()", "private void generateTopPaddingEvent()", "private void generateActivateEvent()", "private void generateAnimateEverythingEvent()", "private void generateDimmedEvent()", "private void generateHideSensitiveEvent()", "private void generateDarkEvent()", "private void generateGoToFullShadeEvent()", "private boolean onInterceptTouchEventScroll(MotionEvent ev)", "private boolean isInContentBounds(MotionEvent event)", "private void setIsBeingDragged(boolean isDragged)", "public void onWindowFocusChanged(boolean hasWindowFocus)", "public void removeLongPressCallback()", "public boolean isScrolledToTop()", "public boolean isScrolledToBottom()", "public View getHostView()", "public int getEmptyBottomMargin()", "public void onExpansionStarted()", "public void onExpansionStopped()", "public void onPanelTrackingStarted()", "public void onPanelTrackingStopped()", "public void resetScrollPosition()", "private void setIsExpanded(boolean isExpanded)", "private void updateChronometers()", "private void updateChronometerForChild(View child)", "public void onHeightChanged(ExpandableView view, boolean needsAnimation)", "public void onReset(ExpandableView view)", "private void updateScrollPositionOnExpandInBottom(ExpandableView view)", "public void setOnHeightChangedListener(", "public void setOnEmptySpaceClickListener(OnEmptySpaceClickListener listener)", "public void onChildAnimationFinished()", "private void clearViewOverlays()", "private void runAnimationFinishedRunnables()", "public void setDimmed(boolean dimmed, boolean animate)", "public void setHideSensitive(boolean hideSensitive, boolean animate)", "public void setActivatedChild(ActivatableNotificationView activatedChild)", "public ActivatableNotificationView getActivatedChild()", "private void applyCurrentState()", "public void setSpeedBumpView(SpeedBumpView speedBumpView)", "public void updateSpeedBumpIndex(int newIndex)", "public void goToFullShade(long delay)", "public void cancelExpandHelper()", "public void setIntrinsicPadding(int intrinsicPadding)", "public int getIntrinsicPadding()", "public float getNotificationsTopY()", "public boolean shouldDelayChildPressedState()", "public void setDark(boolean dark, boolean animate, @Nullable PointF touchWakeUpScreenLocation)", "private int findDarkAnimationOriginIndex(@Nullable PointF screenLocation)", "private int getNotGoneIndex(View child)", "public void setDismissView(DismissView dismissView)", "public void setEmptyShadeView(EmptyShadeView emptyShadeView)", "public void updateEmptyShadeView(boolean visible)", "private void runAnimationFinishedRunnables()", "public void setOverflowContainer(NotificationOverflowContainer overFlowContainer)", "public void updateOverflowContainerVisibility(boolean visible)", "public void updateDismissView(boolean visible)", "public void setDismissAllInProgress(boolean dismissAllInProgress)", "private void handleDismissAllClipping()", "private void disableClipOptimization()", "public boolean isDismissViewNotGone()", "public boolean isDismissViewVisible()", "public int getDismissViewHeight()", "public int getEmptyShadeViewHeight()", "public float getBottomMostNotificationBottom()", "public void updateIsSmallScreen(int qsMinHeight)", "public void setPhoneStatusBar(PhoneStatusBar phoneStatusBar)", "public void setGroupManager(NotificationGroupManager groupManager)", "public void onGoToKeyguard()", "private void requestAnimateEverything()", "public boolean isBelowLastNotification(float touchX, float touchY)", "private void updateExpandButtons()", "public void onGroupExpansionChanged(ExpandableNotificationRow changedRow, boolean expanded)", "public void onGroupsProhibitedChanged()", "public void onGroupCreatedFromChildren(NotificationGroupManager.NotificationGroup group)", "public void generateChildOrderChangedEvent()", "public void runAfterAnimationFinished(Runnable runnable)", "public void setHeadsUpManager(HeadsUpManager headsUpManager)", "private void generateHeadsUpAnimationEvents()", "public void setShadeExpanded(boolean shadeExpanded)", "public void setHeadsUpBoundaries(int height, int bottomBarHeight)", "public void setTrackingHeadsUp(boolean trackingHeadsUp)", "public void setScrimController(ScrimController scrimController)", "public void forceNoOverlappingRendering(boolean force)", "public boolean hasOverlappingRendering()", "static long combineLength(ArrayList<AnimationEvent> events)", "public boolean onPreDraw()"], "prime_var_dic": {"mOnHeightChangedListener": 1, "mLongPressListener": 1, "mChildrenUpdater": 1}}, {"idx": 62445, "status": "update", "global_index": 4455, "project_name": "android_", "written_on": "2016-11-07 16:12:00", "tufano_target": "public static int METHOD_2 ( int x , int y ) { int result ; if ( x <= y ) { result = INT_1 ; } else { while ( true ) ; } return result ; }", "comment": "Java conventions on methods: start without capital, below too", "tokenized_comment": ["Java", "<|s|>", "conventions", "<|s|>", "on", "<|s|>", "methods", ":", "<|s|>", "start", "<|s|>", "without", "<|s|>", "capital", ",", "<|s|>", "below", "<|s|>", "too"], "tufano_code": "public static int METHOD_1 ( int x , int y ) { int result ; if ( x <= y ) { result = INT_1 ; } else { while ( true ) ; } return result ; }", "our_target": "  public static int inlinedFunction(int x, int y) {\n", "our_code": "<|startfocus|>\n  public static int Inline(int x, int y) {\n<|endfocus|>\n    int result;\n    if (x <= y) {\n      result = 42;\n    } else {\n      while (true);\n    }\n    return result;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "int", "<|s|>", "Inline", "(", "int", "<|s|>", "x", ",", "<|s|>", "int", "<|s|>", "y", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "result", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "x", "<|s|>", "<=", "<|s|>", "y", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "result", "<|s|>", "=", "<|s|>", "42", ";", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "while", "<|s|>", "(", "true", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "result", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 31, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5062", "comment_id": "abc1671f_a384d65b", "class_list": ["Main"], "func_list": ["public static void assertIntEquals(int expected, int result)", "public static int Inline(int x, int y)", "public static int NestedLoop(int max_x, int max_y)", "public static void main(String[] args)"], "prime_var_dic": {}}, {"idx": 88189, "status": "update", "global_index": 14855, "project_name": "android_", "written_on": "2014-05-15 18:05:09", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { super ( STRING_2 , VAR_2 ) ; VAR_5 = VAR_3 ; VAR_6 = VAR_4 ; init ( ) ; }", "comment": "GitHub? Or is this just an internal string?", "tokenized_comment": ["Git", "Hub", "?", "<|s|>", "Or", "<|s|>", "is", "<|s|>", "this", "<|s|>", "just", "<|s|>", "an", "<|s|>", "internal", "<|s|>", "string", "?"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { super ( STRING_1 , VAR_2 ) ; VAR_5 = VAR_3 ; VAR_6 = VAR_4 ; init ( ) ; }", "our_target": "    super(\"From GitHub\", project);\n", "our_code": "  public NewFromGithubWizard(@Nullable Project project, @Nullable Module module, @Nullable VirtualFile targetFile) {\n<|startfocus|>\n    super(\"From Github\", project);\n<|endfocus|>\n    myModule = module;\n    myTargetFile = targetFile;\n    init();\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "New", "From", "Github", "Wizard", "(", "@", "Nullable", "<|s|>", "Project", "<|s|>", "project", ",", "<|s|>", "@", "Nullable", "<|s|>", "Module", "<|s|>", "module", ",", "<|s|>", "@", "Nullable", "<|s|>", "Virtual", "File", "<|s|>", "target", "File", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "\"", "From", "<|s|>", "Github", "\"", ",", "<|s|>", "project", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Module", "<|s|>", "=", "<|s|>", "module", ";", "<|nl|>", "<|4-s|>", "my", "Target", "File", "<|s|>", "=", "<|s|>", "target", "File", ";", "<|nl|>", "<|4-s|>", "init", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 66, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_678", "comment_id": "6a4e2058_d0a795ac", "class_list": ["NewFromGithubWizard", "GithubRepoContents"], "func_list": ["public NewFromGithubWizard(@Nullable Project project, @Nullable Module module, @Nullable VirtualFile targetFile)", "protected void init()", "public static GithubRepoContents downloadGithubRepo(@NotNull Project project, @NotNull String url, @Nullable String branch,", "public static List<File> findSamplesInDirectory(@NotNull File directory, boolean recursive)", "public static String runTemplateWizard(@Nullable Project project, @Nullable Module module, @Nullable VirtualFile targetLocation,", "private static String runImportWizard(Project project, Module module, GithubRepoContents githubRepoContents)", "private void setErrorHtml(String s)", "protected void doOKAction()"], "prime_var_dic": {"GithubRepoContents": 1}}, {"idx": 94458, "status": "update", "global_index": 5415, "project_name": "android_", "written_on": "2016-09-29 15:27:43", "tufano_target": "public void METHOD_1 ( String VAR_1 ) { if ( VAR_1 == null ) { VAR_2 = STRING_1 ; } VAR_2 = VAR_1 ; }", "comment": "nit: space", "tokenized_comment": ["nit", ":", "<|s|>", "space"], "tufano_code": "public void METHOD_1 ( String VAR_1 ) { if ( VAR_1 == null ) { VAR_2 = STRING_1 ; } VAR_2 = VAR_1 ; }", "our_target": "        if (sessionId == null) {\n", "our_code": "    public void setSessionId(@NonNull String sessionId) {\n<|startfocus|>\n        if(sessionId == null) {\n<|endfocus|>\n            mSessionId = \"?\";\n        }\n        mSessionId = sessionId;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Session", "Id", "(", "@", "Non", "Null", "<|s|>", "String", "<|s|>", "session", "Id", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "(", "session", "Id", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "m", "Session", "Id", "<|s|>", "=", "<|s|>", "\"", "?", "\"", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "m", "Session", "Id", "<|s|>", "=", "<|s|>", "session", "Id", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 68, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4878", "comment_id": "e5c1c7c3_70450e41", "class_list": ["Session"], "func_list": ["public Session(String sessionId, String shortMethodName, long startTimeMs, long threadID,", "public void setSessionId(@NonNull String sessionId)", "public String getShortMethodName()", "public void setShortMethodName(String shortMethodName)", "public void setParentSession(Session parentSession)", "public void addChild(Session childSession)", "public void removeChild(Session child)", "public long getExecutionStartTimeMilliseconds()", "public void setExecutionStartTimeMs(long startTimeMs)", "public Session getParentSession()", "public ArrayList<Session> getChildSessions()", "public boolean isSessionCompleted()", "boolean isStartedFromActiveSession, String ownerInfo)", "public void markSessionCompleted(long executionEndTimeMs)", "public long getLocalExecutionTime()", "public boolean equals(Object obj)", "private String getFullSessionId()", "public String printFullSessionTree()", "public String printSessionTree()", "private void printSessionTree(int tabI, StringBuilder sb)", "public String toString()"], "prime_var_dic": {"String": 5, "int": 1, "id": 1}}, {"idx": 30858, "status": "update", "global_index": 7214, "project_name": "android_", "written_on": "2016-03-10 11:53:20", "tufano_target": "public void METHOD_1 ( ) { for ( TYPE_4 < TYPE_1 < TYPE_2 > > VAR_3 : VAR_4 ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_3 . get ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; assertTrue ( VAR_1 . isEmpty ( ) ) ; } }", "comment": "Not sure what this is supposed to test ? wouldn't the assertion hold regardless of what removeIf did ?", "tokenized_comment": ["Not", "<|s|>", "sure", "<|s|>", "what", "<|s|>", "this", "<|s|>", "is", "<|s|>", "supposed", "<|s|>", "to", "<|s|>", "test", "<|s|>", "?", "<|s|>", "wouldn", "'", "t", "<|s|>", "the", "<|s|>", "assertion", "<|s|>", "hold", "<|s|>", "regardless", "<|s|>", "of", "<|s|>", "what", "<|s|>", "remove", "If", "<|s|>", "did", "<|s|>", "?"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; assertTrue ( VAR_1 . isEmpty ( ) ) ; }", "our_target": "        for (Supplier<Collection<Integer>> impl : collectionImpls) {\n            Collection<Integer> collection = impl.get();\n            collection.removeIf(truth);\n            assertTrue(collection.isEmpty());\n        }\n", "our_code": "    public void testRemoveIfEmpty() {\n<|startfocus|>\n        Collection<Integer> collection = new ArrayList<>();\n        collection.removeIf(truth);\n        assertTrue(collection.isEmpty());\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Remove", "If", "Empty", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Collection", "<", "Integer", ">", "<|s|>", "collection", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", ">", "(", ");", "<|nl|>", "<|8-s|>", "collection", ".", "remove", "If", "(", "truth", ");", "<|nl|>", "<|8-s|>", "assert", "True", "(", "collection", ".", "is", "Empty", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 55, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3287", "comment_id": "976e6179_2cc13bf9", "class_list": ["CollectionTest"], "func_list": ["public void testRemoveIf()", "public void testRemoveIfEmpty()", "public void testRemoveIfUnsupportedOperation()", "public void testRemoveIfNull()"], "prime_var_dic": {"Predicate": 3}}, {"idx": 3782, "status": "update", "global_index": 14058, "project_name": "android_", "written_on": "2015-02-04 15:02:47", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { METHOD_2 ( null ) ; return ; } super . METHOD_1 ( VAR_1 ) ; }", "comment": "Why not @Nullable?", "tokenized_comment": ["Why", "<|s|>", "not", "<|s|>", "@", "Nullable", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { METHOD_2 ( null ) ; return ; } super . METHOD_1 ( VAR_1 ) ; }", "our_target": "            public void clip(@Nullable Shape s) {\n", "our_code": "<|startfocus|>\n            public void clip(Shape s) {\n<|endfocus|>\n              if (s == null) {\n                setClip(null);\n                return;\n              }\n\n              super.clip(s);\n            }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|12-s|>", "public", "<|s|>", "void", "<|s|>", "clip", "(", "Shape", "<|s|>", "s", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "<|2-s|>", "if", "<|s|>", "(", "s", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "set", "Clip", "(", "null", ");", "<|nl|>", "<|16-s|>", "return", ";", "<|nl|>", "<|12-s|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "<|2-s|>", "super", ".", "clip", "(", "s", ");", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 299, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_707", "comment_id": "1ca1845e_1cff3570", "class_list": ["will", "is", "GraphicsLayoutRenderer", "FakeImageFactory", "DynamicHardwareConfig"], "func_list": ["private GraphicsLayoutRenderer(@NotNull LayoutLibrary layoutLib,", "public ActionBarCallback getActionBarCallback()", "public void setSize(Dimension dimen)", "public void render(@NotNull final Graphics2D graphics)", "public void run()", "RenderSession initRenderSession()", "public void setGraphics(@NotNull Graphics graphics)", "public BufferedImage getImage(final int w, final int h)", "public Graphics2D createGraphics()", "private Shape intersect(@NotNull Shape s1, @NotNull Shape s2)", "public void clip(Shape s)", "public void setClip(Shape sh)", "public void setTransform(AffineTransform Tx)", "public AffineTransform getTransform()", "public int getWidth()", "public int getHeight()", "public DynamicHardwareConfig(HardwareConfig delegate)", "public void setScreenSize(int width, int height)", "public int getScreenWidth()", "public int getScreenHeight()", "private GraphicsLayoutRenderer(@NotNull LayoutLibrary layoutLib,", "private GraphicsLayoutRenderer(@NotNull LayoutLibrary layoutLib,"], "prime_var_dic": {"myHardwareConfig": 1, "mySecurityManager": 1, "it": 1}}, {"idx": 93800, "status": "insert", "global_index": 18969, "project_name": "android_", "written_on": "2010-10-19 17:42:06", "tufano_target": "public void METHOD_1 ( ) { VAR_1 = null ; VAR_2 = null ; VAR_3 = null ; }", "comment": "I think the original code is more clear - *rel_pc is set to pc before entering this function. If the mapping is found, the offset is changed from absolute to relative.", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "the", "<|s|>", "original", "<|s|>", "code", "<|s|>", "is", "<|s|>", "more", "<|s|>", "clear", "<|s|>", "-", "<|s|>", "*", "rel", "_", "pc", "<|s|>", "is", "<|s|>", "set", "<|s|>", "to", "<|s|>", "pc", "<|s|>", "before", "<|s|>", "entering", "<|s|>", "this", "<|s|>", "function", ".", "<|s|>", "If", "<|s|>", "the", "<|s|>", "mapping", "<|s|>", "is", "<|s|>", "found", ",", "<|s|>", "the", "<|s|>", "offset", "<|s|>", "is", "<|s|>", "changed", "<|s|>", "from", "<|s|>", "absolute", "<|s|>", "to", "<|s|>", "relative", "."], "tufano_code": "public void METHOD_1 ( ) { VAR_1 = null ; VAR_2 = null ; }", "our_target": "        mSourceCanvas = null;\n        mRemoveSourceHandler = null;\n", "our_code": "    public void stopDrag() {\n        mCurrentElements = null;\n<|startfocus|>\n        mSourceCanvas = null;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "stop", "Drag", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Current", "Elements", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Source", "Canvas", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 77, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1815", "comment_id": "AAAA8H%2F%2F%2FtQ%3D", "class_list": ["name.", "will", "GlobalCanvasDragInfo"], "func_list": ["private GlobalCanvasDragInfo()", "public static GlobalCanvasDragInfo getInstance()", "public void startDrag(SimpleElement[] elements, CanvasSelection[] selection,", "public void stopDrag()", "public SimpleElement[] getCurrentElements()", "public CanvasSelection[] getCurrentSelection()", "public Object getSourceCanvas()", "public void removeSource()", "private GlobalCanvasDragInfo()", "public static GlobalCanvasDragInfo getInstance()", "public void startDrag(SimpleElement[] elements, CanvasSelection[] selection,", "public void stopDrag()", "public SimpleElement[] getCurrentElements()", "public CanvasSelection[] getCurrentSelection()", "public Object getSourceCanvas()", "public void removeSource()", "private GlobalCanvasDragInfo()", "public static GlobalCanvasDragInfo getInstance()", "public void startDrag(SimpleElement[] elements, CanvasSelection[] selection,", "public void stopDrag()", "public SimpleElement[] getCurrentElements()", "public CanvasSelection[] getCurrentSelection()", "public Object getSourceCanvas()", "public void removeSource()"], "prime_var_dic": {"instance": 1, "the": 1, "dragged": 1, "being": 1, "originally": 1, "matters": 1}}, {"idx": 89244, "status": "update", "global_index": 4820, "project_name": "android_", "written_on": "2016-12-15 01:53:21", "tufano_target": "void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 . METHOD_1 ( new TYPE_3 ( ) { public void METHOD_2 ( ) { METHOD_3 ( VAR_1 ) ; } } ) ; }", "comment": "package private, protect it from exposure.", "tokenized_comment": ["package", "<|s|>", "private", ",", "<|s|>", "protect", "<|s|>", "it", "<|s|>", "from", "<|s|>", "exposure", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 . METHOD_1 ( new TYPE_3 ( ) { public void METHOD_2 ( ) { METHOD_3 ( VAR_1 ) ; } } ) ; }", "our_target": "        void post(List<ScoredNetwork> updatedNetworks) {\n", "our_code": "<|startfocus|>\n        public void post(List<ScoredNetwork> updatedNetworks) {\n<|endfocus|>\n            mHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    networkCacheUpdated(updatedNetworks);\n                }\n            });\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "public", "<|s|>", "void", "<|s|>", "post", "(", "List", "<", "Scored", "Network", ">", "<|s|>", "updated", "Networks", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "m", "Handler", ".", "post", "(", "new", "<|s|>", "Runnable", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "network", "Cache", "Updated", "(", "updated", "Networks", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", ");", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 230, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_5693", "comment_id": "da6aeb2c_8a7559aa", "class_list": ["WifiNetworkScoreCache", "CacheListener"], "func_list": ["public WifiNetworkScoreCache(Context context)", "public boolean isScoredNetwork(ScanResult result)", "public boolean hasScoreCurve(ScanResult result)", "public int getNetworkScore(ScanResult result)", "public boolean getMeteredHint(ScanResult result)", "private ScoredNetwork getScoredNetwork(ScanResult result)", "private String buildNetworkKey(ScoredNetwork network)", "public CacheListener(Handler handler)", "public void post(List<ScoredNetwork> updatedNetworks)", "public void run()"], "prime_var_dic": {}}, {"idx": 4783, "status": "update", "global_index": 8065, "project_name": "android_", "written_on": "2016-01-07 11:16:17", "tufano_target": "public static void main ( String [ ] args ) { try { VAR_1 class . METHOD_1 ( STRING_1 ) ; throw new TYPE_2 ( STRING_2 ) ; } catch ( TYPE_3 VAR_2 ) { } }", "comment": "fail here ?", "tokenized_comment": ["fail", "<|s|>", "here", "<|s|>", "?"], "tufano_code": "public static void main ( String [ ] args ) { try { VAR_1 class . METHOD_1 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { } }", "our_target": "      throw new Error(\"Expected to fail\");\n    } catch (ReflectiveOperationException e) {\n", "our_code": "  public static void main(String[] args) {\n    try {\n      String.class.getDeclaredField(\"value\");\n<|startfocus|>\n    } catch (Exception e) {\n<|endfocus|>\n      // Ignore...\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "main", "(", "String", "[", "]", "<|s|>", "args", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", ".", "class", ".", "get", "Declared", "Field", "(", "\"", "value", "\"", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Ignore", "...", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 20, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5020", "comment_id": "0a54ffaf_a6746865", "class_list": ["Main"], "func_list": ["public static void main(String[] args)"], "prime_var_dic": {}}, {"idx": 94875, "status": "update", "global_index": 3724, "project_name": "android_", "written_on": "2017-02-16 03:15:28", "tufano_target": "private TYPE_1 METHOD_1 ( ) { if ( VAR_1 != null ) { try { return METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 , VAR_3 ) ; } catch ( TYPE_2 VAR_4 ) { } } return null ; }", "comment": "nit: space", "tokenized_comment": ["nit", ":", "<|s|>", "space"], "tufano_code": "private TYPE_1 METHOD_1 ( ) { if ( VAR_1 != null ) { try { return METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 , VAR_3 ) ; } catch ( TYPE_2 VAR_4 ) { } } return null ; }", "our_target": "        if (mBinder != null) {\n", "our_code": "    private Integer retrieveFeatureStatus() {\n<|startfocus|>\n        if(mBinder != null) {\n<|endfocus|>\n            try {\n                return getServiceInterface(mBinder).getFeatureStatus(mSlotId, mSupportedFeature);\n            } catch (RemoteException e) {\n                // Status check failed, don't update cache\n            }\n        }\n        return null;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Integer", "<|s|>", "retrieve", "Feature", "Status", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "(", "m", "Binder", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "get", "Service", "Interface", "(", "m", "Binder", ")", ".", "get", "Feature", "Status", "(", "m", "Slot", "Id", ",", "<|s|>", "m", "Supported", "Feature", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Remote", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "//", "<|s|>", "Status", "<|s|>", "check", "<|s|>", "failed", ",", "<|s|>", "don", "'", "t", "<|s|>", "update", "<|s|>", "cache", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 290, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_4888", "comment_id": "649b78a0_2f83210a", "class_list": ["ImsServiceProxy"], "func_list": ["public ImsServiceProxy(int slotId, IBinder binder, int featureType)", "public IImsServiceFeatureListener getListener()", "public void setBinder(IBinder binder)", "public int getFeatureStatus()", "private Integer retrieveFeatureStatus()", "public void setStatusCallback(INotifyStatusChanged c)", "public boolean isBinderAlive()", "private IImsServiceController getServiceInterface(IBinder b)"], "prime_var_dic": {"mSupportedFeature": 1, "the": 1, "mStatusCallback": 1, "mListenerBinder": 1, "RemoteException": 1}}, {"idx": 94717, "status": "update", "global_index": 11624, "project_name": "android_", "written_on": "2014-09-19 15:29:14", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; init ( ) ; }", "comment": "@NotNull?", "tokenized_comment": ["@", "Not", "Null", "?"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = VAR_2 ; VAR_5 = VAR_3 ; init ( ) ; }", "our_target": "  public SampleImportTreeManager(@NotNull Tree tree, @NotNull SampleCollection samples) {\n", "our_code": "<|startfocus|>\n  public SampleImportTreeManager(Tree tree, SampleCollection samples) {\n<|endfocus|>\n    myTree = tree;\n    mySamples = samples;\n    init();\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Sample", "Import", "Tree", "Manager", "(", "Tree", "<|s|>", "tree", ",", "<|s|>", "Sample", "Collection", "<|s|>", "samples", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Tree", "<|s|>", "=", "<|s|>", "tree", ";", "<|nl|>", "<|4-s|>", "my", "Samples", "<|s|>", "=", "<|s|>", "samples", ";", "<|nl|>", "<|4-s|>", "init", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 53, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_687", "comment_id": "301bc308_0620c432", "class_list": ["SampleImportTreeManager"], "func_list": ["public SampleImportTreeManager(Tree tree, SampleCollection samples)", "private void init()", "private void populateSamplesTree(@NotNull List<Sample> samples, boolean expand)", "public Sample getSelectedSample()", "private List<Sample> filterSamples(@NotNull String keyword)", "public void filterTree(@NotNull String keyword)"], "prime_var_dic": {"mySamples": 1, "myTree": 1}}, {"idx": 77745, "status": "update", "global_index": 16604, "project_name": "android_", "written_on": "2015-06-19 08:57:56", "tufano_target": "private static void METHOD_1 ( TYPE_1 VAR_1 , String VAR_2 , String content ) { String VAR_3 = METHOD_2 ( new TYPE_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) . METHOD_4 ( ) ) ; assertTrue ( VAR_3 . contains ( content ) ) ; }", "comment": "Windows unfriendly?", "tokenized_comment": ["Windows", "<|s|>", "unfriendly", "?"], "tufano_code": "private static void METHOD_1 ( TYPE_1 VAR_1 , String VAR_2 , String content ) { String VAR_3 = METHOD_2 ( VAR_1 . METHOD_3 ( ) + STRING_1 + VAR_2 ) ; assertTrue ( VAR_3 . contains ( content ) ) ; }", "our_target": "  private static void assertBuildFileContains(@NotNull IdeFrameFixture projectFrame, @NotNull String relativePath,\n                                              @NotNull String content) {\n    String newBuildFileContent = getFileContent(new File(projectFrame.getProjectPath(), relativePath).getPath());\n", "our_code": "<|startfocus|>\n  private static void assertBuildFileContains(@NotNull IdeFrameFixture projectFrame, @NotNull String relativePath, @NotNull String content) {\n    String newBuildFileContent = getFileContent(projectFrame.getProjectPath() + \"/\" + relativePath);\n<|endfocus|>\n    assertTrue(newBuildFileContent.contains(content));\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "assert", "Build", "File", "Contains", "(", "@", "Not", "Null", "<|s|>", "Ide", "Frame", "Fixture", "<|s|>", "project", "Frame", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "relative", "Path", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "content", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "new", "Build", "File", "Content", "<|s|>", "=", "<|s|>", "get", "File", "Content", "(", "project", "Frame", ".", "get", "Project", "Path", "(", ")", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "relative", "Path", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "assert", "True", "(", "new", "Build", "File", "Content", ".", "contains", "(", "content", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 71, "base_patch_number": 5, "changed_patch_number": 8, "code_file_name": "android_19", "comment_id": "5ed222e8_353a5af6", "class_list": ["AddGradleDependencyTest"], "func_list": ["private static void assertBuildFileContains(@NotNull IdeFrameFixture projectFrame, @NotNull String relativePath, @NotNull String content)"], "prime_var_dic": {}}, {"idx": 77735, "status": "update", "global_index": 20508, "project_name": "android_", "written_on": "2013-03-15 19:29:56", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 < TYPE_3 > VAR_3 , TYPE_1 VAR_4 , String name ) { super ( VAR_2 , name ) ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; }", "comment": "@Nonnull on parameter types.", "tokenized_comment": ["@", "Nonnull", "<|s|>", "on", "<|s|>", "parameter", "<|s|>", "types", "."], "tufano_code": "public VAR_1 ( String name , TYPE_1 VAR_2 , TYPE_2 < TYPE_3 > VAR_3 , TYPE_1 VAR_4 ) { super ( VAR_2 , name ) ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; }", "our_target": "    public AndroidDependencyImpl(@NonNull File explodedBundle,\n                                 @NonNull List<AndroidDependency> dependencies,\n                                 @NonNull File bundle,\n                                 @Nullable String name) {\n", "our_code": "<|startfocus|>\n    public AndroidDependencyImpl(String name, File explodedBundle,\n                                 List<AndroidDependency> dependencies, File bundle) {\n<|endfocus|>\n        super(explodedBundle, name);\n        this.dependencies = dependencies;\n        this.bundle = bundle;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Android", "Dependency", "Impl", "(", "String", "<|s|>", "name", ",", "<|s|>", "File", "<|s|>", "exploded", "Bundle", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|s|>", "List", "<", "Android", "Dependency", ">", "<|s|>", "dependencies", ",", "<|s|>", "File", "<|s|>", "bundle", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "super", "(", "exploded", "Bundle", ",", "<|s|>", "name", ");", "<|nl|>", "<|8-s|>", "this", ".", "dependencies", "<|s|>", "=", "<|s|>", "dependencies", ";", "<|nl|>", "<|8-s|>", "this", ".", "bundle", "<|s|>", "=", "<|s|>", "bundle", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 29, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1998", "comment_id": "RvG3MBrI", "class_list": ["AndroidDependencyImpl"], "func_list": ["public AndroidDependencyImpl(String name, File explodedBundle,", "public List<AndroidDependency> getDependencies()"], "prime_var_dic": {}}, {"idx": 53150, "status": "update", "global_index": 15567, "project_name": "android_", "written_on": "2015-02-12 17:13:19", "tufano_target": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ! VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; METHOD_5 ( ) ; }", "comment": "thanks for changing that. Now it looks like these two bools are combined at line 239, so we can we pass in just a single bool that says \"showCloudTarget\"?", "tokenized_comment": ["thanks", "<|s|>", "for", "<|s|>", "changing", "<|s|>", "that", ".", "<|s|>", "Now", "<|s|>", "it", "<|s|>", "looks", "<|s|>", "like", "<|s|>", "these", "<|s|>", "two", "<|s|>", "bools", "<|s|>", "are", "<|s|>", "combined", "<|s|>", "at", "<|s|>", "line", "<|s|>", "239", ",", "<|s|>", "so", "<|s|>", "we", "<|s|>", "can", "<|s|>", "we", "<|s|>", "pass", "<|s|>", "in", "<|s|>", "just", "<|s|>", "a", "<|s|>", "single", "<|s|>", "bool", "<|s|>", "that", "<|s|>", "says", "<|s|>", "\"", "show", "Cloud", "Target", "\"", "?"], "tufano_code": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ! VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; }", "our_target": "        updateEnabled();\n", "our_code": "      public void selectedDevicesChanged() {\n        myLaunchEmulatorRadioButton.setSelected(!myDeviceChooser.hasDevices());\n        myChooserRunningDeviceRadioButton.setSelected(myDeviceChooser.hasDevices());\n<|startfocus|>\n        updateOkButton();\n<|endfocus|>\n      }", "tokenized_code": ["<|4-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "selected", "Devices", "Changed", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "my", "Launch", "Emulator", "Radio", "Button", ".", "set", "Selected", "(", "!", "my", "Device", "Chooser", ".", "has", "Devices", "(", ")", ");", "<|nl|>", "<|8-s|>", "my", "Chooser", "Running", "Device", "Radio", "Button", ".", "set", "Selected", "(", "my", "Device", "Chooser", ".", "has", "Devices", "(", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "update", "Ok", "Button", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}"], "base_code_line_number": 85, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_760", "comment_id": "369e69d1_6d89d539", "class_list": ["ExtendedDeviceChooserDialog"], "func_list": ["public ExtendedDeviceChooserDialog(@NotNull final AndroidFacet facet,", "public void selectedDevicesChanged()", "public Module getModule()", "protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus)", "public void actionPerformed(ActionEvent e)", "private void updateOkButton()", "private void updateEnabled()", "public JComponent getPreferredFocusedComponent()", "protected void doOKAction()", "protected String getDimensionServiceKey()", "protected JComponent createCenterPanel()", "public IDevice[] getSelectedDevices()", "public String getSelectedAvd()", "public boolean isToLaunchEmulator()", "public boolean useSameDevicesAgain()"], "prime_var_dic": {"myProject": 1, "myDeviceChooser": 1, "myAvdCombo": 1}}, {"idx": 91140, "status": "update", "global_index": 14923, "project_name": "android_", "written_on": "2014-05-06 18:22:21", "tufano_target": "public void METHOD_1 ( ) { for ( String VAR_1 : VAR_2 ) { if ( ! VAR_3 . get ( ) ) { break ; } VAR_4 . METHOD_2 ( VAR_1 , false ) ; } }", "comment": "crazy indent", "tokenized_comment": ["crazy", "<|s|>", "indent"], "tufano_code": "public void METHOD_1 ( ) { for ( String VAR_1 : VAR_2 ) { if ( ! VAR_3 . get ( ) ) { break ; } VAR_4 . METHOD_2 ( VAR_1 , false ) ; } }", "our_target": "            public void run() {\n", "our_code": "<|startfocus|>\n                    public void run() {\n<|endfocus|>\n                for (String pkg : pkgs) {\n                    if (!mIdleTime.get()) {\n                        break;\n                    }\n                    mPackageManager.performDexOpt(pkg, false);\n                }\n            }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "for", "<|s|>", "(", "String", "<|s|>", "pkg", "<|s|>", ":", "<|s|>", "pkgs", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "!", "m", "Idle", "Time", ".", "get", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "break", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "m", "Package", "Manager", ".", "perform", "Dex", "Opt", "(", "pkg", ",", "<|s|>", "false", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 78, "base_patch_number": 4, "changed_patch_number": 7, "code_file_name": "android_4162", "comment_id": "8aba749a_acc59973", "class_list": ["BackgroundDexOptService"], "func_list": ["public void onReceive(Context context, Intent intent)", "public BackgroundDexOptService(Context context)", "public boolean onIdleStart()", "new Thread(\"BackgroundDexOptService_DexOpter\")", "public void run()", "public void onIdleStop()"], "prime_var_dic": {"TAG": 1}}, {"idx": 28803, "status": "update", "global_index": 6243, "project_name": "android_", "written_on": "2016-04-28 14:09:38", "tufano_target": "public void METHOD_1 ( ) { int [ ] array = new int [ 1 ] ; TYPE_2 . assertEquals ( - 1 , TYPE_1 . METHOD_2 ( array , 0 ) ) ; TYPE_2 . assertEquals ( 0 , array [ 0 ] ) ; }", "comment": "Partial test, we need to check value in tab and the value of the post operation.", "tokenized_comment": ["Partial", "<|s|>", "test", ",", "<|s|>", "we", "<|s|>", "need", "<|s|>", "to", "<|s|>", "check", "<|s|>", "value", "<|s|>", "in", "<|s|>", "tab", "<|s|>", "and", "<|s|>", "the", "<|s|>", "value", "<|s|>", "of", "<|s|>", "the", "<|s|>", "post", "<|s|>", "operation", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new int [ 1 ] , 0 ) ; }", "our_target": "    int[] array = new int[1];\n    Assert.assertEquals(-1, UnaryDecrement.setValueAndGetDecrementedIndex(array, 0));\n    Assert.assertEquals(0, array[0]);\n", "our_code": "  public void testDecrementWithArray() {\n<|startfocus|>\n    UnaryDecrement.setValueAndGetDecrementedIndex(new int[1], 0);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Decrement", "With", "Array", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Unary", "Decrement", ".", "set", "Value", "And", "Get", "Decremented", "Index", "(", "new", "<|s|>", "int", "[", "1", "]", ",", "<|s|>", "0", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 28, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2687", "comment_id": "889d6572_34177e95", "class_list": ["Tests"], "func_list": ["public void testDecrementWithArray()"], "prime_var_dic": {}}, {"idx": 45453, "status": "update", "global_index": 9487, "project_name": "android_", "written_on": "2015-10-13 16:33:44", "tufano_target": "public TYPE_1 METHOD_2 ( ) { return VAR_1 ; }", "comment": "nit: Dynamically?", "tokenized_comment": ["nit", ":", "<|s|>", "Dynamically", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }", "our_target": "  public Method getDynamicallySynchronizedMethod() {\n", "our_code": "<|startfocus|>\n  public Method getDynamicSynchronizedMethod() {\n<|endfocus|>\n    return dynamicIsSynchronized;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Method", "<|s|>", "get", "Dynamic", "Synchronized", "Method", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "dynamic", "Is", "Synchronized", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 126, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3718", "comment_id": "6a149288_2aec5bc3", "class_list": ["ManagedSchedulable", "'\""], "func_list": ["public String getName()", "private boolean isSynchronized = false;", "public boolean isStaticSynchronized()", "public Method getDynamicSynchronizedMethod()", "public String getDescription()", "private void extractSynchronized(", "public String getName()", "public boolean isSynchronized(@Nonnull Schedulable schedulable)"], "prime_var_dic": {}}, {"idx": 89953, "status": "update", "global_index": 12865, "project_name": "android_", "written_on": "2014-10-07 16:36:24", "tufano_target": "public String METHOD_4 ( ) { return VAR_4 ; }", "comment": "@NonNull", "tokenized_comment": ["@", "Non", "Null"], "tufano_code": "public String METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_2 ( ) == VAR_1 ) { return VAR_2 . METHOD_3 ( ) ; } } return null ; }", "our_target": "    @Nullable\n    public String getDensityFilter() {\n        return densityFilter;\n", "our_code": "<|startfocus|>\n    public String getFilter(FilterType filterType) {\n        for (FilterData filter : filters) {\n            if (filter.getFilterType() == filterType) {\n                return filter.getIdentifier();\n            }\n        }\n        return null;\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Filter", "(", "Filter", "Type", "<|s|>", "filter", "Type", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "Filter", "Data", "<|s|>", "filter", "<|s|>", ":", "<|s|>", "filters", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "filter", ".", "get", "Filter", "Type", "(", ")", "<|s|>", "==", "<|s|>", "filter", "Type", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "filter", ".", "get", "Identifier", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 70, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_1136", "comment_id": "b0aed491_fb424b02", "class_list": ["BaseVariantOutputData"], "func_list": ["public BaseVariantOutputData(", "public String getFilter(FilterType filterType)", "public OutputType getOutputType()", "public Collection<FilterType> getFilterTypes()", "public Collection<FilterData> getFilters()", "public String getFullName()", "public String getBaseName()", "public String getDirName()", "private String getFilterName()", "void setMultiOutput(boolean multiOutput)"], "prime_var_dic": {"String": 1, "outputType": 1}}, {"idx": 38957, "status": "update", "global_index": 11176, "project_name": "android_", "written_on": "2014-07-15 11:36:09", "tufano_target": "public void METHOD_1 ( ) { VAR_5 = TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; }", "comment": "If you make this class a service, you can do this in the constructor. Also please use WindowManagerEx.findFrameFor() instead of reimplementing it manually.", "tokenized_comment": ["If", "<|s|>", "you", "<|s|>", "make", "<|s|>", "this", "<|s|>", "class", "<|s|>", "a", "<|s|>", "service", ",", "<|s|>", "you", "<|s|>", "can", "<|s|>", "do", "<|s|>", "this", "<|s|>", "in", "<|s|>", "the", "<|s|>", "constructor", ".", "<|s|>", "Also", "<|s|>", "please", "<|s|>", "use", "<|s|>", "Window", "Manager", "Ex", ".", "find", "Frame", "For", "(", ")", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "reimplementing", "<|s|>", "it", "<|s|>", "manually", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( VAR_3 . METHOD_3 ( ) == VAR_4 ) { VAR_5 = VAR_3 ; break ; } } }", "our_target": "    myIdeFrame = WindowManagerEx.getInstanceEx().findFrameFor(myProject);\n", "our_code": "  public void projectOpened() {\n<|startfocus|>\n    // Go through all the project ide frames in the window manager to find the ide frame corresponding to our project.\n    IdeFrame[] ideFrames = myWindowManager.getAllProjectFrames();\n    for (IdeFrame ideFrame : ideFrames) {\n      if (ideFrame.getProject() == myProject) {\n        myIdeFrame = ideFrame;\n        break;\n      }\n    }\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "project", "Opened", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Go", "<|s|>", "through", "<|s|>", "all", "<|s|>", "the", "<|s|>", "project", "<|s|>", "ide", "<|s|>", "frames", "<|s|>", "in", "<|s|>", "the", "<|s|>", "window", "<|s|>", "manager", "<|s|>", "to", "<|s|>", "find", "<|s|>", "the", "<|s|>", "ide", "<|s|>", "frame", "<|s|>", "corresponding", "<|s|>", "to", "<|s|>", "our", "<|s|>", "project", ".", "<|nl|>", "<|4-s|>", "Ide", "Frame", "[", "]", "<|s|>", "ide", "Frames", "<|s|>", "=", "<|s|>", "my", "Window", "Manager", ".", "get", "All", "Project", "Frames", "(", ");", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Ide", "Frame", "<|s|>", "ide", "Frame", "<|s|>", ":", "<|s|>", "ide", "Frames", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "ide", "Frame", ".", "get", "Project", "(", ")", "<|s|>", "==", "<|s|>", "my", "Project", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "my", "Ide", "Frame", "<|s|>", "=", "<|s|>", "ide", "Frame", ";", "<|nl|>", "<|8-s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 116, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_931", "comment_id": "390c8c77_52f992e4", "class_list": ["ProjectStateComponent", "State"], "func_list": ["public State()", "public void syncState(HashSet<Class<? extends BaseTask>> allTasks)", "public ProjectStateComponent(Project project)", "public void initComponent()", "public void disposeComponent()", "public String getComponentName()", "public void projectOpened()", "public void projectClosed()", "public IdeFrame getIdeFrame()", "public State getState()", "public void loadState(State persistentState)"], "prime_var_dic": {}}, {"idx": 7126, "status": "update", "global_index": 13093, "project_name": "android_", "written_on": "2014-10-21 14:25:54", "tufano_target": "protected static boolean METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , int VAR_2 ) { return VAR_1 != null && VAR_2 >= 0 && VAR_1 . length > VAR_2 ; }", "comment": "mark this and the next method @Nullable on the components parameter?", "tokenized_comment": ["mark", "<|s|>", "this", "<|s|>", "and", "<|s|>", "the", "<|s|>", "next", "<|s|>", "method", "<|s|>", "@", "Nullable", "<|s|>", "on", "<|s|>", "the", "<|s|>", "components", "<|s|>", "parameter", "?"], "tufano_code": "protected static boolean METHOD_1 ( TYPE_1 [ ] [ ] VAR_1 , int VAR_2 ) { return VAR_1 != null && VAR_2 >= 0 && VAR_1 . length > VAR_2 ; }", "our_target": "  protected static boolean rowExists(@Nullable RadComponent[][] components, int row) {\n", "our_code": "<|startfocus|>\n  protected static boolean rowExists(RadComponent[][] components, int row) {\n<|endfocus|>\n    return components != null && row >= 0 &&  components.length > row;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "protected", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "row", "Exists", "(", "Rad", "Component", "[", "]", "[", "]", "<|s|>", "components", ",", "<|s|>", "int", "<|s|>", "row", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "components", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "row", "<|s|>", ">=", "<|s|>", "0", "<|s|>", "&&", "<|2-s|>", "components", ".", "length", "<|s|>", ">", "<|s|>", "row", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 311, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_712", "comment_id": "b5f16652_407a8e5f", "class_list": ["GridOperation", "GridFeedback"], "func_list": ["public GridOperation(RadComponent container, OperationContext context)", "private void createFeedback()", "public void showFeedback()", "private void configureTextFeedback()", "else if (myInsertType == GridInsertType.after_h_cell)", "public void eraseFeedback()", "public boolean canExecute()", "private void updateRowAndColumn(@NotNull Point location, GridInfo gridInfo)", "private void calculateGridInfo()", "protected boolean isMoveOperation()", "private static int getLineIndex(int[] line, int location)", "protected static boolean rowExists(RadComponent[][] components, int row)", "boolean cellExists = cellExists(gridInfo.components, myRow, myColumn);", "private boolean hasComponents(int row, int column)", "private Rectangle getInsertRect(boolean includeSpans)", "private static Rectangle getInsertInCellRect(Rectangle cellRect)", "protected void paintComponent(Graphics g)", "public GridOperation(RadComponent container, OperationContext context)"], "prime_var_dic": {}}, {"idx": 94350, "status": "update", "global_index": 2860, "project_name": "android_", "written_on": "2017-03-20 17:35:40", "tufano_target": "private boolean METHOD_1 ( int VAR_3 ) { if ( VAR_3 < 0 || VAR_3 >= VAR_4 . length ) return true ; return false ; }", "comment": "rename?", "tokenized_comment": ["rename", "?"], "tufano_code": "private boolean METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 || VAR_1 >= VAR_2 . length ) return true ; return false ; }", "our_target": "    private boolean isInvalidSlotId(int slotIndex) {\n        if (slotIndex < 0 || slotIndex >= mSlotIndexToSubId.length) return true;\n", "our_code": "<|startfocus|>\n    private boolean isInvalidSlotId(int slotIdx) {\n        if (slotIdx < 0 || slotIdx >= mSlotIdxToSubId.length) return true;\n<|endfocus|>\n        return false;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Invalid", "Slot", "Id", "(", "int", "<|s|>", "slot", "Idx", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "slot", "Idx", "<|s|>", "<", "<|s|>", "0", "<|s|>", "||", "<|s|>", "slot", "Idx", "<|s|>", ">=", "<|s|>", "m", "Slot", "Idx", "To", "Sub", "Id", ".", "length", ")", "<|s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 181, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_5314", "comment_id": "1cd6534b_9639ce12", "class_list": ["SubscriptionControllerMock"], "func_list": ["public static SubscriptionController init(Phone phone)", "public static SubscriptionController getInstance()", "public SubscriptionControllerMock(Context c, ITelephonyRegistry.Stub tr, int phoneCount)", "protected void init(Context c)", "public int getDefaultDataSubId()", "public void setDefaultDataSubId(int subId)", "private void broadcastDefaultDataSubIdChanged(int subId)", "public int getSubIdUsingPhoneId(int phoneId)", "public void notifySubscriptionInfoChanged()", "public SubscriptionInfo getActiveSubscriptionInfo(int subId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForIccId(String iccId, String callingPackage)", "public SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIdx, String cp)", "public List<SubscriptionInfo> getAllSubInfoList(String callingPackage)", "public List<SubscriptionInfo> getActiveSubscriptionInfoList(String callingPackage)", "public int getActiveSubInfoCount(String callingPackage)", "public int getAllSubInfoCount(String callingPackage)", "public int getActiveSubInfoCountMax()", "public int addSubInfoRecord(String iccId, int slotId)", "public boolean setPlmnSpn(int slotId, boolean showPlmn, String plmn, boolean showSpn,", "public int setIconTint(int tint, int subId)", "public int setDisplayName(String displayName, int subId)", "public int setDisplayNameUsingSrc(String displayName, int subId, long nameSource)", "public int setDisplayNumber(String number, int subId)", "public int setDataRoaming(int roaming, int subId)", "public int setMccMnc(String mccMnc, int subId)", "public int getSlotId(int subId)", "private boolean isInvalidSlotId(int slotIdx)", "public int[] getSubId(int slotIdx)", "public void setSlotSubId(int slotIdx, int subId)", "public int getPhoneId(int subId)", "public int clearSubInfo()", "public int getDefaultSubId()", "public void setDefaultSmsSubId(int subId)", "public int getDefaultSmsSubId()", "public void setDefaultVoiceSubId(int subId)", "public int getDefaultVoiceSubId()", "public void clearDefaultsForInactiveSubIds()", "public int[] getSubIdUsingSlotId(int slotId)", "public List<SubscriptionInfo> getSubInfoUsingSlotIdWithCheck(int slotId, boolean needCheck,", "public void updatePhonesAvailability(Phone[] phones)", "public int[] getActiveSubIdList()", "public boolean isActiveSubId(int subId)", "public int getSimStateForSlotIndex(int slotIndex)", "public void setSubscriptionProperty(int subId, String propKey, String propValue)", "public String getSubscriptionProperty(int subId, String propKey, String callingPackage)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {"mTelephonyRegistry": 1}}, {"idx": 94235, "status": "update", "global_index": 5379, "project_name": "android_", "written_on": "2016-09-26 15:59:15", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_3 , VAR_1 ) ; }", "comment": "These methods probably have to post a message to the state machine with the object that they received.  The danger is that accessing these internal fields is still not thread safe because this method is called on some random binder thread (not the state machine thread).\n\nProbably the whole class should be static so you're not tempted to access fields that are owned by the state machine.", "tokenized_comment": ["These", "<|s|>", "methods", "<|s|>", "probably", "<|s|>", "have", "<|s|>", "to", "<|s|>", "post", "<|s|>", "a", "<|s|>", "message", "<|s|>", "to", "<|s|>", "the", "<|s|>", "state", "<|s|>", "machine", "<|s|>", "with", "<|s|>", "the", "<|s|>", "object", "<|s|>", "that", "<|s|>", "they", "<|s|>", "received", ".", "<|2-s|>", "The", "<|s|>", "danger", "<|s|>", "is", "<|s|>", "that", "<|s|>", "accessing", "<|s|>", "these", "<|s|>", "internal", "<|s|>", "fields", "<|s|>", "is", "<|s|>", "still", "<|s|>", "not", "<|s|>", "thread", "<|s|>", "safe", "<|s|>", "because", "<|s|>", "this", "<|s|>", "method", "<|s|>", "is", "<|s|>", "called", "<|s|>", "on", "<|s|>", "some", "<|s|>", "random", "<|s|>", "binder", "<|s|>", "thread", "<|s|>", "(", "not", "<|s|>", "the", "<|s|>", "state", "<|s|>", "machine", "<|s|>", "thread", ")", ".", "<|nl|>", "<|nl|>", "Probably", "<|s|>", "the", "<|s|>", "whole", "<|s|>", "class", "<|s|>", "should", "<|s|>", "be", "<|s|>", "static", "<|s|>", "so", "<|s|>", "you", "'", "re", "<|s|>", "not", "<|s|>", "tempted", "<|s|>", "to", "<|s|>", "access", "<|s|>", "fields", "<|s|>", "that", "<|s|>", "are", "<|s|>", "owned", "<|s|>", "by", "<|s|>", "the", "<|s|>", "state", "<|s|>", "machine", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == VAR_2 ) { VAR_2 = null ; } }", "our_target": "                    sendMessage(CMD_CLIENT_INTERFACE_DOWN, networkInterface);\n", "our_code": "                public void OnClientTorndownEvent(IClientInterface networkInterface) {\n<|startfocus|>\n                    if (networkInterface == mClientInterface) {\n                        mClientInterface = null;\n                    }\n<|endfocus|>\n                }", "tokenized_code": ["<|16-s|>", "public", "<|s|>", "void", "<|s|>", "On", "Client", "Torndown", "Event", "(", "IClient", "Interface", "<|s|>", "network", "Interface", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "network", "Interface", "<|s|>", "==", "<|s|>", "m", "Client", "Interface", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "m", "Client", "Interface", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "}"], "base_code_line_number": 314, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4036", "comment_id": "f08d07b7_be22dab1", "class_list": ["RttService", "RttServiceImpl", "ClientHandler", "RttRequest", "ClientInfo", "RttStateMachine", "InterfaceEventHandler", "DefaultState", "EnabledState", "InitiatorEnabledState", "ResponderEnabledState"], "func_list": ["public Messenger getMessenger()", "public void handleMessage(Message msg)", "private String getDescription(int what)", "public void startService()", "new BroadcastReceiver()", "public void onReceive(Context context, Intent intent)", "public String toString()", "void addResponderRequest(int key)", "void removeResponderRequest(int key)", "boolean addRttRequest(int key, RttManager.ParcelableRttParams parcelableParams)", "void removeRttRequest(int key)", "void reportResponderEnableSucceed(int key, ResponderConfig config)", "void reportResponderEnableFailed(int key, int reason)", "void reportResult(RttRequest request, RttManager.RttResult[] results)", "void reportFailed(RttRequest request, int reason, String description)", "void reportAborted(int key)", "void cleanup()", "public void OnClientTorndownEvent(IClientInterface networkInterface)", "public void OnClientInterfaceReady(IClientInterface networkInterface)", "public void OnApTorndownEvent(IApInterface networkInterface)  }", "public void OnApInterfaceReady(IApInterface networkInterface)  }", "private IWificond makeWificond()", "public boolean processMessage(Message msg)", "public void enter()", "public void exit()", "private boolean hasOutstandingReponderRequests()", "String currentState()", "void replySucceeded(Message msg, Object obj)", "void replyFailed(Message msg, int reason, String description)", "boolean enforcePermissionCheck(Message msg)", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void onRttResults(RttManager.RttResult[] result)", "RttRequest issueNextRequest()", "public RttService(Context context)", "public void onStart()", "public void onBootPhase(int phase)", "public Messenger getMessenger()", "public void handleMessage(Message msg)", "private String getDescription(int what)", "public void startService()", "new BroadcastReceiver()", "public void onReceive(Context context, Intent intent)", "public String toString()", "void addResponderRequest(int key)", "void removeResponderRequest(int key)", "boolean addRttRequest(int key, RttManager.ParcelableRttParams parcelableParams)", "void removeRttRequest(int key)", "void reportResponderEnableSucceed(int key, ResponderConfig config)", "void reportResponderEnableFailed(int key, int reason)", "void reportResult(RttRequest request, RttManager.RttResult[] results)", "void reportFailed(RttRequest request, int reason, String description)", "void reportAborted(int key)", "void cleanup()", "public void OnClientTorndownEvent(IClientInterface networkInterface)", "public void OnClientInterfaceReady(IClientInterface networkInterface)", "public void OnApTorndownEvent(IApInterface networkInterface)  }", "public void OnApInterfaceReady(IApInterface networkInterface)  }", "private IWificond makeWificond()", "public boolean processMessage(Message msg)", "public void enter()", "public void exit()", "private boolean hasOutstandingReponderRequests()", "String currentState()", "void replySucceeded(Message msg, Object obj)", "void replyFailed(Message msg, int reason, String description)", "boolean enforcePermissionCheck(Message msg)", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void onRttResults(RttManager.RttResult[] result)", "RttRequest issueNextRequest()", "public String toString()", "public void OnClientTorndownEvent(IClientInterface networkInterface)", "public void OnClientInterfaceReady(IClientInterface networkInterface)", "public void OnApTorndownEvent(IApInterface networkInterface)  }", "public void OnApInterfaceReady(IApInterface networkInterface)  }", "public void OnClientTorndownEvent(IClientInterface networkInterface)", "public void OnClientInterfaceReady(IClientInterface networkInterface)", "public void OnApTorndownEvent(IApInterface networkInterface)  }", "public void OnApInterfaceReady(IApInterface networkInterface)  }", "public void OnClientTorndownEvent(IClientInterface networkInterface)", "public void OnClientInterfaceReady(IClientInterface networkInterface)", "public void OnApTorndownEvent(IApInterface networkInterface)  }", "public void OnApInterfaceReady(IApInterface networkInterface)  }", "public void OnClientTorndownEvent(IClientInterface networkInterface)", "public void OnClientInterfaceReady(IClientInterface networkInterface)", "public void OnApTorndownEvent(IApInterface networkInterface)  }", "public void OnApInterfaceReady(IApInterface networkInterface)  }", "public void OnClientTorndownEvent(IClientInterface networkInterface)", "public void OnClientInterfaceReady(IClientInterface networkInterface)", "public void OnApTorndownEvent(IApInterface networkInterface)  }", "public void OnApInterfaceReady(IApInterface networkInterface)  }"], "prime_var_dic": {}}, {"idx": 94500, "status": "update", "global_index": 2879, "project_name": "android_", "written_on": "2017-03-21 02:25:48", "tufano_target": "public boolean METHOD_1 ( TYPE_1 message ) { TYPE_2 . METHOD_2 ( this , VAR_1 , VAR_2 ) . show ( ) ; if ( VAR_1 != VAR_3 ) { METHOD_3 ( VAR_1 ) ; } return true ; }", "comment": "Shouldn't this use equals() instead of pointer equality ? Even if this works it is not super robust.", "tokenized_comment": ["Shouldn", "'", "t", "<|s|>", "this", "<|s|>", "use", "<|s|>", "equals", "(", ")", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "pointer", "<|s|>", "equality", "<|s|>", "?", "<|s|>", "Even", "<|s|>", "if", "<|s|>", "this", "<|s|>", "works", "<|s|>", "it", "<|s|>", "is", "<|s|>", "not", "<|s|>", "super", "<|s|>", "robust", "."], "tufano_code": "public boolean METHOD_1 ( TYPE_1 message ) { if ( message != null ) { TYPE_2 . METHOD_2 ( this , VAR_1 , VAR_2 ) . show ( ) ; if ( VAR_1 != VAR_3 ) { METHOD_3 ( VAR_1 ) ; } } return true ; }", "our_target": "        Toast.makeText(this, message.what, Toast.LENGTH_SHORT).show();\n        if (message.what != R.string.disconnected) {\n            updateForegroundNotification(message.what);\n", "our_code": "    public boolean handleMessage(Message message) {\n<|startfocus|>\n        if (message != null) {\n            Toast.makeText(this, message.what, Toast.LENGTH_SHORT).show();\n\n            if (message.what != R.string.disconnected) {\n                updateForegroundNotification(message.what);\n            }\n<|endfocus|>\n        }\n        return true;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "handle", "Message", "(", "Message", "<|s|>", "message", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "message", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Toast", ".", "make", "Text", "(", "this", ",", "<|s|>", "message", ".", "what", ",", "<|s|>", "Toast", ".", "LENGTH", "_", "SHORT", ")", ".", "show", "(", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "message", ".", "what", "<|s|>", "!=", "<|s|>", "R", ".", "string", ".", "disconnected", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "update", "Foreground", "Notification", "(", "message", ".", "what", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 83, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_3711", "comment_id": "65b52968_b6f58899", "class_list": ["ToyVpnService"], "func_list": ["public void onCreate()", "public int onStartCommand(Intent intent, int flags, int startId)", "public void onDestroy()", "public boolean handleMessage(Message message)", "public void onEstablish(int connectionId, ParcelFileDescriptor tunInterface)", "public void onRevoke()", "private void updateForegroundNotification(final int message)"], "prime_var_dic": {"String": 2}}, {"idx": 39865, "status": "update", "global_index": 12283, "project_name": "android_", "written_on": "2014-08-12 11:18:10", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_6 VAR_6 , TYPE_4 VAR_4 , TYPE_5 type ) { super ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 = type ; }", "comment": "Will this get updated correctly when the user changes their project configuration and adds/removes source folders? Maybe it's better to fetch the list of folders in getChildren() instead of caching them?", "tokenized_comment": ["Will", "<|s|>", "this", "<|s|>", "get", "<|s|>", "updated", "<|s|>", "correctly", "<|s|>", "when", "<|s|>", "the", "<|s|>", "user", "<|s|>", "changes", "<|s|>", "their", "<|s|>", "project", "<|s|>", "configuration", "<|s|>", "and", "<|s|>", "adds", "/", "removes", "<|s|>", "source", "<|s|>", "folders", "?", "<|s|>", "Maybe", "<|s|>", "it", "'", "s", "<|s|>", "better", "<|s|>", "to", "<|s|>", "fetch", "<|s|>", "the", "<|s|>", "list", "<|s|>", "of", "<|s|>", "folders", "<|s|>", "in", "<|s|>", "get", "Children", "(", ")", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "caching", "<|s|>", "them", "?"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 < TYPE_3 > VAR_3 , TYPE_4 VAR_4 , TYPE_5 type ) { super ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 = type ; }", "our_target": "                                  @NotNull Module module,\n", "our_code": "  public NonAndroidSourceTypeNode(@NotNull Project project,\n<|startfocus|>\n                                  @NotNull List<VirtualFile> folders,\n<|endfocus|>\n                                  @NotNull ViewSettings settings,\n                                  @NotNull NonAndroidSourceType type) {\n    super(project, folders, settings);\n    mySourceType = type;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Non", "Android", "Source", "Type", "Node", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|2-s|>", "@", "Not", "Null", "<|s|>", "List", "<", "Virtual", "File", ">", "<|s|>", "folders", ",", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|2-s|>", "@", "Not", "Null", "<|s|>", "View", "Settings", "<|s|>", "settings", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|2-s|>", "@", "Not", "Null", "<|s|>", "Non", "Android", "Source", "Type", "<|s|>", "type", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "super", "(", "project", ",", "<|s|>", "folders", ",", "<|s|>", "settings", ");", "<|nl|>", "<|4-s|>", "my", "Source", "Type", "<|s|>", "=", "<|s|>", "type", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 44, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_484", "comment_id": "f6d5a333_932e24aa", "class_list": ["NonAndroidSourceTypeNode"], "func_list": ["public NonAndroidSourceTypeNode(@NotNull Project project,", "protected void update(PresentationData presentation)", "public boolean contains(@NotNull VirtualFile file)", "public String toTestString(@Nullable Queryable.PrintInfo printInfo)"], "prime_var_dic": {"mySourceType": 1}}, {"idx": 79096, "status": "update", "global_index": 19458, "project_name": "android_", "written_on": "2011-03-08 17:25:22", "tufano_target": "public String toString ( ) { return STRING_1 + getName ( ) + STRING_2 + METHOD_1 ( ) + STRING_3 ; }", "comment": "nonnls? (I wish Eclipse's toString generator would do that for us, I mean who internationalizes their debug tostring methods?)", "tokenized_comment": ["nonnls", "?", "<|s|>", "(", "I", "<|s|>", "wish", "<|s|>", "Eclipse", "'", "s", "<|s|>", "to", "String", "<|s|>", "generator", "<|s|>", "would", "<|s|>", "do", "<|s|>", "that", "<|s|>", "for", "<|s|>", "us", ",", "<|s|>", "I", "<|s|>", "mean", "<|s|>", "who", "<|s|>", "internationalizes", "<|s|>", "their", "<|s|>", "debug", "<|s|>", "tostring", "<|s|>", "methods", "?", ")"], "tufano_code": "public String toString ( ) { return STRING_1 + getName ( ) + STRING_2 + METHOD_1 ( ) + STRING_3 ; }", "our_target": "        return \"FrameworkResourceItem [mName=\" + getName() + \", mFiles=\" //$NON-NLS-1$ //$NON-NLS-2$\n                + getSourceFileList() + \"]\"; //$NON-NLS-1$\n", "our_code": "    public String toString() {\n<|startfocus|>\n        return \"FrameworkResourceItem [mName=\" + getName() + \", mFiles=\"\n                + getSourceFileList() + \"]\";\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "String", "<|s|>", "to", "String", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "\"", "Framework", "Resource", "Item", "<|s|>", "[", "m", "Name", "=", "\"", "<|s|>", "+", "<|s|>", "get", "Name", "(", ")", "<|s|>", "+", "<|s|>", "\"", ",", "<|s|>", "m", "Files", "=", "\"", "<|nl|>", "<|16-s|>", "+", "<|s|>", "get", "Source", "File", "List", "(", ")", "<|s|>", "+", "<|s|>", "\"", "]", "\"", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 37, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_1884", "comment_id": "AAAA%2FH%2F%2F%2FGg%3D", "class_list": ["FrameworkResourceItem"], "func_list": ["public boolean isEditableDirectly()", "public String toString()"], "prime_var_dic": {}}, {"idx": 80827, "status": "update", "global_index": 17392, "project_name": "android_", "written_on": "2011-06-24 20:42:14", "tufano_target": "public void METHOD_2 ( boolean VAR_3 ) { VAR_2 = VAR_3 ; }", "comment": "I think this should be reversed. The flag is to whether aapt crunch the png or not (--no-crunch), not whether to use the cache (as mentioned in my aapt review).\n\nI would call it setNoCrunch(boolean nocrunch).", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "this", "<|s|>", "should", "<|s|>", "be", "<|s|>", "reversed", ".", "<|s|>", "The", "<|s|>", "flag", "<|s|>", "is", "<|s|>", "to", "<|s|>", "whether", "<|s|>", "aapt", "<|s|>", "crunch", "<|s|>", "the", "<|s|>", "png", "<|s|>", "or", "<|s|>", "not", "<|s|>", "(", "--", "no", "-", "crunch", ")", ",", "<|s|>", "not", "<|s|>", "whether", "<|s|>", "to", "<|s|>", "use", "<|s|>", "the", "<|s|>", "cache", "<|s|>", "(", "as", "<|s|>", "mentioned", "<|s|>", "in", "<|s|>", "my", "<|s|>", "aapt", "<|s|>", "review", ")", ".", "<|nl|>", "<|nl|>", "I", "<|s|>", "would", "<|s|>", "call", "<|s|>", "it", "<|s|>", "set", "No", "Crunch", "(", "boolean", "<|s|>", "nocrunch", ")", "."], "tufano_code": "public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }", "our_target": "    public void setNoCrunch(boolean nocrunch) {\n        mUseCrunchCache = nocrunch;\n", "our_code": "<|startfocus|>\n    public void setUsecrunchcache(boolean usecrunch) {\n        mUseCrunchCache = usecrunch;\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Usecrunchcache", "(", "boolean", "<|s|>", "usecrunch", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Use", "Crunch", "Cache", "<|s|>", "=", "<|s|>", "usecrunch", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 128, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_841", "comment_id": "AAABDX%2F%2F%2Bb4%3D", "class_list": ["AaptExecLoopTask", "NoCompress", "generation"], "func_list": ["public void setExtension(String extention)", "public void setExecutable(Path executable)", "public void setCommand(String command)", "public void setForce(boolean force)", "public void setVerbose(boolean verbose)", "public void setUsecrunchcache(boolean usecrunch)", "public void setVersioncode(String versionCode)", "public void setDebug(boolean value)", "public void setManifest(Path manifest)", "public void setResources(Path resources)", "public void setAssets(Path assets)", "public void setAndroidjar(Path androidJar)", "public void setOutfolder(Path outFolder)", "public void setApkfolder(Path apkFolder)", "public void setResourcefilename(String apkName)", "public void setRfolder(Path rFolder)", "public void setresourcefilter(String filter)", "public Object createNocompress()", "public Object createRes()", "private void callAapt(String customPackage)", "public void setExtension(String extention)"], "prime_var_dic": {}}, {"idx": 85882, "status": "update", "global_index": 7718, "project_name": "android_", "written_on": "2015-11-10 22:46:29", "tufano_target": "public VAR_1 ( ) { super ( STRING_1 , 1.0 , STRING_2 ) ; put ( STRING_3 , VAR_3 + STRING_6 ) ; put ( STRING_4 , STRING_5 ) ; }", "comment": "This statement will load RootTrustManagerFactory and invoke its static initializers. We want to avoid this. Thus, reference the name of this class using a hard-coded String instead of a Class. See https://android.googlesource.com/platform/external/conscrypt/+/master/src/main/java/org/conscrypt/OpenSSLProvider.java or https://android.googlesource.com/platform/frameworks/base/+/master/keystore/java/android/security/keystore/AndroidKeyStoreProvider.java for an example.", "tokenized_comment": ["This", "<|s|>", "statement", "<|s|>", "will", "<|s|>", "load", "<|s|>", "Root", "Trust", "Manager", "Factory", "<|s|>", "and", "<|s|>", "invoke", "<|s|>", "its", "<|s|>", "static", "<|s|>", "initializers", ".", "<|s|>", "We", "<|s|>", "want", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "this", ".", "<|s|>", "Thus", ",", "<|s|>", "reference", "<|s|>", "the", "<|s|>", "name", "<|s|>", "of", "<|s|>", "this", "<|s|>", "class", "<|s|>", "using", "<|s|>", "a", "<|s|>", "hard", "-", "coded", "<|s|>", "String", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "a", "<|s|>", "Class", ".", "<|s|>", "See", "<|s|>", "https", "://", "android", ".", "googlesource", ".", "com", "/", "platform", "/", "external", "/", "conscrypt", "/+/", "master", "/", "src", "/", "main", "/", "java", "/", "org", "/", "conscrypt", "/", "Open", "SSLProvider", ".", "java", "<|s|>", "or", "<|s|>", "https", "://", "android", ".", "googlesource", ".", "com", "/", "platform", "/", "frameworks", "/", "base", "/+/", "master", "/", "keystore", "/", "java", "/", "android", "/", "security", "/", "keystore", "/", "Android", "Key", "Store", "Provider", ".", "java", "<|s|>", "for", "<|s|>", "an", "<|s|>", "example", "."], "tufano_code": "public VAR_1 ( ) { super ( STRING_1 , 1.0 , STRING_2 ) ; put ( STRING_3 , VAR_2 class . getName ( ) ) ; put ( STRING_4 , STRING_5 ) ; }", "our_target": "        put(\"TrustManagerFactory.PKIX\", PREFIX + \"RootTrustManagerFactorySpi\");\n", "our_code": "    public NetworkSecurityConfigProvider() {\n        // TODO: More clever name than this\n        super(\"AndroidNSSP\", 1.0, \"Android Network Security Policy Provider\");\n<|startfocus|>\n        put(\"TrustManagerFactory.PKIX\", RootTrustManagerFactory.class.getName());\n<|endfocus|>\n        put(\"Alg.Alias.TrustManagerFactory.X509\", \"PKIX\");\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Network", "Security", "Config", "Provider", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "More", "<|s|>", "clever", "<|s|>", "name", "<|s|>", "than", "<|s|>", "this", "<|nl|>", "<|8-s|>", "super", "(", "\"", "Android", "NSSP", "\"", ",", "<|s|>", "1", ".", "0", ",", "<|s|>", "\"", "Android", "<|s|>", "Network", "<|s|>", "Security", "<|s|>", "Policy", "<|s|>", "Provider", "\"", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "put", "(", "\"", "Trust", "Manager", "Factory", ".", "PKIX", "\"", ",", "<|s|>", "Root", "Trust", "Manager", "Factory", ".", "class", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "put", "(", "\"", "Alg", ".", "Alias", ".", "Trust", "Manager", "Factory", ".", "X", "509", "\"", ",", "<|s|>", "\"", "PKIX", "\"", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 27, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1426", "comment_id": "16ac2a06_5b4f6f3c", "class_list": ["NetworkSecurityConfigProvider"], "func_list": ["public NetworkSecurityConfigProvider()"], "prime_var_dic": {}}, {"idx": 75544, "status": "update", "global_index": 4585, "project_name": "android_", "written_on": "2016-11-21 18:54:16", "tufano_target": "public VAR_1 ( TYPE_1 context , String name , TYPE_2 VAR_2 , TYPE_3 < String > VAR_3 ) { VAR_4 = context . METHOD_1 ( ) . METHOD_2 ( name , null , STRING_1 ) ; VAR_5 = VAR_2 ; VAR_6 = new TYPE_4 ( context , VAR_7 , new TYPE_5 ( new TYPE_6 < > ( VAR_3 ) ) ) ; }", "comment": "Don't align, just let it break the line naturally", "tokenized_comment": ["Don", "'", "t", "<|s|>", "align", ",", "<|s|>", "just", "<|s|>", "let", "<|s|>", "it", "<|s|>", "break", "<|s|>", "the", "<|s|>", "line", "<|s|>", "naturally"], "tufano_code": "public VAR_1 ( TYPE_1 context , String name , TYPE_2 VAR_2 , TYPE_3 < String > VAR_3 ) { VAR_4 = context . METHOD_1 ( ) . METHOD_2 ( name , null , STRING_1 ) ; VAR_5 = VAR_2 ; VAR_6 = new TYPE_4 ( context , VAR_7 , new TYPE_5 ( new TYPE_6 < > ( VAR_3 ) ) ) ; }", "our_target": "            @NonNull String name,\n            @NonNull CharSequence packageName,\n            @NonNull List<String> mDNSNames) {\n        mName = context.getResources().getIdentifier(name, null,\n                \"com.android.printservice.recommendation\");\n", "our_code": "    public MDNSFilterPlugin(@NonNull Context context,\n<|startfocus|>\n                            @NonNull String name,\n                            @NonNull CharSequence packageName,\n                            @NonNull List<String> mDNSNames) {\n        mName = context.getResources().getIdentifier(name, null, \"com.android.printservice.recommendation\");\n<|endfocus|>\n        mPackageName = packageName;\n        mMDNSFilteredDiscovery = new MDNSFilteredDiscovery(context, PRINTER_SERVICE_TYPES, new VendorNameFilter(new HashSet<>(mDNSNames)));\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "MDNSFilter", "Plugin", "(", "@", "Non", "Null", "<|s|>", "Context", "<|s|>", "context", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "@", "Non", "Null", "<|s|>", "String", "<|s|>", "name", ",", "<|nl|>", "<|16-s|>", "<|12-s|>", "@", "Non", "Null", "<|s|>", "Char", "Sequence", "<|s|>", "package", "Name", ",", "<|nl|>", "<|16-s|>", "<|12-s|>", "@", "Non", "Null", "<|s|>", "List", "<", "String", ">", "<|s|>", "m", "DNSNames", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Name", "<|s|>", "=", "<|s|>", "context", ".", "get", "Resources", "(", ")", ".", "get", "Identifier", "(", "name", ",", "<|s|>", "null", ",", "<|s|>", "\"", "com", ".", "android", ".", "printservice", ".", "recommendation", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Package", "Name", "<|s|>", "=", "<|s|>", "package", "Name", ";", "<|nl|>", "<|8-s|>", "m", "MDNSFiltered", "Discovery", "<|s|>", "=", "<|s|>", "new", "<|s|>", "MDNSFiltered", "Discovery", "(", "context", ",", "<|s|>", "PRINTER", "_", "SERVICE", "_", "TYPES", ",", "<|s|>", "new", "<|s|>", "Vendor", "Name", "Filter", "(", "new", "<|s|>", "Hash", "Set", "<", ">", "(", "m", "DNSNames", ")", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 88, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3565", "comment_id": "b01e38f2_5af0d51f", "class_list": ["MDNSFilterPlugin", "VendorNameFilter"], "func_list": ["public boolean matchesCriteria(NsdServiceInfo nsdServiceInfo)", "public MDNSFilterPlugin(@NonNull Context context,", "public boolean matchesCriteria(NsdServiceInfo nsdServiceInfo)"], "prime_var_dic": {"Set": 1}}, {"idx": 58042, "status": "update", "global_index": 17247, "project_name": "android_", "written_on": "2011-06-18 00:23:43", "tufano_target": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! VAR_3 ) { METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; VAR_3 = true ; } }", "comment": "This should also check mReceiverRegistered to avoid registering the receiver twice.", "tokenized_comment": ["This", "<|s|>", "should", "<|s|>", "also", "<|s|>", "check", "<|s|>", "m", "Receiver", "Registered", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "registering", "<|s|>", "the", "<|s|>", "receiver", "<|s|>", "twice", "."], "tufano_code": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; VAR_3 = true ; }", "our_target": "        if (!mReceiverRegistered) {\n            registerReceiver(mBatteryReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n            mReceiverRegistered = true;\n        }\n", "our_code": "    public void onResume() {\n        super.onResume();\n\n<|startfocus|>\n        registerReceiver(mBatteryReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n        mReceiverRegistered = true;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Resume", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Resume", "(", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "register", "Receiver", "(", "m", "Battery", "Receiver", ",", "<|s|>", "new", "<|s|>", "Intent", "Filter", "(", "Intent", ".", "ACTION", "_", "BATTERY", "_", "CHANGED", ")", ");", "<|nl|>", "<|8-s|>", "m", "Receiver", "Registered", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 238, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4472", "comment_id": "AAABDX%2F%2F%2Fzk%3D", "class_list": ["MasterClear"], "func_list": ["public void onReceive(Context context, Intent intent)", "public void onClick(View v)", "private boolean runKeyguardConfirmation(int request)", "protected void onActivityResult(int requestCode, int resultCode, Intent data)", "private void establishFinalConfirmationState()", "private void establishInitialState()", "protected void onCreate(Bundle savedState)", "public void onPause()", "public void onResume()", "private void updateBatteryState(final Intent intent)", "protected Dialog onCreateDialog(int dialogId)", "public boolean onKey(final DialogInterface d,"], "prime_var_dic": {"int": 4, "execute": 1, "MasterClear": 1, "registered": 1, "subactivity": 1}}, {"idx": 86749, "status": "update", "global_index": 4735, "project_name": "android_", "written_on": "2016-12-07 19:15:03", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , null ) ; VAR_5 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; METHOD_5 ( VAR_3 . METHOD_6 ( VAR_4 ) ) ; }", "comment": "document param", "tokenized_comment": ["document", "<|s|>", "param"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , null ) ; VAR_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; METHOD_5 ( VAR_3 . METHOD_6 ( VAR_4 ) ) ; }", "our_target": "    ScoredNetwork noCurve = buildScoredNetwork(VALID_KEY, null /* rssiCurve */);\n    mScoreCache.updateScores(ImmutableList.of(noCurve));\n", "our_code": "  public void hasScoreCurveShouldReturnFalseWhenScoredNetworkHasNoCurve() {\n<|startfocus|>\n    ScoredNetwork noCurve = buildScoredNetwork(VALID_KEY, null);\n    scoreCache.updateScores(ImmutableList.of(noCurve));\n<|endfocus|>\n\n    assertFalse(scoreCache.hasScoreCurve(VALID_SCAN_RESULT));\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "has", "Score", "Curve", "Should", "Return", "False", "When", "Scored", "Network", "Has", "No", "Curve", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Scored", "Network", "<|s|>", "no", "Curve", "<|s|>", "=", "<|s|>", "build", "Scored", "Network", "(", "VALID", "_", "KEY", ",", "<|s|>", "null", ");", "<|nl|>", "<|4-s|>", "score", "Cache", ".", "update", "Scores", "(", "Immutable", "List", ".", "of", "(", "no", "Curve", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|4-s|>", "assert", "False", "(", "score", "Cache", ".", "has", "Score", "Curve", "(", "VALID", "_", "SCAN", "_", "RESULT", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 125, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_5699", "comment_id": "2d774f48_3402d871", "class_list": ["WifiNetworkScoreCacheTest"], "func_list": ["private static ScanResult buildScanResult(String ssid, String bssid)", "private ScoredNetwork buildScoredNetwork(WifiKey key, RssiCurve curve)", "private void initializeCacheWithValidScoredNetwork()", "public void setUp()", "public void isScoredNetworkShouldReturnTrueAfterUpdateScoresIsCalled()", "public void isScoredNetworkShouldReturnFalseAfterClearScoresIsCalled()", "public void updateScoresShouldAddNewNetwork()", "public void hasScoreCurveShouldReturnTrue()", "public void hasScoreCurveShouldReturnFalseWhenNoCachedNetwork()", "public void hasScoreCurveShouldReturnFalseWhenScoredNetworkHasNoCurve()", "public void getNetworkScoreShouldReturnScore()", "public void getMeteredHintShouldReturnFalse()", "public void getMeteredHintShouldReturnTrue()"], "prime_var_dic": {"mockRssiCurve": 1, "String": 3}}, {"idx": 49076, "status": "update", "global_index": 2386, "project_name": "android_", "written_on": "2017-03-07 19:28:38", "tufano_target": "public int METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } else { TYPE_1 . METHOD_2 ( VAR_3 , STRING_2 ) ; return VAR_4 ; } }", "comment": "else not needed here.  the normal case will return", "tokenized_comment": ["else", "<|s|>", "not", "<|s|>", "needed", "<|s|>", "here", ".", "<|2-s|>", "the", "<|s|>", "normal", "<|s|>", "case", "<|s|>", "will", "<|s|>", "return"], "tufano_code": "public int METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } else { TYPE_1 . METHOD_2 ( VAR_3 , STRING_1 ) ; return - 1 ; } }", "our_target": "            Log.e(TAG, \"getMaxNumBlacklistBssid: Firmware roaming is not supported\");\n            return INVALID_LIST_SIZE;\n", "our_code": "    public int getMaxNumBlacklistBssid() {\n        if (mFirmwareRoamingSupported) {\n            return mMaxNumBlacklistBssid;\n        } else {\n<|startfocus|>\n            Log.e(TAG, \"Firmware roaming is not supported\");\n            return -1;\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "get", "Max", "Num", "Blacklist", "Bssid", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Firmware", "Roaming", "Supported", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "m", "Max", "Num", "Blacklist", "Bssid", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "Firmware", "<|s|>", "roaming", "<|s|>", "is", "<|s|>", "not", "<|s|>", "supported", "\"", ");", "<|nl|>", "<|12-s|>", "return", "<|s|>", "-", "1", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 80, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4059", "comment_id": "e4351d6d_b60c973a", "class_list": ["provides", "WifiConnectivityHelper"], "func_list": ["public void getFirmwareRoamingInfo()", "public boolean isFirmwareRoamingSupported()", "public int getMaxNumBlacklistBssid()", "public int getMaxNumWhitelistSsid()", "public boolean setFirmwareRoamingConfiguration(ArrayList<String> blacklistBssids,", "public void getFirmwareRoamingInfo()", "public boolean isFirmwareRoamingSupported()", "public int getMaxNumBlacklistBssid()", "public int getMaxNumWhitelistSsid()", "public boolean setFirmwareRoamingConfiguration(ArrayList<String> blacklistBssids,"], "prime_var_dic": {"String": 1, "mWifiNative": 1, "it": 1}}]