[{"idx": 82089, "status": "update", "global_index": 15764, "project_name": "android_", "written_on": "2015-03-09 13:09:11", "tufano_target": "protected TYPE_1 METHOD_1 ( long VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_2 . METHOD_3 ( 1 ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_4 ( VAR_2 ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; int VAR_7 = VAR_5 . METHOD_6 ( ) ; assertEquals ( STRING_1 , 1 , VAR_7 ) ; VAR_5 . METHOD_7 ( ) ; return VAR_5 . METHOD_8 ( ) ; }", "comment": "Avoid the loc temporary?", "tokenized_comment": ["Avoid", "<|s|>", "the", "<|s|>", "loc", "<|s|>", "temporary", "?"], "tufano_code": "protected TYPE_1 METHOD_1 ( long VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_2 . METHOD_3 ( 1 ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_4 ( VAR_2 ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; int VAR_7 = VAR_5 . METHOD_6 ( ) ; assertEquals ( STRING_1 , 1 , VAR_7 ) ; VAR_5 . METHOD_7 ( ) ; TYPE_1 VAR_8 = VAR_5 . METHOD_8 ( ) ; return VAR_8 ; }", "our_target": "        return reply.getNextValueAsLocation();\n", "our_code": "    protected Location getTopFrameLocation(long threadID) {\n\n        // getting frames of the thread\n        CommandPacket packet = new CommandPacket(\n                JDWPCommands.ThreadReferenceCommandSet.CommandSetID,\n                JDWPCommands.ThreadReferenceCommandSet.FramesCommand);\n        packet.setNextValueAsThreadID(threadID);\n        packet.setNextValueAsInt(0);\n        packet.setNextValueAsInt(1);\n        ReplyPacket reply = debuggeeWrapper.vmMirror.performCommand(packet);\n        debuggeeWrapper.vmMirror.checkReply(reply);\n\n        // assert that only one top frame is returned\n        int framesCount = reply.getNextValueAsInt();\n        assertEquals(\"Invalid number of top stack frames,\", 1, framesCount);\n\n        reply.getNextValueAsFrameID(); // frameID\n<|startfocus|>\n        Location loc = reply.getNextValueAsLocation();\n\n        return loc;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "Location", "<|s|>", "get", "Top", "Frame", "Location", "(", "long", "<|s|>", "thread", "ID", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "getting", "<|s|>", "frames", "<|s|>", "of", "<|s|>", "the", "<|s|>", "thread", "<|nl|>", "<|8-s|>", "Command", "Packet", "<|s|>", "packet", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Command", "Packet", "(", "<|nl|>", "<|16-s|>", "JDWPCommands", ".", "Thread", "Reference", "Command", "Set", ".", "Command", "Set", "ID", ",", "<|nl|>", "<|16-s|>", "JDWPCommands", ".", "Thread", "Reference", "Command", "Set", ".", "Frames", "Command", ");", "<|nl|>", "<|8-s|>", "packet", ".", "set", "Next", "Value", "As", "Thread", "ID", "(", "thread", "ID", ");", "<|nl|>", "<|8-s|>", "packet", ".", "set", "Next", "Value", "As", "Int", "(", "0", ");", "<|nl|>", "<|8-s|>", "packet", ".", "set", "Next", "Value", "As", "Int", "(", "1", ");", "<|nl|>", "<|8-s|>", "Reply", "Packet", "<|s|>", "reply", "<|s|>", "=", "<|s|>", "debuggee", "Wrapper", ".", "vm", "Mirror", ".", "perform", "Command", "(", "packet", ");", "<|nl|>", "<|8-s|>", "debuggee", "Wrapper", ".", "vm", "Mirror", ".", "check", "Reply", "(", "reply", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "assert", "<|s|>", "that", "<|s|>", "only", "<|s|>", "one", "<|s|>", "top", "<|s|>", "frame", "<|s|>", "is", "<|s|>", "returned", "<|nl|>", "<|8-s|>", "int", "<|s|>", "frames", "Count", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Int", "(", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "\"", "Invalid", "<|s|>", "number", "<|s|>", "of", "<|s|>", "top", "<|s|>", "stack", "<|s|>", "frames", ",", "\"", ",", "<|s|>", "1", ",", "<|s|>", "frames", "Count", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "reply", ".", "get", "Next", "Value", "As", "Frame", "ID", "(", ");", "<|s|>", "//", "<|s|>", "frame", "ID", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Location", "<|s|>", "loc", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Location", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "loc", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 73, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_2748", "comment_id": "d719900f_3775f8c9", "class_list": ["for", "ExceptionBaseTest"], "func_list": ["protected Location getTopFrameLocation(long threadID)", "public String dumpLocation(Location location)", "protected Location getTopFrameLocation(long threadID)", "public String dumpLocation(Location location)"], "prime_var_dic": {"thread": 1}}, {"idx": 38780, "status": "update", "global_index": 18264, "project_name": "android_", "written_on": "2009-12-11 00:53:29", "tufano_target": "void METHOD_1 ( TYPE_1 file , TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 != null ) { TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 ) ; VAR_1 . delete ( ) ; } } catch ( TYPE_5 VAR_3 ) { TYPE_6 VAR_4 = new TYPE_6 ( VAR_5 , VAR_6 , VAR_3 . METHOD_7 ( ) , VAR_3 ) ; TYPE_7 . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_4 ) ; } }", "comment": "please log in the workspace using the ILog interface gotten through org.eclipse.core.runtime.Plugin.getLog()", "tokenized_comment": ["please", "<|s|>", "log", "<|s|>", "in", "<|s|>", "the", "<|s|>", "workspace", "<|s|>", "using", "<|s|>", "the", "<|s|>", "ILog", "<|s|>", "interface", "<|s|>", "gotten", "<|s|>", "through", "<|s|>", "org", ".", "eclipse", ".", "core", ".", "runtime", ".", "Plugin", ".", "get", "Log", "(", ")"], "tufano_code": "void METHOD_1 ( TYPE_1 file , TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 != null ) { TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 ) ; VAR_1 . delete ( ) ; } } catch ( TYPE_5 VAR_3 ) { VAR_3 . METHOD_6 ( ) ; } }", "our_target": "            Status s = new Status(Status.ERROR, DdmsPlugin.PLUGIN_ID, e.getMessage(), e);\n            DdmsPlugin.getDefault().getLog().log(s);\n", "our_code": "    void openFile(IFile file, IMarker marker) {\n        try {\n            IWorkbenchPage page = getViewSite().getWorkbenchWindow()\n                    .getActivePage();\n            if (page != null) {\n                IDE.openEditor(page, marker);\n                marker.delete();\n            }\n        } catch (CoreException e) {\n<|startfocus|>\n            e.printStackTrace();\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "void", "<|s|>", "open", "File", "(", "IFile", "<|s|>", "file", ",", "<|s|>", "IMarker", "<|s|>", "marker", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "IWorkbench", "Page", "<|s|>", "page", "<|s|>", "=", "<|s|>", "get", "View", "Site", "(", ")", ".", "get", "Workbench", "Window", "(", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", ".", "get", "Active", "Page", "(", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "page", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "IDE", ".", "open", "Editor", "(", "page", ",", "<|s|>", "marker", ");", "<|nl|>", "<|16-s|>", "marker", ".", "delete", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Core", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "e", ".", "print", "Stack", "Trace", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 380, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5581", "comment_id": "AAAAo3%2F%2F%2Brs%3D", "class_list": ["LogCatView", "FilterStorage", "\\\"\""], "func_list": ["public LogFilter[] getFilterFromStore()", "public void saveFilters(LogFilter[] filters)", "public boolean requiresDefaultFilter()", "public LogCatView()", "public static LogCatView getInstance()", "public static void setFont(Font font)", "public void createPartControl(Composite parent)", "public void run()", "mClearAction = new Action(\"Clear Log\")", "public void dispose()", "public void setFocus()", "private void placeActions()", "IMarker createMarkerFromSearchMatch(IFile file, SearchMatch match)", "void openFile(IFile file, IMarker marker)", "void switchPerspective()", "void goToErrorLine()", "new SearchRequestor()", "public LogFilter[] getFilterFromStore()", "public void saveFilters(LogFilter[] filters)", "public boolean requiresDefaultFilter()", "public LogCatView()", "public static LogCatView getInstance()", "public static void setFont(Font font)", "public void createPartControl(Composite parent)", "public void run()", "mClearAction = new Action(\"Clear Log\")", "public void dispose()", "public void setFocus()", "private void placeActions()", "IMarker createMarkerFromSearchMatch(IFile file, SearchMatch match)", "void openFile(IFile file, IMarker marker)", "void switchPerspective()", "void goToErrorLine()", "new SearchRequestor()"], "prime_var_dic": {"line": 1}}, {"idx": 383, "status": "update", "global_index": 11017, "project_name": "android_", "written_on": "2015-06-02 18:03:50", "tufano_target": "public void execute ( TYPE_1 VAR_1 ) { TYPE_7 VAR_6 = ( TYPE_7 ) VAR_1 ; VAR_6 . METHOD_5 ( new TYPE_6 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_3 + STRING_2 + VAR_4 + STRING_2 + VAR_5 ) ) ; }", "comment": "File", "tokenized_comment": ["File"], "tufano_code": "public void execute ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( VAR_1 , STRING_1 , new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_2 ( ) throws TYPE_5 { return new TYPE_6 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_3 + STRING_2 + VAR_4 + STRING_2 + VAR_5 ) ; } } ) ; }", "our_target": "                                        MergeResources mergeResourcesTask = (MergeResources) task;\n                                        mergeResourcesTask.setPublicFile(new File(\n                                                variantScope.getGlobalScope().getIntermediatesDir(),\n                                                DIR_BUNDLES + \"/\" + dirName + \"/\" +\n                                                        SdkConstants.FN_PUBLIC_TXT));\n", "our_code": "                                    public void execute(Task task) {\n<|startfocus|>\n                                        ConventionMappingHelper.map(task,\n                                                \"publicFile\",\n                                                new Callable<Object>() {\n                                                    @Override\n                                                    public Object call() throws Exception {\n                                                        return new File(\n                                                                variantScope.getGlobalScope()\n                                                                        .getIntermediatesDir(),\n                                                                DIR_BUNDLES + \"/\" + dirName + \"/\"\n                                                                        + SdkConstants.FN_PUBLIC_TXT);\n                                                    }\n                                                });\n<|endfocus|>\n                                    }", "tokenized_code": ["<|16-s|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "execute", "(", "Task", "<|s|>", "task", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "Convention", "Mapping", "Helper", ".", "map", "(", "task", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "\"", "public", "File", "\"", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "new", "<|s|>", "Callable", "<", "Object", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "public", "<|s|>", "Object", "<|s|>", "call", "(", ")", "<|s|>", "throws", "<|s|>", "Exception", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "File", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "variant", "Scope", ".", "get", "Global", "Scope", "(", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", ".", "get", "Intermediates", "Dir", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "DIR", "_", "BUNDLES", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|s|>", "+", "<|s|>", "dir", "Name", "<|s|>", "+", "<|s|>", "\"", "/", "\"", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "+", "<|s|>", "Sdk", "Constants", ".", "FN", "_", "PUBLIC", "_", "TXT", ");", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "}", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "}"], "base_code_line_number": 168, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1045", "comment_id": "b97b38ac_efc07d1f", "class_list": ["LibraryTaskManager", "", "files"], "func_list": ["public LibraryTaskManager (", "public void createTasksForVariantData(", "public void execute(Task task)", "public Void call() throws Exception", "public String getProjectVariant()", "public List<LibraryDependency> getDependencies()", "public MavenCoordinates getRequestedCoordinates()", "public MavenCoordinates getResolvedCoordinates()", "protected File getJarsRootFolder()", "public boolean isOptional()", "public ExtractAnnotations createExtractAnnotations(", "private Task getAssembleDefault()", "public LibraryTaskManager (", "public void createTasksForVariantData(", "public void execute(Task task)", "public Void call() throws Exception", "public String getProjectVariant()", "public List<LibraryDependency> getDependencies()", "public MavenCoordinates getRequestedCoordinates()", "public MavenCoordinates getResolvedCoordinates()", "protected File getJarsRootFolder()", "public boolean isOptional()", "public ExtractAnnotations createExtractAnnotations(", "private Task getAssembleDefault()"], "prime_var_dic": {}}, {"idx": 19478, "status": "insert", "global_index": 17135, "project_name": "android_", "written_on": "2010-12-22 02:14:59", "tufano_target": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 VAR_5 = VAR_1 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_4 , VAR_6 ) ; VAR_5 . commit ( ) ; METHOD_5 ( METHOD_6 ( ) ) ; } private boolean METHOD_7 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; boolean VAR_3 = VAR_1 . getBoolean ( VAR_4 , false ) ; return VAR_3 ; }", "comment": "Rename to getCallForwardingPreference and move next to the store.", "tokenized_comment": ["Rename", "<|s|>", "to", "<|s|>", "get", "Call", "Forwarding", "Preference", "<|s|>", "and", "<|s|>", "move", "<|s|>", "next", "<|s|>", "to", "<|s|>", "the", "<|s|>", "store", "."], "tufano_code": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; boolean VAR_3 = VAR_1 . getBoolean ( VAR_4 , false ) ; return VAR_3 ; }", "our_target": "        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);\n        SharedPreferences.Editor edit = sp.edit();\n        edit.putBoolean(CF_ENABLED, enabled);\n        edit.commit();\n\n        // Using the same method as VoiceMail to be able to track when the sim card is changed.\n        setVmSimImsi(getSubscriberId());\n    }\n\n    private boolean getCallForwardingPreference() {\n        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);\n", "our_code": "    private boolean retrieveCFPref() {\n<|startfocus|>\n        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);\n<|endfocus|>\n        boolean cf = sp.getBoolean(CF_ENABLED, false);\n        return cf;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "retrieve", "CFPref", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Shared", "Preferences", "<|s|>", "sp", "<|s|>", "=", "<|s|>", "Preference", "Manager", ".", "get", "Default", "Shared", "Preferences", "(", "m", "Context", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "cf", "<|s|>", "=", "<|s|>", "sp", ".", "get", "Boolean", "(", "CF", "_", "ENABLED", ",", "<|s|>", "false", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "cf", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1156, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4938", "comment_id": "AAAA%2B3%2F%2F%2Feg%3D", "class_list": ["GSMPhone", "parameter", "used", "NetworkSelectMessage"], "func_list": ["new Runnable()", "public void run()", "public void dispose()", "public void removeReferences()", "protected void finalize()", "public CellLocation getCellLocation()", "public String getPhoneName()", "public int getPhoneType()", "public SignalStrength getSignalStrength()", "public boolean getMessageWaitingIndicator()", "public boolean getCallForwardingIndicator()", "public DataState getDataConnectionState()", "public DataActivityState getDataActivityState()", "void notifyUnknownConnection()", "void notifySuppServiceFailed(SuppService code)", "void notifyLocationChanged()", "public void registerForSuppServiceNotification(", "public void unregisterForSuppServiceNotification(Handler h)", "public boolean canConference()", "public boolean canDial()", "public void clearDisconnected()", "public boolean canTransfer()", "boolean isInCall()", "public boolean handlePinMmi(String dialString)", "public void sendUssdResponse(String ussdMessge)", "private void storeVoiceMailNumber(String number)", "public String getVoiceMailNumber()", "private String getVmSimImsi()", "private void setVmSimImsi(String imsi)", "public String getVoiceMailAlphaTag()", "public String getDeviceId()", "public String getDeviceSvn()", "public String getEsn()", "public String getMeid()", "public String getSubscriberId()", "public String getIccSerialNumber()", "public String getLine1Number()", "public String getLine1AlphaTag()", "public void setLine1Number(String alphaTag, String number, Message onComplete)", "public void setVoiceMailNumber(String alphaTag,", "private boolean isValidCommandInterfaceCFReason (int commandInterfaceCFReason)", "private boolean isValidCommandInterfaceCFAction (int commandInterfaceCFAction)", "protected  boolean isCfEnable(int action)", "public void getCallForwardingOption(int commandInterfaceCFReason, Message onComplete)", "public void setCallForwardingOption(int commandInterfaceCFAction,", "public void storeCFPref(boolean enabled)", "public void getOutgoingCallerIdDisplay(Message onComplete)", "public void setOutgoingCallerIdDisplay(int commandInterfaceCLIRMode,", "public void getCallWaiting(Message onComplete)", "public void setCallWaiting(boolean enable, Message onComplete)", "public IccCard getIccCard()", "public void setOnPostDialCharacter(Handler h, int what, Object obj)", "public void setMute(boolean muted)", "public boolean getMute()", "public void getDataCallList(Message response)", "public List<DataConnection> getCurrentDataConnectionList ()", "public void updateServiceLocation()", "public void enableLocationUpdates()", "public void disableLocationUpdates()", "public boolean getDataRoamingEnabled()", "public void setDataRoamingEnabled(boolean enable)", "public boolean enableDataConnectivity()", "public boolean disableDataConnectivity()", "public boolean isDataConnectivityPossible()", "private boolean retrieveCFPref()", "protected  void syncClirSetting()", "public void handleMessage (Message msg)", "boolean updateCurrentCarrierInProvider()", "void updateCallForwardStatus(int caller)", "private void handleSetSelectNetwork(AsyncResult ar)", "public void saveClirSetting(int commandInterfaceCLIRMode)", "private void handleCfuQueryResult(CallForwardInfo[] infos)", "public PhoneSubInfo getPhoneSubInfo()", "public IccSmsInterfaceManager getIccSmsInterfaceManager()", "public IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()", "public IccFileHandler getIccFileHandler()", "public void activateCellBroadcastSms(int activate, Message response)", "public void getCellBroadcastSmsConfig(Message response)", "public void setCellBroadcastSmsConfig(int[] configValuesArray, Message response)", "public boolean isCspPlmnEnabled()", "public void setCallWaiting(boolean enable, Message onComplete)"], "prime_var_dic": {"NetworkSelectMessage": 1}}, {"idx": 89780, "status": "update", "global_index": 7848, "project_name": "android_", "written_on": "2015-11-30 22:16:29", "tufano_target": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { String VAR_3 = METHOD_2 ( VAR_1 ) ; for ( int index = 0 ; true ; index ++ ) { String fileName = VAR_3 + STRING_1 + index ; if ( ! new TYPE_4 ( VAR_6 , fileName ) . METHOD_4 ( ) ) { break ; } TYPE_1 VAR_5 = METHOD_5 ( fileName ) ; if ( VAR_2 . METHOD_6 ( VAR_5 ) ) { return VAR_5 ; } } return null ; }", "comment": "* Drop true -- this expression can be empty just fine.\n* It might be better to reorder isCaRemoved and file exists checks. This will make it easier to see the loop's termination condition.\n* Use index >= 0 as the termination expression. In theory, this could overflow...", "tokenized_comment": ["*", "<|s|>", "Drop", "<|s|>", "true", "<|s|>", "--", "<|s|>", "this", "<|s|>", "expression", "<|s|>", "can", "<|s|>", "be", "<|s|>", "empty", "<|s|>", "just", "<|s|>", "fine", ".", "<|nl|>", "*", "<|s|>", "It", "<|s|>", "might", "<|s|>", "be", "<|s|>", "better", "<|s|>", "to", "<|s|>", "reorder", "<|s|>", "is", "Ca", "Removed", "<|s|>", "and", "<|s|>", "file", "<|s|>", "exists", "<|s|>", "checks", ".", "<|s|>", "This", "<|s|>", "will", "<|s|>", "make", "<|s|>", "it", "<|s|>", "easier", "<|s|>", "to", "<|s|>", "see", "<|s|>", "the", "<|s|>", "loop", "'", "s", "<|s|>", "termination", "<|s|>", "condition", ".", "<|nl|>", "*", "<|s|>", "Use", "<|s|>", "index", "<|s|>", ">=", "<|s|>", "0", "<|s|>", "as", "<|s|>", "the", "<|s|>", "termination", "<|s|>", "expression", ".", "<|s|>", "In", "<|s|>", "theory", ",", "<|s|>", "this", "<|s|>", "could", "<|s|>", "overflow", "..."], "tufano_code": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { String VAR_3 = METHOD_2 ( VAR_1 ) ; for ( int index = 0 ; true ; index ++ ) { String fileName = VAR_3 + STRING_1 + index ; if ( METHOD_3 ( fileName ) ) { continue ; } if ( ! new TYPE_4 ( VAR_4 , fileName ) . METHOD_4 ( ) ) { break ; } TYPE_1 VAR_5 = METHOD_5 ( fileName ) ; if ( VAR_2 . METHOD_6 ( VAR_5 ) ) { return VAR_5 ; } } return null ; }", "our_target": "            if (!new File(mDir, fileName).exists()) {\n", "our_code": "    private X509Certificate findCert(X500Principal subj, CertSelector selector) {\n        String hash = getHash(subj);\n        for (int index = 0; true; index++) {\n            String fileName = hash + \".\" + index;\n<|startfocus|>\n            if (isCaRemoved(fileName)) {\n                continue;\n            }\n            if (!new File(mCaDir, fileName).exists()) {\n<|endfocus|>\n                break;\n            }\n            X509Certificate cert = readCertificate(fileName);\n            if (selector.match(cert)) {\n                return cert;\n            }\n        }\n        return null;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "X", "509", "Certificate", "<|s|>", "find", "Cert", "(", "X", "500", "Principal", "<|s|>", "subj", ",", "<|s|>", "Cert", "Selector", "<|s|>", "selector", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "<|s|>", "hash", "<|s|>", "=", "<|s|>", "get", "Hash", "(", "subj", ");", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "index", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "true", ";", "<|s|>", "index", "++", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "file", "Name", "<|s|>", "=", "<|s|>", "hash", "<|s|>", "+", "<|s|>", "\"", ".", "\"", "<|s|>", "+", "<|s|>", "index", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "is", "Ca", "Removed", "(", "file", "Name", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "continue", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "new", "<|s|>", "File", "(", "m", "Ca", "Dir", ",", "<|s|>", "file", "Name", ")", ".", "exists", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "break", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "X", "509", "Certificate", "<|s|>", "cert", "<|s|>", "=", "<|s|>", "read", "Certificate", "(", "file", "Name", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "selector", ".", "match", "(", "cert", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "cert", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 101, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_1420", "comment_id": "1be45325_2f25c588", "class_list": ["DirectoryCertificateSource"], "func_list": ["protected DirectoryCertificateSource(File caDir)", "public Set<X509Certificate> getCertificates()", "public X509Certificate findBySubjectAndPublicKey(final X509Certificate cert)", "public boolean match(X509Certificate ca)", "private X509Certificate findCert(X500Principal subj, CertSelector selector)", "private String getHash(X500Principal name)", "private X509Certificate readCertificate(String caFile)"], "prime_var_dic": {"implements": 1, "mCaDir": 1, "mCertFactory": 1, "CertSelector": 1}}, {"idx": 67075, "status": "update", "global_index": 21592, "project_name": "android_", "written_on": "2013-12-02 23:01:02", "tufano_target": "private static void METHOD_1 ( TYPE_1 < TYPE_2 > list , TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_1 < TYPE_2 > VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_6 < TYPE_7 > VAR_4 = TYPE_8 . METHOD_7 ( ) ; for ( TYPE_2 VAR_5 : VAR_3 ) { METHOD_8 ( list , VAR_5 , VAR_4 ) ; } } }", "comment": "The order matters here; should be a list. I just chatted with Xav; sounds like he'll change it.", "tokenized_comment": ["The", "<|s|>", "order", "<|s|>", "matters", "<|s|>", "here", ";", "<|s|>", "should", "<|s|>", "be", "<|s|>", "a", "<|s|>", "list", ".", "<|s|>", "I", "<|s|>", "just", "<|s|>", "chatted", "<|s|>", "with", "<|s|>", "Xav", ";", "<|s|>", "sounds", "<|s|>", "like", "<|s|>", "he", "'", "ll", "<|s|>", "change", "<|s|>", "it", "."], "tufano_code": "private static void METHOD_1 ( TYPE_1 < TYPE_2 > list , TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_5 < TYPE_2 > VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_6 < TYPE_7 > VAR_4 = TYPE_8 . METHOD_7 ( ) ; for ( TYPE_2 VAR_5 : VAR_3 ) { METHOD_8 ( list , VAR_5 , VAR_4 ) ; } } }", "our_target": "      List<AndroidLibrary> libraries = gradleProject.getSelectedVariant().getMainArtifact().getDependencies().getLibraries();\n", "our_code": "  private static void addGradleLibraries(List<AndroidLibrary> list, AndroidFacet facet) {\n    IdeaAndroidProject gradleProject = facet.getIdeaAndroidProject();\n    if (gradleProject != null) {\n<|startfocus|>\n      Collection<AndroidLibrary> libraries = gradleProject.getSelectedVariant().getMainArtifact().getDependencies().getLibraries();\n<|endfocus|>\n      Set<File> unique = Sets.newHashSet();\n      for (AndroidLibrary library : libraries) {\n        addGradleLibrary(list, library, unique);\n      }\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "add", "Gradle", "Libraries", "(", "List", "<", "Android", "Library", ">", "<|s|>", "list", ",", "<|s|>", "Android", "Facet", "<|s|>", "facet", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Idea", "Android", "Project", "<|s|>", "gradle", "Project", "<|s|>", "=", "<|s|>", "facet", ".", "get", "Idea", "Android", "Project", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "gradle", "Project", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "Collection", "<", "Android", "Library", ">", "<|s|>", "libraries", "<|s|>", "=", "<|s|>", "gradle", "Project", ".", "get", "Selected", "Variant", "(", ")", ".", "get", "Main", "Artifact", "(", ")", ".", "get", "Dependencies", "(", ")", ".", "get", "Libraries", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "Set", "<", "File", ">", "<|s|>", "unique", "<|s|>", "=", "<|s|>", "Sets", ".", "new", "Hash", "Set", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "for", "<|s|>", "(", "Android", "Library", "<|s|>", "library", "<|s|>", ":", "<|s|>", "libraries", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "add", "Gradle", "Library", "(", "list", ",", "<|s|>", "library", ",", "<|s|>", "unique", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 224, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_512", "comment_id": "832b3ac2_f8ca1ddb", "class_list": ["AppResourceRepository"], "func_list": ["private AppResourceRepository(@NotNull AndroidFacet facet,", "public static AppResourceRepository getAppResources(@NotNull Module module, boolean createIfNecessary)", "public static AppResourceRepository create(@NotNull final AndroidFacet facet)", "public void performedGradleSync(@NotNull AndroidFacet facet, boolean success)", "private static List<LocalResourceRepository> computeRepositories(@NotNull final AndroidFacet facet,", "private static List<LocalResourceRepository> computeLibraries(@NotNull final AndroidFacet facet)", "private static List<File> findAarLibraries(AndroidFacet facet, List<AndroidFacet> dependentFacets)", "private static List<File> findAarLibrariesFromIntelliJ(AndroidFacet facet, List<AndroidFacet> dependentFacets)", "private static List<File> findAarLibrariesFromGradle(List<AndroidFacet> dependentFacets, List<AndroidLibrary> libraries)", "private static void addGradleLibraries(List<AndroidLibrary> list, AndroidFacet facet)", "private static void addGradleLibrary(List<AndroidLibrary> list, AndroidLibrary library, Set<File> unique)", "public List<LocalResourceRepository> getLibraries()", "void updateRoots()", "static AppResourceRepository createForTest(AndroidFacet facet,"], "prime_var_dic": {"myFacet": 1}}, {"idx": 76377, "status": "update", "global_index": 15676, "project_name": "android_", "written_on": "2015-02-19 00:35:34", "tufano_target": "public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_5 ) { final TYPE_3 < TYPE_1 > VAR_2 = new TYPE_3 < TYPE_1 > ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) { public void METHOD_2 ( ) { VAR_2 . set ( VAR_1 . METHOD_3 ( ) ) ; } } ; VAR_3 . start ( ) ; try { VAR_3 . METHOD_4 ( ) ; } catch ( TYPE_5 VAR_4 ) { fail ( STRING_1 ) ; } return VAR_2 . get ( ) ; }", "comment": "service -> renderTask", "tokenized_comment": ["service", "<|s|>", "->", "<|s|>", "render", "Task"], "tufano_code": "public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { final TYPE_3 < TYPE_1 > VAR_2 = new TYPE_3 < TYPE_1 > ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) { public void METHOD_2 ( ) { VAR_2 . set ( VAR_1 . METHOD_3 ( ) ) ; } } ; VAR_3 . start ( ) ; try { VAR_3 . METHOD_4 ( ) ; } catch ( TYPE_5 VAR_4 ) { fail ( STRING_1 ) ; } return VAR_2 . get ( ) ; }", "our_target": "  public static RenderResult renderOnSeparateThread(@NotNull final RenderTask task) {\n", "our_code": "<|startfocus|>\n  public static RenderResult renderOnSeparateThread(@NotNull final RenderTask service) {\n<|endfocus|>\n    // Ensure that we don't render on the read lock (since we want to test that all parts of the\n    // rendering system which needs a read lock asks for one!)\n    final AtomicReference<RenderResult> holder = new AtomicReference<RenderResult>();\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        holder.set(service.render());\n      }\n    };\n    thread.start();\n    try {\n      thread.join();\n    }\n    catch (InterruptedException e) {\n      fail(\"Interrupted\");\n    }\n\n    return holder.get();\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Render", "Result", "<|s|>", "render", "On", "Separate", "Thread", "(", "@", "Not", "Null", "<|s|>", "final", "<|s|>", "Render", "Task", "<|s|>", "service", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Ensure", "<|s|>", "that", "<|s|>", "we", "<|s|>", "don", "'", "t", "<|s|>", "render", "<|s|>", "on", "<|s|>", "the", "<|s|>", "read", "<|s|>", "lock", "<|s|>", "(", "since", "<|s|>", "we", "<|s|>", "want", "<|s|>", "to", "<|s|>", "test", "<|s|>", "that", "<|s|>", "all", "<|s|>", "parts", "<|s|>", "of", "<|s|>", "the", "<|nl|>", "<|4-s|>", "//", "<|s|>", "rendering", "<|s|>", "system", "<|s|>", "which", "<|s|>", "needs", "<|s|>", "a", "<|s|>", "read", "<|s|>", "lock", "<|s|>", "asks", "<|s|>", "for", "<|s|>", "one", "!", ")", "<|nl|>", "<|4-s|>", "final", "<|s|>", "Atomic", "Reference", "<", "Render", "Result", ">", "<|s|>", "holder", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Atomic", "Reference", "<", "Render", "Result", ">", "(", ");", "<|nl|>", "<|4-s|>", "Thread", "<|s|>", "thread", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Thread", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Override", "<|nl|>", "<|4-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "holder", ".", "set", "(", "service", ".", "render", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "};", "<|nl|>", "<|4-s|>", "thread", ".", "start", "(", ");", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "thread", ".", "join", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "Interrupted", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "fail", "(", "\"", "Interrupted", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "holder", ".", "get", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 114, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_807", "comment_id": "0b205c81_cab8c7c5", "class_list": ["RenderTestBase"], "func_list": ["protected boolean requireRecentSdk()", "protected Configuration getConfiguration(VirtualFile file, String deviceId)", "public static RenderResult renderOnSeparateThread(@NotNull final RenderTask service)", "public void run()", "protected static Device findDeviceById(ConfigurationManager manager, String id)", "public static File getTempDir()"], "prime_var_dic": {"String": 2, "float": 1, "render": 1, "color": 1, "left": 1, "right": 1}}, {"idx": 90631, "status": "update", "global_index": 4869, "project_name": "android_", "written_on": "2015-03-06 18:21:06", "tufano_target": "public String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . append ( STRING_1 + VAR_2 + STRING_2 ) ; VAR_1 . append ( STRING_3 ) ; VAR_1 . append ( VAR_3 . METHOD_1 ( ) ) ; VAR_1 . append ( STRING_5 ) ; VAR_1 . append ( VAR_4 . METHOD_1 ( ) ) ; return VAR_1 . toString ( ) ; }", "comment": "and where ...", "tokenized_comment": ["and", "<|s|>", "where", "<|s|>", "..."], "tufano_code": "public String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . append ( STRING_1 + VAR_2 + STRING_2 ) ; VAR_1 . append ( STRING_3 ) ; VAR_1 . append ( VAR_3 . METHOD_1 ( ) ) ; VAR_1 . append ( STRING_4 ) ; VAR_1 . append ( VAR_4 . METHOD_1 ( ) ) ; return VAR_1 . toString ( ) ; }", "our_target": "    sb.append(\" and where <value> is \");\n", "our_code": "  public String getUsage() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"<key>\" + separator + \"<value>\");\n    sb.append(\" where <key> is \");\n    sb.append(keyParser.getUsage());\n<|startfocus|>\n    sb.append(\" where <value> is \");\n<|endfocus|>\n    sb.append(valueParser.getUsage());\n\n    return sb.toString();\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Usage", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "Builder", "<|s|>", "sb", "<|s|>", "=", "<|s|>", "new", "<|s|>", "String", "Builder", "(", ");", "<|nl|>", "<|4-s|>", "sb", ".", "append", "(", "\"", "<", "key", ">", "\"", "<|s|>", "+", "<|s|>", "separator", "<|s|>", "+", "<|s|>", "\"", "<", "value", ">", "\"", ");", "<|nl|>", "<|4-s|>", "sb", ".", "append", "(", "\"", "<|s|>", "where", "<|s|>", "<", "key", ">", "<|s|>", "is", "<|s|>", "\"", ");", "<|nl|>", "<|4-s|>", "sb", ".", "append", "(", "key", "Parser", ".", "get", "Usage", "(", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "sb", ".", "append", "(", "\"", "<|s|>", "where", "<|s|>", "<", "value", ">", "<|s|>", "is", "<|s|>", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "sb", ".", "append", "(", "value", "Parser", ".", "get", "Usage", "(", ")", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "sb", ".", "to", "String", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 117, "base_patch_number": 17, "changed_patch_number": 19, "code_file_name": "android_3740", "comment_id": "b7f17ca4_0ed9aba6", "class_list": ["PairCodec<T,"], "func_list": ["public PairCodec(@Nonnull StringCodec<T> keyParser, @Nonnull StringCodec<U> valueParser)", "public String getSeparator()", "public String getUsage()", "public String formatValue(@Nonnull Entry<T, U> data)"], "prime_var_dic": {"StringCodec": 1, "pair": 1}}, {"idx": 25378, "status": "update", "global_index": 20105, "project_name": "android_", "written_on": "2012-12-06 19:01:01", "tufano_target": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } String VAR_2 ; try { VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; return TYPE_3 . METHOD_5 ( VAR_2 ) ; } catch ( TYPE_2 VAR_4 ) { return false ; } }", "comment": "or just return Boolean.valueOf(prop)", "tokenized_comment": ["or", "<|s|>", "just", "<|s|>", "return", "<|s|>", "Boolean", ".", "value", "Of", "(", "prop", ")"], "tufano_code": "private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } String VAR_2 ; try { VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; return \"true\" . METHOD_4 ( VAR_2 ) ; } catch ( TYPE_2 VAR_4 ) { return false ; } }", "our_target": "            return Boolean.valueOf(prop);\n", "our_code": "    private boolean isGfxProfilingEnabled() {\n        IDevice device = getCurrentDevice();\n        if (device == null) {\n            return false;\n        }\n\n        String prop;\n        try {\n            prop = device.getPropertySync(PROP_GFX_PROFILING);\n<|startfocus|>\n            return \"true\".equalsIgnoreCase(prop);\n<|endfocus|>\n        } catch (Exception e) {\n            return false;\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Gfx", "Profiling", "Enabled", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "IDevice", "<|s|>", "device", "<|s|>", "=", "<|s|>", "get", "Current", "Device", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "device", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "String", "<|s|>", "prop", ";", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "prop", "<|s|>", "=", "<|s|>", "device", ".", "get", "Property", "Sync", "(", "PROP", "_", "GFX", "_", "PROFILING", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "\"", "true", "\"", ".", "equals", "Ignore", "Case", "(", "prop", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 228, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1662", "comment_id": "Mr7mldwg", "class_list": ["SysinfoPanel", "BugReportParser", "DataValue", "GfxProfileData"], "func_list": ["private void generateDataset(File file)", "public void deviceSelected()", "public void clientSelected()", "public void setFocus()", "private void loadFromDevice()", "public void run()", "private boolean isGfxProfilingEnabled()", "private boolean enableGfxProfiling()", "private String getDumpsysCommand(int mode)", "public void addOutput(byte[] data, int offset, int length)", "public void flush()", "public boolean isCancelled()", "protected Control createControl(Composite parent)", "public void widgetSelected(SelectionEvent e)", "private Composite createStackedBarComposite(Composite chartComposite)", "private Composite createPieChartComposite(Composite chartComposite)", "private ChartComposite newChartComposite(JFreeChart chart, Composite parent)", "public void clientChanged(final Client client, int changeMask)", "private static long parseTimeMs(String s)", "public DataValue(String n, double v)", "public GfxProfileData(double draw, double process, double execute)", "private static long safeParseLong(String s)", "private static double safeParseDouble(String s)", "private void clearDataSet()", "private void updatePieDataSet(final List<BugReportParser.DataValue> data, final String label)", "private void updateBarChartDataSet(final List<GfxProfileData> gfxProfileData,", "private void generateDataset(File file)", "public void deviceSelected()", "public void clientSelected()", "public void setFocus()", "private void loadFromDevice()", "public void run()", "private boolean isGfxProfilingEnabled()", "private boolean enableGfxProfiling()", "private String getDumpsysCommand(int mode)", "public void addOutput(byte[] data, int offset, int length)", "public void flush()", "public boolean isCancelled()", "protected Control createControl(Composite parent)", "public void widgetSelected(SelectionEvent e)", "private Composite createStackedBarComposite(Composite chartComposite)", "private Composite createPieChartComposite(Composite chartComposite)", "private ChartComposite newChartComposite(JFreeChart chart, Composite parent)", "public void clientChanged(final Client client, int changeMask)", "private static long parseTimeMs(String s)", "public DataValue(String n, double v)", "public GfxProfileData(double draw, double process, double execute)", "private static long safeParseLong(String s)", "private static double safeParseDouble(String s)", "private void clearDataSet()", "private void updatePieDataSet(final List<BugReportParser.DataValue> data, final String label)", "private void updateBarChartDataSet(final List<GfxProfileData> gfxProfileData,", "public DataValue(String n, double v)", "private void generateDataset(File file)", "public void deviceSelected()", "public void clientSelected()", "public void setFocus()", "private void loadFromDevice()", "public void run()", "private boolean isGfxProfilingEnabled()", "private boolean enableGfxProfiling()", "private String getDumpsysCommand(int mode)", "public void addOutput(byte[] data, int offset, int length)", "public void flush()", "public boolean isCancelled()", "protected Control createControl(Composite parent)", "public void widgetSelected(SelectionEvent e)", "private Composite createStackedBarComposite(Composite chartComposite)", "private Composite createPieChartComposite(Composite chartComposite)", "private ChartComposite newChartComposite(JFreeChart chart, Composite parent)", "public void clientChanged(final Client client, int changeMask)", "private static long parseTimeMs(String s)", "public DataValue(String n, double v)", "public GfxProfileData(double draw, double process, double execute)", "private static long safeParseLong(String s)", "private static double safeParseDouble(String s)", "private void clearDataSet()", "private void updatePieDataSet(final List<BugReportParser.DataValue> data, final String label)", "private void updateBarChartDataSet(final List<GfxProfileData> gfxProfileData,"], "prime_var_dic": {"to": 3, "display": 1, "int": 3, "String": 3, "file": 1, "string": 1, "class": 3, "doubles": 1, "the": 1}}, {"idx": 83977, "status": "update", "global_index": 15796, "project_name": "android_", "written_on": "2015-02-26 15:38:38", "tufano_target": "protected TYPE_1 < String > METHOD_1 ( TYPE_2 VAR_1 ) { final String VAR_2 = STRING_1 ; TYPE_1 < String > VAR_3 = new TYPE_3 < String > ( ) ; for ( TYPE_5 file : VAR_4 . get ( VAR_5 ) ) { if ( file instanceof TYPE_6 ) { METHOD_4 ( ( ( TYPE_6 ) file ) . METHOD_7 ( ) , VAR_2 , VAR_3 ) ; } else if ( file . METHOD_6 ( ) . METHOD_5 ( VAR_2 ) ) { VAR_3 . add ( file . METHOD_6 ( ) ) ; } } return ( VAR_3 ) ; }", "comment": "nit: \"else\"?", "tokenized_comment": ["nit", ":", "<|s|>", "\"", "else", "\"", "?"], "tufano_code": "protected TYPE_1 < String > METHOD_1 ( TYPE_2 VAR_1 ) { final String VAR_2 = STRING_1 ; TYPE_1 < String > VAR_3 = new TYPE_3 < String > ( ) ; for ( TYPE_4 file : VAR_1 . METHOD_2 ( ) ) { if ( file . METHOD_3 ( ) ) { METHOD_4 ( file , VAR_2 , VAR_3 ) ; } if ( file . getName ( ) . METHOD_5 ( VAR_2 ) ) { VAR_3 . add ( file . METHOD_6 ( ) ) ; } } return ( VAR_3 ) ; }", "our_target": "    for (FileOrDirectory file : config.get(Options.SOURCES)) {\n      if (file instanceof Directory) {\n        fillFiles(((Directory) file).getFile(), extension, javaFileNames);\n      } else if (file.getPath().endsWith(extension)) {\n        // File already checked by codec\n", "our_code": "  protected Set<String> getJavaFileNamesSpecifiedOnCommandLine(@Nonnull Options options) {\n    final String extension = \".java\";\n\n    Set<String> javaFileNames = new HashSet<String>();\n<|startfocus|>\n    for (File file : options.getInputSources()) {\n      if (file.isDirectory()) {\n        fillFiles(file, extension, javaFileNames);\n      }\n      if (file.getName().endsWith(extension)) {\n<|endfocus|>\n        javaFileNames.add(file.getPath());\n      }\n    }\n\n    return (javaFileNames);\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "Set", "<", "String", ">", "<|s|>", "get", "Java", "File", "Names", "Specified", "On", "Command", "Line", "(", "@", "Nonnull", "<|s|>", "Options", "<|s|>", "options", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "final", "<|s|>", "String", "<|s|>", "extension", "<|s|>", "=", "<|s|>", "\"", ".", "java", "\"", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "Set", "<", "String", ">", "<|s|>", "java", "File", "Names", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hash", "Set", "<", "String", ">", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "File", "<|s|>", "file", "<|s|>", ":", "<|s|>", "options", ".", "get", "Input", "Sources", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "file", ".", "is", "Directory", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "fill", "Files", "(", "file", ",", "<|s|>", "extension", ",", "<|s|>", "java", "File", "Names", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "file", ".", "get", "Name", "(", ")", ".", "ends", "With", "(", "extension", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "java", "File", "Names", ".", "add", "(", "file", ".", "get", "Path", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "(", "java", "File", "Names", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 99, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2275", "comment_id": "42c87b75_d67ba44e", "class_list": ["CommonFilter", "ClasspathEntryIgnoredReportable"], "func_list": ["private ClasspathEntryIgnoredReportable(@Nonnull Exception cause)", "public String getMessage()", "public ProblemLevel getDefaultProblemLevel()", "public CommonFilter(@Nonnull RunnableHooks hooks)", "protected Set<String> getJavaFileNamesSpecifiedOnCommandLine(@Nonnull Options options)", "private void fillFiles(@Nonnull File folder, @Nonnull String fileExt,", "protected OutputJackLibrary getOutputJackLibraryFromVfs()", "protected List<InputLibrary> getInputLibrariesFromFiles(@Nonnull List<File> files,", "public void run()", "private ClasspathEntryIgnoredReportable(@Nonnull Exception cause)", "public String getMessage()", "public ProblemLevel getDefaultProblemLevel()"], "prime_var_dic": {"cause": 1}}, {"idx": 312, "status": "update", "global_index": 12010, "project_name": "android_", "written_on": "2014-08-27 17:18:22", "tufano_target": "public TYPE_1 METHOD_1 ( String [ ] VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 , TYPE_3 . message ( STRING_1 ) ) ; if ( VAR_3 . METHOD_4 ( VAR_1 ) == 0 ) { VAR_3 . METHOD_5 ( VAR_1 [ 0 ] ) ; } VAR_3 . METHOD_6 ( ) ; METHOD_7 ( ) ; return this ; }", "comment": "This method should be in IdeFrameFixture. Change name to \"runApplicationInEmulator\"", "tokenized_comment": ["This", "<|s|>", "method", "<|s|>", "should", "<|s|>", "be", "<|s|>", "in", "<|s|>", "Ide", "Frame", "Fixture", ".", "<|s|>", "Change", "<|s|>", "name", "<|s|>", "to", "<|s|>", "\"", "run", "Application", "In", "Emulator", "\""], "tufano_code": "public TYPE_1 METHOD_1 ( String ... VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 , TYPE_3 . message ( STRING_1 ) ) ; if ( VAR_3 . METHOD_4 ( VAR_1 ) == 0 ) { VAR_3 . METHOD_5 ( VAR_1 [ 0 ] ) ; } VAR_3 . METHOD_6 ( ) ; METHOD_7 ( ) ; return this ; }", "our_target": "  public EmulatorBasicControls runEmulator(@NotNull String[] deviceNames) {\n", "our_code": "<|startfocus|>\n  public EmulatorBasicControls runEmulator(@NotNull String... deviceNames) {\n<|endfocus|>\n    // Use the shortcut because the button could get pushed around by the run configuration drop down (it's variable width).\n    myProjectFrame.runApplication();\n\n    ChooseDeviceFixture chooseDeviceFixture = ChooseDeviceFixture.find(myRobot, AndroidBundle.message(\"choose.device.dialog.title\"));\n    // Try to find already-running emulators to launch the app on.\n    if (chooseDeviceFixture.chooseRunningDeviceStep(deviceNames) == 0) {\n      // If we can't find an already-launched device, fire up a new one.\n      chooseDeviceFixture.selectEmulatorStep(deviceNames[0]);\n    }\n    chooseDeviceFixture.clickOk();\n\n    scanEmulatorOutput();\n\n    return this;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Emulator", "Basic", "Controls", "<|s|>", "run", "Emulator", "(", "@", "Not", "Null", "<|s|>", "String", "...", "<|s|>", "device", "Names", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Use", "<|s|>", "the", "<|s|>", "shortcut", "<|s|>", "because", "<|s|>", "the", "<|s|>", "button", "<|s|>", "could", "<|s|>", "get", "<|s|>", "pushed", "<|s|>", "around", "<|s|>", "by", "<|s|>", "the", "<|s|>", "run", "<|s|>", "configuration", "<|s|>", "drop", "<|s|>", "down", "<|s|>", "(", "it", "'", "s", "<|s|>", "variable", "<|s|>", "width", ")", ".", "<|nl|>", "<|4-s|>", "my", "Project", "Frame", ".", "run", "Application", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "Choose", "Device", "Fixture", "<|s|>", "choose", "Device", "Fixture", "<|s|>", "=", "<|s|>", "Choose", "Device", "Fixture", ".", "find", "(", "my", "Robot", ",", "<|s|>", "Android", "Bundle", ".", "message", "(", "\"", "choose", ".", "device", ".", "dialog", ".", "title", "\"", ")", ");", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Try", "<|s|>", "to", "<|s|>", "find", "<|s|>", "already", "-", "running", "<|s|>", "emulators", "<|s|>", "to", "<|s|>", "launch", "<|s|>", "the", "<|s|>", "app", "<|s|>", "on", ".", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "choose", "Device", "Fixture", ".", "choose", "Running", "Device", "Step", "(", "device", "Names", ")", "<|s|>", "==", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "If", "<|s|>", "we", "<|s|>", "can", "'", "t", "<|s|>", "find", "<|s|>", "an", "<|s|>", "already", "-", "launched", "<|s|>", "device", ",", "<|s|>", "fire", "<|s|>", "up", "<|s|>", "a", "<|s|>", "new", "<|s|>", "one", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "choose", "Device", "Fixture", ".", "select", "Emulator", "Step", "(", "device", "Names", "[", "0", "]", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "choose", "Device", "Fixture", ".", "click", "Ok", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "scan", "Emulator", "Output", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 112, "base_patch_number": 16, "changed_patch_number": 17, "code_file_name": "android_26", "comment_id": "13d4092d_00cc07a2", "class_list": ["EmulatorBasicControls", "EmulatorInvocationCondition"], "func_list": ["public EmulatorInvocationCondition(String description, ConsoleViewImpl consoleView)", "public boolean test()", "public EmulatorBasicControls(@NotNull Robot robot, @NotNull IdeFrameFixture projectFrame)", "public EmulatorBasicControls runEmulator(@NotNull String... deviceNames)", "private EmulatorBasicControls scanEmulatorOutput()", "public String getPackageName()", "private void clearRunningState()", "private EmulatorBasicControls waitForAppLoad()", "public void terminateAppOnEmulator()", "public EmulatorInvocationCondition(String description, ConsoleViewImpl consoleView)", "public boolean test()"], "prime_var_dic": {}}, {"idx": 93862, "status": "update", "global_index": 3673, "project_name": "android_", "written_on": "2017-01-26 22:49:57", "tufano_target": "public boolean METHOD_1 ( ) { for ( TYPE_1 VAR_1 : METHOD_2 ( ) ) { if ( VAR_4 . get ( VAR_5 ) && VAR_4 . get ( VAR_6 ) ) { if ( VAR_2 . METHOD_4 ( VAR_3 ) ) { return true ; } } } return false ; }", "comment": "wtf?", "tokenized_comment": ["wtf", "?"], "tufano_code": "public boolean METHOD_1 ( ) { for ( TYPE_1 VAR_1 : METHOD_2 ( ) ) { if ( TYPE_2 . METHOD_3 ( VAR_1 ) ) { if ( VAR_2 . METHOD_4 ( VAR_3 ) ) { return true ; } } } return false ; }", "our_target": "            if (config.allowedKeyManagement.get(WifiConfiguration.KeyMgmt.WPA_EAP)\n                    && config.allowedKeyManagement.get(WifiConfiguration.KeyMgmt.IEEE8021X)) {\n", "our_code": "    public boolean needsUnlockedKeyStore() {\n        for (WifiConfiguration config : getInternalConfiguredNetworks()) {\n<|startfocus|>\n            if (WifiConfigurationUtil.isConfigForEapNetwork(config)) {\n<|endfocus|>\n                if (mWifiKeyStore.needsSoftwareBackedKeyStore(config.enterpriseConfig)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "needs", "Unlocked", "Key", "Store", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "Wifi", "Configuration", "<|s|>", "config", "<|s|>", ":", "<|s|>", "get", "Internal", "Configured", "Networks", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "Wifi", "Configuration", "Util", ".", "is", "Config", "For", "Eap", "Network", "(", "config", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "m", "Wifi", "Key", "Store", ".", "needs", "Software", "Backed", "Key", "Store", "(", "config", ".", "enterprise", "Config", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 2336, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_4056", "comment_id": "7562a82b_243ff13d", "class_list": ["provides", "are", "using", "WifiConfigManager"], "func_list": ["public int compareNetworksWithSameStatus(WifiConfiguration a, WifiConfiguration b)", "public static String createDebugTimeStampString(long wallClockMillis)", "public void enableVerboseLogging(int verbose)", "private void maskPasswordsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createExternalWifiConfiguration(", "private List<WifiConfiguration> getConfiguredNetworks(", "public List<WifiConfiguration> getConfiguredNetworksWithPasswords()", "public List<WifiConfiguration> getSavedNetworks()", "public WifiConfiguration getConfiguredNetwork(int networkId)", "public WifiConfiguration getConfiguredNetworkWithPassword(int networkId)", "private Collection<WifiConfiguration> getInternalConfiguredNetworks()", "private WifiConfiguration getInternalConfiguredNetwork(WifiConfiguration config)", "private void sendConfiguredNetworkChangedBroadcast(", "private void sendConfiguredNetworksChangedBroadcast()", "public boolean checkConfigOverridePermission(int uid)", "private boolean canModifyNetwork(WifiConfiguration config, int uid, boolean ignoreLockdown)", "private boolean doesUidBelongToCurrentUser(int uid)", "private void mergeWithInternalWifiConfiguration(", "private void setDefaultsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createNewInternalWifiConfigurationFromExternal(", "private WifiConfiguration updateExistingInternalWifiConfigurationFromExternal(", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private boolean removeNetworkInternal(WifiConfiguration config)", "private boolean removeNetworkInternal(WifiConfiguration config)", "public Set<Integer> removeNetworksForApp(ApplicationInfo app)", "Set<Integer> removeNetworksForUser(int userId)", "private void setNetworkSelectionEnabled(NetworkSelectionStatus status)", "private void setNetworkSelectionTemporarilyDisabled(", "private void setNetworkSelectionPermanentlyDisabled(", "private void setNetworkStatus(WifiConfiguration config, int status)", "private boolean setNetworkSelectionStatus(WifiConfiguration config, int reason)", "private boolean updateNetworkSelectionStatus(WifiConfiguration config, int reason)", "public boolean updateNetworkNotRecommended(int networkId, boolean notRecommended)", "private boolean tryEnableNetwork(WifiConfiguration config)", "public boolean enableNetwork(int networkId, boolean disableOthers, int uid)", "public boolean disableNetwork(int networkId, int uid)", "public boolean checkAndUpdateLastConnectUid(int networkId, int uid)", "public boolean updateNetworkAfterConnect(int networkId)", "public boolean updateNetworkAfterDisconnect(int networkId)", "public boolean setNetworkDefaultGwMacAddress(int networkId, String macAddress)", "public boolean clearNetworkCandidateScanResult(int networkId)", "public boolean setNetworkCandidateScanResult(int networkId, ScanResult scanResult, int score)", "private void removeConnectChoiceFromAllNetworks(String connectChoiceConfigKey)", "public boolean clearNetworkConnectChoice(int networkId)", "public boolean setNetworkConnectChoice(", "public boolean incrementNetworkNoInternetAccessReports(int networkId)", "public boolean setNetworkValidatedInternetAccess(int networkId, boolean validated)", "public boolean setNetworkNoInternetAccessExpected(int networkId, boolean expected)", "private void clearLastSelectedNetwork()", "private void setLastSelectedNetwork(int networkId)", "public int getLastSelectedNetwork()", "public String getLastSelectedNetworkConfigKey()", "public long getLastSelectedTimeStamp()", "public ScanDetailCache getScanDetailCacheForNetwork(int networkId)", "private ScanDetailCache getOrCreateScanDetailCacheForNetwork(WifiConfiguration config)", "private void saveToScanDetailCacheForNetwork(", "private WifiConfiguration getSavedNetworkForScanDetail(ScanDetail scanDetail)", "public WifiConfiguration getSavedNetworkForScanDetailAndCache(ScanDetail scanDetail)", "public void updateScanDetailCacheFromWifiInfo(WifiInfo info)", "public void updateScanDetailForNetwork(int networkId, ScanDetail scanDetail)", "private boolean shouldNetworksBeLinked(", "private void linkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void unlinkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void attemptNetworkLinking(WifiConfiguration config)", "private boolean addToChannelSetForNetworkFromScanDetailCache(", "public Set<Integer> fetchChannelSetForNetworkForPartialScan(int networkId, long ageInMillis,", "public boolean wasEphemeralNetworkDeleted(String ssid)", "public WifiConfiguration disableEphemeralNetwork(String ssid)", "public void resetSimNetworks()", "public boolean needsUnlockedKeyStore()", "private void handleUserUnlockOrSwitch(int userId)", "public Set<Integer> handleUserSwitch(int userId)", "private void handleUserUnlockOrSwitch(int userId)", "public void handleUserStop(int userId)", "private void clearInternalData()", "private Set<Integer> clearInternalUserData(int userId)", "private void loadInternalDataFromSharedStore(", "private void loadInternalDataFromUserStore(", "private void loadInternalDataFromSharedStore(", "public boolean migrateFromLegacyStore()", "public boolean loadFromStore()", "public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId)", "public boolean saveToStore(boolean forceWrite)", "private void localLog(String s)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean canModifyProxySettings(int uid)", "public int compareNetworksWithSameStatus(WifiConfiguration a, WifiConfiguration b)", "public static String createDebugTimeStampString(long wallClockMillis)", "public void enableVerboseLogging(int verbose)", "private void maskPasswordsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createExternalWifiConfiguration(", "private List<WifiConfiguration> getConfiguredNetworks(", "public List<WifiConfiguration> getConfiguredNetworksWithPasswords()", "public List<WifiConfiguration> getSavedNetworks()", "public WifiConfiguration getConfiguredNetwork(int networkId)", "public WifiConfiguration getConfiguredNetworkWithPassword(int networkId)", "private Collection<WifiConfiguration> getInternalConfiguredNetworks()", "private WifiConfiguration getInternalConfiguredNetwork(WifiConfiguration config)", "private void sendConfiguredNetworkChangedBroadcast(", "private void sendConfiguredNetworksChangedBroadcast()", "public boolean checkConfigOverridePermission(int uid)", "private boolean canModifyNetwork(WifiConfiguration config, int uid, boolean ignoreLockdown)", "private boolean doesUidBelongToCurrentUser(int uid)", "private void mergeWithInternalWifiConfiguration(", "private void setDefaultsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createNewInternalWifiConfigurationFromExternal(", "private WifiConfiguration updateExistingInternalWifiConfigurationFromExternal(", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private boolean removeNetworkInternal(WifiConfiguration config)", "private boolean removeNetworkInternal(WifiConfiguration config)", "public Set<Integer> removeNetworksForApp(ApplicationInfo app)", "Set<Integer> removeNetworksForUser(int userId)", "private void setNetworkSelectionEnabled(NetworkSelectionStatus status)", "private void setNetworkSelectionTemporarilyDisabled(", "private void setNetworkSelectionPermanentlyDisabled(", "private void setNetworkStatus(WifiConfiguration config, int status)", "private boolean setNetworkSelectionStatus(WifiConfiguration config, int reason)", "private boolean updateNetworkSelectionStatus(WifiConfiguration config, int reason)", "public boolean updateNetworkNotRecommended(int networkId, boolean notRecommended)", "private boolean tryEnableNetwork(WifiConfiguration config)", "public boolean enableNetwork(int networkId, boolean disableOthers, int uid)", "public boolean disableNetwork(int networkId, int uid)", "public boolean checkAndUpdateLastConnectUid(int networkId, int uid)", "public boolean updateNetworkAfterConnect(int networkId)", "public boolean updateNetworkAfterDisconnect(int networkId)", "public boolean setNetworkDefaultGwMacAddress(int networkId, String macAddress)", "public boolean clearNetworkCandidateScanResult(int networkId)", "public boolean setNetworkCandidateScanResult(int networkId, ScanResult scanResult, int score)", "private void removeConnectChoiceFromAllNetworks(String connectChoiceConfigKey)", "public boolean clearNetworkConnectChoice(int networkId)", "public boolean setNetworkConnectChoice(", "public boolean incrementNetworkNoInternetAccessReports(int networkId)", "public boolean setNetworkValidatedInternetAccess(int networkId, boolean validated)", "public boolean setNetworkNoInternetAccessExpected(int networkId, boolean expected)", "private void clearLastSelectedNetwork()", "private void setLastSelectedNetwork(int networkId)", "public int getLastSelectedNetwork()", "public String getLastSelectedNetworkConfigKey()", "public long getLastSelectedTimeStamp()", "public ScanDetailCache getScanDetailCacheForNetwork(int networkId)", "private ScanDetailCache getOrCreateScanDetailCacheForNetwork(WifiConfiguration config)", "private void saveToScanDetailCacheForNetwork(", "private WifiConfiguration getSavedNetworkForScanDetail(ScanDetail scanDetail)", "public WifiConfiguration getSavedNetworkForScanDetailAndCache(ScanDetail scanDetail)", "public void updateScanDetailCacheFromWifiInfo(WifiInfo info)", "public void updateScanDetailForNetwork(int networkId, ScanDetail scanDetail)", "private boolean shouldNetworksBeLinked(", "private void linkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void unlinkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void attemptNetworkLinking(WifiConfiguration config)", "private boolean addToChannelSetForNetworkFromScanDetailCache(", "public Set<Integer> fetchChannelSetForNetworkForPartialScan(int networkId, long ageInMillis,", "public boolean wasEphemeralNetworkDeleted(String ssid)", "public WifiConfiguration disableEphemeralNetwork(String ssid)", "public void resetSimNetworks()", "public boolean needsUnlockedKeyStore()", "private void handleUserUnlockOrSwitch(int userId)", "public Set<Integer> handleUserSwitch(int userId)", "private void handleUserUnlockOrSwitch(int userId)", "public void handleUserStop(int userId)", "private void clearInternalData()", "private Set<Integer> clearInternalUserData(int userId)", "private void loadInternalDataFromSharedStore(", "private void loadInternalDataFromUserStore(", "private void loadInternalDataFromSharedStore(", "public boolean migrateFromLegacyStore()", "public boolean loadFromStore()", "public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId)", "public boolean saveToStore(boolean forceWrite)", "private void localLog(String s)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean canModifyProxySettings(int uid)", "public int compareNetworksWithSameStatus(WifiConfiguration a, WifiConfiguration b)", "public static String createDebugTimeStampString(long wallClockMillis)", "public void enableVerboseLogging(int verbose)", "private void maskPasswordsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createExternalWifiConfiguration(", "private List<WifiConfiguration> getConfiguredNetworks(", "public List<WifiConfiguration> getConfiguredNetworksWithPasswords()", "public List<WifiConfiguration> getSavedNetworks()", "public WifiConfiguration getConfiguredNetwork(int networkId)", "public WifiConfiguration getConfiguredNetworkWithPassword(int networkId)", "private Collection<WifiConfiguration> getInternalConfiguredNetworks()", "private WifiConfiguration getInternalConfiguredNetwork(WifiConfiguration config)", "private void sendConfiguredNetworkChangedBroadcast(", "private void sendConfiguredNetworksChangedBroadcast()", "public boolean checkConfigOverridePermission(int uid)", "private boolean canModifyNetwork(WifiConfiguration config, int uid, boolean ignoreLockdown)", "private boolean doesUidBelongToCurrentUser(int uid)", "private void mergeWithInternalWifiConfiguration(", "private void setDefaultsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createNewInternalWifiConfigurationFromExternal(", "private WifiConfiguration updateExistingInternalWifiConfigurationFromExternal(", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private boolean removeNetworkInternal(WifiConfiguration config)", "private boolean removeNetworkInternal(WifiConfiguration config)", "public Set<Integer> removeNetworksForApp(ApplicationInfo app)", "Set<Integer> removeNetworksForUser(int userId)", "private void setNetworkSelectionEnabled(NetworkSelectionStatus status)", "private void setNetworkSelectionTemporarilyDisabled(", "private void setNetworkSelectionPermanentlyDisabled(", "private void setNetworkStatus(WifiConfiguration config, int status)", "private boolean setNetworkSelectionStatus(WifiConfiguration config, int reason)", "private boolean updateNetworkSelectionStatus(WifiConfiguration config, int reason)", "public boolean updateNetworkNotRecommended(int networkId, boolean notRecommended)", "private boolean tryEnableNetwork(WifiConfiguration config)", "public boolean enableNetwork(int networkId, boolean disableOthers, int uid)", "public boolean disableNetwork(int networkId, int uid)", "public boolean checkAndUpdateLastConnectUid(int networkId, int uid)", "public boolean updateNetworkAfterConnect(int networkId)", "public boolean updateNetworkAfterDisconnect(int networkId)", "public boolean setNetworkDefaultGwMacAddress(int networkId, String macAddress)", "public boolean clearNetworkCandidateScanResult(int networkId)", "public boolean setNetworkCandidateScanResult(int networkId, ScanResult scanResult, int score)", "private void removeConnectChoiceFromAllNetworks(String connectChoiceConfigKey)", "public boolean clearNetworkConnectChoice(int networkId)", "public boolean setNetworkConnectChoice(", "public boolean incrementNetworkNoInternetAccessReports(int networkId)", "public boolean setNetworkValidatedInternetAccess(int networkId, boolean validated)", "public boolean setNetworkNoInternetAccessExpected(int networkId, boolean expected)", "private void clearLastSelectedNetwork()", "private void setLastSelectedNetwork(int networkId)", "public int getLastSelectedNetwork()", "public String getLastSelectedNetworkConfigKey()", "public long getLastSelectedTimeStamp()", "public ScanDetailCache getScanDetailCacheForNetwork(int networkId)", "private ScanDetailCache getOrCreateScanDetailCacheForNetwork(WifiConfiguration config)", "private void saveToScanDetailCacheForNetwork(", "private WifiConfiguration getSavedNetworkForScanDetail(ScanDetail scanDetail)", "public WifiConfiguration getSavedNetworkForScanDetailAndCache(ScanDetail scanDetail)", "public void updateScanDetailCacheFromWifiInfo(WifiInfo info)", "public void updateScanDetailForNetwork(int networkId, ScanDetail scanDetail)", "private boolean shouldNetworksBeLinked(", "private void linkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void unlinkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void attemptNetworkLinking(WifiConfiguration config)", "private boolean addToChannelSetForNetworkFromScanDetailCache(", "public Set<Integer> fetchChannelSetForNetworkForPartialScan(int networkId, long ageInMillis,", "public boolean wasEphemeralNetworkDeleted(String ssid)", "public WifiConfiguration disableEphemeralNetwork(String ssid)", "public void resetSimNetworks()", "public boolean needsUnlockedKeyStore()", "private void handleUserUnlockOrSwitch(int userId)", "public Set<Integer> handleUserSwitch(int userId)", "private void handleUserUnlockOrSwitch(int userId)", "public void handleUserStop(int userId)", "private void clearInternalData()", "private Set<Integer> clearInternalUserData(int userId)", "private void loadInternalDataFromSharedStore(", "private void loadInternalDataFromUserStore(", "private void loadInternalDataFromSharedStore(", "public boolean migrateFromLegacyStore()", "public boolean loadFromStore()", "public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId)", "public boolean saveToStore(boolean forceWrite)", "private void localLog(String s)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean canModifyProxySettings(int uid)", "public int compareNetworksWithSameStatus(WifiConfiguration a, WifiConfiguration b)", "public static String createDebugTimeStampString(long wallClockMillis)", "public void enableVerboseLogging(int verbose)", "private void maskPasswordsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createExternalWifiConfiguration(", "private List<WifiConfiguration> getConfiguredNetworks(", "public List<WifiConfiguration> getConfiguredNetworksWithPasswords()", "public List<WifiConfiguration> getSavedNetworks()", "public WifiConfiguration getConfiguredNetwork(int networkId)", "public WifiConfiguration getConfiguredNetworkWithPassword(int networkId)", "private Collection<WifiConfiguration> getInternalConfiguredNetworks()", "private WifiConfiguration getInternalConfiguredNetwork(WifiConfiguration config)", "private void sendConfiguredNetworkChangedBroadcast(", "private void sendConfiguredNetworksChangedBroadcast()", "public boolean checkConfigOverridePermission(int uid)", "private boolean canModifyNetwork(WifiConfiguration config, int uid, boolean ignoreLockdown)", "private boolean doesUidBelongToCurrentUser(int uid)", "private void mergeWithInternalWifiConfiguration(", "private void setDefaultsInWifiConfiguration(WifiConfiguration configuration)", "private WifiConfiguration createNewInternalWifiConfigurationFromExternal(", "private WifiConfiguration updateExistingInternalWifiConfigurationFromExternal(", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private NetworkUpdateResult addOrUpdateNetworkInternal(WifiConfiguration config, int uid)", "private boolean removeNetworkInternal(WifiConfiguration config)", "private boolean removeNetworkInternal(WifiConfiguration config)", "public Set<Integer> removeNetworksForApp(ApplicationInfo app)", "Set<Integer> removeNetworksForUser(int userId)", "private void setNetworkSelectionEnabled(NetworkSelectionStatus status)", "private void setNetworkSelectionTemporarilyDisabled(", "private void setNetworkSelectionPermanentlyDisabled(", "private void setNetworkStatus(WifiConfiguration config, int status)", "private boolean setNetworkSelectionStatus(WifiConfiguration config, int reason)", "private boolean updateNetworkSelectionStatus(WifiConfiguration config, int reason)", "public boolean updateNetworkNotRecommended(int networkId, boolean notRecommended)", "private boolean tryEnableNetwork(WifiConfiguration config)", "public boolean enableNetwork(int networkId, boolean disableOthers, int uid)", "public boolean disableNetwork(int networkId, int uid)", "public boolean checkAndUpdateLastConnectUid(int networkId, int uid)", "public boolean updateNetworkAfterConnect(int networkId)", "public boolean updateNetworkAfterDisconnect(int networkId)", "public boolean setNetworkDefaultGwMacAddress(int networkId, String macAddress)", "public boolean clearNetworkCandidateScanResult(int networkId)", "public boolean setNetworkCandidateScanResult(int networkId, ScanResult scanResult, int score)", "private void removeConnectChoiceFromAllNetworks(String connectChoiceConfigKey)", "public boolean clearNetworkConnectChoice(int networkId)", "public boolean setNetworkConnectChoice(", "public boolean incrementNetworkNoInternetAccessReports(int networkId)", "public boolean setNetworkValidatedInternetAccess(int networkId, boolean validated)", "public boolean setNetworkNoInternetAccessExpected(int networkId, boolean expected)", "private void clearLastSelectedNetwork()", "private void setLastSelectedNetwork(int networkId)", "public int getLastSelectedNetwork()", "public String getLastSelectedNetworkConfigKey()", "public long getLastSelectedTimeStamp()", "public ScanDetailCache getScanDetailCacheForNetwork(int networkId)", "private ScanDetailCache getOrCreateScanDetailCacheForNetwork(WifiConfiguration config)", "private void saveToScanDetailCacheForNetwork(", "private WifiConfiguration getSavedNetworkForScanDetail(ScanDetail scanDetail)", "public WifiConfiguration getSavedNetworkForScanDetailAndCache(ScanDetail scanDetail)", "public void updateScanDetailCacheFromWifiInfo(WifiInfo info)", "public void updateScanDetailForNetwork(int networkId, ScanDetail scanDetail)", "private boolean shouldNetworksBeLinked(", "private void linkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void unlinkNetworks(WifiConfiguration network1, WifiConfiguration network2)", "private void attemptNetworkLinking(WifiConfiguration config)", "private boolean addToChannelSetForNetworkFromScanDetailCache(", "public Set<Integer> fetchChannelSetForNetworkForPartialScan(int networkId, long ageInMillis,", "public boolean wasEphemeralNetworkDeleted(String ssid)", "public WifiConfiguration disableEphemeralNetwork(String ssid)", "public void resetSimNetworks()", "public boolean needsUnlockedKeyStore()", "private void handleUserUnlockOrSwitch(int userId)", "public Set<Integer> handleUserSwitch(int userId)", "private void handleUserUnlockOrSwitch(int userId)", "public void handleUserStop(int userId)", "private void clearInternalData()", "private Set<Integer> clearInternalUserData(int userId)", "private void loadInternalDataFromSharedStore(", "private void loadInternalDataFromUserStore(", "private void loadInternalDataFromSharedStore(", "public boolean migrateFromLegacyStore()", "public boolean loadFromStore()", "public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId)", "public boolean saveToStore(boolean forceWrite)", "private void localLog(String s)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private boolean canModifyProxySettings(int uid)"], "prime_var_dic": {"String": 3, "disable": 1, "int": 7, "again": 1, "checks": 1, "boolean": 2, "this": 1, "mContext": 1, "mFacade": 1, "mClock": 1, "mUserManager": 1, "mBackupManagerProxy": 1, "mTelephonyManager": 1, "mWifiKeyStore": 1, "mWifiConfigStore": 1, "mWifiConfigStoreLegacy": 1, "mWifiPermissionsWrapper": 1, "mLocalLog": 1, "mConfiguredNetworks": 1, "mOnlyLinkSameCredentialConfigurations": 1, "mMaxNumActiveChannelsForPartialScans": 1, "user": 1, "in": 1, "mNetworkListStoreData": 1, "mDeletedEphemeralSsidsStoreData": 1, "of": 2, "wifiKeyStore": 1, "wifiConfigStoreLegacy": 1, "modules": 1, "WifiConfiguration": 5, "our": 3, "status": 1, "otherwise": 2, "NetworkSelectionStatus": 4, "them": 1, "network": 2, "exists": 2, "caching": 1, "links": 1, "disabled": 1, "networks": 2, "the": 2, "detail": 2, "ephemeral": 2, "internal": 1, "store": 1, "changed": 1}}, {"idx": 60112, "status": "update", "global_index": 21519, "project_name": "android_", "written_on": "2013-11-22 16:13:03", "tufano_target": "private static boolean METHOD_1 ( String VAR_1 ) { int length = VAR_1 . length ( ) ; if ( length < INT_1 || length > INT_2 ) { return false ; } int i = 0 ; if ( VAR_1 . METHOD_2 ( i ++ ) != CHAR_1 ) { return false ; } for ( ; i < length ; i ++ ) { if ( ! TYPE_1 . METHOD_3 ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }", "comment": "Nit: final probably isn't necessary, but @NotNull would be a little helpful.", "tokenized_comment": ["Nit", ":", "<|s|>", "final", "<|s|>", "probably", "<|s|>", "isn", "'", "t", "<|s|>", "necessary", ",", "<|s|>", "but", "<|s|>", "@", "Not", "Null", "<|s|>", "would", "<|s|>", "be", "<|s|>", "a", "<|s|>", "little", "<|s|>", "helpful", "."], "tufano_code": "private static boolean METHOD_1 ( final String VAR_1 ) { int length = VAR_1 . length ( ) ; if ( length < INT_1 || length > INT_2 ) { return false ; } int i = 0 ; if ( VAR_1 . METHOD_2 ( i ++ ) != CHAR_1 ) { return false ; } for ( ; i < length ; i ++ ) { if ( ! TYPE_1 . METHOD_3 ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }", "our_target": "  private static boolean isColorString(@NotNull String s) {\n", "our_code": "<|startfocus|>\n  private static boolean isColorString(final String s) {\n<|endfocus|>\n    int length = s.length();\n    // #rgb to #aarrggbb\n    if (length < 4 || length > 9) {\n      return false;\n    }\n\n    int i = 0;\n    if (s.charAt(i++) != '#') {\n      return false;\n    }\n\n    for (; i < length; i++) {\n      if (!StringUtil.isHexDigit(s.charAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "is", "Color", "String", "(", "final", "<|s|>", "String", "<|s|>", "s", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "length", "<|s|>", "=", "<|s|>", "s", ".", "length", "(", ");", "<|nl|>", "<|4-s|>", "//", "<|s|>", "#", "rgb", "<|s|>", "to", "<|s|>", "#", "aarrggbb", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "length", "<|s|>", "<", "<|s|>", "4", "<|s|>", "||", "<|s|>", "length", "<|s|>", ">", "<|s|>", "9", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "s", ".", "char", "At", "(", "i", "++", ")", "<|s|>", "!=", "<|s|>", "'", "#", "'", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(;", "<|s|>", "i", "<|s|>", "<", "<|s|>", "length", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "!", "String", "Util", ".", "is", "Hex", "Digit", "(", "s", ".", "char", "At", "(", "i", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 218, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_771", "comment_id": "deaa69eb_1362eb9c", "class_list": ["AndroidXmlSpellcheckingStrategy", "MyResourceReferenceTokenizer"], "func_list": ["public void tokenize(@NotNull XmlAttributeValue element, TokenConsumer consumer)", "public boolean isMyContext(@NotNull PsiElement element)", "public Tokenizer getTokenizer(PsiElement element)", "public Tokenizer getAttributeValueTokenizer(PsiElement element)", "else if (converter instanceof ConstantFieldConverter)", "private static boolean isAttributeValueContext(@NotNull PsiElement element)", "private static boolean inEnglish(PsiElement element)", "private static String getToolsLocale(XmlFile file)", "private static AndroidResourceReferenceBase findResourceReference(PsiElement element)", "private static boolean isColorString(final String s)", "public void tokenize(@NotNull XmlAttributeValue element, TokenConsumer consumer)"], "prime_var_dic": {}}, {"idx": 77039, "status": "update", "global_index": 13763, "project_name": "android_", "written_on": "2015-01-06 15:02:54", "tufano_target": "private TYPE_1 METHOD_1 ( TYPE_5 VAR_8 , TYPE_2 VAR_1 ) { int VAR_3 = VAR_1 . METHOD_2 ( ) . length ; if ( VAR_3 == 0 ) { return VAR_4 ; } TYPE_4 VAR_5 = new TYPE_4 ( VAR_3 ) ; int VAR_6 = 0 ; for ( int VAR_7 : VAR_1 . METHOD_2 ( ) ) { VAR_5 . set ( VAR_6 ++ , VAR_2 . METHOD_3 ( VAR_7 ) . METHOD_4 ( ) ) ; } return ( VAR_5 ) ; }", "comment": "bid", "tokenized_comment": ["bid"], "tufano_code": "private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( ) . length ; if ( VAR_3 == 0 ) { return VAR_4 ; } TYPE_4 VAR_5 = new TYPE_4 ( VAR_3 ) ; int VAR_6 = 0 ; for ( int VAR_7 : VAR_1 . METHOD_2 ( ) ) { VAR_5 . set ( VAR_6 ++ , VAR_2 . METHOD_3 ( VAR_7 ) . METHOD_4 ( ) ) ; } return ( VAR_5 ) ; }", "our_target": "  private TypeList getInterfacesList(@Nonnull DexBuffer dexToMerge,\n      @Nonnull ClassDef classDefToMerge) {\n", "our_code": "<|startfocus|>\n  private TypeList getInterfacesList(@Nonnull ClassDef classDefToMerge,\n      @Nonnull CstIndexMap cstIndexMap) {\n<|endfocus|>\n    int interfaceCount = classDefToMerge.getInterfaces().length;\n    if (interfaceCount == 0) {\n      return StdTypeList.EMPTY;\n    }\n\n    StdTypeList interfaceList = new StdTypeList(interfaceCount);\n    int idx = 0;\n    for (int interfaceIdx : classDefToMerge.getInterfaces()) {\n      interfaceList.set(idx++, cstIndexMap.getCstType(interfaceIdx).getClassType());\n    }\n\n    return (interfaceList);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "Type", "List", "<|s|>", "get", "Interfaces", "List", "(", "@", "Nonnull", "<|s|>", "Class", "Def", "<|s|>", "class", "Def", "To", "Merge", ",", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Nonnull", "<|s|>", "Cst", "Index", "Map", "<|s|>", "cst", "Index", "Map", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "interface", "Count", "<|s|>", "=", "<|s|>", "class", "Def", "To", "Merge", ".", "get", "Interfaces", "(", ")", ".", "length", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "interface", "Count", "<|s|>", "==", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Std", "Type", "List", ".", "EMPTY", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "Std", "Type", "List", "<|s|>", "interface", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Std", "Type", "List", "(", "interface", "Count", ");", "<|nl|>", "<|4-s|>", "int", "<|s|>", "idx", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "interface", "Idx", "<|s|>", ":", "<|s|>", "class", "Def", "To", "Merge", ".", "get", "Interfaces", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "interface", "List", ".", "set", "(", "idx", "++", ",", "<|s|>", "cst", "Index", "Map", ".", "get", "Cst", "Type", "(", "interface", "Idx", ")", ".", "get", "Class", "Type", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "(", "interface", "List", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 167, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2491", "comment_id": "a185ac8b_5adbb57f", "class_list": ["JackMerger"], "func_list": ["public JackMerger(@Nonnull DexFile dexResult)", "private void mergeAnnotations(@Nonnull DexBuffer dexToMerge, @Nonnull ClassDef classDefToMerge,", "private TypeList getInterfacesList(@Nonnull ClassDef classDefToMerge,"], "prime_var_dic": {"dexResult": 1}}, {"idx": 50389, "status": "update", "global_index": 7374, "project_name": "android_", "written_on": "2016-03-30 09:41:12", "tufano_target": "private int METHOD_3 ( ) { int VAR_1 = - 1 ; for ( int i = 0 ; i < VAR_2 . length ; i ++ ) { int VAR_3 = VAR_2 [ i ] . METHOD_2 ( ) . VAR_4 ; if ( VAR_1 < VAR_3 ) { VAR_1 = VAR_3 ; } } return VAR_1 ; }", "comment": "mergeApiLevels", "tokenized_comment": ["merge", "Api", "Levels"], "tufano_code": "private int METHOD_1 ( ) { int VAR_1 = - 1 ; for ( int i = 0 ; i < VAR_2 . length ; i ++ ) { int VAR_3 = VAR_2 [ i ] . METHOD_2 ( ) . VAR_4 ; if ( VAR_1 < VAR_3 ) { VAR_1 = VAR_3 ; } } return VAR_1 ; }", "our_target": "    private int mergeApiLevels() {\n", "our_code": "<|startfocus|>\n    private int mergeApis() {\n<|endfocus|>\n        int maxApi = -1;\n        for (int i = 0; i < dexes.length; i++) {\n            int dexMinApi = dexes[i].getTableOfContents().apiLevel;\n            if (maxApi < dexMinApi) {\n                maxApi = dexMinApi;\n            }\n        }\n        return maxApi;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "merge", "Apis", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "int", "<|s|>", "max", "Api", "<|s|>", "=", "<|s|>", "-", "1", ";", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "dexes", ".", "length", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "int", "<|s|>", "dex", "Min", "Api", "<|s|>", "=", "<|s|>", "dexes", "[", "i", "]", ".", "get", "Table", "Of", "Contents", "(", ")", ".", "api", "Level", ";", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "max", "Api", "<|s|>", "<", "<|s|>", "dex", "Min", "Api", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "max", "Api", "<|s|>", "=", "<|s|>", "dex", "Min", "Api", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "max", "Api", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 361, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1707", "comment_id": "71bbbd3b_2fa7c9cf", "class_list": ["DexMerger", "data\");", "IdMerger<T", "UnsortedValue", "is", "in", "so", "WriterSizes", "data", "is", "found"], "func_list": ["public void setCompactWasteThreshold(int compactWasteThreshold)", "protected IdMerger(Dex.Section out)", "private int readIntoMap(Dex.Section in, TableOfContents.Section section, IndexMap indexMap,", "private List<UnsortedValue> readUnsortedValues(Dex source, IndexMap indexMap)", "public int compareTo(UnsortedValue unsortedValue)", "private int mergeApis()", "private void mergeStringIds()", "private void mergeTypeIds()", "private void mergeTypeLists()", "private void mergeProtoIds()", "private void mergeFieldIds()", "private void mergeMethodIds()", "private void mergeAnnotations()", "private void mergeClassDefs()", "private SortableType[] getSortedTypes()", "private void readSortableTypes(SortableType[] sortableTypes, Dex buffer,", "private void unionAnnotationSetsAndDirectories()", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformAnnotationDirectories(Dex in, IndexMap indexMap)", "private void transformStaticValues(Dex in, IndexMap indexMap)", "private void transformClassDef(Dex in, ClassDef classDef, IndexMap indexMap)", "private void transformAnnotationDirectory(", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformClassData(Dex in, ClassData classData, IndexMap indexMap)", "private void transformFields(IndexMap indexMap, ClassData.Field[] fields)", "private void transformMethods(Dex in, IndexMap indexMap, ClassData.Method[] methods)", "private void transformCode(Dex in, Code code, IndexMap indexMap)", "private int[] transformCatchHandlers(IndexMap indexMap, Code.CatchHandler[] catchHandlers)", "private void transformTries(Dex.Section out, Code.Try[] tries,", "private void transformDebugInfoItem(Dex.Section in, IndexMap indexMap)", "private void transformEncodedCatchHandler(Code.CatchHandler catchHandler, IndexMap indexMap)", "public WriterSizes(Dex[] dexes)", "private void plus(TableOfContents contents, boolean exact)", "private void fourByteAlign()", "private static int fourByteAlign(int position)", "int size = setIn.readInt();", "private static void printUsage()", "public void setCompactWasteThreshold(int compactWasteThreshold)", "protected IdMerger(Dex.Section out)", "private int readIntoMap(Dex.Section in, TableOfContents.Section section, IndexMap indexMap,", "private List<UnsortedValue> readUnsortedValues(Dex source, IndexMap indexMap)", "public int compareTo(UnsortedValue unsortedValue)", "public void setCompactWasteThreshold(int compactWasteThreshold)", "protected IdMerger(Dex.Section out)", "private int readIntoMap(Dex.Section in, TableOfContents.Section section, IndexMap indexMap,", "private List<UnsortedValue> readUnsortedValues(Dex source, IndexMap indexMap)", "public int compareTo(UnsortedValue unsortedValue)", "private int mergeApis()", "private void mergeStringIds()", "private void mergeTypeIds()", "private void mergeTypeLists()", "private void mergeProtoIds()", "private void mergeFieldIds()", "private void mergeMethodIds()", "private void mergeAnnotations()", "private void mergeClassDefs()", "private SortableType[] getSortedTypes()", "private void readSortableTypes(SortableType[] sortableTypes, Dex buffer,", "private void unionAnnotationSetsAndDirectories()", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformAnnotationDirectories(Dex in, IndexMap indexMap)", "private void transformStaticValues(Dex in, IndexMap indexMap)", "private void transformClassDef(Dex in, ClassDef classDef, IndexMap indexMap)", "private void transformAnnotationDirectory(", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformClassData(Dex in, ClassData classData, IndexMap indexMap)", "private void transformFields(IndexMap indexMap, ClassData.Field[] fields)", "private void transformMethods(Dex in, IndexMap indexMap, ClassData.Method[] methods)", "private void transformCode(Dex in, Code code, IndexMap indexMap)", "private int[] transformCatchHandlers(IndexMap indexMap, Code.CatchHandler[] catchHandlers)", "private void transformTries(Dex.Section out, Code.Try[] tries,", "private void transformDebugInfoItem(Dex.Section in, IndexMap indexMap)", "private void transformEncodedCatchHandler(Code.CatchHandler catchHandler, IndexMap indexMap)", "public WriterSizes(Dex[] dexes)", "private void plus(TableOfContents contents, boolean exact)", "private void fourByteAlign()", "private static int fourByteAlign(int position)", "int size = setIn.readInt();", "private static void printUsage()", "public void setCompactWasteThreshold(int compactWasteThreshold)", "protected IdMerger(Dex.Section out)", "private int readIntoMap(Dex.Section in, TableOfContents.Section section, IndexMap indexMap,", "private List<UnsortedValue> readUnsortedValues(Dex source, IndexMap indexMap)", "public int compareTo(UnsortedValue unsortedValue)", "private int mergeApis()", "private void mergeStringIds()", "private void mergeTypeIds()", "private void mergeTypeLists()", "private void mergeProtoIds()", "private void mergeFieldIds()", "private void mergeMethodIds()", "private void mergeAnnotations()", "private void mergeClassDefs()", "private SortableType[] getSortedTypes()", "private void readSortableTypes(SortableType[] sortableTypes, Dex buffer,", "private void unionAnnotationSetsAndDirectories()", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformAnnotationDirectories(Dex in, IndexMap indexMap)", "private void transformStaticValues(Dex in, IndexMap indexMap)", "private void transformClassDef(Dex in, ClassDef classDef, IndexMap indexMap)", "private void transformAnnotationDirectory(", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformClassData(Dex in, ClassData classData, IndexMap indexMap)", "private void transformFields(IndexMap indexMap, ClassData.Field[] fields)", "private void transformMethods(Dex in, IndexMap indexMap, ClassData.Method[] methods)", "private void transformCode(Dex in, Code code, IndexMap indexMap)", "private int[] transformCatchHandlers(IndexMap indexMap, Code.CatchHandler[] catchHandlers)", "private void transformTries(Dex.Section out, Code.Try[] tries,", "private void transformDebugInfoItem(Dex.Section in, IndexMap indexMap)", "private void transformEncodedCatchHandler(Code.CatchHandler catchHandler, IndexMap indexMap)", "public WriterSizes(Dex[] dexes)", "private void plus(TableOfContents contents, boolean exact)", "private void fourByteAlign()", "private static int fourByteAlign(int position)", "int size = setIn.readInt();", "private static void printUsage()", "public void setCompactWasteThreshold(int compactWasteThreshold)", "protected IdMerger(Dex.Section out)", "private int readIntoMap(Dex.Section in, TableOfContents.Section section, IndexMap indexMap,", "private List<UnsortedValue> readUnsortedValues(Dex source, IndexMap indexMap)", "public int compareTo(UnsortedValue unsortedValue)", "private int mergeApis()", "private void mergeStringIds()", "private void mergeTypeIds()", "private void mergeTypeLists()", "private void mergeProtoIds()", "private void mergeFieldIds()", "private void mergeMethodIds()", "private void mergeAnnotations()", "private void mergeClassDefs()", "private SortableType[] getSortedTypes()", "private void readSortableTypes(SortableType[] sortableTypes, Dex buffer,", "private void unionAnnotationSetsAndDirectories()", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformAnnotationDirectories(Dex in, IndexMap indexMap)", "private void transformStaticValues(Dex in, IndexMap indexMap)", "private void transformClassDef(Dex in, ClassDef classDef, IndexMap indexMap)", "private void transformAnnotationDirectory(", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformClassData(Dex in, ClassData classData, IndexMap indexMap)", "private void transformFields(IndexMap indexMap, ClassData.Field[] fields)", "private void transformMethods(Dex in, IndexMap indexMap, ClassData.Method[] methods)", "private void transformCode(Dex in, Code code, IndexMap indexMap)", "private int[] transformCatchHandlers(IndexMap indexMap, Code.CatchHandler[] catchHandlers)", "private void transformTries(Dex.Section out, Code.Try[] tries,", "private void transformDebugInfoItem(Dex.Section in, IndexMap indexMap)", "private void transformEncodedCatchHandler(Code.CatchHandler catchHandler, IndexMap indexMap)", "public WriterSizes(Dex[] dexes)", "private void plus(TableOfContents contents, boolean exact)", "private void fourByteAlign()", "private static int fourByteAlign(int position)", "int size = setIn.readInt();", "private static void printUsage()", "public void setCompactWasteThreshold(int compactWasteThreshold)", "public void setCompactWasteThreshold(int compactWasteThreshold)", "protected IdMerger(Dex.Section out)", "private int readIntoMap(Dex.Section in, TableOfContents.Section section, IndexMap indexMap,", "private List<UnsortedValue> readUnsortedValues(Dex source, IndexMap indexMap)", "public int compareTo(UnsortedValue unsortedValue)", "private int mergeApis()", "private void mergeStringIds()", "private void mergeTypeIds()", "private void mergeTypeLists()", "private void mergeProtoIds()", "private void mergeFieldIds()", "private void mergeMethodIds()", "private void mergeAnnotations()", "private void mergeClassDefs()", "private SortableType[] getSortedTypes()", "private void readSortableTypes(SortableType[] sortableTypes, Dex buffer,", "private void unionAnnotationSetsAndDirectories()", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformAnnotationDirectories(Dex in, IndexMap indexMap)", "private void transformStaticValues(Dex in, IndexMap indexMap)", "private void transformClassDef(Dex in, ClassDef classDef, IndexMap indexMap)", "private void transformAnnotationDirectory(", "private void transformAnnotationSets(Dex in, IndexMap indexMap)", "private void transformAnnotationSetRefLists(Dex in, IndexMap indexMap)", "private void transformClassData(Dex in, ClassData classData, IndexMap indexMap)", "private void transformFields(IndexMap indexMap, ClassData.Field[] fields)", "private void transformMethods(Dex in, IndexMap indexMap, ClassData.Method[] methods)", "private void transformCode(Dex in, Code code, IndexMap indexMap)", "private int[] transformCatchHandlers(IndexMap indexMap, Code.CatchHandler[] catchHandlers)", "private void transformTries(Dex.Section out, Code.Try[] tries,", "private void transformDebugInfoItem(Dex.Section in, IndexMap indexMap)", "private void transformEncodedCatchHandler(Code.CatchHandler catchHandler, IndexMap indexMap)", "public WriterSizes(Dex[] dexes)", "private void plus(TableOfContents contents, boolean exact)", "private void fourByteAlign()", "private static int fourByteAlign(int position)", "int size = setIn.readInt();", "private static void printUsage()"], "prime_var_dic": {}}, {"idx": 2313, "status": "update", "global_index": 5043, "project_name": "android_", "written_on": "2016-08-26 00:16:11", "tufano_target": "public int METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; for ( int VAR_3 = 0 ; VAR_3 < VAR_1 ; ++ VAR_3 ) { VAR_4 = ( VAR_3 >= 0 ) ? STRING_1 : null ; VAR_2 += VAR_4 . length ( ) ; } return VAR_2 ; }", "comment": "Spaces.", "tokenized_comment": ["Spaces", "."], "tufano_code": "public int METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; for ( int VAR_3 = 0 ; VAR_3 < VAR_1 ; ++ VAR_3 ) { VAR_2 += METHOD_2 ( ) ; } return VAR_2 ; }", "our_target": "          // Deliberately obscured to make optimizations less likely\n          s = (rep >= 0) ? \"hello, world!\" : null;\n          v += s.length();\n", "our_code": "    public int timeStringDexCacheAccess(int reps) {\n    \tint v = 0;\n        for (int rep = 0; rep < reps; ++rep) {\n<|startfocus|>\n            v+=doit_noinline();\n<|endfocus|>\n        }\n        return v;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "time", "String", "Dex", "Cache", "Access", "(", "int", "<|s|>", "reps", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|t|>", "int", "<|s|>", "v", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "rep", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "rep", "<|s|>", "<", "<|s|>", "reps", ";", "<|s|>", "++", "rep", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "v", "+=", "d", "oit", "_", "noinline", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "v", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 31, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_969", "comment_id": "4537ee0c_8c048473", "class_list": ["StringDexCacheBenchmark"], "func_list": ["private static int doit_noinline()", "public int timeStringDexCacheAccess(int reps)"], "prime_var_dic": {}}, {"idx": 48655, "status": "update", "global_index": 14357, "project_name": "android_", "written_on": "2014-02-25 23:56:31", "tufano_target": "private static int METHOD_1 ( String url ) { if ( ! TYPE_1 . isEmpty ( url ) ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( url ) ; if ( VAR_1 != null ) { String VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 != null ) { return VAR_2 . METHOD_4 ( ) ; } } } return 0 ; }", "comment": "TextUtils.isEmpty checks also for null. url != null is not necessary\n\nhttps://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/text/TextUtils.java  line 448", "tokenized_comment": ["Text", "Utils", ".", "is", "Empty", "<|s|>", "checks", "<|s|>", "also", "<|s|>", "for", "<|s|>", "null", ".", "<|s|>", "url", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "is", "<|s|>", "not", "<|s|>", "necessary", "<|nl|>", "<|nl|>", "https", "://", "android", ".", "googlesource", ".", "com", "/", "platform", "/", "frameworks", "/", "base", "/+/", "refs", "/", "heads", "/", "master", "/", "core", "/", "java", "/", "android", "/", "text", "/", "Text", "Utils", ".", "java", "<|2-s|>", "line", "<|s|>", "448"], "tufano_code": "protected int METHOD_1 ( String url ) { if ( url != null && ! TYPE_1 . isEmpty ( url ) ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( url ) ; if ( VAR_1 != null ) { String VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 != null ) { return VAR_2 . METHOD_4 ( ) ; } } } return 0 ; }", "our_target": "    private static int findDefaultTrafficStatsTag(String url) {\n      if (!TextUtils.isEmpty(url)) {\n", "our_code": "<|startfocus|>\n    protected int findDefaultTrafficStatsTag(String url) {\n      if (url != null && !TextUtils.isEmpty(url)) {\n<|endfocus|>\n        Uri uri = Uri.parse(url);\n        if (uri != null) {\n          String host = uri.getHost();\n          if (host != null) {\n            return host.hashCode();\n          }\n        }\n      }\n      return 0;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "protected", "<|s|>", "int", "<|s|>", "find", "Default", "Traffic", "Stats", "Tag", "(", "String", "<|s|>", "url", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "url", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "!", "Text", "Utils", ".", "is", "Empty", "(", "url", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Uri", "<|s|>", "uri", "<|s|>", "=", "<|s|>", "Uri", ".", "parse", "(", "url", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "uri", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "String", "<|s|>", "host", "<|s|>", "=", "<|s|>", "uri", ".", "get", "Host", "(", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "if", "<|s|>", "(", "host", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "host", ".", "hash", "Code", "(", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 177, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4504", "comment_id": "7c0a6d15_5e57051e", "class_list": ["for", "Request<T>"], "func_list": ["public Request(String url, Response.ErrorListener listener)", "public int getMethod()", "public Object getTag()", "public int getTrafficStatsTag()", "protected int findDefaultTrafficStatsTag(String url)", "public void addMarker(String tag)", "void finish(final String tag)", "public void run()", "public String getUrl()", "public String getCacheKey()", "public void cancel()", "public boolean isCanceled()", "protected String getPostParamsEncoding()", "public String getPostBodyContentType()", "protected String getParamsEncoding()", "public String getBodyContentType()", "private byte[] encodeParameters(Map<String, String> params, String paramsEncoding)", "public Priority getPriority()", "public RetryPolicy getRetryPolicy()", "public void markDelivered()", "public boolean hasHadResponseDelivered()", "protected VolleyError parseNetworkError(VolleyError volleyError)", "public void deliverError(VolleyError error)", "public int compareTo(Request<T> other)", "public String toString()", "public Request(String url, Response.ErrorListener listener)", "public int getMethod()", "public Object getTag()", "public int getTrafficStatsTag()", "protected int findDefaultTrafficStatsTag(String url)", "public void addMarker(String tag)", "void finish(final String tag)", "public void run()", "public String getUrl()", "public String getCacheKey()", "public void cancel()", "public boolean isCanceled()", "protected String getPostParamsEncoding()", "public String getPostBodyContentType()", "protected String getParamsEncoding()", "public String getBodyContentType()", "private byte[] encodeParameters(Map<String, String> params, String paramsEncoding)", "public Priority getPriority()", "public RetryPolicy getRetryPolicy()", "public void markDelivered()", "public boolean hasHadResponseDelivered()", "protected VolleyError parseNetworkError(VolleyError volleyError)", "public void deliverError(VolleyError error)", "public int compareTo(Request<T> other)", "public String toString()"], "prime_var_dic": {"String": 1, "mMethod": 1, "request": 1, "mUrl": 1, "TrafficStats": 1, "mDefaultTrafficStatsTag": 1, "errors": 1, "mErrorListener": 1, "long": 1, "mCacheEntry": 1, "response": 1, "tag": 1, "coherency": 1, "encodings": 2, "them": 2, "encoded": 1, "FIFO": 1, "details": 1}}, {"idx": 51095, "status": "update", "global_index": 17187, "project_name": "android_", "written_on": "2010-09-29 04:42:07", "tufano_target": "private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_1 . size ( ) > 0 ) { VAR_1 . remove ( 0 ) ; TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 + VAR_1 . size ( ) + STRING_2 ) ; } else { TYPE_1 . METHOD_3 ( VAR_2 , STRING_3 ) ; } if ( VAR_1 . size ( ) > 0 ) { VAR_3 = VAR_1 . get ( 0 ) ; } } }", "comment": "so you hold the mPendingMessagesList lock even when sending the SMS?  can't that take awhile?", "tokenized_comment": ["so", "<|s|>", "you", "<|s|>", "hold", "<|s|>", "the", "<|s|>", "m", "Pending", "Messages", "List", "<|s|>", "lock", "<|s|>", "even", "<|s|>", "when", "<|s|>", "sending", "<|s|>", "the", "<|s|>", "SMS", "?", "<|2-s|>", "can", "'", "t", "<|s|>", "that", "<|s|>", "take", "<|s|>", "awhile", "?"], "tufano_code": "private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_1 . size ( ) > 0 ) { VAR_1 . remove ( 0 ) ; TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 + VAR_1 . size ( ) + STRING_2 ) ; } else { TYPE_1 . METHOD_3 ( VAR_2 , STRING_3 ) ; } if ( VAR_1 . size ( ) > 0 ) { METHOD_4 ( VAR_1 . get ( 0 ) ) ; } } }", "our_target": "                nextMessage = mPendingMessagesList.get(0);\n", "our_code": "    private void processNextPendingMessage() {\n        synchronized (mPendingMessagesList) {\n            // Remove sent message from the list\n            if (mPendingMessagesList.size() > 0) {\n                mPendingMessagesList.remove(0);\n                Log.d(TAG, \"Removed message from pending queue. \" + mPendingMessagesList.size() + \" left\");\n            } else {\n                Log.e(TAG, \"Pending messages list consistency failure detected!\");\n            }\n\n            // If there are more messages waiting to be sent - send next one\n            if (mPendingMessagesList.size() > 0) {\n<|startfocus|>\n                sendSms(mPendingMessagesList.get(0));\n<|endfocus|>\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "process", "Next", "Pending", "Message", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Pending", "Messages", "List", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Remove", "<|s|>", "sent", "<|s|>", "message", "<|s|>", "from", "<|s|>", "the", "<|s|>", "list", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Pending", "Messages", "List", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "m", "Pending", "Messages", "List", ".", "remove", "(", "0", ");", "<|nl|>", "<|16-s|>", "Log", ".", "d", "(", "TAG", ",", "<|s|>", "\"", "Removed", "<|s|>", "message", "<|s|>", "from", "<|s|>", "pending", "<|s|>", "queue", ".", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "m", "Pending", "Messages", "List", ".", "size", "(", ")", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "left", "\"", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "Pending", "<|s|>", "messages", "<|s|>", "list", "<|s|>", "consistency", "<|s|>", "failure", "<|s|>", "detected", "!", "\"", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "If", "<|s|>", "there", "<|s|>", "are", "<|s|>", "more", "<|s|>", "messages", "<|s|>", "waiting", "<|s|>", "to", "<|s|>", "be", "<|s|>", "sent", "<|s|>", "-", "<|s|>", "send", "<|s|>", "next", "<|s|>", "one", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Pending", "Messages", "List", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "send", "Sms", "(", "m", "Pending", "Messages", "List", ".", "get", "(", "0", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1035, "base_patch_number": 1, "changed_patch_number": 4, "code_file_name": "android_4963", "comment_id": "AAAA7n%2F%2F%2B3Q%3D", "class_list": ["SMSDispatcher", "SmsCounter", "SmsTracker"], "func_list": ["protected static int getNextConcatenatedRef()", "boolean check(String appName, int smsWaiting)", "private boolean isUnderLimit(ArrayList<Long> sent, int smsWaiting)", "protected SMSDispatcher(PhoneBase phone)", "public void dispose()", "protected void finalize()", "public void handleMessage(Message msg)", "private void createWakelock()", "void dispatch(Intent intent, String permission)", "private void handleIccFull()", "protected void handleSendComplete(AsyncResult ar)", "protected void handleNotInService(int ss, SmsTracker tracker)", "protected int processMessagePart(SmsMessageBase sms,", "protected void dispatchPdus(byte[][] pdus)", "protected void dispatchPortAddressedPdus(byte[][] pdus, int port)", "protected void sendRawPdu(byte[] smsc, byte[] pdu, PendingIntent sentIntent,", "protected void handleReachSentLimit(SmsTracker tracker)", "protected String getAppNameByIntent(PendingIntent intent)", "private void notifyAndAcknowledgeLastIncomingSms(boolean success,", "private boolean isMultipartTracker (SmsTracker tracker)", "protected SmsTracker SmsTrackerFactory(HashMap data, PendingIntent sentIntent,", "public void onClick(DialogInterface dialog, int which)", "public void onReceive(Context context, Intent intent)", "private void processNextPendingMessage()", "private void enqueueMessageForSending(SmsTracker tracker)", "protected static int getNextConcatenatedRef()", "protected static int getNextConcatenatedRef()"], "prime_var_dic": {}}, {"idx": 87432, "status": "update", "global_index": 13954, "project_name": "android_", "written_on": "2015-02-02 22:25:55", "tufano_target": "public int getInt ( int VAR_1 , int VAR_2 ) { switch ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { case VAR_3 : case VAR_4 : break ; case VAR_5 : case VAR_6 : throw new TYPE_2 ( STRING_3 + VAR_1 ) ; default : throw new TYPE_2 ( STRING_2 + VAR_1 ) ; } TYPE_3 arg = METHOD_2 ( VAR_1 ) ; if ( arg == null ) { return VAR_2 ; } return ( ( TYPE_4 ) arg ) . value ; }", "comment": "getInts", "tokenized_comment": ["get", "Ints"], "tufano_code": "public int getInt ( int VAR_1 , int VAR_2 ) { switch ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { case VAR_3 : case VAR_4 : break ; case VAR_5 : case VAR_6 : throw new TYPE_2 ( STRING_1 + VAR_1 ) ; default : throw new TYPE_2 ( STRING_2 + VAR_1 ) ; } TYPE_3 arg = METHOD_2 ( VAR_1 ) ; if ( arg == null ) { return VAR_2 ; } return ( ( TYPE_4 ) arg ) . value ; }", "our_target": "                throw new IllegalArgumentException(\"Repeatable tags must use getInts: \" + tag);\n", "our_code": "    public int getInt(int tag, int defaultValue) {\n        switch (KeymasterDefs.getTagType(tag)) {\n            case KeymasterDefs.KM_ENUM:\n            case KeymasterDefs.KM_INT:\n                break; // Accepted types\n            case KeymasterDefs.KM_INT_REP:\n            case KeymasterDefs.KM_ENUM_REP:\n<|startfocus|>\n                throw new IllegalArgumentException(\"Repeatable tags must use getIntSet: \" + tag);\n<|endfocus|>\n            default:\n                throw new IllegalArgumentException(\"Tag is not an int type: \" + tag);\n        }\n        KeymasterArgument arg = getArgumentByTag(tag);\n        if (arg == null) {\n            return defaultValue;\n        }\n        return ((KeymasterIntArgument) arg).value;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "get", "Int", "(", "int", "<|s|>", "tag", ",", "<|s|>", "int", "<|s|>", "default", "Value", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "switch", "<|s|>", "(", "Keymaster", "Defs", ".", "get", "Tag", "Type", "(", "tag", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Keymaster", "Defs", ".", "KM", "_", "ENUM", ":", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Keymaster", "Defs", ".", "KM", "_", "INT", ":", "<|nl|>", "<|16-s|>", "break", ";", "<|s|>", "//", "<|s|>", "Accepted", "<|s|>", "types", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Keymaster", "Defs", ".", "KM", "_", "INT", "_", "REP", ":", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Keymaster", "Defs", ".", "KM", "_", "ENUM", "_", "REP", ":", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Repeatable", "<|s|>", "tags", "<|s|>", "must", "<|s|>", "use", "<|s|>", "get", "Int", "Set", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "tag", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "default", ":", "<|nl|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Tag", "<|s|>", "is", "<|s|>", "not", "<|s|>", "an", "<|s|>", "int", "<|s|>", "type", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "tag", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "Keymaster", "Argument", "<|s|>", "arg", "<|s|>", "=", "<|s|>", "get", "Argument", "By", "Tag", "(", "tag", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "arg", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "default", "Value", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "(", "Keymaster", "Int", "Argument", ")", "<|s|>", "arg", ")", ".", "value", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 93, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_1414", "comment_id": "b7db33ac_cc48bf72", "class_list": ["for", "KeymasterArguments"], "func_list": ["public KeymasterArguments createFromParcel(Parcel in)", "public KeymasterArguments[] newArray(int size)", "public KeymasterArguments createFromParcel(Parcel in)", "private KeymasterArguments(Parcel in)", "public void addInt(int tag, int value)", "public void addBoolean(int tag)", "public void addLong(int tag, long value)", "public void addBlob(int tag, byte[] value)", "public void addDate(int tag, Date value)", "private KeymasterArgument getArgumentByTag(int tag)", "public boolean containsTag(int tag)", "public int getInt(int tag, int defaultValue)", "public long getLong(int tag, long defaultValue)", "public Date getDate(int tag, Date defaultValue)", "public boolean getBoolean(int tag, boolean defaultValue)", "public byte[] getBlob(int tag, byte[] defaultValue)", "public List<Integer> getInts(int tag)", "public void writeToParcel(Parcel out, int flags)", "public void readFromParcel(Parcel in)", "public int describeContents()", "public KeymasterArguments createFromParcel(Parcel in)", "public KeymasterArguments[] newArray(int size)", "public KeymasterArguments createFromParcel(Parcel in)", "private KeymasterArguments(Parcel in)", "public void addInt(int tag, int value)", "public void addBoolean(int tag)", "public void addLong(int tag, long value)", "public void addBlob(int tag, byte[] value)", "public void addDate(int tag, Date value)", "private KeymasterArgument getArgumentByTag(int tag)", "public boolean containsTag(int tag)", "public int getInt(int tag, int defaultValue)", "public long getLong(int tag, long defaultValue)", "public Date getDate(int tag, Date defaultValue)", "public boolean getBoolean(int tag, boolean defaultValue)", "public byte[] getBlob(int tag, byte[] defaultValue)", "public List<Integer> getInts(int tag)", "public void writeToParcel(Parcel out, int flags)", "public void readFromParcel(Parcel in)", "public int describeContents()"], "prime_var_dic": {"implements": 1, "Parcelable": 1}}, {"idx": 1123, "status": "update", "global_index": 7030, "project_name": "android_", "written_on": "2016-02-26 15:31:59", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 c = null ; try { c = TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_2 . METHOD_6 ( STRING_3 ) ; METHOD_7 ( ) ; VAR_2 . METHOD_6 ( VAR_5 + STRING_5 ) ; }", "comment": "Long line", "tokenized_comment": ["Long", "<|s|>", "line"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 c = null ; try { c = TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_2 . METHOD_6 ( STRING_3 ) ; METHOD_7 ( ) ; VAR_2 . METHOD_6 ( STRING_4 ) ; }", "our_target": "        synchronizer.receiveMessageWithoutException(\n                packageName + \"ObjectReference.InvokeMethodDefault002Debuggee(#2)\");\n", "our_code": "    public void run() {\n        // Preload TestClass so it is available during the test.\n        Class c = null;\n        try {\n            c = Class.forName(\"org.apache.harmony.jpda.tests.jdwp.ObjectReference.InvokeMethodDefault002Debuggee$TestClass\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY);\n        logWriter.println(\"InvokeMethodDefault002Debuggee\");\n        synchronizer.receiveMessageWithoutException(\"org.apache.harmony.jpda.tests.jdwp.ObjectReference.InvokeMethodDefault002Debuggee(#1)\");\n        execMethod();\n<|startfocus|>\n        synchronizer.receiveMessageWithoutException(\"org.apache.harmony.jpda.tests.jdwp.ObjectReference.InvokeMethodDefault002Debuggee(#2)\");\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Preload", "<|s|>", "Test", "Class", "<|s|>", "so", "<|s|>", "it", "<|s|>", "is", "<|s|>", "available", "<|s|>", "during", "<|s|>", "the", "<|s|>", "test", ".", "<|nl|>", "<|8-s|>", "Class", "<|s|>", "c", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "c", "<|s|>", "=", "<|s|>", "Class", ".", "for", "Name", "(", "\"", "org", ".", "apache", ".", "harmony", ".", "jpda", ".", "tests", ".", "jdwp", ".", "Object", "Reference", ".", "Invoke", "Method", "Default", "002", "Debuggee", "$", "Test", "Class", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Class", "Not", "Found", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "e", ".", "print", "Stack", "Trace", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "synchronizer", ".", "send", "Message", "(", "JPDADebuggee", "Synchronizer", ".", "SGNL", "_", "READY", ");", "<|nl|>", "<|8-s|>", "log", "Writer", ".", "println", "(", "\"", "Invoke", "Method", "Default", "002", "Debuggee", "\"", ");", "<|nl|>", "<|8-s|>", "synchronizer", ".", "receive", "Message", "Without", "Exception", "(", "\"", "org", ".", "apache", ".", "harmony", ".", "jpda", ".", "tests", ".", "jdwp", ".", "Object", "Reference", ".", "Invoke", "Method", "Default", "002", "Debuggee", "(", "#", "1", ")", "\"", ");", "<|nl|>", "<|8-s|>", "exec", "Method", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "synchronizer", ".", "receive", "Message", "Without", "Exception", "(", "\"", "org", ".", "apache", ".", "harmony", ".", "jpda", ".", "tests", ".", "jdwp", ".", "Object", "Reference", ".", "Invoke", "Method", "Default", "002", "Debuggee", "(", "#", "2", ")", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 75, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2759", "comment_id": "82affd8e_615dac21", "class_list": ["InvokeMethodDefault002Debuggee", "we", "TestClass"], "func_list": ["void execMethod()", "public void run()", "public static void main(String[] args)"], "prime_var_dic": {"implements": 1, "int": 1}}, {"idx": 25766, "status": "update", "global_index": 6202, "project_name": "android_", "written_on": "2016-04-29 15:38:35", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; TYPE_1 VAR_3 = null ; try { METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 , VAR_3 ) ) ; } finally { VAR_1 . METHOD_7 ( ) ; VAR_3 . METHOD_7 ( ) ; VAR_1 = null ; VAR_3 = null ; } }", "comment": "ditto", "tokenized_comment": ["ditto"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . getContext ( ) . METHOD_4 ( ) , VAR_2 ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . getContext ( ) . METHOD_4 ( ) , VAR_4 ) ; try { METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 , VAR_3 ) ) ; } finally { VAR_1 . METHOD_7 ( ) ; VAR_3 . METHOD_7 ( ) ; VAR_1 = null ; VAR_3 = null ; } }", "our_target": "    Bitmap bitmap1 = null;\n    Bitmap bitmap2 = null;\n", "our_code": "  public void compareDifferentBitmapImages() {\n<|startfocus|>\n    Bitmap bitmap1 = BitmapFactory.decodeResource(\n        getInstrumentation().getContext().getResources(), android.R.drawable.alert_dark_frame);\n    Bitmap bitmap2 = BitmapFactory.decodeResource(\n        getInstrumentation().getContext().getResources(), android.R.drawable.alert_light_frame);\n<|endfocus|>\n\n    try {\n      assertFalse(HasBackgroundMatcher.compareBitmaps(bitmap1, bitmap2));\n    } finally {\n      bitmap1.recycle();\n      bitmap2.recycle();\n      bitmap1 = null;\n      bitmap2 = null;\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "compare", "Different", "Bitmap", "Images", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Bitmap", "<|s|>", "bitmap", "1", "<|s|>", "=", "<|s|>", "Bitmap", "Factory", ".", "decode", "Resource", "(", "<|nl|>", "<|8-s|>", "get", "Instrumentation", "(", ")", ".", "get", "Context", "(", ")", ".", "get", "Resources", "(", ")", ",", "<|s|>", "android", ".", "R", ".", "drawable", ".", "alert", "_", "dark", "_", "frame", ");", "<|nl|>", "<|4-s|>", "Bitmap", "<|s|>", "bitmap", "2", "<|s|>", "=", "<|s|>", "Bitmap", "Factory", ".", "decode", "Resource", "(", "<|nl|>", "<|8-s|>", "get", "Instrumentation", "(", ")", ".", "get", "Context", "(", ")", ".", "get", "Resources", "(", ")", ",", "<|s|>", "android", ".", "R", ".", "drawable", ".", "alert", "_", "light", "_", "frame", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "assert", "False", "(", "Has", "Background", "Matcher", ".", "compare", "Bitmaps", "(", "bitmap", "1", ",", "<|s|>", "bitmap", "2", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "finally", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "1", ".", "recycle", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "2", ".", "recycle", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "1", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "2", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 86, "base_patch_number": 10, "changed_patch_number": 11, "code_file_name": "android_1982", "comment_id": "08d0953a_c411884f", "class_list": ["HasBackgroundMatcherTest"], "func_list": ["public void verifyViewHasBackground()", "public void verifyBackgroundWhenBackgroundIsNotSet()", "public void compareSameBitmapImage()", "public void compareDifferentBitmapImages()"], "prime_var_dic": {}}, {"idx": 64446, "status": "update", "global_index": 13696, "project_name": "android_", "written_on": "2014-12-19 20:14:20", "tufano_target": "public boolean METHOD_1 ( String VAR_1 , final TYPE_1 VAR_2 ) { final TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) , true ) ; assert VAR_3 != null ; if ( VAR_5 != VAR_3 . METHOD_4 ( ) ) { return false ; } return VAR_3 != null && VAR_5 == VAR_3 . METHOD_4 ( ) ; }", "comment": "Do you really care whether we've actually computed the resolver maps? I would think it's the resource repository computation that's I/O intensive, not building maps from the resource items (unless that somehow checks file existence?)", "tokenized_comment": ["Do", "<|s|>", "you", "<|s|>", "really", "<|s|>", "care", "<|s|>", "whether", "<|s|>", "we", "'", "ve", "<|s|>", "actually", "<|s|>", "computed", "<|s|>", "the", "<|s|>", "resolver", "<|s|>", "maps", "?", "<|s|>", "I", "<|s|>", "would", "<|s|>", "think", "<|s|>", "it", "'", "s", "<|s|>", "the", "<|s|>", "resource", "<|s|>", "repository", "<|s|>", "computation", "<|s|>", "that", "'", "s", "<|s|>", "I", "/", "O", "<|s|>", "intensive", ",", "<|s|>", "not", "<|s|>", "building", "<|s|>", "maps", "<|s|>", "from", "<|s|>", "the", "<|s|>", "resource", "<|s|>", "items", "<|s|>", "(", "unless", "<|s|>", "that", "<|s|>", "somehow", "<|s|>", "checks", "<|s|>", "file", "<|s|>", "existence", "?", ")"], "tufano_code": "public boolean METHOD_1 ( String VAR_1 , final TYPE_1 VAR_2 ) { final TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) , true ) ; assert VAR_3 != null ; if ( VAR_5 != VAR_3 . METHOD_4 ( ) ) { return false ; } String VAR_6 = VAR_2 . METHOD_5 ( ) ; String VAR_7 = VAR_1 + VAR_6 ; return VAR_8 . METHOD_6 ( VAR_7 ) ; }", "our_target": "    return resources != null && myCachedGeneration == resources.getModificationCount();\n", "our_code": "  public boolean hasResourceResolverCached(@NotNull String themeStyle,\n                                           @NotNull final FolderConfiguration fullConfiguration) {\n    // If the caches are out of date we don't have it cached.\n    final LocalResourceRepository resources = AppResourceRepository.getAppResources(myManager.getModule(), true);\n    assert resources != null;\n    if (myCachedGeneration != resources.getModificationCount()) {\n      return false;\n    }\n\n<|startfocus|>\n    // Check the cache for the resource key. Must match corresponding code in getResourceResolver()\n    String configurationKey = fullConfiguration.getUniqueKey();\n    String resolverKey = themeStyle + configurationKey;\n    return myResolverMap.containsKey(resolverKey);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "has", "Resource", "Resolver", "Cached", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "theme", "Style", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "<|2-s|>", "<|s|>", "@", "Not", "Null", "<|s|>", "final", "<|s|>", "Folder", "Configuration", "<|s|>", "full", "Configuration", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "If", "<|s|>", "the", "<|s|>", "caches", "<|s|>", "are", "<|s|>", "out", "<|s|>", "of", "<|s|>", "date", "<|s|>", "we", "<|s|>", "don", "'", "t", "<|s|>", "have", "<|s|>", "it", "<|s|>", "cached", ".", "<|nl|>", "<|4-s|>", "final", "<|s|>", "Local", "Resource", "Repository", "<|s|>", "resources", "<|s|>", "=", "<|s|>", "App", "Resource", "Repository", ".", "get", "App", "Resources", "(", "my", "Manager", ".", "get", "Module", "(", ")", ",", "<|s|>", "true", ");", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "resources", "<|s|>", "!=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Cached", "Generation", "<|s|>", "!=", "<|s|>", "resources", ".", "get", "Modification", "Count", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Check", "<|s|>", "the", "<|s|>", "cache", "<|s|>", "for", "<|s|>", "the", "<|s|>", "resource", "<|s|>", "key", ".", "<|s|>", "Must", "<|s|>", "match", "<|s|>", "corresponding", "<|s|>", "code", "<|s|>", "in", "<|s|>", "get", "Resource", "Resolver", "(", ")", "<|nl|>", "<|4-s|>", "String", "<|s|>", "configuration", "Key", "<|s|>", "=", "<|s|>", "full", "Configuration", ".", "get", "Unique", "Key", "(", ");", "<|nl|>", "<|4-s|>", "String", "<|s|>", "resolver", "Key", "<|s|>", "=", "<|s|>", "theme", "Style", "<|s|>", "+", "<|s|>", "configuration", "Key", ";", "<|nl|>", "<|4-s|>", "return", "<|s|>", "my", "Resolver", "Map", ".", "contains", "Key", "(", "resolver", "Key", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 112, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_146", "comment_id": "e11c04fd_fa99a90b", "class_list": ["ResourceResolverCache"], "func_list": ["public ResourceResolverCache(ConfigurationManager manager)", "public static ResourceResolverCache create(ConfigurationManager manager)", "public boolean hasResourceResolverCached(@NotNull String themeStyle,", "public ResourceResolver getResourceResolver(@Nullable IAndroidTarget target,", "public ResourceRepository getFrameworkResources(@NotNull FolderConfiguration configuration, @NotNull IAndroidTarget target)", "private static FrameworkResources getFrameworkResources(@NotNull IAndroidTarget target, @NotNull Module module, boolean forceReload)", "private static void replaceDrawableBitmaps(@NotNull Map<ResourceType, Map<String, ResourceValue>> frameworkResources,", "public void reset()"], "prime_var_dic": {"myManager": 1, "the": 1, "time": 1}}, {"idx": 86754, "status": "update", "global_index": 10996, "project_name": "android_", "written_on": "2015-06-12 09:42:07", "tufano_target": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; METHOD_3 ( STRING_1 , VAR_5 == 0 ) ; } TYPE_2 VAR_6 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( STRING_1 , 0 , VAR_8 ) ; METHOD_4 ( VAR_1 ) ; }", "comment": "ditto", "tokenized_comment": ["ditto"], "tufano_code": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; METHOD_3 ( STRING_1 , VAR_5 == 0 ) ; } { TYPE_2 VAR_6 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( STRING_1 , 0 , VAR_8 ) ; } METHOD_4 ( VAR_1 ) ; }", "our_target": "        TaggedObject invokeException = reply.getNextValueAsTaggedObject();\n        assertEquals(JDWPConstants.Tag.OBJECT_TAG, invokeException.tag);\n        assertEquals(\"Invalid exception object id\", 0, invokeException.objectID);\n", "our_code": "    protected void checkInvokeReply(ReplyPacket reply) {\n        // Check result is 'void'\n        {\n            TaggedObject invokeNewObject = reply.getNextValueAsTaggedObject();\n            assertEquals(JDWPConstants.Tag.OBJECT_TAG, invokeNewObject.tag);\n            assertFalse(\"Invalid exception object id\", invokeNewObject.objectID == 0);\n        }\n\n        // Check exception is null.\n<|startfocus|>\n        {\n            TaggedObject invokeException = reply.getNextValueAsTaggedObject();\n            assertEquals(JDWPConstants.Tag.OBJECT_TAG, invokeException.tag);\n            assertEquals(\"Invalid exception object id\", 0, invokeException.objectID);\n        }\n<|endfocus|>\n\n        assertAllDataRead(reply);\n\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "check", "Invoke", "Reply", "(", "Reply", "Packet", "<|s|>", "reply", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "result", "<|s|>", "is", "<|s|>", "'", "void", "'", "<|nl|>", "<|8-s|>", "{", "<|nl|>", "<|12-s|>", "Tagged", "Object", "<|s|>", "invoke", "New", "Object", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Tagged", "Object", "(", ");", "<|nl|>", "<|12-s|>", "assert", "Equals", "(", "JDWPConstants", ".", "Tag", ".", "OBJECT", "_", "TAG", ",", "<|s|>", "invoke", "New", "Object", ".", "tag", ");", "<|nl|>", "<|12-s|>", "assert", "False", "(", "\"", "Invalid", "<|s|>", "exception", "<|s|>", "object", "<|s|>", "id", "\"", ",", "<|s|>", "invoke", "New", "Object", ".", "object", "ID", "<|s|>", "==", "<|s|>", "0", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "exception", "<|s|>", "is", "<|s|>", "null", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "{", "<|nl|>", "<|12-s|>", "Tagged", "Object", "<|s|>", "invoke", "Exception", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Tagged", "Object", "(", ");", "<|nl|>", "<|12-s|>", "assert", "Equals", "(", "JDWPConstants", ".", "Tag", ".", "OBJECT", "_", "TAG", ",", "<|s|>", "invoke", "Exception", ".", "tag", ");", "<|nl|>", "<|12-s|>", "assert", "Equals", "(", "\"", "Invalid", "<|s|>", "exception", "<|s|>", "object", "<|s|>", "id", "\"", ",", "<|s|>", "0", ",", "<|s|>", "invoke", "Exception", ".", "object", "ID", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "assert", "All", "Data", "Read", "(", "reply", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 65, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_2741", "comment_id": "99fd94eb_3c953148", "class_list": ["NewInstanceWithSuspensionTest"], "func_list": ["public void testInvokeWithMultipleEvents001()", "protected CommandPacket buildInvokeCommand(long threadId, long classID,", "protected String getInvokeCommandName()", "protected void checkInvokeReply(ReplyPacket reply)"], "prime_var_dic": {}}, {"idx": 16753, "status": "update", "global_index": 10205, "project_name": "android_", "written_on": "2015-04-20 17:35:34", "tufano_target": "public static void METHOD_1 ( ) { float f = 0 ; float VAR_1 = FLOAT_1 ; for ( int i = 0 ; i < INT_1 ; i ++ ) { f -= VAR_1 ; f = ( - f ) ; } VAR_2 . METHOD_2 ( f ) ; }", "comment": "Nit: f = 0", "tokenized_comment": ["Nit", ":", "<|s|>", "f", "<|s|>", "=", "<|s|>", "0"], "tufano_code": "public static void METHOD_1 ( ) { float f = 0 ; float VAR_1 = FLOAT_1 ; for ( int i = 0 ; i < INT_1 ; i ++ ) { f -= VAR_1 ; f = ( - f ) ; } VAR_2 . METHOD_2 ( f ) ; }", "our_target": "      float f = 0;\n", "our_code": "    public static void floatTest() {\n<|startfocus|>\n      float f=0;\n<|endfocus|>\n      float fc = 1f;\n      for (int i = 0; i < 2; i++) {\n        f -= fc;\n        f = (-f);\n      }\n\n      System.out.println(f);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "float", "Test", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "float", "<|s|>", "f", "=", "0", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "float", "<|s|>", "fc", "<|s|>", "=", "<|s|>", "1", "f", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "2", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "f", "<|s|>", "-=", "<|s|>", "fc", ";", "<|nl|>", "<|8-s|>", "f", "<|s|>", "=", "<|s|>", "(", "-", "f", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "System", ".", "out", ".", "println", "(", "f", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 19, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5060", "comment_id": "7048f2a0_3ef00561", "class_list": ["Main"], "func_list": ["public static void floatTest()", "public static void doubleTest()", "public static void main(String[] args)"], "prime_var_dic": {}}, {"idx": 1600, "status": "update", "global_index": 7037, "project_name": "android_", "written_on": "2016-02-26 15:31:59", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 c = null ; try { c = TYPE_1 . METHOD_2 ( VAR_5 + STRING_5 ) ; } catch ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_2 . METHOD_6 ( STRING_3 ) ; METHOD_7 ( ) ; VAR_2 . METHOD_6 ( STRING_4 ) ; }", "comment": "Long line", "tokenized_comment": ["Long", "<|s|>", "line"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 c = null ; try { c = TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_2 . METHOD_6 ( STRING_3 ) ; METHOD_7 ( ) ; VAR_2 . METHOD_6 ( STRING_4 ) ; }", "our_target": "            c = Class.forName(\n                    packageName + \"ObjectReference.InvokeMethodDefaultDebuggee$TestClass\");\n", "our_code": "    public void run() {\n        // Preload TestClass so it is available during the test.\n        Class c = null;\n        try {\n<|startfocus|>\n            c = Class.forName(\"org.apache.harmony.jpda.tests.jdwp.ObjectReference.InvokeMethodDefaultDebuggee$TestClass\");\n<|endfocus|>\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY);\n        logWriter.println(\"InvokeMethodDefaultDebuggee\");\n        synchronizer.receiveMessageWithoutException(\"org.apache.harmony.jpda.tests.jdwp.ObjectReference.InvokeMethodDefaultDebuggee(#1)\");\n        execMethod();\n        synchronizer.receiveMessageWithoutException(\"org.apache.harmony.jpda.tests.jdwp.ObjectReference.InvokeMethodDefaultDebuggee(#2)\");\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Preload", "<|s|>", "Test", "Class", "<|s|>", "so", "<|s|>", "it", "<|s|>", "is", "<|s|>", "available", "<|s|>", "during", "<|s|>", "the", "<|s|>", "test", ".", "<|nl|>", "<|8-s|>", "Class", "<|s|>", "c", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "c", "<|s|>", "=", "<|s|>", "Class", ".", "for", "Name", "(", "\"", "org", ".", "apache", ".", "harmony", ".", "jpda", ".", "tests", ".", "jdwp", ".", "Object", "Reference", ".", "Invoke", "Method", "Default", "Debuggee", "$", "Test", "Class", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Class", "Not", "Found", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "e", ".", "print", "Stack", "Trace", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "synchronizer", ".", "send", "Message", "(", "JPDADebuggee", "Synchronizer", ".", "SGNL", "_", "READY", ");", "<|nl|>", "<|8-s|>", "log", "Writer", ".", "println", "(", "\"", "Invoke", "Method", "Default", "Debuggee", "\"", ");", "<|nl|>", "<|8-s|>", "synchronizer", ".", "receive", "Message", "Without", "Exception", "(", "\"", "org", ".", "apache", ".", "harmony", ".", "jpda", ".", "tests", ".", "jdwp", ".", "Object", "Reference", ".", "Invoke", "Method", "Default", "Debuggee", "(", "#", "1", ")", "\"", ");", "<|nl|>", "<|8-s|>", "exec", "Method", "(", ");", "<|nl|>", "<|8-s|>", "synchronizer", ".", "receive", "Message", "Without", "Exception", "(", "\"", "org", ".", "apache", ".", "harmony", ".", "jpda", ".", "tests", ".", "jdwp", ".", "Object", "Reference", ".", "Invoke", "Method", "Default", "Debuggee", "(", "#", "2", ")", "\"", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 61, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2761", "comment_id": "62b209f8_2069f0f9", "class_list": ["InvokeMethodDefaultDebuggee", "we", "TestClass"], "func_list": ["void execMethod()", "public void run()", "public static void main(String[] args)"], "prime_var_dic": {}}, {"idx": 83277, "status": "update", "global_index": 13859, "project_name": "android_", "written_on": "2015-01-20 21:57:44", "tufano_target": "private TYPE_8 < TYPE_2 > METHOD_9 ( ) { TYPE_8 < TYPE_2 > VAR_5 = TYPE_9 . METHOD_10 ( ) ; for ( TYPE_2 VAR_2 : TYPE_5 . METHOD_4 ( VAR_1 ) . METHOD_1 ( ) ) { TYPE_7 VAR_3 = TYPE_7 . METHOD_4 ( VAR_2 ) ; if ( VAR_3 != null && VAR_3 . METHOD_7 ( ) ) { VAR_5 . add ( VAR_2 ) ; } } TYPE_10 . METHOD_11 ( VAR_5 , VAR_4 ) ; return VAR_5 ; }", "comment": "Just use ArrayList (of course using java.util.List in the return type.) There is no reason to protect the list from changes.", "tokenized_comment": ["Just", "<|s|>", "use", "<|s|>", "Array", "List", "<|s|>", "(", "of", "<|s|>", "course", "<|s|>", "using", "<|s|>", "java", ".", "util", ".", "List", "<|s|>", "in", "<|s|>", "the", "<|s|>", "return", "<|s|>", "type", ".", ")", "<|s|>", "There", "<|s|>", "is", "<|s|>", "no", "<|s|>", "reason", "<|s|>", "to", "<|s|>", "protect", "<|s|>", "the", "<|s|>", "list", "<|s|>", "from", "<|s|>", "changes", "."], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_1 ) . METHOD_1 ( ) ) ) . METHOD_5 ( new TYPE_6 < TYPE_2 > ( ) { public boolean METHOD_6 ( TYPE_2 VAR_2 ) { TYPE_7 VAR_3 = TYPE_7 . METHOD_4 ( VAR_2 ) ; return VAR_3 != null && VAR_3 . METHOD_7 ( ) ; } } ) . METHOD_8 ( VAR_4 ) ; }", "our_target": "  @NotNull\n  private List<Module> getGradleModules() {\n    List<Module> gradleModules = Lists.newArrayList();\n    for (Module module : ModuleManager.getInstance(myProject).getModules()) {\n      AndroidFacet androidFacet = AndroidFacet.getInstance(module);\n      if (androidFacet != null && androidFacet.isGradleProject()) {\n        gradleModules.add(module);\n      }\n    }\n\n    Collections.sort(gradleModules, ModuleTypeComparator.INSTANCE);\n    return gradleModules;\n", "our_code": "<|startfocus|>\n  private ImmutableList<Module> getModules() {\n    return FluentIterable.from(Arrays.asList(ModuleManager.getInstance(myProject).getModules()))\n      .filter(new Predicate<Module>() {\n        @Override\n        public boolean apply(Module module) {\n          AndroidFacet androidFacet = AndroidFacet.getInstance(module);\n          return androidFacet != null && androidFacet.isGradleProject();\n        }\n      })\n      .toSortedList(ModuleTypeComparator.INSTANCE);\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "Immutable", "List", "<", "Module", ">", "<|s|>", "get", "Modules", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "return", "<|s|>", "Fluent", "Iterable", ".", "from", "(", "Arrays", ".", "as", "List", "(", "Module", "Manager", ".", "get", "Instance", "(", "my", "Project", ")", ".", "get", "Modules", "(", ")", ")", ")", "<|nl|>", "<|4-s|>", "<|2-s|>", ".", "filter", "(", "new", "<|s|>", "Predicate", "<", "Module", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "@", "Override", "<|nl|>", "<|8-s|>", "public", "<|s|>", "boolean", "<|s|>", "apply", "(", "Module", "<|s|>", "module", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "Android", "Facet", "<|s|>", "android", "Facet", "<|s|>", "=", "<|s|>", "Android", "Facet", ".", "get", "Instance", "(", "module", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "android", "Facet", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "android", "Facet", ".", "is", "Gradle", "Project", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", ")", "<|nl|>", "<|4-s|>", "<|2-s|>", ".", "to", "Sorted", "List", "(", "Module", "Type", "Comparator", ".", "INSTANCE", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 244, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_443", "comment_id": "ab202bdf_c8ae6ff1", "class_list": ["BuildVariantView", "NotificationPanel", "BuildVariantItem", "BuildVariantTable", "BuildVariantTableModel", "VariantsCellRenderer", "ModuleTableCell", "NamedArtifactType"], "func_list": ["public BuildVariantView(@NotNull Project project)", "public void actionPerformed(ActionEvent e)", "private void updateComboBoxModel()", "private void updateModulesWithTestArtifact(String artifactType)", "void setUpdater(@NotNull BuildVariantUpdater updater)", "public static BuildVariantView getInstance(@NotNull Project project)", "public void addListener(@NotNull BuildVariantSelectionChangeListener listener)", "public void removeListener(@NotNull BuildVariantSelectionChangeListener listener)", "private void createUIComponents()", "public void projectImportStarted()", "public void createToolWindowContent(@NotNull ToolWindow toolWindow)", "public void updateContents()", "public void run()", "private ImmutableList<Module> getModules()", "public boolean apply(Module module)", "private BuildVariantTable getVariantsTable()", "private static BuildVariantItem[] getVariantNames(@NotNull Module module)", "private static IdeaAndroidProject getAndroidProject(@NotNull Module module)", "public void selectAndScrollTo(@NotNull Module module)", "private void navigateConflicts(boolean forward)", "public int compareTo(@Nullable BuildVariantItem o)", "boolean hasBuildVariantName(@Nullable Object name)", "public String toString()", "Conflict findConflict(int row)", "public boolean isCellEditable(int row, int column)", "void setLoading(boolean loading)", "private void clearContents()", "void setModel(@NotNull List<Object[]> rows, @NotNull List<BuildVariantItem[]> variantNamesPerRow)", "private void addBuildVariants(@NotNull List<BuildVariantItem[]> variantNamesPerRow)", "public void itemStateChanged(ItemEvent e)", "public TableCellRenderer getCellRenderer(int row, int column)", "public TableCellEditor getCellEditor(int row, int column)", "void buildVariantSelected(@NotNull String moduleName, @NotNull String variantName)", "private void invokeListeners()", "public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)", "public String getToolTipText(MouseEvent e)", "private static JButton createButton(@NotNull Icon icon)", "private static String getToolTipTextIfUnderX(@NotNull JComponent c, int x)", "public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)", "private void setUpComponent(@NotNull JTable table, @Nullable Object value, boolean isSelected, boolean hasFocus, int row)", "public Object getCellEditorValue()", "public NamedArtifactType(@NotNull String artifactName, @NotNull String humanReadableDescription)", "public BuildVariantView(@NotNull Project project)", "public void actionPerformed(ActionEvent e)", "public void projectImportStarted()", "Conflict findConflict(int row)", "public void actionPerformed(ActionEvent e)"], "prime_var_dic": {}}, {"idx": 80137, "status": "update", "global_index": 8467, "project_name": "android_", "written_on": "2015-07-14 12:45:47", "tufano_target": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 position = VAR_2 . get ( VAR_1 ) ; if ( position != null ) { TYPE_1 < TYPE_2 > VAR_3 = new TYPE_4 < TYPE_2 > ( ) ; VAR_3 . METHOD_2 ( VAR_4 [ ( position + 1 ) % VAR_5 ] . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_4 [ ( position - 1 + VAR_5 ) % VAR_5 ] . METHOD_3 ( ) ) ; return VAR_3 ; } return null ; }", "comment": "Remove the \"else {\"", "tokenized_comment": ["Remove", "<|s|>", "the", "<|s|>", "\"", "else", "<|s|>", "{", "\""], "tufano_code": "public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 position = VAR_2 . get ( VAR_1 ) ; if ( position != null ) { TYPE_1 < TYPE_2 > VAR_3 = new TYPE_4 < TYPE_2 > ( ) ; VAR_3 . METHOD_2 ( VAR_4 [ ( position + 1 ) % VAR_5 ] . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_4 [ ( position - 1 + VAR_5 ) % VAR_5 ] . METHOD_3 ( ) ) ; return VAR_3 ; } else { return null ; } }", "our_target": "    return null;\n", "our_code": "  public List<Color> getAssociatedAccents(Color primaryColor) {\n    Integer position = positionMap.get(primaryColor);\n    if (position != null) {\n      List<Color> accentList = new ArrayList<Color>();\n      accentList.addAll(primaryAccentList[(position + 1) % TOTAL_COLORS].getAccentColorsList());\n      accentList.addAll(primaryAccentList[(position - 1 + TOTAL_COLORS) % TOTAL_COLORS].getAccentColorsList());\n      return accentList;\n    }\n<|startfocus|>\n    else {\n      return null;\n    }\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "List", "<", "Color", ">", "<|s|>", "get", "Associated", "Accents", "(", "Color", "<|s|>", "primary", "Color", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Integer", "<|s|>", "position", "<|s|>", "=", "<|s|>", "position", "Map", ".", "get", "(", "primary", "Color", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "position", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "List", "<", "Color", ">", "<|s|>", "accent", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "Color", ">", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "accent", "List", ".", "add", "All", "(", "primary", "Accent", "List", "[", "(", "position", "<|s|>", "+", "<|s|>", "1", ")", "<|s|>", "%", "<|s|>", "TOTAL", "_", "COLORS", "]", ".", "get", "Accent", "Colors", "List", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "accent", "List", ".", "add", "All", "(", "primary", "Accent", "List", "[", "(", "position", "<|s|>", "-", "<|s|>", "1", "<|s|>", "+", "<|s|>", "TOTAL", "_", "COLORS", ")", "<|s|>", "%", "<|s|>", "TOTAL", "_", "COLORS", "]", ".", "get", "Accent", "Colors", "List", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "accent", "List", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 90, "base_patch_number": 16, "changed_patch_number": 17, "code_file_name": "android_277", "comment_id": "b8a6d6d3_bd733f91", "class_list": ["AccentPaletteModel"], "func_list": ["public AccentPaletteModel()", "private void insertPrimaryAccent(PrimaryAccentPair primaryAccentPair)", "public boolean isMaterialPrimary(Color primaryColor)", "public List<Color> getAssociatedAccents(Color primaryColor)", "public List<Color> getMonocromaticAccents(Color primaryColor)", "public List<Color> getComplementaryAccents(Color primaryColor)", "public List<Color> getTriadAccents(Color primaryColor)"], "prime_var_dic": {"int": 1, "PrimaryAccentPair": 1}}, {"idx": 49828, "status": "update", "global_index": 10480, "project_name": "android_", "written_on": "2015-04-30 20:43:35", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; VAR_1 . add ( TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , new TYPE_5 ( VAR_6 ) ) . METHOD_5 ( ) ) ; TYPE_6 VAR_3 = new TYPE_6 ( VAR_4 , null , VAR_1 ) ; VAR_3 . init ( ) ; if ( VAR_3 . METHOD_6 ( ) ) { METHOD_7 ( VAR_5 ) ; } }", "comment": "Downloading sources does not work. I made it work with this change:\n\n  MajorRevision revision = new MajorRevision(FullRevision.NOT_SPECIFIED);\n  requested.add(PkgDesc.Builder.newSource(platform.getApiVersion(), revision).create());", "tokenized_comment": ["Downloading", "<|s|>", "sources", "<|s|>", "does", "<|s|>", "not", "<|s|>", "work", ".", "<|s|>", "I", "<|s|>", "made", "<|s|>", "it", "<|s|>", "work", "<|s|>", "with", "<|s|>", "this", "<|s|>", "change", ":", "<|nl|>", "<|nl|>", "<|2-s|>", "Major", "Revision", "<|s|>", "revision", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Major", "Revision", "(", "Full", "Revision", ".", "NOT", "_", "SPECIFIED", ");", "<|nl|>", "<|2-s|>", "requested", ".", "add", "(", "Pkg", "Desc", ".", "Builder", ".", "new", "Source", "(", "platform", ".", "get", "Api", "Version", "(", ")", ",", "<|s|>", "revision", ")", ".", "create", "(", ")", ");"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; VAR_1 . add ( TYPE_4 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , new TYPE_5 ( 1 ) ) . METHOD_5 ( ) ) ; TYPE_6 VAR_3 = new TYPE_6 ( VAR_4 , null , VAR_1 ) ; VAR_3 . init ( ) ; if ( VAR_3 . METHOD_6 ( ) ) { METHOD_7 ( VAR_5 ) ; } }", "our_target": "          requested.add(PkgDesc.Builder.newSource(platform.getApiVersion(), new MajorRevision(FullRevision.NOT_SPECIFIED)).create());\n", "our_code": "        public void run() {\n          List<IPkgDesc> requested = Lists.newArrayList();\n<|startfocus|>\n          requested.add(PkgDesc.Builder.newSource(platform.getApiVersion(), new MajorRevision(1)).create());\n<|endfocus|>\n\n          SdkQuickfixWizard wizard = new SdkQuickfixWizard(myProject, null, requested);\n          wizard.init();\n          if (wizard.showAndGet()) {\n            updateSdkSourceRoot(sdk);\n          }\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "List", "<", "IPkg", "Desc", ">", "<|s|>", "requested", "<|s|>", "=", "<|s|>", "Lists", ".", "new", "Array", "List", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "requested", ".", "add", "(", "Pkg", "Desc", ".", "Builder", ".", "new", "Source", "(", "platform", ".", "get", "Api", "Version", "(", ")", ",", "<|s|>", "new", "<|s|>", "Major", "Revision", "(", "1", ")", ")", ".", "create", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "Sdk", "Quickfix", "Wizard", "<|s|>", "wizard", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Sdk", "Quickfix", "Wizard", "(", "my", "Project", ",", "<|s|>", "null", ",", "<|s|>", "requested", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "wizard", ".", "init", "(", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "if", "<|s|>", "(", "wizard", ".", "show", "And", "Get", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "update", "Sdk", "Source", "Root", "(", "sdk", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 101, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_172", "comment_id": "70f8f2fa_b01cb4ec", "class_list": ["they", "AttachAndroidSdkSourcesNotificationProvider", "file,"], "func_list": ["public AttachAndroidSdkSourcesNotificationProvider(@NotNull Project project, @NotNull final EditorNotifications notifications)", "public void rootsChanged(ModuleRootEvent event)", "public Key<EditorNotificationPanel> getKey()", "public EditorNotificationPanel createNotificationPanel(@NotNull final VirtualFile file, @NotNull FileEditor fileEditor)", "public void run()", "public JdkOrderEntry findAndroidSdkEntryForFile(@NotNull VirtualFile file)", "public AttachAndroidSdkSourcesNotificationProvider(@NotNull Project project, @NotNull final EditorNotifications notifications)", "public void rootsChanged(ModuleRootEvent event)", "public Key<EditorNotificationPanel> getKey()", "public EditorNotificationPanel createNotificationPanel(@NotNull final VirtualFile file, @NotNull FileEditor fileEditor)", "public void run()", "public JdkOrderEntry findAndroidSdkEntryForFile(@NotNull VirtualFile file)", "public EditorNotificationPanel createNotificationPanel(@NotNull final VirtualFile file, @NotNull FileEditor fileEditor)", "public void run()"], "prime_var_dic": {}}, {"idx": 90553, "status": "update", "global_index": 8712, "project_name": "android_", "written_on": "2015-07-25 01:41:04", "tufano_target": "public static TYPE_1 METHOD_1 ( String VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 ; TYPE_1 VAR_5 ; try { VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_5 = VAR_4 . METHOD_4 ( new TYPE_5 ( new TYPE_6 ( VAR_1 ) ) ) ; } catch ( TYPE_7 VAR_6 ) { if ( VAR_2 != null ) { VAR_2 . append ( STRING_1 ) . append ( VAR_6 . METHOD_5 ( ) ) ; } return null ; } return VAR_5 ; }", "comment": "static?", "tokenized_comment": ["static", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( String VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 ; TYPE_1 VAR_5 ; try { VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_5 = VAR_4 . METHOD_4 ( new TYPE_5 ( new TYPE_6 ( VAR_1 ) ) ) ; } catch ( TYPE_7 VAR_6 ) { if ( VAR_2 != null ) { VAR_2 . append ( STRING_1 ) . append ( VAR_6 . METHOD_5 ( ) ) ; } return null ; } return VAR_5 ; }", "our_target": "  public static Document parseVdStringIntoDocument(@NotNull String xmlFileContent,\n                                                   @Nullable StringBuilder errorLog) {\n", "our_code": "<|startfocus|>\n  public Document parseVdStringIntoDocument(@NotNull String xmlFileContent,\n                                            @Nullable StringBuilder errorLog) {\n<|endfocus|>\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db;\n    Document document;\n    try {\n      db = dbf.newDocumentBuilder();\n      document = db.parse(new InputSource(new StringReader(xmlFileContent)));\n    }\n    catch (Exception e) {\n      if (errorLog != null) {\n        errorLog.append(\"Exception while parsing XML file:\\n\").append(e.getMessage());\n      }\n      return null;\n    }\n    return document;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Document", "<|s|>", "parse", "Vd", "String", "Into", "Document", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "xml", "File", "Content", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|12-s|>", "@", "Nullable", "<|s|>", "String", "Builder", "<|s|>", "error", "Log", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Document", "Builder", "Factory", "<|s|>", "dbf", "<|s|>", "=", "<|s|>", "Document", "Builder", "Factory", ".", "new", "Instance", "(", ");", "<|nl|>", "<|4-s|>", "Document", "Builder", "<|s|>", "db", ";", "<|nl|>", "<|4-s|>", "Document", "<|s|>", "document", ";", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "db", "<|s|>", "=", "<|s|>", "dbf", ".", "new", "Document", "Builder", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "document", "<|s|>", "=", "<|s|>", "db", ".", "parse", "(", "new", "<|s|>", "Input", "Source", "(", "new", "<|s|>", "String", "Reader", "(", "xml", "File", "Content", ")", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "error", "Log", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "error", "Log", ".", "append", "(", "\"", "Exception", "<|s|>", "while", "<|s|>", "parsing", "<|s|>", "XML", "<|s|>", "file", ":\\", "n", "\"", ")", ".", "append", "(", "e", ".", "get", "Message", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "document", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 594, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_487", "comment_id": "6d83be1d_f13fb73d", "class_list": ["AssetStudioAssetGenerator", "ImageGeneratorException"], "func_list": ["public ImageGeneratorException(String message)", "public String getDisplayName()", "public String toString()", "public String getDefaultNameFormat()", "public boolean needsForegroundScaling()", "public boolean needsShape()", "public boolean needsColors()", "public boolean needsEffects()", "public boolean needsTheme()", "public AssetStudioAssetGenerator(AssetStudioContext context)", "public BufferedImage loadImageResource(@NotNull final String path)", "public void outputImagesIntoVariantRoot(@NotNull File variantDir)", "public void outputImagesIntoDefaultVariant(@NotNull File contentRoot)", "public Document parseVdStringIntoDocument(@NotNull String xmlFileContent,", "private BufferedImage getSvgImage(@NotNull String path, @NotNull StringBuilder errorLog,", "private String overrideXmlFileContent(@NotNull Document vdDocument,", "private static String readXmlFile(@NotNull String path)", "public void outputXmlToRes(File targetResDir)", "private static String generateVectorXml(@NotNull File inputSvgFile, StringBuilder error)", "protected static BufferedImage crop(@NotNull BufferedImage sourceImage)", "public ImageGeneratorException(String message)"], "prime_var_dic": {}}, {"idx": 89111, "status": "update", "global_index": 19648, "project_name": "android_", "written_on": "2012-07-19 23:09:48", "tufano_target": "public boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( false ) ; for ( int VAR_2 = 0 ; VAR_2 < INT_1 ; VAR_2 ++ ) { if ( VAR_3 == null ) { TYPE_1 . METHOD_3 ( VAR_4 , STRING_1 ) ; break ; } try { return VAR_3 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 VAR_5 ) { if ( VAR_2 == 0 ) METHOD_2 ( true ) ; } } TYPE_1 . METHOD_3 ( VAR_4 , STRING_2 + ( VAR_1 ? STRING_3 : STRING_4 ) ) ; return false ; }", "comment": "shouldn't this be a different type with potentially larger buffer sizes?  HSPAP has 10x the download bandwidth of HSPA, correct?", "tokenized_comment": ["shouldn", "'", "t", "<|s|>", "this", "<|s|>", "be", "<|s|>", "a", "<|s|>", "different", "<|s|>", "type", "<|s|>", "with", "<|s|>", "potentially", "<|s|>", "larger", "<|s|>", "buffer", "<|s|>", "sizes", "?", "<|2-s|>", "HSPAP", "<|s|>", "has", "<|s|>", "10", "x", "<|s|>", "the", "<|s|>", "download", "<|s|>", "bandwidth", "<|s|>", "of", "<|s|>", "HSPA", ",", "<|s|>", "correct", "?"], "tufano_code": "public boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( false ) ; for ( int VAR_2 = 0 ; VAR_2 < INT_1 ; VAR_2 ++ ) { if ( VAR_3 == null ) { TYPE_1 . METHOD_3 ( VAR_4 , STRING_1 ) ; break ; } try { return VAR_3 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 VAR_5 ) { if ( VAR_2 == 0 ) METHOD_2 ( true ) ; } } TYPE_1 . METHOD_3 ( VAR_4 , STRING_2 + ( VAR_1 ? STRING_3 : STRING_4 ) ) ; return false ; }", "our_target": "\n", "our_code": "    public boolean setRadio(boolean turnOn) {\n        getPhoneService(false);\n        /*\n         * If the phone process has crashed in the past, we'll get a\n         * RemoteException and need to re-reference the service.\n         */\n        for (int retry = 0; retry < 2; retry++) {\n            if (mPhoneService == null) {\n                Log.w(TAG,\n                    \"Ignoring mobile radio request because could not acquire PhoneService\");\n                break;\n            }\n<|startfocus|>\n            \n<|endfocus|>\n            try {\n                return mPhoneService.setRadio(turnOn);\n            } catch (RemoteException e) {\n                if (retry == 0) getPhoneService(true);\n            }\n        }\n\n        Log.w(TAG, \"Could not set radio power to \" + (turnOn ? \"on\" : \"off\"));\n        return false;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "set", "Radio", "(", "boolean", "<|s|>", "turn", "On", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "get", "Phone", "Service", "(", "false", ");", "<|nl|>", "<|8-s|>", "/*", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "If", "<|s|>", "the", "<|s|>", "phone", "<|s|>", "process", "<|s|>", "has", "<|s|>", "crashed", "<|s|>", "in", "<|s|>", "the", "<|s|>", "past", ",", "<|s|>", "we", "'", "ll", "<|s|>", "get", "<|s|>", "a", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "Remote", "Exception", "<|s|>", "and", "<|s|>", "need", "<|s|>", "to", "<|s|>", "re", "-", "reference", "<|s|>", "the", "<|s|>", "service", ".", "<|nl|>", "<|8-s|>", "<|s|>", "*/", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "retry", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "retry", "<|s|>", "<", "<|s|>", "2", ";", "<|s|>", "retry", "++", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Phone", "Service", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Log", ".", "w", "(", "TAG", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "Ignoring", "<|s|>", "mobile", "<|s|>", "radio", "<|s|>", "request", "<|s|>", "because", "<|s|>", "could", "<|s|>", "not", "<|s|>", "acquire", "<|s|>", "Phone", "Service", "\"", ");", "<|nl|>", "<|16-s|>", "break", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "m", "Phone", "Service", ".", "set", "Radio", "(", "turn", "On", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Remote", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "retry", "<|s|>", "==", "<|s|>", "0", ")", "<|s|>", "get", "Phone", "Service", "(", "true", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "Log", ".", "w", "(", "TAG", ",", "<|s|>", "\"", "Could", "<|s|>", "not", "<|s|>", "set", "<|s|>", "radio", "<|s|>", "power", "<|s|>", "to", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "(", "turn", "On", "<|s|>", "?", "<|s|>", "\"", "on", "\"", "<|s|>", ":", "<|s|>", "\"", "off", "\"", ")", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 330, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1369", "comment_id": "AAAHsn%2F%2F%2F%2Fc%3D", "class_list": ["MobileDataStateTracker", "MobileDataStateReceiver"], "func_list": ["public MobileDataStateTracker(Context context, Handler target)", "public void startMonitoring()", "public void onReceive(Context context, Intent intent)", "public void addPrivateRoutes()", "public void removePrivateRoutes()", "public void removeDefaultRoute()", "public void restoreDefaultRoute()", "private void getPhoneService(boolean forceRefresh)", "public boolean isAvailable()", "public String[] getNameServers()", "public String getTcpBufferSizesPropName()", "public boolean teardown()", "public boolean reconnect()", "public boolean setRadio(boolean turnOn)", "public int startUsingNetworkFeature(String feature, int callingPid, int callingUid)", "public int stopUsingNetworkFeature(String feature, int callingPid, int callingUid)", "public boolean requestRouteToHost(int hostAddress)", "public String toString()", "private void setupDnsProperties()", "private int setEnableApn(String apnType, boolean enable)"], "prime_var_dic": {}}, {"idx": 10957, "status": "update", "global_index": 11063, "project_name": "android_", "written_on": "2015-06-03 15:14:53", "tufano_target": "private int METHOD_1 ( int VAR_1 ) { final int VAR_2 = 0 ; int [ ] VAR_3 = TYPE_1 . METHOD_2 ( ) ; for ( int VAR_4 : VAR_3 ) { TYPE_1 VAR_5 = TYPE_1 . METHOD_3 ( VAR_4 ) ; if ( VAR_5 . METHOD_5 ( VAR_1 ) ) { return VAR_4 ; } } return VAR_2 ; }", "comment": "nit: inputDev.supportsSource(inputSource)", "tokenized_comment": ["nit", ":", "<|s|>", "input", "Dev", ".", "supports", "Source", "(", "input", "Source", ")"], "tufano_code": "private int METHOD_1 ( int VAR_1 ) { final int VAR_2 = 0 ; int [ ] VAR_3 = TYPE_1 . METHOD_2 ( ) ; for ( int VAR_4 : VAR_3 ) { TYPE_1 VAR_5 = TYPE_1 . METHOD_3 ( VAR_4 ) ; if ( ( VAR_5 . METHOD_4 ( ) & VAR_1 ) == VAR_1 ) { return VAR_4 ; } } return VAR_2 ; }", "our_target": "            if (inputDev.supportsSource(inputSource)) {\n", "our_code": "    private int getInputDeviceId(int inputSource) {\n        final int DEFAULT_DEVICE_ID = 0;\n        int[] devIds = InputDevice.getDeviceIds();\n        for (int devId : devIds) {\n            InputDevice inputDev = InputDevice.getDevice(devId);\n<|startfocus|>\n            if ((inputDev.getSources() & inputSource) == inputSource) {\n<|endfocus|>\n                return devId;\n            }\n        }\n        return DEFAULT_DEVICE_ID;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "int", "<|s|>", "get", "Input", "Device", "Id", "(", "int", "<|s|>", "input", "Source", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "int", "<|s|>", "DEFAULT", "_", "DEVICE", "_", "ID", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|8-s|>", "int", "[", "]", "<|s|>", "dev", "Ids", "<|s|>", "=", "<|s|>", "Input", "Device", ".", "get", "Device", "Ids", "(", ");", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "dev", "Id", "<|s|>", ":", "<|s|>", "dev", "Ids", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Input", "Device", "<|s|>", "input", "Dev", "<|s|>", "=", "<|s|>", "Input", "Device", ".", "get", "Device", "(", "dev", "Id", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "(", "input", "Dev", ".", "get", "Sources", "(", ")", "<|s|>", "&", "<|s|>", "input", "Source", ")", "<|s|>", "==", "<|s|>", "input", "Source", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "return", "<|s|>", "dev", "Id", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "DEFAULT", "_", "DEVICE", "_", "ID", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 242, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1235", "comment_id": "d9ae2c65_fba1132d", "class_list": ["Input"], "func_list": ["public static void main(String[] args)", "private void run(String[] args)", "private void sendText(int source, String text)", "private void sendKeyEvent(int inputSource, int keyCode, boolean longpress)", "private void sendTap(int inputSource, float x, float y)", "private void sendSwipe(int inputSource, float x1, float y1, float x2, float y2, int duration)", "private void sendMove(int inputSource, float dx, float dy)", "private void injectKeyEvent(KeyEvent event)", "private int getInputDeviceId(int inputSource)", "private void injectMotionEvent(int inputSource, int action, long when, float x, float y, float pressure)", "private void showUsage()"], "prime_var_dic": {"String": 1, "of": 1}}, {"idx": 1706, "status": "update", "global_index": 10037, "project_name": "android_", "written_on": "2015-04-20 13:44:14", "tufano_target": "private static boolean METHOD_5 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) { TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( VAR_4 . METHOD_4 ( ) . equals ( STRING_1 ) ) { return true ; } } return false ; }", "comment": "Ditto", "tokenized_comment": ["Ditto"], "tufano_code": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) { TYPE_2 VAR_4 = VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( VAR_4 . METHOD_4 ( ) . equals ( STRING_1 ) ) { return true ; } } return false ; }", "our_target": "    private static boolean isBrowsable(Element e) {\n", "our_code": "<|startfocus|>\n    private boolean checkBrowsable(Element e) {\n<|endfocus|>\n        if (e.hasAttributeNS(ANDROID_URI, ATTRIBUTE_NAME)) {\n            Attr attr = e.getAttributeNodeNS(ANDROID_URI, ATTRIBUTE_NAME);\n            if (attr.getNodeValue().equals(\"android.intent.category.BROWSABLE\")) {\n                return true;\n            }\n        }\n        return false;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "check", "Browsable", "(", "Element", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "e", ".", "has", "Attribute", "NS", "(", "ANDROID", "_", "URI", ",", "<|s|>", "ATTRIBUTE", "_", "NAME", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Attr", "<|s|>", "attr", "<|s|>", "=", "<|s|>", "e", ".", "get", "Attribute", "Node", "NS", "(", "ANDROID", "_", "URI", ",", "<|s|>", "ATTRIBUTE", "_", "NAME", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "attr", ".", "get", "Node", "Value", "(", ")", ".", "equals", "(", "\"", "android", ".", "intent", ".", "category", ".", "BROWSABLE", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 160, "base_patch_number": 7, "changed_patch_number": 9, "code_file_name": "android_2891", "comment_id": "d0435e7f_e15e00c4", "class_list": ["AppIndexingApiDetector"], "func_list": ["public AppIndexingApiDetector()", "public Collection<String> getApplicableElements()", "public void beforeCheckProject(@NonNull Context context)", "public void afterCheckProject(@NonNull Context context)", "public void visitElement(@NonNull XmlContext context, @NonNull Element element)", "private boolean checkActionView(Node node)", "private boolean checkBrowsable(Element e)", "private void checkData(XmlContext context, Element element)"], "prime_var_dic": {"AppIndexing": 1}}, {"idx": 79990, "status": "update", "global_index": 10857, "project_name": "android_", "written_on": "2015-05-21 22:40:47", "tufano_target": "private byte [ ] METHOD_6 ( int VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; assert VAR_3 != VAR_4 ; byte [ ] VAR_5 = new byte [ TYPE_1 . min ( VAR_1 , VAR_6 ) * VAR_3 . METHOD_4 ( ) ] ; METHOD_2 ( ) . METHOD_5 ( VAR_5 ) ; return VAR_5 ; }", "comment": "asByteArray should work the same as asCharArray. They are name the same but they have different meaning. This one should assert that mType == Type.BYTE and return the byte array. elementCount should be called length.\n\nIf you want to have a \"asRawBytes\" private function that just reads a buffer, that's fine, but have them separate", "tokenized_comment": ["as", "Byte", "Array", "<|s|>", "should", "<|s|>", "work", "<|s|>", "the", "<|s|>", "same", "<|s|>", "as", "<|s|>", "as", "Char", "Array", ".", "<|s|>", "They", "<|s|>", "are", "<|s|>", "name", "<|s|>", "the", "<|s|>", "same", "<|s|>", "but", "<|s|>", "they", "<|s|>", "have", "<|s|>", "different", "<|s|>", "meaning", ".", "<|s|>", "This", "<|s|>", "one", "<|s|>", "should", "<|s|>", "assert", "<|s|>", "that", "<|s|>", "m", "Type", "<|s|>", "==", "<|s|>", "Type", ".", "BYTE", "<|s|>", "and", "<|s|>", "return", "<|s|>", "the", "<|s|>", "byte", "<|s|>", "array", ".", "<|s|>", "element", "Count", "<|s|>", "should", "<|s|>", "be", "<|s|>", "called", "<|s|>", "length", ".", "<|nl|>", "<|nl|>", "If", "<|s|>", "you", "<|s|>", "want", "<|s|>", "to", "<|s|>", "have", "<|s|>", "a", "<|s|>", "\"", "as", "Raw", "Bytes", "\"", "<|s|>", "private", "<|s|>", "function", "<|s|>", "that", "<|s|>", "just", "<|s|>", "reads", "<|s|>", "a", "<|s|>", "buffer", ",", "<|s|>", "that", "'", "s", "<|s|>", "fine", ",", "<|s|>", "but", "<|s|>", "have", "<|s|>", "them", "<|s|>", "separate"], "tufano_code": "public byte [ ] METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; assert VAR_3 != VAR_4 ; byte [ ] VAR_5 = new byte [ TYPE_1 . min ( VAR_1 , VAR_6 ) * VAR_3 . METHOD_4 ( ) ] ; METHOD_2 ( ) . METHOD_5 ( VAR_5 ) ; return VAR_5 ; }", "our_target": "    private byte[] asRawByteArray(int elementCount) {\n", "our_code": "<|startfocus|>\n    public byte[] asByteArray(int elementCount) {\n<|endfocus|>\n        getBuffer().setPosition(mValuesOffset);\n        assert mType != Type.OBJECT;\n        byte[] bytes = new byte[Math.min(elementCount, mLength) * mType.getSize()];\n        getBuffer().read(bytes);\n        return bytes;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "byte", "[", "]", "<|s|>", "as", "Byte", "Array", "(", "int", "<|s|>", "element", "Count", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "get", "Buffer", "(", ")", ".", "set", "Position", "(", "m", "Values", "Offset", ");", "<|nl|>", "<|8-s|>", "assert", "<|s|>", "m", "Type", "<|s|>", "!=", "<|s|>", "Type", ".", "OBJECT", ";", "<|nl|>", "<|8-s|>", "byte", "[", "]", "<|s|>", "bytes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "byte", "[", "Math", ".", "min", "(", "element", "Count", ",", "<|s|>", "m", "Length", ")", "<|s|>", "*", "<|s|>", "m", "Type", ".", "get", "Size", "(", ")", "];", "<|nl|>", "<|8-s|>", "get", "Buffer", "(", ")", ".", "read", "(", "bytes", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "bytes", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 53, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3599", "comment_id": "0d031dc0_a1a804dc", "class_list": ["ArrayInstance"], "func_list": ["public ArrayInstance(long id, @NonNull StackTrace stack, @NonNull Type type, int length,", "public Object[] getValues()", "public byte[] asByteArray(int elementCount)", "public char[] asCharArray(int length)", "public ClassObj getClassObj()", "public Type getArrayType()"], "prime_var_dic": {"mType": 1, "mLength": 1, "mValuesOffset": 1}}, {"idx": 39953, "status": "update", "global_index": 14268, "project_name": "android_", "written_on": "2014-02-19 18:30:55", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == null ) { return null ; } TYPE_1 VAR_3 = METHOD_4 ( VAR_2 ) ; if ( ! VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( VAR_4 ) ; VAR_3 = null ; } return VAR_3 ; }", "comment": "suggestion: For code that we start modifying, we'd like to use the nullability annotations. It would be great if you could annotate these methods as @NonNull or @Nullable depending on the return values.\n\nThere are also @GuardedBy annotations that make it explicit whether this method should be guarded by a lock when called. You could do that as well.\n\nLastly, depending on what you are trying to do, you could also add asserts:\n  assert Thread.holdsLock(EmulatorConsole.class)\n  assert Thread.holdsLock(this);\nThese aren't used in ddmlib, but it might help you.", "tokenized_comment": ["suggestion", ":", "<|s|>", "For", "<|s|>", "code", "<|s|>", "that", "<|s|>", "we", "<|s|>", "start", "<|s|>", "modifying", ",", "<|s|>", "we", "'", "d", "<|s|>", "like", "<|s|>", "to", "<|s|>", "use", "<|s|>", "the", "<|s|>", "nullability", "<|s|>", "annotations", ".", "<|s|>", "It", "<|s|>", "would", "<|s|>", "be", "<|s|>", "great", "<|s|>", "if", "<|s|>", "you", "<|s|>", "could", "<|s|>", "annotate", "<|s|>", "these", "<|s|>", "methods", "<|s|>", "as", "<|s|>", "@", "Non", "Null", "<|s|>", "or", "<|s|>", "@", "Nullable", "<|s|>", "depending", "<|s|>", "on", "<|s|>", "the", "<|s|>", "return", "<|s|>", "values", ".", "<|nl|>", "<|nl|>", "There", "<|s|>", "are", "<|s|>", "also", "<|s|>", "@", "Guarded", "By", "<|s|>", "annotations", "<|s|>", "that", "<|s|>", "make", "<|s|>", "it", "<|s|>", "explicit", "<|s|>", "whether", "<|s|>", "this", "<|s|>", "method", "<|s|>", "should", "<|s|>", "be", "<|s|>", "guarded", "<|s|>", "by", "<|s|>", "a", "<|s|>", "lock", "<|s|>", "when", "<|s|>", "called", ".", "<|s|>", "You", "<|s|>", "could", "<|s|>", "do", "<|s|>", "that", "<|s|>", "as", "<|s|>", "well", ".", "<|nl|>", "<|nl|>", "Lastly", ",", "<|s|>", "depending", "<|s|>", "on", "<|s|>", "what", "<|s|>", "you", "<|s|>", "are", "<|s|>", "trying", "<|s|>", "to", "<|s|>", "do", ",", "<|s|>", "you", "<|s|>", "could", "<|s|>", "also", "<|s|>", "add", "<|s|>", "asserts", ":", "<|nl|>", "<|2-s|>", "assert", "<|s|>", "Thread", ".", "holds", "Lock", "(", "Emulator", "Console", ".", "class", ")", "<|nl|>", "<|2-s|>", "assert", "<|s|>", "Thread", ".", "holds", "Lock", "(", "this", ");", "<|nl|>", "These", "<|s|>", "aren", "'", "t", "<|s|>", "used", "<|s|>", "in", "<|s|>", "ddmlib", ",", "<|s|>", "but", "<|s|>", "it", "<|s|>", "might", "<|s|>", "help", "<|s|>", "you", "."], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == null ) { return null ; } TYPE_1 VAR_3 = METHOD_4 ( VAR_2 ) ; if ( ! VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( VAR_4 ) ; VAR_3 = null ; } return VAR_3 ; }", "our_target": "    public static @Nullable EmulatorConsole getConsole(IDevice d) {\n", "our_code": "<|startfocus|>\n    public static EmulatorConsole getConsole(IDevice d) {\n<|endfocus|>\n        // we need to make sure that the device is an emulator\n        // get the port number. This is the console port.\n        Integer port = getEmulatorPort(d.getSerialNumber());\n        if (port == null) {\n            return null;\n        }\n\n        EmulatorConsole console = retrieveConsole(port);\n\n        if (!console.checkConnection()) {\n            removeConsole(console.mPort);\n            console = null;\n        }\n\n        return console;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "static", "<|s|>", "Emulator", "Console", "<|s|>", "get", "Console", "(", "IDevice", "<|s|>", "d", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "we", "<|s|>", "need", "<|s|>", "to", "<|s|>", "make", "<|s|>", "sure", "<|s|>", "that", "<|s|>", "the", "<|s|>", "device", "<|s|>", "is", "<|s|>", "an", "<|s|>", "emulator", "<|nl|>", "<|8-s|>", "//", "<|s|>", "get", "<|s|>", "the", "<|s|>", "port", "<|s|>", "number", ".", "<|s|>", "This", "<|s|>", "is", "<|s|>", "the", "<|s|>", "console", "<|s|>", "port", ".", "<|nl|>", "<|8-s|>", "Integer", "<|s|>", "port", "<|s|>", "=", "<|s|>", "get", "Emulator", "Port", "(", "d", ".", "get", "Serial", "Number", "(", ")", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "port", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "Emulator", "Console", "<|s|>", "console", "<|s|>", "=", "<|s|>", "retrieve", "Console", "(", "port", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "console", ".", "check", "Connection", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "remove", "Console", "(", "console", ".", "m", "Port", ");", "<|nl|>", "<|12-s|>", "console", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "console", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 204, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1623", "comment_id": "0ff0510e_6623a4b9", "class_list": ["EmulatorConsole", "*/", "GsmStatus", "*/", "NetworkStatus"], "func_list": ["public static GsmMode getEnum(String tag)", "public String getTag()", "public static EmulatorConsole getConsole(IDevice d)", "public static Integer getEmulatorPort(String serialNumber)", "private static EmulatorConsole retrieveConsole(int port)", "private static void removeConsole(int port)", "private EmulatorConsole(int port)", "private boolean sendCommand(String command)", "private String processCommand(String command)", "private String[] readLines()", "private boolean endsWithOK(int currentPosition)", "private boolean lastLineIsKO(int currentPosition)", "private boolean isValid(String[] result)", "private int getLatencyIndex(String value)", "private int getSpeedIndex(String value)", "public static GsmMode getEnum(String tag)", "public String getTag()", "public static EmulatorConsole getConsole(IDevice d)", "public static Integer getEmulatorPort(String serialNumber)", "private static EmulatorConsole retrieveConsole(int port)", "private static void removeConsole(int port)", "private EmulatorConsole(int port)", "private boolean sendCommand(String command)", "private String processCommand(String command)", "private String[] readLines()", "private boolean endsWithOK(int currentPosition)", "private boolean lastLineIsKO(int currentPosition)", "private boolean isValid(String[] result)", "private int getLatencyIndex(String value)", "private int getSpeedIndex(String value)", "public static GsmMode getEnum(String tag)", "public String getTag()", "public static EmulatorConsole getConsole(IDevice d)", "public static Integer getEmulatorPort(String serialNumber)", "private static EmulatorConsole retrieveConsole(int port)", "private static void removeConsole(int port)", "private EmulatorConsole(int port)", "private boolean sendCommand(String command)", "private String processCommand(String command)", "private String[] readLines()", "private boolean endsWithOK(int currentPosition)", "private boolean lastLineIsKO(int currentPosition)", "private boolean isValid(String[] result)", "private int getLatencyIndex(String value)", "private int getSpeedIndex(String value)"], "prime_var_dic": {"NetworkStatus": 1}}, {"idx": 94124, "status": "update", "global_index": 11575, "project_name": "android_", "written_on": "2014-03-19 16:53:15", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == VAR_3 ) { TYPE_2 intent = new TYPE_2 ( VAR_4 ) ; intent . METHOD_2 ( VAR_5 ) ; final TYPE_3 VAR_6 = getIntent ( ) . METHOD_6 ( VAR_7 ) ; intent . METHOD_7 ( VAR_7 , VAR_6 ) ; METHOD_4 ( intent ) ; } METHOD_5 ( ) ; }", "comment": "instead of copying the entire intent like this, could you only copy the one extra needed?\n\nthis would match the existing code in MediaFormat.java in Settings:\n\n                // Transfer the storage volume to the new intent\n                final StorageVolume storageVolume = getIntent().getParcelableExtra(\n                        StorageVolume.EXTRA_STORAGE_VOLUME);\n                intent.putExtra(StorageVolume.EXTRA_STORAGE_VOLUME, storageVolume);", "tokenized_comment": ["instead", "<|s|>", "of", "<|s|>", "copying", "<|s|>", "the", "<|s|>", "entire", "<|s|>", "intent", "<|s|>", "like", "<|s|>", "this", ",", "<|s|>", "could", "<|s|>", "you", "<|s|>", "only", "<|s|>", "copy", "<|s|>", "the", "<|s|>", "one", "<|s|>", "extra", "<|s|>", "needed", "?", "<|nl|>", "<|nl|>", "this", "<|s|>", "would", "<|s|>", "match", "<|s|>", "the", "<|s|>", "existing", "<|s|>", "code", "<|s|>", "in", "<|s|>", "Media", "Format", ".", "java", "<|s|>", "in", "<|s|>", "Settings", ":", "<|nl|>", "<|nl|>", "<|16-s|>", "//", "<|s|>", "Transfer", "<|s|>", "the", "<|s|>", "storage", "<|s|>", "volume", "<|s|>", "to", "<|s|>", "the", "<|s|>", "new", "<|s|>", "intent", "<|nl|>", "<|16-s|>", "final", "<|s|>", "Storage", "Volume", "<|s|>", "storage", "Volume", "<|s|>", "=", "<|s|>", "get", "Intent", "(", ")", ".", "get", "Parcelable", "Extra", "(", "<|nl|>", "<|16-s|>", "<|8-s|>", "Storage", "Volume", ".", "EXTRA", "_", "STORAGE", "_", "VOLUME", ");", "<|nl|>", "<|16-s|>", "intent", ".", "put", "Extra", "(", "Storage", "Volume", ".", "EXTRA", "_", "STORAGE", "_", "VOLUME", ",", "<|s|>", "storage", "Volume", ");"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == VAR_3 ) { TYPE_2 intent = new TYPE_2 ( VAR_4 ) ; intent . METHOD_2 ( VAR_5 ) ; intent . METHOD_3 ( getIntent ( ) ) ; METHOD_4 ( intent ) ; } METHOD_5 ( ) ; }", "our_target": "            // Transfer the storage volume to the new intent\n            final StorageVolume storageVolume = getIntent().getParcelableExtra(\n                    StorageVolume.EXTRA_STORAGE_VOLUME);\n            intent.putExtra(StorageVolume.EXTRA_STORAGE_VOLUME, storageVolume);\n", "our_code": "    public void onClick(DialogInterface dialog, int which) {\n\n        if (which == POSITIVE_BUTTON) {\n            Intent intent = new Intent(ExternalStorageFormatter.FORMAT_ONLY);\n            intent.setComponent(ExternalStorageFormatter.COMPONENT_NAME);\n<|startfocus|>\n            // It should be safe to copy all extras. The receiver is only\n            // looking for StorageVolume.EXTRA_STORAGE_VOLUME.\n            intent.putExtras(getIntent());\n<|endfocus|>\n            startService(intent);\n        }\n\n        // No matter what, finish the activity\n        finish();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Click", "(", "Dialog", "Interface", "<|s|>", "dialog", ",", "<|s|>", "int", "<|s|>", "which", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "which", "<|s|>", "==", "<|s|>", "POSITIVE", "_", "BUTTON", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Intent", "<|s|>", "intent", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Intent", "(", "External", "Storage", "Formatter", ".", "FORMAT", "_", "ONLY", ");", "<|nl|>", "<|12-s|>", "intent", ".", "set", "Component", "(", "External", "Storage", "Formatter", ".", "COMPONENT", "_", "NAME", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "It", "<|s|>", "should", "<|s|>", "be", "<|s|>", "safe", "<|s|>", "to", "<|s|>", "copy", "<|s|>", "all", "<|s|>", "extras", ".", "<|s|>", "The", "<|s|>", "receiver", "<|s|>", "is", "<|s|>", "only", "<|nl|>", "<|12-s|>", "//", "<|s|>", "looking", "<|s|>", "for", "<|s|>", "Storage", "Volume", ".", "EXTRA", "_", "STORAGE", "_", "VOLUME", ".", "<|nl|>", "<|12-s|>", "intent", ".", "put", "Extras", "(", "get", "Intent", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "start", "Service", "(", "intent", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "No", "<|s|>", "matter", "<|s|>", "what", ",", "<|s|>", "finish", "<|s|>", "the", "<|s|>", "activity", "<|nl|>", "<|8-s|>", "finish", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 100, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1506", "comment_id": "fcfbbdcb_4aec77a3", "class_list": ["ExternalMediaFormatActivity"], "func_list": ["public void onReceive(Context context, Intent intent)", "protected void onCreate(Bundle savedInstanceState)", "protected void onResume()", "protected void onPause()", "public void onClick(DialogInterface dialog, int which)"], "prime_var_dic": {"int": 1}}, {"idx": 38478, "status": "update", "global_index": 8316, "project_name": "android_", "written_on": "2016-02-10 10:29:51", "tufano_target": "public byte [ ] METHOD_1 ( String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) && ( VAR_2 != null ) ) { TYPE_1 out = new TYPE_1 ( ) ; try { out . METHOD_2 ( ( new TYPE_2 ( VAR_2 ) ) . METHOD_1 ( ) ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_4 ( STRING_3 , VAR_3 ) ; } return out . METHOD_3 ( ) ; } return null ; }", "comment": "what is 200 ?", "tokenized_comment": ["what", "<|s|>", "is", "<|s|>", "200", "<|s|>", "?"], "tufano_code": "public byte [ ] METHOD_1 ( String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) && ( VAR_2 != null ) ) { TYPE_1 out = new TYPE_1 ( ) ; try { out . METHOD_2 ( ( new TYPE_2 ( VAR_2 ) ) . METHOD_1 ( ) ) ; } catch ( TYPE_3 VAR_3 ) { throw new TYPE_4 ( STRING_2 , VAR_3 ) ; } return out . METHOD_3 ( ) ; } return null ; }", "our_target": "                    throw new IllegalStateException(\"Unexpected IOException\" , e);\n", "our_code": "        public byte[] getExtensionValue(String oid) {\n            if (\"2.5.29.20\".equals(oid) && (crlNumber != null)) {\n                DerOutputStream out = new DerOutputStream();\n                try {\n                    out.putOctetString((new CRLNumberExtension(crlNumber)).getExtensionValue());\n                } catch (IOException e) {\n<|startfocus|>\n                    throw new IllegalStateException(\"Unexpected IOException parsing 200\" , e);\n<|endfocus|>\n                }\n                return out.toByteArray();\n            }\n            return null;\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "byte", "[", "]", "<|s|>", "get", "Extension", "Value", "(", "String", "<|s|>", "oid", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "\"", "2", ".", "5", ".", "29", ".", "20", "\"", ".", "equals", "(", "oid", ")", "<|s|>", "&&", "<|s|>", "(", "crl", "Number", "<|s|>", "!=", "<|s|>", "null", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Der", "Output", "Stream", "<|s|>", "out", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Der", "Output", "Stream", "(", ");", "<|nl|>", "<|16-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "out", ".", "put", "Octet", "String", "(", "(", "new", "<|s|>", "CRLNumber", "Extension", "(", "crl", "Number", ")", ")", ".", "get", "Extension", "Value", "(", ")", ");", "<|nl|>", "<|16-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "\"", "Unexpected", "<|s|>", "IOException", "<|s|>", "parsing", "<|s|>", "200", "\"", "<|s|>", ",", "<|s|>", "e", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "return", "<|s|>", "out", ".", "to", "Byte", "Array", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 565, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3375", "comment_id": "3de034e0_9e421de5", "class_list": ["X509CRLSelector2Test", "stub", "TestCRL"], "func_list": ["public void testX509CRLSelector()", "public void testAddIssuerLjavax_security_auth_x500_X500Principal02()", "public void testAddIssuerNameLjava_lang_String03()", "public void testSetIssuerNamesLjava_util_Collection02()", "public void testSetIssuersLjava_util_Collection()", "public void testSetMinCRLNumberLjava_math_BigInteger()", "public void testSetMaxCRLNumberLjava_math_BigInteger()", "public void testSetDateAndTimeLjava_util_Date()", "public void testGetIssuers()", "public void testGetIssuerNames()", "public void testGetMinCRL()", "public void testGetMaxCRL()", "public void testGetDateAndTime()", "public void testMatchLjava_security_cert_X509CRL()", "public void testClone()", "public void testToString()", "public TestCRL()", "public void setUpdateDates(Date thisUpdate, Date nextUpdate)", "public void setCrlNumber(BigInteger crlNumber)", "public X500Principal getIssuerX500Principal()", "public String toString()", "public boolean isRevoked(Certificate cert)", "public Set<String> getNonCriticalExtensionOIDs()", "public Set<String> getCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)", "public boolean hasUnsupportedCriticalExtension()", "public byte[] getEncoded()", "public int getVersion()", "public Principal getIssuerDN()", "public Date getThisUpdate()", "public Date getNextUpdate()", "public X509CRLEntry getRevokedCertificate(BigInteger serialNumber)", "public Set<X509CRLEntry> getRevokedCertificates()", "public byte[] getTBSCertList()", "public byte[] getSignature()", "public String getSigAlgName()", "public String getSigAlgOID()", "public byte[] getSigAlgParams()", "public TestCRL()", "public void setUpdateDates(Date thisUpdate, Date nextUpdate)", "public void setCrlNumber(BigInteger crlNumber)", "public X500Principal getIssuerX500Principal()", "public String toString()", "public boolean isRevoked(Certificate cert)", "public Set<String> getNonCriticalExtensionOIDs()", "public Set<String> getCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)", "public boolean hasUnsupportedCriticalExtension()", "public byte[] getEncoded()", "public int getVersion()", "public Principal getIssuerDN()", "public Date getThisUpdate()", "public Date getNextUpdate()", "public X509CRLEntry getRevokedCertificate(BigInteger serialNumber)", "public Set<X509CRLEntry> getRevokedCertificates()", "public byte[] getTBSCertList()", "public byte[] getSignature()", "public String getSigAlgName()", "public String getSigAlgOID()", "public byte[] getSigAlgParams()", "public void testAddIssuerNameLjava_lang_String03()"], "prime_var_dic": {}}, {"idx": 95621, "status": "update", "global_index": 3794, "project_name": "android_", "written_on": "2017-02-01 20:52:55", "tufano_target": "public void METHOD_1 ( String VAR_1 , String name , boolean VAR_2 ) { if ( VAR_5 ) { TYPE_1 . i ( VAR_3 , STRING_1 + VAR_1 + STRING_2 + name + STRING_3 + VAR_2 ) ; } if ( ! METHOD_2 ( ) || ! METHOD_3 ( ) ) { TYPE_1 . METHOD_4 ( VAR_3 , STRING_4 ) ; METHOD_5 ( ) ; } else { TYPE_1 . i ( VAR_3 , STRING_5 ) ; VAR_4 = true ; } }", "comment": "if (DBG)?", "tokenized_comment": ["if", "<|s|>", "(", "DBG", ")", "?"], "tufano_code": "public void METHOD_1 ( String VAR_1 , String name , boolean VAR_2 ) { TYPE_1 . i ( VAR_3 , STRING_1 + VAR_1 + STRING_2 + name + STRING_3 + VAR_2 ) ; if ( ! METHOD_2 ( ) || ! METHOD_3 ( ) ) { TYPE_1 . METHOD_4 ( VAR_3 , STRING_4 ) ; METHOD_5 ( ) ; } else { TYPE_1 . i ( VAR_3 , STRING_5 ) ; VAR_4 = true ; } }", "our_target": "                        if (DBG) {\n                            Log.i(TAG, \"IServiceNotification.onRegistration for: \" + fqName + \", \"\n                                    + name + \" preexisting=\" + preexisting);\n                        }\n", "our_code": "                    public void onRegistration(String fqName, String name, boolean preexisting) {\n<|startfocus|>\n                        Log.i(TAG, \"IServiceNotification.onRegistration for: \" + fqName + \", \"\n                                + name + \" preexisting=\" + preexisting);\n<|endfocus|>\n                        if (!initSupplicantService() || !initSupplicantStaIface()) {\n                            Log.e(TAG, \"initalizing ISupplicantIfaces failed.\");\n                            supplicantServiceDiedHandler();\n                        } else {\n                            Log.i(TAG, \"Completed initialization of ISupplicant interfaces.\");\n                            mInitializationComplete = true;\n                        }\n                    }", "tokenized_code": ["<|16-s|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Registration", "(", "String", "<|s|>", "fq", "Name", ",", "<|s|>", "String", "<|s|>", "name", ",", "<|s|>", "boolean", "<|s|>", "preexisting", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "Log", ".", "i", "(", "TAG", ",", "<|s|>", "\"", "IService", "Notification", ".", "on", "Registration", "<|s|>", "for", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "fq", "Name", "<|s|>", "+", "<|s|>", "\"", ",", "<|s|>", "\"", "<|nl|>", "<|16-s|>", "<|16-s|>", "+", "<|s|>", "name", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "preexisting", "=", "\"", "<|s|>", "+", "<|s|>", "preexisting", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "!", "init", "Supplicant", "Service", "(", ")", "<|s|>", "||", "<|s|>", "!", "init", "Supplicant", "Sta", "Iface", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "initalizing", "<|s|>", "ISupplicant", "Ifaces", "<|s|>", "failed", ".", "\"", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "supplicant", "Service", "Died", "Handler", "(", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "Log", ".", "i", "(", "TAG", ",", "<|s|>", "\"", "Completed", "<|s|>", "initialization", "<|s|>", "of", "<|s|>", "ISupplicant", "<|s|>", "interfaces", ".", "\"", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "m", "Initialization", "Complete", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}"], "base_code_line_number": 85, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4076", "comment_id": "fdd8c09b_067b9078", "class_list": ["WifiSupplicantHal", "HalDeviceManagerStatusListener", "Mutable<E>"], "func_list": ["public WifiSupplicantHal(HalDeviceManager halDeviceManager, HandlerThread handlerThread)", "public boolean initialize()", "public void onRegistration(String fqName, String name, boolean preexisting)", "private boolean initSupplicantService()", "private ISupplicantIface getSupplicantStaIface(int ifaceType)", "private boolean initSupplicantStaIface()", "private void supplicantServiceDiedHandler()", "public boolean isInitializationComplete()", "public void onStatusChanged()", "protected ISupplicantStaIface getStaIfaceMockable(ISupplicantIface iface)", "public WifiSupplicantHal(HalDeviceManager halDeviceManager, HandlerThread handlerThread)"], "prime_var_dic": {"Mutable": 1}}, {"idx": 77374, "status": "update", "global_index": 10844, "project_name": "android_", "written_on": "2015-06-01 06:19:56", "tufano_target": "public class TYPE_1 extends TYPE_2 < TYPE_1 , TYPE_3 , TYPE_4 > { public TYPE_1 ( TYPE_5 VAR_1 , TYPE_3 target ) { super ( VAR_2 class , VAR_1 , target ) ; } public TYPE_1 METHOD_1 ( String text ) { METHOD_2 ( ) . METHOD_1 ( target ( ) , text ) ; return this ; } public TYPE_1 METHOD_3 ( String text ) { METHOD_2 ( ) . METHOD_3 ( target ( ) , text ) ; return this ; } protected TYPE_4 METHOD_4 ( TYPE_5 VAR_1 ) { return new TYPE_4 ( VAR_1 ) ; } }", "comment": "@NotNull (just a nit, to keep consistency)", "tokenized_comment": ["@", "Not", "Null", "<|s|>", "(", "just", "<|s|>", "a", "<|s|>", "nit", ",", "<|s|>", "to", "<|s|>", "keep", "<|s|>", "consistency", ")"], "tufano_code": "public class TYPE_1 extends TYPE_2 < TYPE_1 , TYPE_3 , TYPE_4 > { public TYPE_1 ( TYPE_5 VAR_1 , TYPE_3 target ) { super ( VAR_2 class , VAR_1 , target ) ; } public TYPE_1 METHOD_1 ( String text ) { METHOD_2 ( ) . METHOD_1 ( target ( ) , text ) ; return this ; } public TYPE_1 METHOD_3 ( String text ) { METHOD_2 ( ) . METHOD_3 ( target ( ) , text ) ; return this ; } protected TYPE_4 METHOD_4 ( TYPE_5 VAR_1 ) { return new TYPE_4 ( VAR_1 ) ; } }", "our_target": "  @NotNull\n", "our_code": "public class SearchTextFieldFixture extends AbstractJComponentFixture<SearchTextFieldFixture, SearchTextField, SearchTextFieldDriver> {\n  public SearchTextFieldFixture(@NotNull Robot robot,\n                                @NotNull SearchTextField target) {\n    super(SearchTextFieldFixture.class, robot, target);\n  }\n\n  @NotNull\n  public SearchTextFieldFixture enterText(@NotNull String text) {\n    driver().enterText(target(), text);\n\n    return this;\n  }\n\n  @NotNull\n  public SearchTextFieldFixture requireText(@NotNull String text) {\n    driver().requireText(target(), text);\n\n    return this;\n  }\n\n<|startfocus|>\n  @Nonnull\n<|endfocus|>\n  @Override\n  protected SearchTextFieldDriver createDriver(Robot robot) {\n    return new SearchTextFieldDriver(robot);\n  }\n}\n", "tokenized_code": ["public", "<|s|>", "class", "<|s|>", "Search", "Text", "Field", "Fixture", "<|s|>", "extends", "<|s|>", "Abstract", "JComponent", "Fixture", "<", "Search", "Text", "Field", "Fixture", ",", "<|s|>", "Search", "Text", "Field", ",", "<|s|>", "Search", "Text", "Field", "Driver", ">", "<|s|>", "{", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Search", "Text", "Field", "Fixture", "(", "@", "Not", "Null", "<|s|>", "Robot", "<|s|>", "robot", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "@", "Not", "Null", "<|s|>", "Search", "Text", "Field", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "super", "(", "Search", "Text", "Field", "Fixture", ".", "class", ",", "<|s|>", "robot", ",", "<|s|>", "target", ");", "<|nl|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|2-s|>", "@", "Not", "Null", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Search", "Text", "Field", "Fixture", "<|s|>", "enter", "Text", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "text", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "driver", "(", ")", ".", "enter", "Text", "(", "target", "(", ")", ",", "<|s|>", "text", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|2-s|>", "@", "Not", "Null", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Search", "Text", "Field", "Fixture", "<|s|>", "require", "Text", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "text", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "driver", "(", ")", ".", "require", "Text", "(", "target", "(", ")", ",", "<|s|>", "text", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|2-s|>", "@", "Nonnull", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "@", "Override", "<|nl|>", "<|2-s|>", "protected", "<|s|>", "Search", "Text", "Field", "Driver", "<|s|>", "create", "Driver", "(", "Robot", "<|s|>", "robot", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "return", "<|s|>", "new", "<|s|>", "Search", "Text", "Field", "Driver", "(", "robot", ");", "<|nl|>", "<|2-s|>", "}", "<|nl|>", "}", "<|nl|>"], "base_code_line_number": 46, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_60", "comment_id": "3914a832_82f42085", "class_list": ["SearchTextFieldFixture"], "func_list": ["public SearchTextFieldFixture(@NotNull Robot robot,", "public SearchTextFieldFixture enterText(@NotNull String text)", "public SearchTextFieldFixture requireText(@NotNull String text)", "protected SearchTextFieldDriver createDriver(Robot robot)"], "prime_var_dic": {}}, {"idx": 95213, "status": "update", "global_index": 20940, "project_name": "android_", "written_on": "2013-08-05 23:27:16", "tufano_target": "private static String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { String VAR_3 = VAR_1 . METHOD_2 ( ) . VAR_4 ; if ( VAR_3 . equals ( VAR_5 ) ) { return VAR_3 ; } TYPE_3 < String > VAR_6 = TYPE_6 . METHOD_6 ( VAR_3 . split ( VAR_5 ) ) ; VAR_6 . remove ( VAR_6 . size ( ) - 1 ) ; VAR_6 . add ( VAR_2 . getName ( ) ) ; String VAR_7 = TYPE_5 . METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_6 ) ; VAR_1 . METHOD_2 ( ) . VAR_4 = VAR_7 ; return VAR_7 ; }", "comment": "build.settings file? I think you want settings.gradle file?", "tokenized_comment": ["build", ".", "settings", "<|s|>", "file", "?", "<|s|>", "I", "<|s|>", "think", "<|s|>", "you", "<|s|>", "want", "<|s|>", "settings", ".", "gradle", "<|s|>", "file", "?"], "tufano_code": "private static String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { String VAR_3 = VAR_1 . METHOD_2 ( ) . VAR_4 ; if ( VAR_3 . equals ( VAR_5 ) ) { return VAR_3 ; } TYPE_3 < String > VAR_6 = TYPE_4 . METHOD_3 ( VAR_3 ) ; VAR_6 . remove ( VAR_6 . size ( ) - 1 ) ; VAR_6 . add ( VAR_2 . getName ( ) ) ; String VAR_7 = TYPE_5 . METHOD_4 ( VAR_5 ) . METHOD_5 ( VAR_6 ) ; VAR_1 . METHOD_2 ( ) . VAR_4 = VAR_7 ; return VAR_7 ; }", "our_target": "    List<String> pathSegments = Lists.newArrayList(gradlePath.split(SdkConstants.GRADLE_PATH_SEPARATOR));\n", "our_code": "  private static String updateProjectNameInGradlePath(@NotNull AndroidGradleFacet androidGradleFacet, @NotNull VirtualFile moduleDir) {\n    String gradlePath = androidGradleFacet.getConfiguration().GRADLE_PROJECT_PATH;\n    if (gradlePath.equals(SdkConstants.GRADLE_PATH_SEPARATOR)) {\n      // This is root project, renaming folder does not affect it since the path is just \":\".\n      return gradlePath;\n    }\n<|startfocus|>\n    List<String> pathSegments = GradleUtil.getPathSegments(gradlePath);\n<|endfocus|>\n    pathSegments.remove(pathSegments.size() - 1);\n    pathSegments.add(moduleDir.getName());\n\n    String newPath = Joiner.on(SdkConstants.GRADLE_PATH_SEPARATOR).join(pathSegments);\n    androidGradleFacet.getConfiguration().GRADLE_PROJECT_PATH = newPath;\n    return newPath;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "update", "Project", "Name", "In", "Gradle", "Path", "(", "@", "Not", "Null", "<|s|>", "Android", "Gradle", "Facet", "<|s|>", "android", "Gradle", "Facet", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Virtual", "File", "<|s|>", "module", "Dir", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "gradle", "Path", "<|s|>", "=", "<|s|>", "android", "Gradle", "Facet", ".", "get", "Configuration", "(", ")", ".", "GRADLE", "_", "PROJECT", "_", "PATH", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "gradle", "Path", ".", "equals", "(", "Sdk", "Constants", ".", "GRADLE", "_", "PATH", "_", "SEPARATOR", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "This", "<|s|>", "is", "<|s|>", "root", "<|s|>", "project", ",", "<|s|>", "renaming", "<|s|>", "folder", "<|s|>", "does", "<|s|>", "not", "<|s|>", "affect", "<|s|>", "it", "<|s|>", "since", "<|s|>", "the", "<|s|>", "path", "<|s|>", "is", "<|s|>", "just", "<|s|>", "\"", ":", "\"", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "gradle", "Path", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "List", "<", "String", ">", "<|s|>", "path", "Segments", "<|s|>", "=", "<|s|>", "Gradle", "Util", ".", "get", "Path", "Segments", "(", "gradle", "Path", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "path", "Segments", ".", "remove", "(", "path", "Segments", ".", "size", "(", ")", "<|s|>", "-", "<|s|>", "1", ");", "<|nl|>", "<|4-s|>", "path", "Segments", ".", "add", "(", "module", "Dir", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "String", "<|s|>", "new", "Path", "<|s|>", "=", "<|s|>", "Joiner", ".", "on", "(", "Sdk", "Constants", ".", "GRADLE", "_", "PATH", "_", "SEPARATOR", ")", ".", "join", "(", "path", "Segments", ");", "<|nl|>", "<|4-s|>", "android", "Gradle", "Facet", ".", "get", "Configuration", "(", ")", ".", "GRADLE", "_", "PROJECT", "_", "PATH", "<|s|>", "=", "<|s|>", "new", "Path", ";", "<|nl|>", "<|4-s|>", "return", "<|s|>", "new", "Path", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 140, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_386", "comment_id": "d8c1981a_90455a6f", "class_list": ["GradleBuildFileUpdater", "gets"], "func_list": ["public GradleBuildFileUpdater(@NotNull Project project)", "public void moduleAdded(@NotNull final Project project, @NotNull final Module module)", "public void moduleRemoved(@NotNull Project project, @NotNull final Module module)", "public void before(@NotNull List<? extends VFileEvent> events)", "public void after(@NotNull List<? extends VFileEvent> events)", "private static String updateProjectNameInGradlePath(@NotNull AndroidGradleFacet androidGradleFacet, @NotNull VirtualFile moduleDir)"], "prime_var_dic": {}}, {"idx": 91644, "status": "update", "global_index": 11465, "project_name": "android_", "written_on": "2015-01-07 20:30:11", "tufano_target": "public String METHOD_1 ( TYPE_1 < TYPE_2 > args ) { TYPE_2 view = args . get ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( view ) ; return ( VAR_2 == null ) ? null : VAR_2 . get ( STRING_2 ) . getText ( ) ; }", "comment": "dollar signs in variable names are quite odd. I didn't know it was even valid in Java.", "tokenized_comment": ["dollar", "<|s|>", "signs", "<|s|>", "in", "<|s|>", "variable", "<|s|>", "names", "<|s|>", "are", "<|s|>", "quite", "<|s|>", "odd", ".", "<|s|>", "I", "<|s|>", "didn", "'", "t", "<|s|>", "know", "<|s|>", "it", "<|s|>", "was", "<|s|>", "even", "<|s|>", "valid", "<|s|>", "in", "<|s|>", "Java", "."], "tufano_code": "public String METHOD_1 ( TYPE_1 < TYPE_2 > args ) { TYPE_2 VAR_1 = args . get ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return ( VAR_2 == null ) ? null : VAR_2 . get ( STRING_2 ) . getText ( ) ; }", "our_target": "        PsiElement view = args.get(\"$view\");\n        MultiMatch.Bindings<PsiElement> bindings = macros.findViewById.match(view);\n", "our_code": "      public String locateIn(MultiMatch.Bindings<PsiElement> args) {\n<|startfocus|>\n        PsiElement $view = args.get(\"$view\");\n        MultiMatch.Bindings<PsiElement> bindings = macros.findViewById.match($view);\n<|endfocus|>\n        return (bindings == null) ? null : bindings.get(\"$id\").getText();\n      }", "tokenized_code": ["<|4-s|>", "<|2-s|>", "public", "<|s|>", "String", "<|s|>", "locate", "In", "(", "Multi", "Match", ".", "Bindings", "<", "Psi", "Element", ">", "<|s|>", "args", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Psi", "Element", "<|s|>", "$", "view", "<|s|>", "=", "<|s|>", "args", ".", "get", "(", "\"", "$", "view", "\"", ");", "<|nl|>", "<|8-s|>", "Multi", "Match", ".", "Bindings", "<", "Psi", "Element", ">", "<|s|>", "bindings", "<|s|>", "=", "<|s|>", "macros", ".", "find", "View", "By", "Id", ".", "match", "(", "$", "view", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "bindings", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "?", "<|s|>", "null", "<|s|>", ":", "<|s|>", "bindings", ".", "get", "(", "\"", "$", "id", "\"", ")", ".", "get", "Text", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}"], "base_code_line_number": 309, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_214", "comment_id": "ee26b1f7_aa25ef49", "class_list": ["Analyser", "Evaluator", "style'", "style", "MiniModel", "PsiLocator<T>", "Processor"], "func_list": ["public Analyser(Module module)", "public NavigationModel getNavigationModel(Configuration configuration)", "private static String qualifyClassNameIfNecessary(@Nullable String packageName, String className)", "public static String unQuote(String s)", "public static void commit(Project project, @Nullable PsiFile file)", "private static Set<String> getActivitiesFromManifestFile(Module module)", "private static ActivityState getActivityState(String className, Map<String, ActivityState> classNameToActivityState)", "private static MenuState getMenuState(String className, String menuName, Map<String, MenuState> classNameToMenuState)", "public Object evaluate(@Nullable PsiExpression expression)", "public void process(MultiMatch.Bindings<PsiElement> exp)", "public void visitDeclarationStatement(PsiDeclarationStatement statement)", "private Evaluator getEvaluator(final Set<String> ids,", "private static String getQualifiedName(@Nullable PsiClass psiClass)", "private XmlFile getXmlFile(Configuration configuration, @Nullable String className, boolean isActivity)", "private static PsiLocator<String> getGetTag(final Macros macros)", "public String locateIn(MultiMatch.Bindings<PsiElement> args)", "private static Processor createProcessor(final NavigationModel model,", "private void deriveTransitions(final NavigationModel model,", "search(input, evaluator, myMacros.createMacro(\"void assign(Object $lhs, Object $rhs)  $lhs = $rhs; }\"), new Processor()", "private NavigationModel deriveAllStatesAndTransitions(Configuration configuration)", "public PsiElement locateIn(MultiMatch.Bindings<PsiElement> args)", "private static PsiLocator<String> constant(@Nullable final String constant)", "private static List<FragmentEntry> getFragmentEntries(@Nullable XmlFile psiFile)", "public void visitXmlTag(XmlTag tag)", "public static String getPrefix(@Nullable String idName)", "private static Set<String> getIds(@Nullable XmlFile psiFile)", "private static Set<String> getTags(@Nullable XmlFile psiFile)", "private static String removeTrailingParens(String text)", "private static boolean addTransition(NavigationModel model, Transition transition)", "public static String getXMLFileName(Module module, String controllerClassName, boolean isActivity)", "public static void search(@Nullable PsiElement input, final Evaluator evaluator, final MultiMatch matcher, final Processor processor)", "private void visitNullableExpression(@Nullable PsiExpression expression)", "private void visitNullableStatement(@Nullable PsiStatement statement)", "public void visitIfStatement(PsiIfStatement statement)", "public void visitExpression(PsiExpression expression)", "public void visitStatement(PsiStatement statement)", "public static List<String> findProperties(@Nullable PsiClass input)", "public void visitMethod(PsiMethod method)", "public Object evaluate(@Nullable PsiExpression expression)", "new Processor()", "public void process(MultiMatch.Bindings<PsiElement> args)", "public void process(MultiMatch.Bindings<PsiElement> args)", "\"void macro(Object target, String id, Menu menu)  target.inflate(id, menu); }\", new Processor()"], "prime_var_dic": {}}, {"idx": 1510, "status": "update", "global_index": 13030, "project_name": "android_", "written_on": "2014-10-15 22:10:24", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { super ( VAR_2 ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_1 ( VAR_6 ) ; METHOD_3 ( STRING_1 ) ; TYPE_3 VAR_4 = METHOD_4 ( ) ; if ( VAR_4 == null ) { assert TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ; } else { VAR_4 . METHOD_7 ( VAR_5 ) ; } }", "comment": "Why do you override method and then call parent implementation from other locations?", "tokenized_comment": ["Why", "<|s|>", "do", "<|s|>", "you", "<|s|>", "override", "<|s|>", "method", "<|s|>", "and", "<|s|>", "then", "<|s|>", "call", "<|s|>", "parent", "<|s|>", "implementation", "<|s|>", "from", "<|s|>", "other", "<|s|>", "locations", "?"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { super ( VAR_2 ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_1 ( super . METHOD_2 ( ) ) ; METHOD_3 ( STRING_1 ) ; TYPE_3 VAR_4 = METHOD_4 ( ) ; if ( VAR_4 == null ) { assert TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ; } else { VAR_4 . METHOD_7 ( VAR_5 ) ; } }", "our_target": "    myAvdDisplayList.setBorder(ourDefaultBorder);\n", "our_code": "  public AvdListDialog(@Nullable Project project) {\n    super(project);\n    myAvdDisplayList = new AvdDisplayList();\n<|startfocus|>\n    myAvdDisplayList.setBorder(super.createContentPaneBorder());\n<|endfocus|>\n    setTitle(\"AVD Manager\");\n    Window window = getWindow();\n    if (window == null) {\n      assert ApplicationManager.getApplication().isUnitTestMode();\n    } else {\n      window.setPreferredSize(WizardConstants.DEFAULT_WIZARD_WINDOW_SIZE);\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Avd", "List", "Dialog", "(", "@", "Nullable", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "super", "(", "project", ");", "<|nl|>", "<|4-s|>", "my", "Avd", "Display", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Avd", "Display", "List", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "my", "Avd", "Display", "List", ".", "set", "Border", "(", "super", ".", "create", "Content", "Pane", "Border", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "set", "Title", "(", "\"", "AVD", "<|s|>", "Manager", "\"", ");", "<|nl|>", "<|4-s|>", "Window", "<|s|>", "window", "<|s|>", "=", "<|s|>", "get", "Window", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "window", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "assert", "<|s|>", "Application", "Manager", ".", "get", "Application", "(", ")", ".", "is", "Unit", "Test", "Mode", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "window", ".", "set", "Preferred", "Size", "(", "Wizard", "Constants", ".", "DEFAULT", "_", "WIZARD", "_", "WINDOW", "_", "SIZE", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 40, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_120", "comment_id": "901b9006_0ff690f4", "class_list": ["AvdListDialog"], "func_list": ["public AvdListDialog(@Nullable Project project)", "public void init()", "protected JComponent createNorthPanel()", "protected JComponent createCenterPanel()", "public AvdInfo getAvdInfo()", "public void refreshAvds()", "protected Border createContentPaneBorder()", "protected JComponent createSouthPanel()"], "prime_var_dic": {}}, {"idx": 82361, "status": "update", "global_index": 6917, "project_name": "android_", "written_on": "2016-03-11 05:58:56", "tufano_target": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , String name ) { if ( VAR_1 == VAR_2 ) { return VAR_1 ; } try { final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( name , VAR_5 ) ; final boolean VAR_6 = METHOD_3 ( VAR_3 ) ; final boolean VAR_7 = METHOD_4 ( VAR_3 ) ; if ( VAR_6 || VAR_7 ) { VAR_1 = VAR_7 ; } } catch ( TYPE_3 VAR_8 ) { METHOD_5 ( STRING_1 + name ) ; } return VAR_1 ; }", "comment": "final", "tokenized_comment": ["final"], "tufano_code": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , String name ) { if ( VAR_1 == VAR_2 ) { return VAR_1 ; } try { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( name , VAR_5 ) ; boolean VAR_6 = METHOD_3 ( VAR_3 ) ; boolean VAR_7 = METHOD_4 ( VAR_3 ) ; if ( VAR_6 || VAR_7 ) { VAR_1 = VAR_7 ; } } catch ( TYPE_3 VAR_8 ) { METHOD_5 ( STRING_1 + name ) ; } return VAR_1 ; }", "our_target": "            final PackageInfo app = mPackageManager.getPackageInfo(name, GET_PERMISSIONS);\n            final boolean isNetwork = hasNetworkPermission(app);\n            final boolean isSystem = hasSystemPermission(app);\n", "our_code": "    private Boolean highestPermissionForApp(Boolean currentPermission, String name) {\n        if (currentPermission == SYSTEM) {\n            return currentPermission;\n        }\n        try {\n<|startfocus|>\n            PackageInfo app = mPackageManager.getPackageInfo(name, GET_PERMISSIONS);\n            boolean isNetwork = hasNetworkPermission(app);\n            boolean isSystem = hasSystemPermission(app);\n<|endfocus|>\n            if (isNetwork || isSystem) {\n                currentPermission = isSystem;\n            }\n        } catch (NameNotFoundException e) {\n            // App not found.\n            loge(\"NameNotFoundException \" + name);\n        }\n        return currentPermission;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Boolean", "<|s|>", "highest", "Permission", "For", "App", "(", "Boolean", "<|s|>", "current", "Permission", ",", "<|s|>", "String", "<|s|>", "name", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "current", "Permission", "<|s|>", "==", "<|s|>", "SYSTEM", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "current", "Permission", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "Package", "Info", "<|s|>", "app", "<|s|>", "=", "<|s|>", "m", "Package", "Manager", ".", "get", "Package", "Info", "(", "name", ",", "<|s|>", "GET", "_", "PERMISSIONS", ");", "<|nl|>", "<|12-s|>", "boolean", "<|s|>", "is", "Network", "<|s|>", "=", "<|s|>", "has", "Network", "Permission", "(", "app", ");", "<|nl|>", "<|12-s|>", "boolean", "<|s|>", "is", "System", "<|s|>", "=", "<|s|>", "has", "System", "Permission", "(", "app", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "is", "Network", "<|s|>", "||", "<|s|>", "is", "System", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "current", "Permission", "<|s|>", "=", "<|s|>", "is", "System", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Name", "Not", "Found", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "App", "<|s|>", "not", "<|s|>", "found", ".", "<|nl|>", "<|12-s|>", "loge", "(", "\"", "Name", "Not", "Found", "Exception", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "name", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "current", "Permission", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 235, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_4092", "comment_id": "37793574_56e554f0", "class_list": ["to", "PermissionMonitor"], "func_list": ["public PermissionMonitor(Context context, INetworkManagementService netd)", "public void onReceive(Context context, Intent intent)", "private boolean hasPermission(PackageInfo app, String permission)", "private boolean hasNetworkPermission(PackageInfo app)", "private boolean hasSystemPermission(PackageInfo app)", "private int[] toIntArray(List<Integer> list)", "private void update(Set<Integer> users, Map<Integer, Boolean> apps, boolean add)", "private Boolean highestPermissionForApp(Boolean currentPermission, String name)", "private static void log(String s)", "private static void loge(String s)", "public PermissionMonitor(Context context, INetworkManagementService netd)", "public void onReceive(Context context, Intent intent)", "private boolean hasPermission(PackageInfo app, String permission)", "private boolean hasNetworkPermission(PackageInfo app)", "private boolean hasSystemPermission(PackageInfo app)", "private int[] toIntArray(List<Integer> list)", "private void update(Set<Integer> users, Map<Integer, Boolean> apps, boolean add)", "private Boolean highestPermissionForApp(Boolean currentPermission, String name)", "private static void log(String s)", "private static void loge(String s)"], "prime_var_dic": {"String": 1, "boolean": 3, "mContext": 1, "mPackageManager": 1, "mUserManager": 1, "mNetd": 1, "mIntentReceiver": 1, "IDs": 1}}, {"idx": 2292, "status": "update", "global_index": 12043, "project_name": "android_", "written_on": "2014-08-25 17:21:45", "tufano_target": "public TYPE_1 METHOD_1 ( String ... VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 , TYPE_3 . message ( STRING_1 ) ) ; if ( VAR_3 . METHOD_4 ( VAR_1 ) == 0 ) { VAR_3 . METHOD_5 ( VAR_1 [ 0 ] ) ; } VAR_3 . METHOD_6 ( ) ; METHOD_7 ( ) ; return this ; }", "comment": "use varargs instead, makes client code easier to read and write.", "tokenized_comment": ["use", "<|s|>", "varargs", "<|s|>", "instead", ",", "<|s|>", "makes", "<|s|>", "client", "<|s|>", "code", "<|s|>", "easier", "<|s|>", "to", "<|s|>", "read", "<|s|>", "and", "<|s|>", "write", "."], "tufano_code": "public TYPE_1 METHOD_1 ( String [ ] VAR_1 ) { VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 , TYPE_3 . message ( STRING_1 ) ) ; if ( VAR_3 . METHOD_4 ( VAR_1 ) == 0 ) { VAR_3 . METHOD_5 ( VAR_1 [ 0 ] ) ; } VAR_3 . METHOD_6 ( ) ; METHOD_7 ( ) ; return this ; }", "our_target": "  public EmulatorBasicControls runEmulator(@NotNull String... deviceNames) {\n", "our_code": "<|startfocus|>\n  public EmulatorBasicControls runEmulator(@NotNull String[] deviceNames) {\n<|endfocus|>\n    // Use the shortcut because the button could get pushed around by the run configuration drop down (it's variable width).\n    myProjectFrame.runApplication();\n\n    ChooseDeviceFixture chooseDeviceFixture = ChooseDeviceFixture.find(myRobot, AndroidBundle.message(\"choose.device.dialog.title\"));\n    // Try to find already-running emulators to launch the app on.\n    if (chooseDeviceFixture.chooseRunningDeviceStep(deviceNames) == 0) {\n      // If we can't find an already-launched device, fire up a new one.\n      chooseDeviceFixture.selectEmulatorStep(deviceNames[0]);\n    }\n    chooseDeviceFixture.clickOk();\n\n    scanEmulatorOutput();\n\n    return this;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Emulator", "Basic", "Controls", "<|s|>", "run", "Emulator", "(", "@", "Not", "Null", "<|s|>", "String", "[", "]", "<|s|>", "device", "Names", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Use", "<|s|>", "the", "<|s|>", "shortcut", "<|s|>", "because", "<|s|>", "the", "<|s|>", "button", "<|s|>", "could", "<|s|>", "get", "<|s|>", "pushed", "<|s|>", "around", "<|s|>", "by", "<|s|>", "the", "<|s|>", "run", "<|s|>", "configuration", "<|s|>", "drop", "<|s|>", "down", "<|s|>", "(", "it", "'", "s", "<|s|>", "variable", "<|s|>", "width", ")", ".", "<|nl|>", "<|4-s|>", "my", "Project", "Frame", ".", "run", "Application", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "Choose", "Device", "Fixture", "<|s|>", "choose", "Device", "Fixture", "<|s|>", "=", "<|s|>", "Choose", "Device", "Fixture", ".", "find", "(", "my", "Robot", ",", "<|s|>", "Android", "Bundle", ".", "message", "(", "\"", "choose", ".", "device", ".", "dialog", ".", "title", "\"", ")", ");", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Try", "<|s|>", "to", "<|s|>", "find", "<|s|>", "already", "-", "running", "<|s|>", "emulators", "<|s|>", "to", "<|s|>", "launch", "<|s|>", "the", "<|s|>", "app", "<|s|>", "on", ".", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "choose", "Device", "Fixture", ".", "choose", "Running", "Device", "Step", "(", "device", "Names", ")", "<|s|>", "==", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "If", "<|s|>", "we", "<|s|>", "can", "'", "t", "<|s|>", "find", "<|s|>", "an", "<|s|>", "already", "-", "launched", "<|s|>", "device", ",", "<|s|>", "fire", "<|s|>", "up", "<|s|>", "a", "<|s|>", "new", "<|s|>", "one", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "choose", "Device", "Fixture", ".", "select", "Emulator", "Step", "(", "device", "Names", "[", "0", "]", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "choose", "Device", "Fixture", ".", "click", "Ok", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "scan", "Emulator", "Output", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 113, "base_patch_number": 15, "changed_patch_number": 16, "code_file_name": "android_26", "comment_id": "13c88974_4a4fe380", "class_list": ["EmulatorBasicControls", "EmulatorInvocationCondition"], "func_list": ["public EmulatorInvocationCondition(String description, ConsoleViewImpl consoleView)", "public boolean test()", "public EmulatorBasicControls(@NotNull Robot robot, @NotNull IdeFrameFixture projectFrame)", "public EmulatorBasicControls runEmulator(@NotNull String[] deviceNames)", "private EmulatorBasicControls scanEmulatorOutput()", "public String getPackageName()", "private void clearRunningState()", "private EmulatorBasicControls waitForAppLoad()", "public void terminateAppOnEmulator()", "public EmulatorInvocationCondition(String description, ConsoleViewImpl consoleView)", "public boolean test()"], "prime_var_dic": {}}, {"idx": 83228, "status": "update", "global_index": 21798, "project_name": "android_", "written_on": "2014-01-06 23:14:04", "tufano_target": "private static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < String > VAR_2 ) { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 == null ) { return false ; } String VAR_4 = TYPE_4 . METHOD_3 ( VAR_3 ) ; return ! VAR_4 . startsWith ( TYPE_5 ) ; } private static String METHOD_4 ( TYPE_1 VAR_1 ) { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 == null ) { return null ; } return true ; }", "comment": "is this comment still valid?", "tokenized_comment": ["is", "<|s|>", "this", "<|s|>", "comment", "<|s|>", "still", "<|s|>", "valid", "?"], "tufano_code": "private static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < String > VAR_2 ) { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 == null ) { return false ; } String VAR_4 = TYPE_4 . METHOD_3 ( VAR_3 ) ; boolean VAR_5 = VAR_4 . startsWith ( TYPE_5 ) ; if ( VAR_5 ) { VAR_4 = VAR_4 . substring ( TYPE_5 . length ( ) ) . replace ( CHAR_1 , CHAR_2 ) ; VAR_2 . add ( VAR_4 ) ; } return true ; }", "our_target": "    return !libraryName.startsWith(UNRESOLVED_DEPENDENCY_PREFIX);\n  }\n\n  @Nullable\n  private static String getUnresolvedDependencyName(@NotNull IdeaSingleEntryLibraryDependency dependency) {\n    File binaryPath = dependency.getFile();\n    if (binaryPath == null) {\n      return null;\n", "our_code": "  private static boolean checkIfResolved(@NotNull IdeaSingleEntryLibraryDependency dependency,\n                                         @NotNull Set<String> unresolvedDependencies) {\n    File binaryPath = dependency.getFile();\n    if (binaryPath == null) {\n      return false;\n    }\n\n    String libraryName = FileUtil.getNameWithoutExtension(binaryPath);\n<|startfocus|>\n    boolean unresolved = libraryName.startsWith(UNRESOLVED_DEPENDENCY_PREFIX);\n    if (unresolved) {\n      // Gradle uses names like 'unresolved dependency - commons-collections commons-collections 3.2' for unresolved dependencies.\n      // We report the unresolved dependency as 'commons-collections:commons-collections:3.2'\n      libraryName = libraryName.substring(UNRESOLVED_DEPENDENCY_PREFIX.length()).replace(' ', ':');\n      unresolvedDependencies.add(libraryName);\n<|endfocus|>\n    }\n    return true;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "check", "If", "Resolved", "(", "@", "Not", "Null", "<|s|>", "Idea", "Single", "Entry", "Library", "Dependency", "<|s|>", "dependency", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "<|s|>", "@", "Not", "Null", "<|s|>", "Set", "<", "String", ">", "<|s|>", "unresolved", "Dependencies", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "File", "<|s|>", "binary", "Path", "<|s|>", "=", "<|s|>", "dependency", ".", "get", "File", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "binary", "Path", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "String", "<|s|>", "library", "Name", "<|s|>", "=", "<|s|>", "File", "Util", ".", "get", "Name", "Without", "Extension", "(", "binary", "Path", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "unresolved", "<|s|>", "=", "<|s|>", "library", "Name", ".", "starts", "With", "(", "UNRESOLVED", "_", "DEPENDENCY", "_", "PREFIX", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "unresolved", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Gradle", "<|s|>", "uses", "<|s|>", "names", "<|s|>", "like", "<|s|>", "'", "unresolved", "<|s|>", "dependency", "<|s|>", "-", "<|s|>", "commons", "-", "collections", "<|s|>", "commons", "-", "collections", "<|s|>", "3", ".", "2", "'", "<|s|>", "for", "<|s|>", "unresolved", "<|s|>", "dependencies", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "We", "<|s|>", "report", "<|s|>", "the", "<|s|>", "unresolved", "<|s|>", "dependency", "<|s|>", "as", "<|s|>", "'", "commons", "-", "collections", ":", "commons", "-", "collections", ":", "3", ".", "2", "'", "<|nl|>", "<|4-s|>", "<|2-s|>", "library", "Name", "<|s|>", "=", "<|s|>", "library", "Name", ".", "substring", "(", "UNRESOLVED", "_", "DEPENDENCY", "_", "PREFIX", ".", "length", "(", ")", ")", ".", "replace", "(", "'", "<|s|>", "'", ",", "<|s|>", "'", ":')", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "unresolved", "Dependencies", ".", "add", "(", "library", "Name", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 232, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_382", "comment_id": "2d80bdc3_b04f48a6", "class_list": ["AndroidGradleProjectResolver"], "func_list": ["public AndroidGradleProjectResolver()", "public ModuleData createModule(@NotNull IdeaModule gradleModule, @NotNull ProjectData projectData)", "public void populateModuleContentRoots(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ideModule)", "private JavaModel createJavaModelFrom(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ideModule)", "private static boolean checkIfResolved(@NotNull IdeaSingleEntryLibraryDependency dependency,", "public void populateModuleCompileOutputSettings(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ideModule)", "public void populateModuleDependencies(@NotNull IdeaModule gradleModule,", "private boolean isAndroidGradleProject()", "public Set<Class> getExtraProjectModelClasses()", "private static LocalProperties getLocalProperties(@NotNull File projectDir)", "public ExternalSystemException getUserFriendlyError(@NotNull Throwable error,", "private GradleVersion getGradleVersion()", "private BuildEnvironment getBuildEnvironment()", "private static GradleVersion getGradleMinimumSupportedVersion()", "private static GradleVersion getGradleMaximumSupportedVersion()", "private static String getUnsupportedModelVersionErrorMsg(@Nullable FullRevision modelVersion)", "private static String getUnsupportedGradleVersionErrorMsg(@NotNull GradleVersion currentVersion,", "private static Variant getVariantToSelect(@NotNull AndroidProject androidProject)", "public int compare(Variant o1, Variant o2)", "private static void populateUnresolvedDependencies(@NotNull DataNode<ProjectData> projectInfo,", "private static NotificationHyperlink createSearchInBuildFileHyperlink(@NotNull String dependency)", "public void enhanceRemoteProcessing(@NotNull SimpleJavaParameters parameters)"], "prime_var_dic": {"ProjectImportErrorHandler": 1, "purposes": 1, "library": 1}}, {"idx": 25045, "status": "update", "global_index": 18194, "project_name": "android_", "written_on": "2009-05-21 03:30:18", "tufano_target": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 , false ) ; VAR_1 . METHOD_2 ( VAR_3 , false ) ; if ( METHOD_3 ( ) == VAR_4 ) { VAR_1 . METHOD_2 ( VAR_5 , VAR_4 | VAR_6 ) ; } }", "comment": "Please add spaces around the | operator", "tokenized_comment": ["Please", "<|s|>", "add", "<|s|>", "spaces", "<|s|>", "around", "<|s|>", "the", "<|s|>", "|", "<|s|>", "operator"], "tufano_code": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 , false ) ; VAR_1 . METHOD_2 ( VAR_3 , false ) ; if ( METHOD_3 ( ) == VAR_4 ) { VAR_1 . METHOD_2 ( VAR_5 , VAR_4 | VAR_6 ) ; } }", "our_target": "                                          RingtoneManager.TYPE_RINGTONE | RingtoneManager.TYPE_VIDEO);\n", "our_code": "    protected void onPrepareRingtonePickerIntent(Intent ringtonePickerIntent) {\n        super.onPrepareRingtonePickerIntent(ringtonePickerIntent);\n        \n        /*\n         * Since this preference is for choosing the default ringtone, it\n         * doesn't make sense to show a 'Default' item.\n         */\n        ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, false);\n        \n        /*\n         * Similarly, 'Silent' shouldn't be shown here. \n         */\n        ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT, false);\n\n        /*\n         * It is fine for the default ringtone to be a video, but not notifications. \n         */\n        if (getRingtoneType() == RingtoneManager.TYPE_RINGTONE) {\n            ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,\n<|startfocus|>\n                                          RingtoneManager.TYPE_RINGTONE|RingtoneManager.TYPE_VIDEO);\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "on", "Prepare", "Ringtone", "Picker", "Intent", "(", "Intent", "<|s|>", "ringtone", "Picker", "Intent", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Prepare", "Ringtone", "Picker", "Intent", "(", "ringtone", "Picker", "Intent", ");", "<|nl|>", "<|8-s|>", "<|nl|>", "<|8-s|>", "/*", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "Since", "<|s|>", "this", "<|s|>", "preference", "<|s|>", "is", "<|s|>", "for", "<|s|>", "choosing", "<|s|>", "the", "<|s|>", "default", "<|s|>", "ringtone", ",", "<|s|>", "it", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "doesn", "'", "t", "<|s|>", "make", "<|s|>", "sense", "<|s|>", "to", "<|s|>", "show", "<|s|>", "a", "<|s|>", "'", "Default", "'", "<|s|>", "item", ".", "<|nl|>", "<|8-s|>", "<|s|>", "*/", "<|nl|>", "<|8-s|>", "ringtone", "Picker", "Intent", ".", "put", "Extra", "(", "Ringtone", "Manager", ".", "EXTRA", "_", "RINGTONE", "_", "SHOW", "_", "DEFAULT", ",", "<|s|>", "false", ");", "<|nl|>", "<|8-s|>", "<|nl|>", "<|8-s|>", "/*", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "Similarly", ",", "<|s|>", "'", "Silent", "'", "<|s|>", "shouldn", "'", "t", "<|s|>", "be", "<|s|>", "shown", "<|s|>", "here", ".", "<|s|>", "<|nl|>", "<|8-s|>", "<|s|>", "*/", "<|nl|>", "<|8-s|>", "ringtone", "Picker", "Intent", ".", "put", "Extra", "(", "Ringtone", "Manager", ".", "EXTRA", "_", "RINGTONE", "_", "SHOW", "_", "SILENT", ",", "<|s|>", "false", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "/*", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "It", "<|s|>", "is", "<|s|>", "fine", "<|s|>", "for", "<|s|>", "the", "<|s|>", "default", "<|s|>", "ringtone", "<|s|>", "to", "<|s|>", "be", "<|s|>", "a", "<|s|>", "video", ",", "<|s|>", "but", "<|s|>", "not", "<|s|>", "notifications", ".", "<|s|>", "<|nl|>", "<|8-s|>", "<|s|>", "*/", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "get", "Ringtone", "Type", "(", ")", "<|s|>", "==", "<|s|>", "Ringtone", "Manager", ".", "TYPE", "_", "RINGTONE", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "ringtone", "Picker", "Intent", ".", "put", "Extra", "(", "Ringtone", "Manager", ".", "EXTRA", "_", "RINGTONE", "_", "TYPE", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "<|2-s|>", "Ringtone", "Manager", ".", "TYPE", "_", "RINGTONE", "|", "Ringtone", "Manager", ".", "TYPE", "_", "VIDEO", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 56, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4454", "comment_id": "AAAATn%2F%2F%2F3c%3D", "class_list": ["DefaultRingtonePreference"], "func_list": ["public DefaultRingtonePreference(Context context, AttributeSet attrs)", "protected void onPrepareRingtonePickerIntent(Intent ringtonePickerIntent)", "protected void onSaveRingtone(Uri ringtoneUri)", "protected Uri onRestoreRingtone()"], "prime_var_dic": {"String": 1}}, {"idx": 36520, "status": "update", "global_index": 4191, "project_name": "android_", "written_on": "2016-10-19 06:53:04", "tufano_target": "public String METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( String . format ( STRING_1 + STRING_2 , VAR_1 ) ) ; TYPE_1 . assertTrue ( STRING_3 , VAR_2 . METHOD_6 ( VAR_3 ) ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_7 ( ) ; boolean VAR_5 = VAR_3 != null && VAR_4 != null && VAR_4 . intValue ( ) == VAR_3 . intValue ( ) ; TYPE_1 . assertTrue ( STRING_4 , VAR_5 ) ; return STRING_5 ; }", "comment": "over char/line limit, same for line 166", "tokenized_comment": ["over", "<|s|>", "char", "/", "line", "<|s|>", "limit", ",", "<|s|>", "same", "<|s|>", "for", "<|s|>", "line", "<|s|>", "166"], "tufano_code": "public String METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( String . format ( STRING_1 + STRING_2 , VAR_1 ) ) ; TYPE_1 . assertTrue ( STRING_3 , VAR_2 . METHOD_6 ( VAR_3 ) ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_7 ( ) ; boolean VAR_5 = VAR_3 != null && VAR_4 != null && VAR_4 . intValue ( ) == VAR_3 . intValue ( ) ; TYPE_1 . assertTrue ( STRING_4 , VAR_5 ) ; return STRING_5 ; }", "our_target": "        Assert.assertTrue(\"Cannot detect sensor reconnection.\",\n                mCallback.waitForConnection(mSensorId));\n", "our_code": "    public String test4_OnReconnect() {\n        featureSupportedOrSkip();\n        sensorConnectedOrSkip();\n        sensorDisconnectedOrSkip();\n\n        showUserMessage(String.format(\"Please connect the same sensor that was previously \" +\n                    \"connected in %d seconds\", CONNECTION_TIMEOUT_SEC));\n<|startfocus|>\n        Assert.assertTrue(\"Cannot detect sensor reconnection.\", mCallback.waitForConnection(mSensorId));\n<|endfocus|>\n\n        Integer sensorId = mCallback.getSensorId();\n        boolean match = mSensorId != null && sensorId != null &&\n                sensorId.intValue() == mSensorId.intValue();\n        Assert.assertTrue(\"Id mismatch for the reconnected sensor\", match);\n        return \"OnReconnect: Success\";\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "String", "<|s|>", "test", "4", "_", "On", "Reconnect", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "feature", "Supported", "Or", "Skip", "(", ");", "<|nl|>", "<|8-s|>", "sensor", "Connected", "Or", "Skip", "(", ");", "<|nl|>", "<|8-s|>", "sensor", "Disconnected", "Or", "Skip", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "show", "User", "Message", "(", "String", ".", "format", "(", "\"", "Please", "<|s|>", "connect", "<|s|>", "the", "<|s|>", "same", "<|s|>", "sensor", "<|s|>", "that", "<|s|>", "was", "<|s|>", "previously", "<|s|>", "\"", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "connected", "<|s|>", "in", "<|s|>", "%", "d", "<|s|>", "seconds", "\"", ",", "<|s|>", "CONNECTION", "_", "TIMEOUT", "_", "SEC", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Assert", ".", "assert", "True", "(", "\"", "Cannot", "<|s|>", "detect", "<|s|>", "sensor", "<|s|>", "reconnection", ".", "\"", ",", "<|s|>", "m", "Callback", ".", "wait", "For", "Connection", "(", "m", "Sensor", "Id", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "Integer", "<|s|>", "sensor", "Id", "<|s|>", "=", "<|s|>", "m", "Callback", ".", "get", "Sensor", "Id", "(", ");", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "match", "<|s|>", "=", "<|s|>", "m", "Sensor", "Id", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "sensor", "Id", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|nl|>", "<|16-s|>", "sensor", "Id", ".", "int", "Value", "(", ")", "<|s|>", "==", "<|s|>", "m", "Sensor", "Id", ".", "int", "Value", "(", ");", "<|nl|>", "<|8-s|>", "Assert", ".", "assert", "True", "(", "\"", "Id", "<|s|>", "mismatch", "<|s|>", "for", "<|s|>", "the", "<|s|>", "reconnected", "<|s|>", "sensor", "\"", ",", "<|s|>", "match", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "\"", "On", "Reconnect", ":", "<|s|>", "Success", "\"", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 146, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_887", "comment_id": "bc28cfc6_9b13143e", "class_list": ["DynamicSensorDiscoveryTestActivity", "Callback"], "func_list": ["public DynamicSensorDiscoveryTestActivity()", "public String test0_OnConnect()", "public String test1_DynamicSensorList()", "public String test2_SensorOperation()", "public String test3_OnDisconnect()", "public String test4_OnReconnect()", "public void onDynamicSensorConnected(Sensor sensor)", "public void onDynamicSensorDisconnected(Sensor sensor)", "public boolean waitForConnection(Integer sensorId)", "public boolean waitForDisconnection()", "public boolean waitForSensorEvent()", "new SensorEventCallback()", "public void onSensorChanged(SensorEvent e)", "public boolean isSensorInList()", "public boolean isSensorInListOfSpecificType()", "public Integer getSensorId()", "private boolean assumeSensorIsSet()", "private boolean isDynamicFlagSetCorrectly()", "private void featureSupportedOrSkip()", "private void sensorConnectedOrSkip()", "private void sensorDisconnectedOrSkip()", "private void showUserMessage(String s)", "public DynamicSensorDiscoveryTestActivity()", "public String test0_OnConnect()", "public String test1_DynamicSensorList()", "public String test2_SensorOperation()", "public String test3_OnDisconnect()", "public String test4_OnReconnect()", "public void onDynamicSensorConnected(Sensor sensor)", "public void onDynamicSensorDisconnected(Sensor sensor)", "public boolean waitForConnection(Integer sensorId)", "public boolean waitForDisconnection()", "public boolean waitForSensorEvent()", "new SensorEventCallback()", "public void onSensorChanged(SensorEvent e)", "public boolean isSensorInList()", "public boolean isSensorInListOfSpecificType()", "public Integer getSensorId()", "private boolean assumeSensorIsSet()", "private boolean isDynamicFlagSetCorrectly()", "private void featureSupportedOrSkip()", "private void sensorConnectedOrSkip()", "private void sensorDisconnectedOrSkip()", "private void showUserMessage(String s)"], "prime_var_dic": {"String": 1, "int": 3, "approach": 1}}, {"idx": 36876, "status": "update", "global_index": 16231, "project_name": "android_", "written_on": "2015-03-23 11:46:27", "tufano_target": "public VAR_1 ( ) { super ( false ) ; String value = VAR_2 . getValue ( ) ; if ( ! TYPE_2 . isEmpty ( value ) ) { for ( String VAR_4 : TYPE_3 . METHOD_4 ( STRING_4 ) . split ( value ) ) { VAR_3 . add ( VAR_4 ) ; } } METHOD_3 ( STRING_3 ) ; init ( ) ; }", "comment": "you can use StringUtil.isEmpty()", "tokenized_comment": ["you", "<|s|>", "can", "<|s|>", "use", "<|s|>", "String", "Util", ".", "is", "Empty", "(", ")"], "tufano_code": "public VAR_1 ( ) { super ( false ) ; String value = VAR_2 . getValue ( ) ; if ( value != null && value != STRING_1 ) { VAR_3 . METHOD_1 ( TYPE_1 . METHOD_2 ( value . split ( STRING_2 ) ) ) ; } METHOD_3 ( STRING_3 ) ; init ( ) ; }", "our_target": "      if (!StringUtil.isEmpty(value)) {\n       for (String flag : Splitter.on(\"|\").split(value)) {\n         mySelectedFlags.add(flag);\n       }\n", "our_code": "    public FlagDialog() {\n      super(false);\n      String value = myItem.getValue();\n<|startfocus|>\n      if (value != null && value != \"\") {\n        mySelectedFlags.addAll(Arrays.asList(value.split(\"\\\\|\")));\n<|endfocus|>\n      }\n      setTitle(\"Flag Options\");\n      init();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Flag", "Dialog", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "super", "(", "false", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "value", "<|s|>", "=", "<|s|>", "my", "Item", ".", "get", "Value", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "value", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "value", "<|s|>", "!=", "<|s|>", "\"", "\"", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "my", "Selected", "Flags", ".", "add", "All", "(", "Arrays", ".", "as", "List", "(", "value", ".", "split", "(", "\"", "\\", "\\", "|", "\"", ")", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "set", "Title", "(", "\"", "Flag", "<|s|>", "Options", "\"", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "init", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 109, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_259", "comment_id": "c61c8421_b9bafb03", "class_list": ["FlagRendererEditor", "FlagDialog", "CheckBoxListener"], "func_list": ["public FlagRendererEditor(AttributeDefinitions attributeDefinitions)", "public void actionPerformed(final ActionEvent e)", "public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)", "public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)", "public Object getCellEditorValue()", "public FlagDialog()", "protected JComponent createCenterPanel()", "public String getValue()", "public void actionPerformed(ActionEvent e)"], "prime_var_dic": {"implements": 1}}, {"idx": 7205, "status": "update", "global_index": 18081, "project_name": "android_", "written_on": "2009-01-30 01:09:33", "tufano_target": "public void METHOD_1 ( ) { this . METHOD_3 ( null ) ; this . VAR_8 = null ; }", "comment": "Use this.removeCallbacksAndMessages(null) instead.", "tokenized_comment": ["Use", "<|s|>", "this", ".", "remove", "Callbacks", "And", "Messages", "(", "null", ")", "<|s|>", "instead", "."], "tufano_code": "public void METHOD_1 ( ) { this . METHOD_2 ( VAR_1 ) ; this . METHOD_2 ( VAR_2 ) ; this . METHOD_2 ( VAR_3 ) ; this . METHOD_2 ( VAR_4 ) ; this . METHOD_2 ( VAR_5 ) ; this . METHOD_2 ( VAR_6 ) ; this . METHOD_2 ( VAR_7 ) ; this . VAR_8 = null ; }", "our_target": "        this.removeCallbacksAndMessages(null);\n", "our_code": "    public void dispose() {\n        //Remove all messages from the queue\n<|startfocus|>\n        this.removeMessages(EVENT_READ_IMG_DONE);\n        this.removeMessages(EVENT_READ_ICON_DONE);\n        this.removeMessages(EVENT_GET_EF_LINEAR_RECORD_SIZE_DONE);\n        this.removeMessages(EVENT_GET_RECORD_SIZE_DONE);\n        this.removeMessages(EVENT_GET_BINARY_SIZE_DONE);\n        this.removeMessages(EVENT_READ_RECORD_DONE);\n        this.removeMessages(EVENT_READ_BINARY_DONE);\n<|endfocus|>\n\n        this.phone = null;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "dispose", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "Remove", "<|s|>", "all", "<|s|>", "messages", "<|s|>", "from", "<|s|>", "the", "<|s|>", "queue", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Messages", "(", "EVENT", "_", "READ", "_", "IMG", "_", "DONE", ");", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Messages", "(", "EVENT", "_", "READ", "_", "ICON", "_", "DONE", ");", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Messages", "(", "EVENT", "_", "GET", "_", "EF", "_", "LINEAR", "_", "RECORD", "_", "SIZE", "_", "DONE", ");", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Messages", "(", "EVENT", "_", "GET", "_", "RECORD", "_", "SIZE", "_", "DONE", ");", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Messages", "(", "EVENT", "_", "GET", "_", "BINARY", "_", "SIZE", "_", "DONE", ");", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Messages", "(", "EVENT", "_", "READ", "_", "RECORD", "_", "DONE", ");", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Messages", "(", "EVENT", "_", "READ", "_", "BINARY", "_", "DONE", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "this", ".", "phone", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 74, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4924", "comment_id": "AAAABn%2F%2F%2F6A%3D", "class_list": ["RuimFileHandler", "LoadLinearFixedContext"], "func_list": ["public void dispose()", "protected void loadEFLinearFixed(int fileid, int recordNum, Message onLoaded)", "public void loadEFImgLinearFixed(int recordNum, Message onLoaded)", "protected void getEFLinearRecordSize(int fileid, Message onLoaded)", "protected void loadEFLinearFixedAll(int fileid, Message onLoaded)", "protected void loadEFTransparent(int fileid, Message onLoaded)", "protected void loadEFImgTransparent(int fileid, int highOffset, int lowOffset,", "protected void updateEFLinearFixed(int fileid, int recordNum, byte[] data,", "protected void updateEFTransparent(int fileid, byte[] data, Message onComplete)", "public void handleMessage(Message msg)", "private void sendResult(Message response, Object result, Throwable ex)"], "prime_var_dic": {}}, {"idx": 36041, "status": "update", "global_index": 9406, "project_name": "android_", "written_on": "2015-10-22 06:45:50", "tufano_target": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( VAR_1 ) ) ; int VAR_4 = INT_2 ; int VAR_5 = INT_2 ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_5 ) ; VAR_6 = TYPE_5 . METHOD_7 ( VAR_1 , VAR_3 . METHOD_8 ( ) ) ; }", "comment": "Can we make this a bit larger, say 30 x 16?", "tokenized_comment": ["Can", "<|s|>", "we", "<|s|>", "make", "<|s|>", "this", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "larger", ",", "<|s|>", "say", "<|s|>", "30", "<|s|>", "x", "<|s|>", "16", "?"], "tufano_code": "private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( VAR_1 ) ) ; int VAR_4 = INT_1 ; int VAR_5 = INT_1 ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_5 ) ; VAR_6 = TYPE_5 . METHOD_7 ( VAR_1 , VAR_3 . METHOD_8 ( ) ) ; }", "our_target": "        int X = 1024;\n        int Y = 1024;\n", "our_code": "    private void initializeGlobals(RenderScript RS, ScriptC_single_source_script s) {\n        Type.Builder i32TypeBuilder = new Type.Builder(RS, Element.I32(RS));\n<|startfocus|>\n        int X = 4;\n        int Y = 4;\n<|endfocus|>\n        s.set_dimX(X);\n        s.set_dimY(Y);\n        i32TypeBuilder.setX(X).setY(Y);\n        A = Allocation.createTyped(RS, i32TypeBuilder.create());\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "initialize", "Globals", "(", "Render", "Script", "<|s|>", "RS", ",", "<|s|>", "Script", "C", "_", "single", "_", "source", "_", "script", "<|s|>", "s", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Type", ".", "Builder", "<|s|>", "i", "32", "Type", "Builder", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Type", ".", "Builder", "(", "RS", ",", "<|s|>", "Element", ".", "I", "32", "(", "RS", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "int", "<|s|>", "X", "<|s|>", "=", "<|s|>", "4", ";", "<|nl|>", "<|8-s|>", "int", "<|s|>", "Y", "<|s|>", "=", "<|s|>", "4", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "s", ".", "set", "_", "dim", "X", "(", "X", ");", "<|nl|>", "<|8-s|>", "s", ".", "set", "_", "dim", "Y", "(", "Y", ");", "<|nl|>", "<|8-s|>", "i", "32", "Type", "Builder", ".", "set", "X", "(", "X", ")", ".", "set", "Y", "(", "Y", ");", "<|nl|>", "<|8-s|>", "A", "<|s|>", "=", "<|s|>", "Allocation", ".", "create", "Typed", "(", "RS", ",", "<|s|>", "i", "32", "Type", "Builder", ".", "create", "(", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 35, "base_patch_number": 16, "changed_patch_number": 17, "code_file_name": "android_2726", "comment_id": "19337ad8_f95ac3db", "class_list": ["UT_single_source_script"], "func_list": ["protected UT_single_source_script(RSTestCore rstc, Resources res, Context ctx)", "private void initializeGlobals(RenderScript RS, ScriptC_single_source_script s)", "public void run()"], "prime_var_dic": {}}, {"idx": 11867, "status": "update", "global_index": 18118, "project_name": "android_", "written_on": "2009-02-10 07:32:00", "tufano_target": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; VAR_1 . METHOD_4 ( this ) ; this . METHOD_5 ( null ) ; for ( TYPE_1 c : VAR_2 ) { try { if ( c != null ) METHOD_6 ( c ) ; } catch ( TYPE_2 VAR_4 ) { TYPE_3 . METHOD_7 ( VAR_5 , STRING_1 ) ; } } this . VAR_3 = null ; }", "comment": "> Use this.removeCallbacksAndMessages(null) instead.\nFixed in Patch Set 2", "tokenized_comment": [">", "<|s|>", "Use", "<|s|>", "this", ".", "remove", "Callbacks", "And", "Messages", "(", "null", ")", "<|s|>", "instead", ".", "<|nl|>", "Fixed", "<|s|>", "in", "<|s|>", "Patch", "<|s|>", "Set", "<|s|>", "2"], "tufano_code": "public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_3 ( this ) ; VAR_1 . METHOD_4 ( this ) ; this . METHOD_5 ( null ) ; for ( TYPE_1 c : VAR_2 ) { if ( c != null ) { c . METHOD_1 ( ) ; c = null ; } else { continue ; } } this . VAR_3 = null ; }", "our_target": "            try {\n                if(c != null) hangup(c);\n            } catch (CallStateException ex) {\n                Log.e(LOG_TAG, \"unexpected error on hangup during dispose\");\n", "our_code": "    public void dispose() {\n        cm.unregisterForCallStateChanged(this);\n        cm.unregisterForOn(this);\n        cm.unregisterForNotAvailable(this);\n\n        //Remove messages in the queue\n        this.removeCallbacksAndMessages(null);\n\n        for(CdmaConnection c : connections) {\n<|startfocus|>\n            if(c != null) {\n                c.dispose();\n                c = null;\n            } else {\n                continue;\n<|endfocus|>\n            }\n        }\n        this.phone = null;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "dispose", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "cm", ".", "unregister", "For", "Call", "State", "Changed", "(", "this", ");", "<|nl|>", "<|8-s|>", "cm", ".", "unregister", "For", "On", "(", "this", ");", "<|nl|>", "<|8-s|>", "cm", ".", "unregister", "For", "Not", "Available", "(", "this", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "Remove", "<|s|>", "messages", "<|s|>", "in", "<|s|>", "the", "<|s|>", "queue", "<|nl|>", "<|8-s|>", "this", ".", "remove", "Callbacks", "And", "Messages", "(", "null", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "for", "(", "Cdma", "Connection", "<|s|>", "c", "<|s|>", ":", "<|s|>", "connections", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "(", "c", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "c", ".", "dispose", "(", ");", "<|nl|>", "<|16-s|>", "c", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "continue", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "this", ".", "phone", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 98, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4917", "comment_id": "AAAADn%2F%2F%2F0A%3D", "class_list": ["CdmaCallTracker"], "func_list": ["public void dispose()", "public void registerForVoiceCallStarted(Handler h, int what, Object obj)", "public void unregisterForVoiceCallStarted(Handler h)", "public void registerForVoiceCallEnded(Handler h, int what, Object obj)", "public void unregisterForVoiceCallEnded(Handler h)", "void hangupWaitingOrBackground()", "void hangupForegroundResumeBackground()", "private void handleRadioNotAvailable()", "protected void log(String msg)"], "prime_var_dic": {"LOG_TAG": 1, "boolean": 2, "CdmaConnection": 1, "last": 1, "off": 1, "dialed": 1, "so": 1, "in": 1, "invalid": 1, "call": 4, "happen": 1, "waiting": 1, "change": 1, "sparse": 1, "and": 1, "happened": 1, "during": 1, "calls": 1, "to": 3, "yet": 1, "needsPoll": 1, "normal": 1}}, {"idx": 5559, "status": "update", "global_index": 15061, "project_name": "android_", "written_on": "2014-05-16 22:39:36", "tufano_target": "private static void METHOD_1 ( TYPE_1 message , TYPE_2 < TYPE_1 > VAR_1 ) { boolean VAR_5 = false ; int VAR_3 = VAR_1 . size ( ) ; if ( VAR_3 > 0 ) { TYPE_1 VAR_4 = VAR_1 . get ( VAR_3 - 1 ) ; VAR_2 = ! VAR_4 . equals ( message ) ; } if ( VAR_2 ) { VAR_1 . add ( message ) ; } }", "comment": "instead of \"canAdd\" maybe rename this to \"duplicatesPrevious\" (and invert boolean). That's the purpose of this logic right? (To add, but to remove duplicates)", "tokenized_comment": ["instead", "<|s|>", "of", "<|s|>", "\"", "can", "Add", "\"", "<|s|>", "maybe", "<|s|>", "rename", "<|s|>", "this", "<|s|>", "to", "<|s|>", "\"", "duplicates", "Previous", "\"", "<|s|>", "(", "and", "<|s|>", "invert", "<|s|>", "boolean", ")", ".", "<|s|>", "That", "'", "s", "<|s|>", "the", "<|s|>", "purpose", "<|s|>", "of", "<|s|>", "this", "<|s|>", "logic", "<|s|>", "right", "?", "<|s|>", "(", "To", "<|s|>", "add", ",", "<|s|>", "but", "<|s|>", "to", "<|s|>", "remove", "<|s|>", "duplicates", ")"], "tufano_code": "private static void METHOD_1 ( TYPE_1 message , TYPE_2 < TYPE_1 > VAR_1 ) { boolean VAR_2 = true ; int VAR_3 = VAR_1 . size ( ) ; if ( VAR_3 > 0 ) { TYPE_1 VAR_4 = VAR_1 . get ( VAR_3 - 1 ) ; VAR_2 = ! VAR_4 . equals ( message ) ; } if ( VAR_2 ) { VAR_1 . add ( message ) ; } }", "our_target": "    boolean duplicatesPrevious = false;\n", "our_code": "  private static void addMessage(@NotNull GradleMessage message, @NotNull List<GradleMessage> messages) {\n<|startfocus|>\n    boolean canAdd = true;\n<|endfocus|>\n    int messageCount = messages.size();\n    if (messageCount > 0) {\n      GradleMessage lastMessage = messages.get(messageCount - 1);\n      canAdd = !lastMessage.equals(message);\n    }\n    if (canAdd) {\n      messages.add(message);\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "add", "Message", "(", "@", "Not", "Null", "<|s|>", "Gradle", "Message", "<|s|>", "message", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "List", "<", "Gradle", "Message", ">", "<|s|>", "messages", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "can", "Add", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "message", "Count", "<|s|>", "=", "<|s|>", "messages", ".", "size", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "message", "Count", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Gradle", "Message", "<|s|>", "last", "Message", "<|s|>", "=", "<|s|>", "messages", ".", "get", "(", "message", "Count", "<|s|>", "-", "<|s|>", "1", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "can", "Add", "<|s|>", "=", "<|s|>", "!", "last", "Message", ".", "equals", "(", "message", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "can", "Add", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "messages", ".", "add", "(", "message", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 146, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_7", "comment_id": "dff7d045_b72198be", "class_list": ["JavacOutputParser"], "func_list": ["private static void addMessage(@NotNull GradleMessage message, @NotNull List<GradleMessage> messages)", "private static boolean isMessageEnd(@Nullable String line)", "private static List<String> convertMessages(@NotNull List<String> messages)"], "prime_var_dic": {"implements": 1, "char": 1}}, {"idx": 94522, "status": "update", "global_index": 2886, "project_name": "android_", "written_on": "2017-03-27 16:24:12", "tufano_target": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { try { VAR_2 . METHOD_3 ( ) ; } catch ( TYPE_4 VAR_4 ) { TYPE_3 . METHOD_4 ( VAR_5 , STRING_1 , VAR_4 ) ; } } }", "comment": "what exception are you expecting ? catching \"Exception\" or \"Throwable\" is usually considered bad practice.", "tokenized_comment": ["what", "<|s|>", "exception", "<|s|>", "are", "<|s|>", "you", "<|s|>", "expecting", "<|s|>", "?", "<|s|>", "catching", "<|s|>", "\"", "Exception", "\"", "<|s|>", "or", "<|s|>", "\"", "Throwable", "\"", "<|s|>", "is", "<|s|>", "usually", "<|s|>", "considered", "<|s|>", "bad", "<|s|>", "practice", "."], "tufano_code": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { try { VAR_2 . METHOD_3 ( ) ; } catch ( TYPE_2 VAR_4 ) { TYPE_3 . METHOD_4 ( VAR_5 , STRING_1 , VAR_4 ) ; } } }", "our_target": "            } catch (SecurityException e) {\n", "our_code": "    private void setConnectingThread(final Thread thread) {\n        final Thread oldThread = mConnectingThread.getAndSet(thread);\n        if (oldThread != null) {\n            try {\n                oldThread.interrupt();\n<|startfocus|>\n            } catch (Exception e) {\n<|endfocus|>\n                Log.e(TAG, \"Interrupting thread\", e);\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "set", "Connecting", "Thread", "(", "final", "<|s|>", "Thread", "<|s|>", "thread", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Thread", "<|s|>", "old", "Thread", "<|s|>", "=", "<|s|>", "m", "Connecting", "Thread", ".", "get", "And", "Set", "(", "thread", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "old", "Thread", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "old", "Thread", ".", "interrupt", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "Interrupting", "<|s|>", "thread", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 139, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3711", "comment_id": "c0c887da_fcd12834", "class_list": ["ToyVpnService", "Connection"], "func_list": ["public Connection(Thread thread, ParcelFileDescriptor pfd)", "public void onCreate()", "public int onStartCommand(Intent intent, int flags, int startId)", "public void onDestroy()", "public boolean handleMessage(Message message)", "private void connect()", "private void startConnection(final ToyVpnConnection connection)", "public void onEstablish(ParcelFileDescriptor tunInterface)", "private void setConnectingThread(final Thread thread)", "private void setConnection(final Connection connection)", "private void disconnect()", "private void updateForegroundNotification(final int message)", "public Connection(Thread thread, ParcelFileDescriptor pfd)"], "prime_var_dic": {}}, {"idx": 32121, "status": "update", "global_index": 21260, "project_name": "android_", "written_on": "2013-10-17 17:38:21", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; try { VAR_1 . delete ( INT_3 , INT_3 ) ; fail ( ) ; } catch ( TYPE_2 VAR_2 ) { } try { VAR_1 . delete ( INT_3 , INT_1 ) ; fail ( ) ; } catch ( TYPE_2 VAR_2 ) { } }", "comment": "why is this useful? should we have a (4, 4) test to test the clamping? and maybe (2, 6) [clamp but actually remove something] and (2, 2) [valid no-op] tests?\n\n(i guess in general in tests where i'm testing a bunch of different cases i like to have a comment next to each one saying what i think i'm testing with that specific case. why it's needed and how it differs from its neighbors.)", "tokenized_comment": ["why", "<|s|>", "is", "<|s|>", "this", "<|s|>", "useful", "?", "<|s|>", "should", "<|s|>", "we", "<|s|>", "have", "<|s|>", "a", "<|s|>", "(", "4", ",", "<|s|>", "4", ")", "<|s|>", "test", "<|s|>", "to", "<|s|>", "test", "<|s|>", "the", "<|s|>", "clamping", "?", "<|s|>", "and", "<|s|>", "maybe", "<|s|>", "(", "2", ",", "<|s|>", "6", ")", "<|s|>", "[", "clamp", "<|s|>", "but", "<|s|>", "actually", "<|s|>", "remove", "<|s|>", "something", "]", "<|s|>", "and", "<|s|>", "(", "2", ",", "<|s|>", "2", ")", "<|s|>", "[", "valid", "<|s|>", "no", "-", "op", "]", "<|s|>", "tests", "?", "<|nl|>", "<|nl|>", "(", "i", "<|s|>", "guess", "<|s|>", "in", "<|s|>", "general", "<|s|>", "in", "<|s|>", "tests", "<|s|>", "where", "<|s|>", "i", "'", "m", "<|s|>", "testing", "<|s|>", "a", "<|s|>", "bunch", "<|s|>", "of", "<|s|>", "different", "<|s|>", "cases", "<|s|>", "i", "<|s|>", "like", "<|s|>", "to", "<|s|>", "have", "<|s|>", "a", "<|s|>", "comment", "<|s|>", "next", "<|s|>", "to", "<|s|>", "each", "<|s|>", "one", "<|s|>", "saying", "<|s|>", "what", "<|s|>", "i", "<|s|>", "think", "<|s|>", "i", "'", "m", "<|s|>", "testing", "<|s|>", "with", "<|s|>", "that", "<|s|>", "specific", "<|s|>", "case", ".", "<|s|>", "why", "<|s|>", "it", "'", "s", "<|s|>", "needed", "<|s|>", "and", "<|s|>", "how", "<|s|>", "it", "<|s|>", "differs", "<|s|>", "from", "<|s|>", "its", "<|s|>", "neighbors", ".", ")"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; try { VAR_1 . delete ( INT_1 , INT_2 ) ; fail ( ) ; } catch ( TYPE_2 VAR_2 ) { } try { VAR_1 . delete ( INT_3 , INT_1 ) ; fail ( ) ; } catch ( TYPE_2 VAR_2 ) { } }", "our_target": "            sb.delete(4, 4);\n", "our_code": "    public void testDelete_boundChecks() {\n        StringBuilder sb = new StringBuilder(\"yeti\");\n\n        try {\n<|startfocus|>\n            sb.delete(5, 6);\n<|endfocus|>\n            fail();\n        } catch (StringIndexOutOfBoundsException expected) {\n        }\n\n        try {\n            sb.delete(4, 5);\n            fail();\n        } catch (StringIndexOutOfBoundsException expected) {\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Delete", "_", "bound", "Checks", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "Builder", "<|s|>", "sb", "<|s|>", "=", "<|s|>", "new", "<|s|>", "String", "Builder", "(", "\"", "yeti", "\"", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "sb", ".", "delete", "(", "5", ",", "<|s|>", "6", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "fail", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "String", "Index", "Out", "Of", "Bounds", "Exception", "<|s|>", "expected", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "sb", ".", "delete", "(", "4", ",", "<|s|>", "5", ");", "<|nl|>", "<|12-s|>", "fail", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "String", "Index", "Out", "Of", "Bounds", "Exception", "<|s|>", "expected", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 79, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3205", "comment_id": "3e02a442_11538c43", "class_list": ["StringBuilderTest"], "func_list": ["public void testDeleteLastChar()", "public void testDeleteLastChar_singleChar()", "public void testDeleteRange_endsAtLastChar()", "public void testDeleteCharAt_boundChecks()", "public void testDelete_boundChecks()"], "prime_var_dic": {}}, {"idx": 94314, "status": "update", "global_index": 11596, "project_name": "android_", "written_on": "2014-06-30 20:32:01", "tufano_target": "public void METHOD_1 ( TYPE_1 event ) { final long VAR_1 = INT_1 ; TYPE_2 . assertEquals ( STRING_1 , FLOAT_1 , event . values [ 0 ] ) ; long VAR_2 = VAR_3 / VAR_1 ; long VAR_4 = TYPE_3 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( STRING_2 , VAR_2 , VAR_4 , VAR_5 ) ; TYPE_2 . assertEquals ( STRING_3 , VAR_6 . getType ( ) , VAR_7 ) ; TYPE_2 . METHOD_3 ( STRING_4 + STRING_5 , VAR_8 ) ; METHOD_4 ( ) ; VAR_8 = true ; }", "comment": "can this be assertEquals()?", "tokenized_comment": ["can", "<|s|>", "this", "<|s|>", "be", "<|s|>", "assert", "Equals", "(", ")", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 event ) { final long VAR_1 = INT_1 ; TYPE_2 . assertEquals ( STRING_1 , FLOAT_1 , event . values [ 0 ] ) ; long VAR_2 = VAR_3 / VAR_1 ; long VAR_4 = TYPE_3 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( STRING_2 , VAR_2 , VAR_4 , VAR_5 ) ; TYPE_2 . assertTrue ( STRING_3 , VAR_6 . getType ( ) == VAR_7 ) ; TYPE_2 . METHOD_3 ( STRING_4 + STRING_5 , VAR_8 ) ; METHOD_4 ( ) ; VAR_8 = true ; }", "our_target": "        Assert.assertEquals(\"Triggered event type is not Significant Motion\",\n                event.sensor.getType(), Sensor.TYPE_SIGNIFICANT_MOTION);\n", "our_code": "    public void onTrigger(TriggerEvent event) {\n        final long NANOS_PER_MS = 1000000L;\n\n        Assert.assertEquals(\n                \"Values[0] should be 1.0 for significant motion event\", 1.0f,\n                event.values[0]);\n\n        // Check that timestamp is within MAX_ACCEPTABLE_EVENT_TIME_DELAY_MILLIS\n        // It might take time to determine Significant Motion, but then that\n        // event should be reported to the host in a timely fashion.\n        long timeReportedMillis = event.timestamp / NANOS_PER_MS;\n        long timeActualMillis = System.currentTimeMillis();\n        Assert.assertEquals(\"Incorrect time reported in the event\",\n                timeReportedMillis, timeActualMillis, MAX_ACCEPTABLE_EVENT_TIME_DELAY_MILLIS);\n\n        // Verify event type is truly Significant Motion\n<|startfocus|>\n        Assert.assertTrue(\"Triggered event type is not Significant Motion\",\n                event.sensor.getType() == Sensor.TYPE_SIGNIFICANT_MOTION);\n<|endfocus|>\n\n        // Event detected flag should be false if indeed only one event per\n        // request\n        Assert.assertFalse(\"Significant Motion sensor did not automatically \"\n                + \"disable itself from subsequent detection\", mEventDetected);\n\n        // audible cue to indicate Significant Motion occurred\n        beep();\n        mEventDetected = true;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Trigger", "(", "Trigger", "Event", "<|s|>", "event", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "long", "<|s|>", "NANOS", "_", "PER", "_", "MS", "<|s|>", "=", "<|s|>", "1000000", "L", ";", "<|nl|>", "<|nl|>", "<|8-s|>", "Assert", ".", "assert", "Equals", "(", "<|nl|>", "<|16-s|>", "\"", "Values", "[", "0", "]", "<|s|>", "should", "<|s|>", "be", "<|s|>", "1", ".", "0", "<|s|>", "for", "<|s|>", "significant", "<|s|>", "motion", "<|s|>", "event", "\"", ",", "<|s|>", "1", ".", "0", "f", ",", "<|nl|>", "<|16-s|>", "event", ".", "values", "[", "0", "]", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "that", "<|s|>", "timestamp", "<|s|>", "is", "<|s|>", "within", "<|s|>", "MAX", "_", "ACCEPTABLE", "_", "EVENT", "_", "TIME", "_", "DELAY", "_", "MILLIS", "<|nl|>", "<|8-s|>", "//", "<|s|>", "It", "<|s|>", "might", "<|s|>", "take", "<|s|>", "time", "<|s|>", "to", "<|s|>", "determine", "<|s|>", "Significant", "<|s|>", "Motion", ",", "<|s|>", "but", "<|s|>", "then", "<|s|>", "that", "<|nl|>", "<|8-s|>", "//", "<|s|>", "event", "<|s|>", "should", "<|s|>", "be", "<|s|>", "reported", "<|s|>", "to", "<|s|>", "the", "<|s|>", "host", "<|s|>", "in", "<|s|>", "a", "<|s|>", "timely", "<|s|>", "fashion", ".", "<|nl|>", "<|8-s|>", "long", "<|s|>", "time", "Reported", "Millis", "<|s|>", "=", "<|s|>", "event", ".", "timestamp", "<|s|>", "/", "<|s|>", "NANOS", "_", "PER", "_", "MS", ";", "<|nl|>", "<|8-s|>", "long", "<|s|>", "time", "Actual", "Millis", "<|s|>", "=", "<|s|>", "System", ".", "current", "Time", "Millis", "(", ");", "<|nl|>", "<|8-s|>", "Assert", ".", "assert", "Equals", "(", "\"", "Incorrect", "<|s|>", "time", "<|s|>", "reported", "<|s|>", "in", "<|s|>", "the", "<|s|>", "event", "\"", ",", "<|nl|>", "<|16-s|>", "time", "Reported", "Millis", ",", "<|s|>", "time", "Actual", "Millis", ",", "<|s|>", "MAX", "_", "ACCEPTABLE", "_", "EVENT", "_", "TIME", "_", "DELAY", "_", "MILLIS", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Verify", "<|s|>", "event", "<|s|>", "type", "<|s|>", "is", "<|s|>", "truly", "<|s|>", "Significant", "<|s|>", "Motion", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Assert", ".", "assert", "True", "(", "\"", "Triggered", "<|s|>", "event", "<|s|>", "type", "<|s|>", "is", "<|s|>", "not", "<|s|>", "Significant", "<|s|>", "Motion", "\"", ",", "<|nl|>", "<|16-s|>", "event", ".", "sensor", ".", "get", "Type", "(", ")", "<|s|>", "==", "<|s|>", "Sensor", ".", "TYPE", "_", "SIGNIFICANT", "_", "MOTION", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Event", "<|s|>", "detected", "<|s|>", "flag", "<|s|>", "should", "<|s|>", "be", "<|s|>", "false", "<|s|>", "if", "<|s|>", "indeed", "<|s|>", "only", "<|s|>", "one", "<|s|>", "event", "<|s|>", "per", "<|nl|>", "<|8-s|>", "//", "<|s|>", "request", "<|nl|>", "<|8-s|>", "Assert", ".", "assert", "False", "(", "\"", "Significant", "<|s|>", "Motion", "<|s|>", "sensor", "<|s|>", "did", "<|s|>", "not", "<|s|>", "automatically", "<|s|>", "\"", "<|nl|>", "<|16-s|>", "+", "<|s|>", "\"", "disable", "<|s|>", "itself", "<|s|>", "from", "<|s|>", "subsequent", "<|s|>", "detection", "\"", ",", "<|s|>", "m", "Event", "Detected", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "audible", "<|s|>", "cue", "<|s|>", "to", "<|s|>", "indicate", "<|s|>", "Significant", "<|s|>", "Motion", "<|s|>", "occurred", "<|nl|>", "<|8-s|>", "beep", "(", ");", "<|nl|>", "<|8-s|>", "m", "Event", "Detected", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 64, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_892", "comment_id": "c429c520_0ebd3fc4", "class_list": ["TriggerListener", "SignificantMotionTestActivity"], "func_list": ["public TriggerListener(Activity parentActivity)", "public void onTrigger(TriggerEvent event)", "public boolean wasEventTriggered()", "public void reset()", "public void beep()", "private void vibrateDevice(int timeInMs)", "protected void onResume()", "protected void onPause()"], "prime_var_dic": {"MIN_TEST_TIME_MILLIS": 1, "VIBRATE_DURATION_MILLIS": 1, "numPassedTests": 1, "not": 1, "chair": 1}}, {"idx": 21902, "status": "update", "global_index": 15238, "project_name": "android_", "written_on": "2014-06-11 02:58:05", "tufano_target": "private void METHOD_1 ( TYPE_1 VAR_1 ) { try { TYPE_2 VAR_2 = null ; try { VAR_2 = new TYPE_2 ( METHOD_2 ( VAR_1 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; try { VAR_3 . METHOD_3 ( this ) ; } finally { TYPE_4 . METHOD_4 ( VAR_3 , true ) ; } } finally { TYPE_4 . METHOD_4 ( VAR_2 , true ) ; } } catch ( TYPE_5 VAR_4 ) { TYPE_6 . METHOD_5 ( STRING_1 ) ; } }", "comment": "it happened for me - as mentioned above I didn't have a build directory in my project (where I *had* done a gradlew assemble).  Maybe add a LOG call to capture this here.", "tokenized_comment": ["it", "<|s|>", "happened", "<|s|>", "for", "<|s|>", "me", "<|s|>", "-", "<|s|>", "as", "<|s|>", "mentioned", "<|s|>", "above", "<|s|>", "I", "<|s|>", "didn", "'", "t", "<|s|>", "have", "<|s|>", "a", "<|s|>", "build", "<|s|>", "directory", "<|s|>", "in", "<|s|>", "my", "<|s|>", "project", "<|s|>", "(", "where", "<|s|>", "I", "<|s|>", "*", "had", "*", "<|s|>", "done", "<|s|>", "a", "<|s|>", "gradlew", "<|s|>", "assemble", ")", ".", "<|2-s|>", "Maybe", "<|s|>", "add", "<|s|>", "a", "<|s|>", "LOG", "<|s|>", "call", "<|s|>", "to", "<|s|>", "capture", "<|s|>", "this", "<|s|>", "here", "."], "tufano_code": "private void METHOD_1 ( TYPE_1 VAR_1 ) { try { TYPE_2 VAR_2 = null ; try { VAR_2 = new TYPE_2 ( METHOD_2 ( VAR_1 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; try { VAR_3 . METHOD_3 ( this ) ; } finally { TYPE_4 . METHOD_4 ( VAR_3 , true ) ; } } finally { TYPE_4 . METHOD_4 ( VAR_2 , true ) ; } } catch ( TYPE_5 VAR_4 ) { } }", "our_target": "      LOG.warn(\"Error while trying to save the project state.\");\n", "our_code": "  private void saveOn(Project project) {\n    try {\n      FileOutputStream fos = null;\n      try {\n        fos = new FileOutputStream(getProjectStatePath(project));\n        ObjectOutputStream oos = new ObjectOutputStream(fos);\n        try {\n          oos.writeObject(this);\n        }\n        finally {\n          Closeables.close(oos, true);\n        }\n      }\n      finally {\n        Closeables.close(fos, true);\n      }\n    }\n    catch (IOException e) {\n<|startfocus|>\n      // Will not happen.\n<|endfocus|>\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "save", "On", "(", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "File", "Output", "Stream", "<|s|>", "fos", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "try", "<|s|>", "{", "<|nl|>", "<|8-s|>", "fos", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "Output", "Stream", "(", "get", "Project", "State", "Path", "(", "project", ")", ");", "<|nl|>", "<|8-s|>", "Object", "Output", "Stream", "<|s|>", "oos", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Object", "Output", "Stream", "(", "fos", ");", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "oos", ".", "write", "Object", "(", "this", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "finally", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "Closeables", ".", "close", "(", "oos", ",", "<|s|>", "true", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "finally", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Closeables", ".", "close", "(", "fos", ",", "<|s|>", "true", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Will", "<|s|>", "not", "<|s|>", "happen", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 366, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_381", "comment_id": "1f8a489d_934fec45", "class_list": ["AndroidGradleProjectData", "or", "with", "ModuleData", "WrapperInvocationHandler"], "func_list": ["private AndroidGradleProjectData()", "public static void save(Project project)", "static public boolean loadFromDisk(Project project)", "static boolean isSupported(Class<?> clazz)", "private void applyTo(Project project)", "private void saveOn(Project project)", "private AndroidGradleProjectData()", "public static void save(Project project)", "static public boolean loadFromDisk(Project project)", "static boolean isSupported(Class<?> clazz)", "private void applyTo(Project project)", "private void saveOn(Project project)", "private AndroidGradleProjectData()", "public static void save(Project project)", "static public boolean loadFromDisk(Project project)", "static boolean isSupported(Class<?> clazz)", "private void applyTo(Project project)", "private void saveOn(Project project)", "private AndroidGradleProjectData()"], "prime_var_dic": {}}, {"idx": 2939, "status": "update", "global_index": 12052, "project_name": "android_", "written_on": "2014-08-20 18:29:19", "tufano_target": "public VAR_1 ( String VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 ) { super ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_1 ( new TYPE_3 ( STRING_1 , VAR_4 , METHOD_2 ( ) ) , VAR_5 ) ; VAR_6 = new TYPE_4 ( VAR_4 , VAR_4 . METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) , VAR_7 class , false ) ) ; }", "comment": "Line too long.", "tokenized_comment": ["Line", "<|s|>", "too", "<|s|>", "long", "."], "tufano_code": "public VAR_1 ( String VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 ) { super ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_1 ( new TYPE_3 ( STRING_1 , VAR_4 , METHOD_2 ( ) ) , VAR_5 ) ; VAR_6 = this . new TYPE_4 ( VAR_4 , VAR_4 . METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) , VAR_7 class , false ) ) ; }", "our_target": "    pause(new ProcessListInitializationCondition(\"Wait for Android tool window to finish initialization.\", robot, getContentPanel()),\n          SHORT_TIMEOUT);\n    myProcessListFixture = new ProcessListFixture(robot, robot.finder().findByType(getContentPanel(), JList.class, false));\n", "our_code": "  public LogcatToolWindowFixture(@NotNull String toolWindowId, @NotNull Project project, @NotNull Robot robot) {\n    super(toolWindowId, project, robot);\n\n<|startfocus|>\n    pause(new ProcessListInitializationCondition(\"Wait for Android tool window to finish initialization.\", robot, getContentPanel()), SHORT_TIMEOUT);\n    myProcessListFixture = this.new ProcessListFixture(robot, robot.finder().findByType(getContentPanel(), JList.class, false));\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Logcat", "Tool", "Window", "Fixture", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "tool", "Window", "Id", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Robot", "<|s|>", "robot", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "super", "(", "tool", "Window", "Id", ",", "<|s|>", "project", ",", "<|s|>", "robot", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "pause", "(", "new", "<|s|>", "Process", "List", "Initialization", "Condition", "(", "\"", "Wait", "<|s|>", "for", "<|s|>", "Android", "<|s|>", "tool", "<|s|>", "window", "<|s|>", "to", "<|s|>", "finish", "<|s|>", "initialization", ".", "\"", ",", "<|s|>", "robot", ",", "<|s|>", "get", "Content", "Panel", "(", ")", ")", ",", "<|s|>", "SHORT", "_", "TIMEOUT", ");", "<|nl|>", "<|4-s|>", "my", "Process", "List", "Fixture", "<|s|>", "=", "<|s|>", "this", ".", "new", "<|s|>", "Process", "List", "Fixture", "(", "robot", ",", "<|s|>", "robot", ".", "finder", "(", ")", ".", "find", "By", "Type", "(", "get", "Content", "Panel", "(", ")", ",", "<|s|>", "JList", ".", "class", ",", "<|s|>", "false", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 114, "base_patch_number": 11, "changed_patch_number": 12, "code_file_name": "android_40", "comment_id": "b32fbd8b_ff8247f3", "class_list": ["LogcatToolWindowFixture", "ProcessListInitializationCondition", "ProcessListProcessWaitCondition", "ProcessListFixture"], "func_list": ["public boolean test()", "private ProcessListProcessWaitCondition(String description, @NotNull JList processList, @NotNull String packageName)", "public void waitForProcess(@NotNull String packageName)", "public ProcessListFixture selectItem(@NotNull String packageName)", "public LogcatToolWindowFixture(@NotNull String toolWindowId, @NotNull Project project, @NotNull Robot robot)", "public JTabbedPane getTabs()", "public JPanel getContentPanel()", "public ProcessListFixture getProcessList()", "public ActionButtonFixture findAction(@NotNull String text)", "public boolean test()", "private ProcessListProcessWaitCondition(String description, @NotNull JList processList, @NotNull String packageName)", "public boolean test()", "public void waitForProcess(@NotNull String packageName)", "public ProcessListFixture selectItem(@NotNull String packageName)"], "prime_var_dic": {}}, {"idx": 13987, "status": "update", "global_index": 4086, "project_name": "android_", "written_on": "2016-07-07 17:16:54", "tufano_target": "private VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_1 target ) { this . VAR_2 = VAR_2 ; TYPE_3 VAR_4 = VAR_2 . METHOD_1 ( ) ; assert VAR_4 != null ; this . VAR_4 = ( TYPE_4 ) VAR_4 ; VAR_5 = VAR_3 . METHOD_2 ( VAR_6 class ) ; this . VAR_3 = VAR_3 ; this . target = target ; }", "comment": "Look suspicious, why not something like getParent(JES.class)?", "tokenized_comment": ["Look", "<|s|>", "suspicious", ",", "<|s|>", "why", "<|s|>", "not", "<|s|>", "something", "<|s|>", "like", "<|s|>", "get", "Parent", "(", "JES", ".", "class", ")", "?"], "tufano_code": "private VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_1 target ) { this . VAR_2 = VAR_2 ; TYPE_3 VAR_4 = VAR_2 . METHOD_1 ( ) ; assert VAR_4 != null ; this . VAR_4 = ( TYPE_4 ) VAR_4 ; if ( VAR_3 . METHOD_2 ( ) instanceof TYPE_5 ) { VAR_5 = ( TYPE_6 ) VAR_3 . METHOD_2 ( ) ; } else { VAR_5 = ( TYPE_6 ) VAR_3 . METHOD_2 ( ) . METHOD_2 ( ) ; } this . VAR_3 = VAR_3 ; this . target = target ; }", "our_target": "      callSiteStmt = callSite.getParent(JExpressionStatement.class);\n", "our_code": "    private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target) {\n      this.callSiteMethod = callSiteMethod;\n      JAbstractMethodBody callSiteMethodBody = callSiteMethod.getBody();\n      assert callSiteMethodBody != null;\n      this.callSiteMethodBody = (JMethodBody) callSiteMethodBody;\n<|startfocus|>\n      if (callSite.getParent() instanceof JExpressionStatement) {\n        callSiteStmt = (JStatement) callSite.getParent();\n      } else {\n        callSiteStmt = (JStatement) callSite.getParent().getParent();\n      }\n<|endfocus|>\n      this.callSite = callSite;\n      this.target = target;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Candidate", "Info", "(", "JMethod", "<|s|>", "call", "Site", "Method", ",", "<|s|>", "JMethod", "Call", "<|s|>", "call", "Site", ",", "<|s|>", "JMethod", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "call", "Site", "Method", "<|s|>", "=", "<|s|>", "call", "Site", "Method", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "JAbstract", "Method", "Body", "<|s|>", "call", "Site", "Method", "Body", "<|s|>", "=", "<|s|>", "call", "Site", "Method", ".", "get", "Body", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "assert", "<|s|>", "call", "Site", "Method", "Body", "<|s|>", "!=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "call", "Site", "Method", "Body", "<|s|>", "=", "<|s|>", "(", "JMethod", "Body", ")", "<|s|>", "call", "Site", "Method", "Body", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "call", "Site", ".", "get", "Parent", "(", ")", "<|s|>", "instanceof", "<|s|>", "JExpression", "Statement", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "call", "Site", "Stmt", "<|s|>", "=", "<|s|>", "(", "JStatement", ")", "<|s|>", "call", "Site", ".", "get", "Parent", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|8-s|>", "call", "Site", "Stmt", "<|s|>", "=", "<|s|>", "(", "JStatement", ")", "<|s|>", "call", "Site", ".", "get", "Parent", "(", ")", ".", "get", "Parent", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "call", "Site", "<|s|>", "=", "<|s|>", "call", "Site", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "target", "<|s|>", "=", "<|s|>", "target", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 101, "base_patch_number": 3, "changed_patch_number": 7, "code_file_name": "android_2424", "comment_id": "5db89ed4_b380f8ac", "class_list": ["makes", "JMethodInliner", "contains", "should", "CandidateInfo", "contains", "PrologueInfo", "contains", "EpilogueInfo", "Visitor"], "func_list": ["private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private PrologueInfo(CandidateInfo candidate)", "private EpilogueInfo(CandidateInfo candidate)", "private static void inline(", "private static void preparePrologue(", "private static void prepareBody(", "private static void prepareEpilogue(", "private Visitor(TransformationRequest tr)", "public boolean visit(JMethod jm)", "public void endVisit(@Nonnull JMethodCall jmc)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private PrologueInfo(CandidateInfo candidate)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private EpilogueInfo(CandidateInfo candidate)"], "prime_var_dic": {}}, {"idx": 95648, "status": "update", "global_index": 3802, "project_name": "android_", "written_on": "2017-02-01 18:37:34", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 VAR_5 ) { VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = new TYPE_5 ( ) ; VAR_13 = false ; }", "comment": "Can be initialized where declared", "tokenized_comment": ["Can", "<|s|>", "be", "<|s|>", "initialized", "<|s|>", "where", "<|s|>", "declared"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 VAR_5 ) { VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = new TYPE_5 ( ) ; VAR_9 = new TYPE_6 ( ) ; VAR_10 = VAR_5 ; VAR_11 = VAR_4 ; VAR_12 = false ; }", "our_target": "        mInitializationComplete = false;\n", "our_code": "    public WifiSupplicantHal(HalDeviceManager halDeviceManager,\n                         HandlerThread wifiStateMachineHandlerThread,\n                         SupplicantStaIfaceHal supplicantStaIfaceHal, Object supplicantHalLock) {\n        mHalDeviceManager = halDeviceManager;\n        // This object is going to be used by both WifiService & WifiP2pService, so we may\n        // need to use different loopers here.\n        mWifiStateMachineHandlerThread = wifiStateMachineHandlerThread;\n        mHalDeviceManagerStatusCallbacks = new HalDeviceManagerStatusListener();\n<|startfocus|>\n        mServiceDiedListener = new ServiceDiedListener();\n        mLock = supplicantHalLock;\n        mSupplicantStaIfaceHal = supplicantStaIfaceHal;\n        initializationComplete = false;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Wifi", "Supplicant", "Hal", "(", "Hal", "Device", "Manager", "<|s|>", "hal", "Device", "Manager", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|s|>", "Handler", "Thread", "<|s|>", "wifi", "State", "Machine", "Handler", "Thread", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|s|>", "Supplicant", "Sta", "Iface", "Hal", "<|s|>", "supplicant", "Sta", "Iface", "Hal", ",", "<|s|>", "Object", "<|s|>", "supplicant", "Hal", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Hal", "Device", "Manager", "<|s|>", "=", "<|s|>", "hal", "Device", "Manager", ";", "<|nl|>", "<|8-s|>", "//", "<|s|>", "This", "<|s|>", "object", "<|s|>", "is", "<|s|>", "going", "<|s|>", "to", "<|s|>", "be", "<|s|>", "used", "<|s|>", "by", "<|s|>", "both", "<|s|>", "Wifi", "Service", "<|s|>", "&", "<|s|>", "Wifi", "P", "2", "p", "Service", ",", "<|s|>", "so", "<|s|>", "we", "<|s|>", "may", "<|nl|>", "<|8-s|>", "//", "<|s|>", "need", "<|s|>", "to", "<|s|>", "use", "<|s|>", "different", "<|s|>", "loopers", "<|s|>", "here", ".", "<|nl|>", "<|8-s|>", "m", "Wifi", "State", "Machine", "Handler", "Thread", "<|s|>", "=", "<|s|>", "wifi", "State", "Machine", "Handler", "Thread", ";", "<|nl|>", "<|8-s|>", "m", "Hal", "Device", "Manager", "Status", "Callbacks", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hal", "Device", "Manager", "Status", "Listener", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Service", "Died", "Listener", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Service", "Died", "Listener", "(", ");", "<|nl|>", "<|8-s|>", "m", "Lock", "<|s|>", "=", "<|s|>", "supplicant", "Hal", "Lock", ";", "<|nl|>", "<|8-s|>", "m", "Supplicant", "Sta", "Iface", "Hal", "<|s|>", "=", "<|s|>", "supplicant", "Sta", "Iface", "Hal", ";", "<|nl|>", "<|8-s|>", "initialization", "Complete", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 65, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_4076", "comment_id": "d68087a0_9e4732cf", "class_list": ["WifiSupplicantHal", "HalDeviceManagerStatusListener", "ServiceDiedListener", "Mutable<E>"], "func_list": ["public WifiSupplicantHal(HalDeviceManager halDeviceManager,", "public boolean initialize()", "public void onRegistration(String fqName, String name, boolean preexisting)", "private boolean getSupplicantService()", "private ISupplicantIface getSupplicantIface(int ifaceType)", "private boolean getSupplicantStaIface()", "private boolean getSupplicantP2pIface()", "private void resetHandles()", "void supplicantServiceDiedHandler()", "public void onStatusChanged()", "public void onServiceDied()", "protected ISupplicantStaIface getStaIfaceMockable(ISupplicantIface iface)", "protected ISupplicantP2pIface getP2pIfaceMockable(ISupplicantIface iface)", "public WifiSupplicantHal(HalDeviceManager halDeviceManager,", "public WifiSupplicantHal(HalDeviceManager halDeviceManager,"], "prime_var_dic": {"Mutable": 1}}, {"idx": 11626, "status": "update", "global_index": 15128, "project_name": "android_", "written_on": "2014-05-28 17:16:19", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null || VAR_2 == null ) { return ; } super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; float VAR_5 = VAR_1 . METHOD_3 ( ) - 1 ; if ( VAR_5 <= 0 ) { VAR_5 = VAR_1 . METHOD_3 ( ) ; } TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_1 ( VAR_3 ) ; }", "comment": "This interferes with anti-aliasing and may make the text unreadable. I would suggest to subtract 1 or 2 from the font size but provide lover bound for the smallest font size.\nOr just use regular font size...", "tokenized_comment": ["This", "<|s|>", "interferes", "<|s|>", "with", "<|s|>", "anti", "-", "aliasing", "<|s|>", "and", "<|s|>", "may", "<|s|>", "make", "<|s|>", "the", "<|s|>", "text", "<|s|>", "unreadable", ".", "<|s|>", "I", "<|s|>", "would", "<|s|>", "suggest", "<|s|>", "to", "<|s|>", "subtract", "<|s|>", "1", "<|s|>", "or", "<|s|>", "2", "<|s|>", "from", "<|s|>", "the", "<|s|>", "font", "<|s|>", "size", "<|s|>", "but", "<|s|>", "provide", "<|s|>", "lover", "<|s|>", "bound", "<|s|>", "for", "<|s|>", "the", "<|s|>", "smallest", "<|s|>", "font", "<|s|>", "size", ".", "<|nl|>", "Or", "<|s|>", "just", "<|s|>", "use", "<|s|>", "regular", "<|s|>", "font", "<|s|>", "size", "..."], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null || VAR_2 == null ) { return ; } super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ( float ) ( VAR_1 . METHOD_3 ( ) * FLOAT_1 ) ) ; VAR_4 . METHOD_1 ( VAR_3 ) ; }", "our_target": "    float smallFontSize = font.getSize() - 1;\n    if (smallFontSize <= 0) {\n      smallFontSize = font.getSize();\n    }\n    Font smallerFont = font.deriveFont(smallFontSize);\n", "our_code": "  public void setFont(Font font) {\n    if (font == null || myContentLabel == null) {\n      return;\n    }\n    super.setFont(font);\n    myContentLabel.setFont(font);\n<|startfocus|>\n    Font smallerFont = font.deriveFont((float)(font.getSize() * 0.8));\n<|endfocus|>\n    myEditLabel.setFont(smallerFont);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Font", "(", "Font", "<|s|>", "font", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "font", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "my", "Content", "Label", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "super", ".", "set", "Font", "(", "font", ");", "<|nl|>", "<|4-s|>", "my", "Content", "Label", ".", "set", "Font", "(", "font", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Font", "<|s|>", "smaller", "Font", "<|s|>", "=", "<|s|>", "font", ".", "derive", "Font", "(", "(", "float", ")", "(", "font", ".", "get", "Size", "(", ")", "<|s|>", "*", "<|s|>", "0", ".", "8", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Edit", "Label", ".", "set", "Font", "(", "smaller", "Font", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 105, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_672", "comment_id": "9f10f896_860e2cc3", "class_list": ["LabelWithEditLink"], "func_list": ["public LabelWithEditLink()", "public void mouseClicked(MouseEvent e)", "private void toggleEdit()", "public void setText(@NotNull String text)", "public String getText()", "public void setFont(Font font)", "public Document getDocument()"], "prime_var_dic": {"String": 4}}, {"idx": 25890, "status": "update", "global_index": 6204, "project_name": "android_", "written_on": "2016-04-29 15:38:35", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . getContext ( ) . METHOD_4 ( ) , VAR_2 ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . getContext ( ) . METHOD_4 ( ) , VAR_4 ) ; try { METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 , VAR_3 ) ) ; } finally { METHOD_7 ( VAR_1 ) ; METHOD_7 ( VAR_3 ) ; VAR_1 = null ; VAR_3 = null ; } }", "comment": "wrap around the whole test...", "tokenized_comment": ["wrap", "<|s|>", "around", "<|s|>", "the", "<|s|>", "whole", "<|s|>", "test", "..."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . getContext ( ) . METHOD_4 ( ) , VAR_2 ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . getContext ( ) . METHOD_4 ( ) , VAR_4 ) ; try { METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 , VAR_3 ) ) ; } finally { VAR_1 . METHOD_7 ( ) ; VAR_3 . METHOD_7 ( ) ; VAR_1 = null ; VAR_3 = null ; } }", "our_target": "      recycle(bitmap1);\n      recycle(bitmap2);\n", "our_code": "  public void compareDifferentBitmapImages() {\n    Bitmap bitmap1 = BitmapFactory.decodeResource(\n        getInstrumentation().getContext().getResources(), android.R.drawable.alert_dark_frame);\n    Bitmap bitmap2 = BitmapFactory.decodeResource(\n        getInstrumentation().getContext().getResources(), android.R.drawable.alert_light_frame);\n\n    try {\n      assertFalse(HasBackgroundMatcher.compareBitmaps(bitmap1, bitmap2));\n    } finally {\n<|startfocus|>\n      bitmap1.recycle();\n      bitmap2.recycle();\n<|endfocus|>\n      bitmap1 = null;\n      bitmap2 = null;\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "compare", "Different", "Bitmap", "Images", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Bitmap", "<|s|>", "bitmap", "1", "<|s|>", "=", "<|s|>", "Bitmap", "Factory", ".", "decode", "Resource", "(", "<|nl|>", "<|8-s|>", "get", "Instrumentation", "(", ")", ".", "get", "Context", "(", ")", ".", "get", "Resources", "(", ")", ",", "<|s|>", "android", ".", "R", ".", "drawable", ".", "alert", "_", "dark", "_", "frame", ");", "<|nl|>", "<|4-s|>", "Bitmap", "<|s|>", "bitmap", "2", "<|s|>", "=", "<|s|>", "Bitmap", "Factory", ".", "decode", "Resource", "(", "<|nl|>", "<|8-s|>", "get", "Instrumentation", "(", ")", ".", "get", "Context", "(", ")", ".", "get", "Resources", "(", ")", ",", "<|s|>", "android", ".", "R", ".", "drawable", ".", "alert", "_", "light", "_", "frame", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "assert", "False", "(", "Has", "Background", "Matcher", ".", "compare", "Bitmaps", "(", "bitmap", "1", ",", "<|s|>", "bitmap", "2", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "finally", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "1", ".", "recycle", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "2", ".", "recycle", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "1", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "bitmap", "2", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 92, "base_patch_number": 10, "changed_patch_number": 11, "code_file_name": "android_1982", "comment_id": "08d0953a_840cb033", "class_list": ["HasBackgroundMatcherTest"], "func_list": ["public void verifyViewHasBackground()", "public void verifyBackgroundWhenBackgroundIsNotSet()", "public void compareSameBitmapImage()", "public void compareDifferentBitmapImages()"], "prime_var_dic": {}}, {"idx": 21780, "status": "update", "global_index": 13208, "project_name": "android_", "written_on": "2014-11-03 16:14:18", "tufano_target": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , STRING_1 ) ; } catch ( TYPE_2 VAR_5 ) { throw new TYPE_5 ( METHOD_6 ( ) , VAR_5 ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_5 ( ) ; throw new TYPE_3 ( ) ; } }", "comment": "Remove", "tokenized_comment": ["Remove"], "tufano_code": "public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , STRING_1 ) ; } catch ( TYPE_2 VAR_5 ) { VAR_5 . METHOD_5 ( ) ; throw new TYPE_3 ( ) ; } catch ( TYPE_4 VAR_5 ) { VAR_5 . METHOD_5 ( ) ; throw new TYPE_3 ( ) ; } }", "our_target": "      throw new LibraryIOException(getLocation(), e);\n", "our_code": "  public void close() {\n    try {\n      OutputVFile libraryPropertiesOut = outputVDir.createOutputVFile(LIBRARY_PROPERTIES_VPATH);\n      libraryProperties.store(libraryPropertiesOut.openWrite(), \"Library properties\");\n    } catch (CannotCreateFileException e) {\n<|startfocus|>\n      e.printStackTrace();\n      throw new AssertionError();\n<|endfocus|>\n    } catch (IOException e) {\n      e.printStackTrace();\n      throw new AssertionError();\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "close", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Output", "VFile", "<|s|>", "library", "Properties", "Out", "<|s|>", "=", "<|s|>", "output", "VDir", ".", "create", "Output", "VFile", "(", "LIBRARY", "_", "PROPERTIES", "_", "VPATH", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "library", "Properties", ".", "store", "(", "library", "Properties", "Out", ".", "open", "Write", "(", ")", ",", "<|s|>", "\"", "Library", "<|s|>", "properties", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Cannot", "Create", "File", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "e", ".", "print", "Stack", "Trace", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Assertion", "Error", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "e", ".", "print", "Stack", "Trace", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Assertion", "Error", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 114, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2393", "comment_id": "d59c1a86_0ab89fee", "class_list": ["OutputJackLibraryImpl"], "func_list": ["public String getDescription()", "public OutputLibrary getOutputLibrary()", "public OutputJackLibraryImpl(@Nonnull OutputVDir outputVDir, @Nonnull String emitterId,", "public boolean needsSequentialWriting()", "public OutputLibraryLocation getLocation()", "public void close()", "public int getCurrentMinorVersion()", "public int getCurrentMajorVersion()"], "prime_var_dic": {"outputVDir": 1}}, {"idx": 95641, "status": "update", "global_index": 3800, "project_name": "android_", "written_on": "2017-02-01 18:54:29", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 VAR_5 ) { VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = new TYPE_5 ( ) ; VAR_9 = new TYPE_6 ( ) ; VAR_10 = VAR_5 ; VAR_11 = VAR_4 ; VAR_12 = false ; }", "comment": "Rather than exposing this variable for test purposes, i would much rather have a method exposed for it.", "tokenized_comment": ["Rather", "<|s|>", "than", "<|s|>", "exposing", "<|s|>", "this", "<|s|>", "variable", "<|s|>", "for", "<|s|>", "test", "<|s|>", "purposes", ",", "<|s|>", "i", "<|s|>", "would", "<|s|>", "much", "<|s|>", "rather", "<|s|>", "have", "<|s|>", "a", "<|s|>", "method", "<|s|>", "exposed", "<|s|>", "for", "<|s|>", "it", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 VAR_5 ) { VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; VAR_8 = new TYPE_5 ( ) ; VAR_9 = new TYPE_6 ( ) ; VAR_10 = VAR_5 ; VAR_11 = VAR_4 ; VAR_12 = false ; }", "our_target": "        // This object is going to be used by both WifiService, so we may\n", "our_code": "    public WifiSupplicantHal(HalDeviceManager halDeviceManager,\n                         HandlerThread wifiStateMachineHandlerThread,\n                         SupplicantStaIfaceHal supplicantStaIfaceHal, Object supplicantHalLock) {\n        mHalDeviceManager = halDeviceManager;\n<|startfocus|>\n        // This object is going to be used by both WifiService & WifiP2pService, so we may\n<|endfocus|>\n        // need to use different loopers here.\n        mWifiStateMachineHandlerThread = wifiStateMachineHandlerThread;\n        mHalDeviceManagerStatusCallbacks = new HalDeviceManagerStatusListener();\n        mServiceDiedListener = new ServiceDiedListener();\n        mLock = supplicantHalLock;\n        mSupplicantStaIfaceHal = supplicantStaIfaceHal;\n        initializationComplete = false;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Wifi", "Supplicant", "Hal", "(", "Hal", "Device", "Manager", "<|s|>", "hal", "Device", "Manager", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|s|>", "Handler", "Thread", "<|s|>", "wifi", "State", "Machine", "Handler", "Thread", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|s|>", "Supplicant", "Sta", "Iface", "Hal", "<|s|>", "supplicant", "Sta", "Iface", "Hal", ",", "<|s|>", "Object", "<|s|>", "supplicant", "Hal", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Hal", "Device", "Manager", "<|s|>", "=", "<|s|>", "hal", "Device", "Manager", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "This", "<|s|>", "object", "<|s|>", "is", "<|s|>", "going", "<|s|>", "to", "<|s|>", "be", "<|s|>", "used", "<|s|>", "by", "<|s|>", "both", "<|s|>", "Wifi", "Service", "<|s|>", "&", "<|s|>", "Wifi", "P", "2", "p", "Service", ",", "<|s|>", "so", "<|s|>", "we", "<|s|>", "may", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "need", "<|s|>", "to", "<|s|>", "use", "<|s|>", "different", "<|s|>", "loopers", "<|s|>", "here", ".", "<|nl|>", "<|8-s|>", "m", "Wifi", "State", "Machine", "Handler", "Thread", "<|s|>", "=", "<|s|>", "wifi", "State", "Machine", "Handler", "Thread", ";", "<|nl|>", "<|8-s|>", "m", "Hal", "Device", "Manager", "Status", "Callbacks", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hal", "Device", "Manager", "Status", "Listener", "(", ");", "<|nl|>", "<|8-s|>", "m", "Service", "Died", "Listener", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Service", "Died", "Listener", "(", ");", "<|nl|>", "<|8-s|>", "m", "Lock", "<|s|>", "=", "<|s|>", "supplicant", "Hal", "Lock", ";", "<|nl|>", "<|8-s|>", "m", "Supplicant", "Sta", "Iface", "Hal", "<|s|>", "=", "<|s|>", "supplicant", "Sta", "Iface", "Hal", ";", "<|nl|>", "<|8-s|>", "initialization", "Complete", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 56, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_4076", "comment_id": "1a893cac_aba55e6d", "class_list": ["WifiSupplicantHal", "HalDeviceManagerStatusListener", "ServiceDiedListener", "Mutable<E>"], "func_list": ["public WifiSupplicantHal(HalDeviceManager halDeviceManager,", "public boolean initialize()", "public void onRegistration(String fqName, String name, boolean preexisting)", "private boolean getSupplicantService()", "private ISupplicantIface getSupplicantIface(int ifaceType)", "private boolean getSupplicantStaIface()", "private boolean getSupplicantP2pIface()", "private void resetHandles()", "void supplicantServiceDiedHandler()", "public void onStatusChanged()", "public void onServiceDied()", "protected ISupplicantStaIface getStaIfaceMockable(ISupplicantIface iface)", "protected ISupplicantP2pIface getP2pIfaceMockable(ISupplicantIface iface)", "public WifiSupplicantHal(HalDeviceManager halDeviceManager,", "public WifiSupplicantHal(HalDeviceManager halDeviceManager,"], "prime_var_dic": {"Mutable": 1}}, {"idx": 87166, "status": "update", "global_index": 12828, "project_name": "android_", "written_on": "2014-09-30 18:04:59", "tufano_target": "public TYPE_1 METHOD_5 ( TYPE_2 VAR_1 , final String VAR_2 ) { TYPE_3 element = METHOD_2 ( VAR_1 , new TYPE_4 ( ) { protected boolean METHOD_3 ( String [ ] text ) { for ( String VAR_3 : text ) { if ( VAR_3 . contains ( VAR_2 ) ) { return true ; } } return false ; } } ) ; return METHOD_4 ( element ) ; }", "comment": "The name implies that the text is done with \"equals\" but it is actually done with \"contains\". What do think about renaming to \"findMessageContainingText\"?", "tokenized_comment": ["The", "<|s|>", "name", "<|s|>", "implies", "<|s|>", "that", "<|s|>", "the", "<|s|>", "text", "<|s|>", "is", "<|s|>", "done", "<|s|>", "with", "<|s|>", "\"", "equals", "\"", "<|s|>", "but", "<|s|>", "it", "<|s|>", "is", "<|s|>", "actually", "<|s|>", "done", "<|s|>", "with", "<|s|>", "\"", "contains", "\"", ".", "<|s|>", "What", "<|s|>", "do", "<|s|>", "think", "<|s|>", "about", "<|s|>", "renaming", "<|s|>", "to", "<|s|>", "\"", "find", "Message", "Containing", "Text", "\"", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , final String VAR_2 ) { TYPE_3 element = METHOD_2 ( VAR_1 , new TYPE_4 ( ) { protected boolean METHOD_3 ( String [ ] text ) { for ( String VAR_3 : text ) { if ( VAR_3 . contains ( VAR_2 ) ) { return true ; } } return false ; } } ) ; return METHOD_4 ( element ) ; }", "our_target": "    public MessageFixture findMessageContainingText(@NotNull ErrorTreeElementKind kind, @NotNull final String interestedText) {\n", "our_code": "<|startfocus|>\n    public MessageFixture findMessageWithText(@NotNull ErrorTreeElementKind kind, @NotNull final String interestedText) {\n<|endfocus|>\n      ErrorTreeElement element = doFindMessage(kind, new MessageMatcher() {\n        @Override\n        protected boolean matches(@NotNull String[] text) {\n          for (String s : text) {\n            if (s.contains(interestedText)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      });\n      return createFixture(element);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Message", "Fixture", "<|s|>", "find", "Message", "With", "Text", "(", "@", "Not", "Null", "<|s|>", "Error", "Tree", "Element", "Kind", "<|s|>", "kind", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "final", "<|s|>", "String", "<|s|>", "interested", "Text", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "Error", "Tree", "Element", "<|s|>", "element", "<|s|>", "=", "<|s|>", "do", "Find", "Message", "(", "kind", ",", "<|s|>", "new", "<|s|>", "Message", "Matcher", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "@", "Override", "<|nl|>", "<|8-s|>", "protected", "<|s|>", "boolean", "<|s|>", "matches", "(", "@", "Not", "Null", "<|s|>", "String", "[", "]", "<|s|>", "text", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "for", "<|s|>", "(", "String", "<|s|>", "s", "<|s|>", ":", "<|s|>", "text", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "s", ".", "contains", "(", "interested", "Text", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "<|2-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "<|2-s|>", "}", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "create", "Fixture", "(", "element", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 96, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_50", "comment_id": "301e645a_57a5aebb", "class_list": ["MessagesToolWindowFixture", "AbstractContentFixture", "MessageMatcher", "SyncContentFixture", "BuildContentFixture", "AbstractMessageFixture", "SyncMessageFixture", "BuildMessageFixture", "AbstractHyperlinkFixture", "SyncHyperlinkFixture", "BuildHyperlinkFixture"], "func_list": ["public AbstractContentFixture getGradleSyncContent()", "public AbstractContentFixture getGradleBuildContent()", "private AbstractContentFixture(@NotNull Content content)", "public AbstractContentFixture requireMessage(@NotNull ErrorTreeElementKind kind, @NotNull final String... text)", "public boolean matches(@NotNull String[] actual)", "public String toString()", "public MessageFixture findMessageWithText(@NotNull ErrorTreeElementKind kind, @NotNull final String interestedText)", "public MessageFixture findMessageWithText(@NotNull ErrorTreeElementKind kind, @NotNull final String interestedText)", "private ErrorTreeElement doFindMessage(@NotNull final ErrorTreeElementKind kind, @NotNull final MessageMatcher matcher)", "private static ErrorTreeElement findMessage(@NotNull ErrorViewStructure errorView,", "public static MessageMatcher firstLineStartingWith(@NotNull final String prefix)", "protected abstract MessageFixture createFixture(@NotNull ErrorTreeElement element);", "public BuildContentFixture(@NotNull Content content)", "protected AbstractMessageFixture(@NotNull Robot robot, @NotNull ErrorTreeElement target)", "protected String extractUrl(@NotNull String wholeText, @NotNull String hyperlinkText)", "public SyncMessageFixture(@NotNull Robot robot, @NotNull ErrorTreeElement target)", "public SyncHyperlinkFixture findHyperlink(@NotNull String hyperlinkText)", "public BuildMessageFixture(@NotNull Robot robot, @NotNull ErrorTreeElement target)", "HyperlinkFixture findHyperlink(@NotNull String hyperlinkText);", "protected AbstractHyperlinkFixture(@NotNull Robot robot, @NotNull String url)", "HyperlinkFixture requireUrl(@NotNull String expected);", "HyperlinkFixture click(boolean synchronous);", "public void run()", "public SyncHyperlinkFixture findHyperlink(@NotNull String hyperlinkText)", "protected abstract void doClick();", "public BuildHyperlinkFixture(@NotNull Robot robot, @NotNull String url, @NotNull Consumer<String> urlAction)", "public AbstractContentFixture getGradleSyncContent()", "public boolean matches(@NotNull String[] actual)", "public String toString()", "public AbstractContentFixture getGradleBuildContent()", "protected AbstractMessageFixture(@NotNull Robot robot, @NotNull ErrorTreeElement target)", "protected String extractUrl(@NotNull String wholeText, @NotNull String hyperlinkText)", "public BuildContentFixture(@NotNull Content content)", "protected AbstractMessageFixture(@NotNull Robot robot, @NotNull ErrorTreeElement target)", "protected AbstractHyperlinkFixture(@NotNull Robot robot, @NotNull String url)", "public HyperlinkFixture requireUrl(@NotNull String expected)", "public HyperlinkFixture click(boolean synchronous)", "public void run()", "public SyncHyperlinkFixture findHyperlink(@NotNull String hyperlinkText)", "protected AbstractHyperlinkFixture(@NotNull Robot robot, @NotNull String url)"], "prime_var_dic": {"click": 1, "Robot": 1, "String": 1}}, {"idx": 73311, "status": "insert", "global_index": 15638, "project_name": "android_", "written_on": "2015-02-16 23:33:38", "tufano_target": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { TYPE_1 VAR_5 = METHOD_2 ( ) ; super . METHOD_1 ( x , y , VAR_1 , height ) ; TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_3 != null && ! VAR_2 . equals ( VAR_4 ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 = VAR_2 ; } }", "comment": "whats the reson for us not using the\n\nhttp://docs.oracle.com/javase/7/docs/api/java/awt/event/ComponentAdapter.html#componentResized(java.awt.event.ComponentEvent)\n\nmaybe it would not have this issue,\n\n(if there is a reason why we are not using it, can you add that as a comment to this method)", "tokenized_comment": ["whats", "<|s|>", "the", "<|s|>", "reson", "<|s|>", "for", "<|s|>", "us", "<|s|>", "not", "<|s|>", "using", "<|s|>", "the", "<|nl|>", "<|nl|>", "http", "://", "docs", ".", "oracle", ".", "com", "/", "javase", "/", "7", "/", "docs", "/", "api", "/", "java", "/", "awt", "/", "event", "/", "Component", "Adapter", ".", "html", "#", "component", "Resized", "(", "java", ".", "awt", ".", "event", ".", "Component", "Event", ")", "<|nl|>", "<|nl|>", "maybe", "<|s|>", "it", "<|s|>", "would", "<|s|>", "not", "<|s|>", "have", "<|s|>", "this", "<|s|>", "issue", ",", "<|nl|>", "<|nl|>", "(", "if", "<|s|>", "there", "<|s|>", "is", "<|s|>", "a", "<|s|>", "reason", "<|s|>", "why", "<|s|>", "we", "<|s|>", "are", "<|s|>", "not", "<|s|>", "using", "<|s|>", "it", ",", "<|s|>", "can", "<|s|>", "you", "<|s|>", "add", "<|s|>", "that", "<|s|>", "as", "<|s|>", "a", "<|s|>", "comment", "<|s|>", "to", "<|s|>", "this", "<|s|>", "method", ")"], "tufano_code": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { super . METHOD_1 ( x , y , VAR_1 , height ) ; TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_3 != null && ! VAR_2 . equals ( VAR_4 ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 = VAR_2 ; } }", "our_target": "  public void setBounds(int x, int y, int width, int height) {\n    Dimension previousSize = getSize();\n\n", "our_code": "<|startfocus|>\n  public void setBounds(int x, int y, int width, int height) {\n<|endfocus|>\n    super.setBounds(x, y, width, height);\n\n    Dimension currentSize = getSize();\n    if (myGraphicsLayoutRenderer != null && !currentSize.equals(myLastSize)) {\n      myGraphicsLayoutRenderer.setSize(currentSize);\n      myLastSize = currentSize;\n    }\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Bounds", "(", "int", "<|s|>", "x", ",", "<|s|>", "int", "<|s|>", "y", ",", "<|s|>", "int", "<|s|>", "width", ",", "<|s|>", "int", "<|s|>", "height", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "super", ".", "set", "Bounds", "(", "x", ",", "<|s|>", "y", ",", "<|s|>", "width", ",", "<|s|>", "height", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "Dimension", "<|s|>", "current", "Size", "<|s|>", "=", "<|s|>", "get", "Size", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Graphics", "Layout", "Renderer", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "!", "current", "Size", ".", "equals", "(", "my", "Last", "Size", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Graphics", "Layout", "Renderer", ".", "set", "Size", "(", "current", "Size", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Last", "Size", "<|s|>", "=", "<|s|>", "current", "Size", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 44, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_704", "comment_id": "0be93ccf_bf77d3b6", "class_list": ["AndroidPreviewPanel"], "func_list": ["public AndroidPreviewPanel(Configuration configuration)", "public void setBounds(int x, int y, int width, int height)", "public void updateConfiguration(@NotNull Configuration configuration)", "public void paintComponent(final Graphics graphics)", "public Dimension getPreferredScrollableViewportSize()", "public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)", "public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)", "public boolean getScrollableTracksViewportWidth()", "public boolean getScrollableTracksViewportHeight()"], "prime_var_dic": {}}, {"idx": 2371, "status": "update", "global_index": 5044, "project_name": "android_", "written_on": "2016-08-26 18:30:11", "tufano_target": "public int METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; String VAR_3 ; for ( int VAR_4 = 0 ; VAR_4 < VAR_1 ; ++ VAR_4 ) { String VAR_3 = ( VAR_4 >= 0 ) ? STRING_1 : null ; VAR_2 += VAR_3 . length ( ) ; } return VAR_2 ; }", "comment": "period at the end of this comment", "tokenized_comment": ["period", "<|s|>", "at", "<|s|>", "the", "<|s|>", "end", "<|s|>", "of", "<|s|>", "this", "<|s|>", "comment"], "tufano_code": "public int METHOD_1 ( int VAR_1 ) { int VAR_2 = 0 ; String VAR_3 ; for ( int VAR_4 = 0 ; VAR_4 < VAR_1 ; ++ VAR_4 ) { VAR_3 = ( VAR_4 >= 0 ) ? STRING_1 : null ; VAR_2 += VAR_3 . length ( ) ; } return VAR_2 ; }", "our_target": "          // Deliberately obscured to make optimizations less likely.\n          String s = (rep >= 0) ? \"hello, world!\" : null;\n", "our_code": "    public int timeStringDexCacheAccess(int reps) {\n        int v = 0;\n        String s;\n        for (int rep = 0; rep < reps; ++rep) {\n<|startfocus|>\n          // Deliberately obscured to make optimizations less likely\n          s = (rep >= 0) ? \"hello, world!\" : null;\n<|endfocus|>\n          v += s.length();\n        }\n        return v;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "int", "<|s|>", "time", "String", "Dex", "Cache", "Access", "(", "int", "<|s|>", "reps", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "v", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|8-s|>", "String", "<|s|>", "s", ";", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "rep", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "rep", "<|s|>", "<", "<|s|>", "reps", ";", "<|s|>", "++", "rep", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "//", "<|s|>", "Deliberately", "<|s|>", "obscured", "<|s|>", "to", "<|s|>", "make", "<|s|>", "optimizations", "<|s|>", "less", "<|s|>", "likely", "<|nl|>", "<|8-s|>", "<|2-s|>", "s", "<|s|>", "=", "<|s|>", "(", "rep", "<|s|>", ">=", "<|s|>", "0", ")", "<|s|>", "?", "<|s|>", "\"", "hello", ",", "<|s|>", "world", "!", "\"", "<|s|>", ":", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "v", "<|s|>", "+=", "<|s|>", "s", ".", "length", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "v", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 27, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_969", "comment_id": "85c2c66f_1de477a0", "class_list": ["StringDexCacheBenchmark"], "func_list": ["public int timeStringDexCacheAccess(int reps)"], "prime_var_dic": {}}, {"idx": 77351, "status": "update", "global_index": 7581, "project_name": "android_", "written_on": "2015-08-28 00:08:57", "tufano_target": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { assert TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ; for ( TYPE_3 VAR_2 : TYPE_4 . METHOD_3 ( VAR_1 ) ) { if ( TYPE_5 . equals ( VAR_2 . METHOD_2 ( ) ) ) { for ( TYPE_3 VAR_3 : TYPE_4 . METHOD_3 ( VAR_2 ) ) { if ( TYPE_6 . equals ( VAR_3 . METHOD_2 ( ) ) && TYPE_7 . equals ( VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ) ) { return true ; } } } } return false ; }", "comment": "&& to next line\n\nif (foo \n      && baz) {..", "tokenized_comment": ["&&", "<|s|>", "to", "<|s|>", "next", "<|s|>", "line", "<|nl|>", "<|nl|>", "if", "<|s|>", "(", "foo", "<|s|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "&&", "<|s|>", "baz", ")", "<|s|>", "{", ".."], "tufano_code": "private boolean METHOD_1 ( TYPE_1 VAR_1 ) { assert TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ; for ( TYPE_3 VAR_2 : TYPE_4 . METHOD_3 ( VAR_1 ) ) { if ( TYPE_5 . equals ( VAR_2 . METHOD_2 ( ) ) ) { for ( TYPE_3 VAR_3 : TYPE_4 . METHOD_3 ( VAR_2 ) ) { if ( TYPE_6 . equals ( VAR_3 . METHOD_2 ( ) ) && TYPE_7 . equals ( VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ) ) { return true ; } } } } return false ; }", "our_target": "                    if (NODE_CATEGORY.equals(intentFilterChild.getNodeName())\n                        && CATEGORY_LEANBACK_LAUNCHER\n                            .equals(intentFilterChild.getAttributeNS(ANDROID_URI, ATTR_NAME))) {\n", "our_code": "    private boolean activityNodeHasLeanbackIntentFilter(@NonNull Node activityNode) {\n        assert NODE_ACTIVITY.equals(activityNode.getNodeName());\n\n        // Visit every intent filter\n        for (Element activityChild : LintUtils.getChildren(activityNode)) {\n            if (NODE_INTENT.equals(activityChild.getNodeName())) {\n                for (Element intentFilterChild : LintUtils.getChildren(activityChild)) {\n                    // Check to see if the category is the leanback launcher\n<|startfocus|>\n                    if (NODE_CATEGORY.equals(intentFilterChild.getNodeName()) &&\n                            CATEGORY_LEANBACK_LAUNCHER\n                                    .equals(intentFilterChild.getAttributeNS(ANDROID_URI, ATTR_NAME))) {\n<|endfocus|>\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "activity", "Node", "Has", "Leanback", "Intent", "Filter", "(", "@", "Non", "Null", "<|s|>", "Node", "<|s|>", "activity", "Node", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "assert", "<|s|>", "NODE", "_", "ACTIVITY", ".", "equals", "(", "activity", "Node", ".", "get", "Node", "Name", "(", ")", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Visit", "<|s|>", "every", "<|s|>", "intent", "<|s|>", "filter", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "Element", "<|s|>", "activity", "Child", "<|s|>", ":", "<|s|>", "Lint", "Utils", ".", "get", "Children", "(", "activity", "Node", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "NODE", "_", "INTENT", ".", "equals", "(", "activity", "Child", ".", "get", "Node", "Name", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "for", "<|s|>", "(", "Element", "<|s|>", "intent", "Filter", "Child", "<|s|>", ":", "<|s|>", "Lint", "Utils", ".", "get", "Children", "(", "activity", "Child", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "//", "<|s|>", "Check", "<|s|>", "to", "<|s|>", "see", "<|s|>", "if", "<|s|>", "the", "<|s|>", "category", "<|s|>", "is", "<|s|>", "the", "<|s|>", "leanback", "<|s|>", "launcher", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "NODE", "_", "CATEGORY", ".", "equals", "(", "intent", "Filter", "Child", ".", "get", "Node", "Name", "(", ")", ")", "<|s|>", "&&", "<|nl|>", "<|16-s|>", "<|12-s|>", "CATEGORY", "_", "LEANBACK", "_", "LAUNCHER", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", ".", "equals", "(", "intent", "Filter", "Child", ".", "get", "Attribute", "NS", "(", "ANDROID", "_", "URI", ",", "<|s|>", "ATTR", "_", "NAME", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 506, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2916", "comment_id": "248c8586_61bba02c", "class_list": ["TVDetector"], "func_list": ["public TVDetector()", "public Speed getSpeed()", "public Collection<String> getApplicableElements()", "public void beforeCheckFile(@NonNull Context context)", "public void afterCheckFile(@NonNull Context context)", "public void visitElement(@NonNull XmlContext context, @NonNull Element element)", "private void checkIfManifestSupportsTV(@NonNull XmlContext context, @NonNull Element element)", "private void checkTVIssues(@NonNull XmlContext context, @NonNull Element element)", "private boolean hasLeanbackSupport(Element element)", "private boolean isUnsupportedHardwareFeature(@NonNull String featureName)", "private boolean isDeprecatedHardwareFeature(@NonNull String featureName)", "private boolean containsStringThatStartsWith(@NonNull String prefix,", "private boolean activityNodeHasLeanbackIntentFilter(@NonNull Node activityNode)"], "prime_var_dic": {"String": 36, "by": 1, "Feature": 1, "hardware": 2, "Name": 1, "intent": 1, "Support": 1, "Unsupported": 1, "Map": 1, "TVDetector": 1, "issues": 1, "android": 1, "is": 1, "tag": 1, "contains": 1, "to": 1}}, {"idx": 16058, "status": "update", "global_index": 11108, "project_name": "android_", "written_on": "2015-06-04 18:31:09", "tufano_target": "private static int METHOD_3 ( String VAR_1 ) { String VAR_4 = TYPE_1 . get ( STRING_2 ) ; if ( TYPE_2 . isEmpty ( VAR_4 ) ) { VAR_4 = TYPE_1 . get ( STRING_3 ) ; } if ( ! TYPE_2 . isEmpty ( VAR_4 ) ) { for ( String VAR_5 : VAR_4 . split ( STRING_4 ) ) { if ( VAR_1 . equals ( VAR_5 ) ) { return VAR_6 ; } } } return VAR_7 ; }", "comment": "this is too specific.  It may work for the 112 case on cdma, but what you really care about is if the address is an emergency number for the current tech.\n\nCould you use PhoneNumberUtils.isEmergencyNumber to catch this and potentially other issues in the future?", "tokenized_comment": ["this", "<|s|>", "is", "<|s|>", "too", "<|s|>", "specific", ".", "<|2-s|>", "It", "<|s|>", "may", "<|s|>", "work", "<|s|>", "for", "<|s|>", "the", "<|s|>", "112", "<|s|>", "case", "<|s|>", "on", "<|s|>", "cdma", ",", "<|s|>", "but", "<|s|>", "what", "<|s|>", "you", "<|s|>", "really", "<|s|>", "care", "<|s|>", "about", "<|s|>", "is", "<|s|>", "if", "<|s|>", "the", "<|s|>", "address", "<|s|>", "is", "<|s|>", "an", "<|s|>", "emergency", "<|s|>", "number", "<|s|>", "for", "<|s|>", "the", "<|s|>", "current", "<|s|>", "tech", ".", "<|nl|>", "<|nl|>", "Could", "<|s|>", "you", "<|s|>", "use", "<|s|>", "Phone", "Number", "Utils", ".", "is", "Emergency", "Number", "<|s|>", "to", "<|s|>", "catch", "<|s|>", "this", "<|s|>", "and", "<|s|>", "potentially", "<|s|>", "other", "<|s|>", "issues", "<|s|>", "in", "<|s|>", "the", "<|s|>", "future", "?"], "tufano_code": "private boolean METHOD_1 ( String VAR_1 ) { return ( VAR_2 . METHOD_2 ( ) == VAR_3 ) && STRING_1 . equals ( VAR_1 ) ; }", "our_target": "    private static int expectedReturnCode(String address) {\n        // retrieve the list of emergency numbers\n        // check read-write ecclist property first\n        String numbers = SystemProperties.get(\"ril.ecclist\");\n        if (TextUtils.isEmpty(numbers)) {\n            // then read-only ecclist property since old RIL only uses this\n            numbers = SystemProperties.get(\"ro.ril.ecclist\");\n        }\n\n        if (!TextUtils.isEmpty(numbers)) {\n        // searches through the comma-separated list for a match,\n        // return true if one is found.\n            for (String emergencyNum : numbers.split(\",\")) {\n                if (address.equals(emergencyNum)) {\n                    return CATEGORY_POSSIBLE_PREMIUM_SHORT_CODE;\n                }\n            }\n        }\n        return CATEGORY_NOT_SHORT_CODE;\n", "our_code": "<|startfocus|>\n    private boolean isCDMA112(String address) {\n        return (mTelephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA)\n                && \"112\".equals(address);\n<|endfocus|>\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "is", "CDMA", "112", "(", "String", "<|s|>", "address", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "m", "Telephony", "Manager", ".", "get", "Phone", "Type", "(", ")", "<|s|>", "==", "<|s|>", "Telephony", "Manager", ".", "PHONE", "_", "TYPE", "_", "CDMA", ")", "<|nl|>", "<|16-s|>", "&&", "<|s|>", "\"", "112", "\"", ".", "equals", "(", "address", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 491, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_5468", "comment_id": "790f0079_72e7665d", "class_list": ["SmsUsageMonitorShortCodeTest", "ShortCodeTest"], "func_list": ["private boolean isCDMA112(String address)", "public void testSmsUsageMonitor()", "private boolean isCDMA112(String address)", "public void testSmsUsageMonitor()"], "prime_var_dic": {"CATEGORY_NOT_SHORT_CODE": 1, "CATEGORY_FREE_SHORT_CODE": 1, "CATEGORY_STANDARD_SHORT_CODE": 1, "CATEGORY_POSSIBLE_PREMIUM_SHORT_CODE": 1, "CATEGORY_PREMIUM_SHORT_CODE": 1, "class": 1}}, {"idx": 60409, "status": "update", "global_index": 7463, "project_name": "android_", "written_on": "2016-04-19 17:12:53", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 view ) { int VAR_6 = 1 ; for ( ; ! VAR_7 . METHOD_3 ( view ) && VAR_6 <= VAR_8 ; VAR_6 ++ ) { VAR_9 . METHOD_1 ( VAR_1 , view ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 ++ ; } while ( ! VAR_4 . METHOD_3 ( view ) && VAR_2 < VAR_5 ) ; assertThat ( view , VAR_4 ) ; }", "comment": "numberOfRepeats", "tokenized_comment": ["number", "Of", "Repeats"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 view ) { int VAR_2 = 0 ; do { VAR_3 . METHOD_1 ( VAR_1 , view ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 ++ ; } while ( ! VAR_4 . METHOD_3 ( view ) && VAR_2 < VAR_5 ) ; assertThat ( view , VAR_4 ) ; }", "our_target": "    int noOfRepeats = 1;\n    for (; !mDesiredStateMatcher.matches(view) && noOfRepeats <= mMaxRepeats; noOfRepeats++) {\n      mAction.perform(uiController, view);\n", "our_code": "  public void perform(UiController uiController, View view) {\n<|startfocus|>\n    int noOfAttempts = 0;\n    do {\n      action.perform(uiController, view);\n<|endfocus|>\n      uiController.loopMainThreadUntilIdle();\n      noOfAttempts++;\n    } while (!desiredStateMatcher.matches(view) && noOfAttempts < maxAttempts);\n    assertThat(view, desiredStateMatcher);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "perform", "(", "Ui", "Controller", "<|s|>", "ui", "Controller", ",", "<|s|>", "View", "<|s|>", "view", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "int", "<|s|>", "no", "Of", "Attempts", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "do", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "action", ".", "perform", "(", "ui", "Controller", ",", "<|s|>", "view", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "ui", "Controller", ".", "loop", "Main", "Thread", "Until", "Idle", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "no", "Of", "Attempts", "++", ";", "<|nl|>", "<|4-s|>", "}", "<|s|>", "while", "<|s|>", "(", "!", "desired", "State", "Matcher", ".", "matches", "(", "view", ")", "<|s|>", "&&", "<|s|>", "no", "Of", "Attempts", "<|s|>", "<", "<|s|>", "max", "Attempts", ");", "<|nl|>", "<|4-s|>", "assert", "That", "(", "view", ",", "<|s|>", "desired", "State", "Matcher", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 63, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1972", "comment_id": "c8983c92_82d6da0d", "class_list": ["RepeatActionUntilViewState"], "func_list": ["public RepeatActionUntilViewState(ViewAction action, Matcher<View> desiredStateMatcher)", "public Matcher<View> getConstraints()", "public String getDescription()", "public void perform(UiController uiController, View view)"], "prime_var_dic": {"int": 1}}, {"idx": 75087, "status": "update", "global_index": 21699, "project_name": "android_", "written_on": "2013-12-18 15:23:10", "tufano_target": "private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; if ( VAR_2 != null ) { VAR_1 = VAR_2 . get ( ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_1 . METHOD_1 ( VAR_3 ) ; VAR_2 = new TYPE_2 < TYPE_1 > ( VAR_1 ) ; } return VAR_1 ; }", "comment": "Use braces here.", "tokenized_comment": ["Use", "<|s|>", "braces", "<|s|>", "here", "."], "tufano_code": "private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; if ( VAR_2 != null ) VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_1 . METHOD_1 ( VAR_3 ) ; VAR_2 = new TYPE_2 < TYPE_1 > ( VAR_1 ) ; } return VAR_1 ; }", "our_target": "    if (ourBundle != null) {\n      bundle = ourBundle.get();\n    }\n", "our_code": "  private static ResourceBundle getBundle() {\n    ResourceBundle bundle = null;\n<|startfocus|>\n    if (ourBundle != null) bundle = ourBundle.get();\n<|endfocus|>\n    if (bundle == null) {\n      bundle = ResourceBundle.getBundle(BUNDLE_NAME);\n      ourBundle = new SoftReference<ResourceBundle>(bundle);\n    }\n    return bundle;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "Resource", "Bundle", "<|s|>", "get", "Bundle", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Resource", "Bundle", "<|s|>", "bundle", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "our", "Bundle", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "bundle", "<|s|>", "=", "<|s|>", "our", "Bundle", ".", "get", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "bundle", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "bundle", "<|s|>", "=", "<|s|>", "Resource", "Bundle", ".", "get", "Bundle", "(", "BUNDLE", "_", "NAME", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "our", "Bundle", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Soft", "Reference", "<", "Resource", "Bundle", ">", "(", "bundle", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "bundle", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 25, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_4608", "comment_id": "a86adb63_ea4d4704", "class_list": ["EndpointBundle"], "func_list": ["private static ResourceBundle getBundle()", "private EndpointBundle()"], "prime_var_dic": {"String": 1}}, {"idx": 40545, "status": "update", "global_index": 12292, "project_name": "android_", "written_on": "2014-08-13 22:33:01", "tufano_target": "void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_2 = false ; VAR_1 . METHOD_2 ( ) ; } try { VAR_3 . get ( ) ; } catch ( TYPE_1 VAR_4 ) { } catch ( TYPE_2 VAR_4 ) { throw new TYPE_3 ( VAR_4 . METHOD_3 ( ) ) ; } }", "comment": "thread", "tokenized_comment": ["thread"], "tufano_code": "void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_2 = false ; VAR_1 . METHOD_2 ( ) ; } try { VAR_3 . get ( ) ; } catch ( TYPE_1 VAR_4 ) { } catch ( TYPE_2 VAR_4 ) { throw new TYPE_3 ( VAR_4 . METHOD_3 ( ) ) ; } }", "our_target": "      // Rethrow the original cause of the exception on this thread.\n", "our_code": "  void stop() {\n    synchronized (myLock) {\n      myRunning = false;\n      myLock.notifyAll();\n    }\n    try {\n      // Wait for the task to finish.\n      myExecutingTask.get();\n    }\n    catch (InterruptedException e) {\n      // Ignore\n    }\n    catch (ExecutionException e) {\n<|startfocus|>\n      // Rethrow the original cause of the exception on this tread.\n<|endfocus|>\n      throw new RuntimeException(e.getCause());\n    }\n  }", "tokenized_code": ["<|2-s|>", "void", "<|s|>", "stop", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "synchronized", "<|s|>", "(", "my", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Running", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Lock", ".", "notify", "All", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Wait", "<|s|>", "for", "<|s|>", "the", "<|s|>", "task", "<|s|>", "to", "<|s|>", "finish", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Executing", "Task", ".", "get", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "Interrupted", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Ignore", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "Execution", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Rethrow", "<|s|>", "the", "<|s|>", "original", "<|s|>", "cause", "<|s|>", "of", "<|s|>", "the", "<|s|>", "exception", "<|s|>", "on", "<|s|>", "this", "<|s|>", "tread", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "e", ".", "get", "Cause", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 139, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_458", "comment_id": "b64deb11_cec186ca", "class_list": ["MemorySampler"], "func_list": ["private Client findClient()", "private void refreshClient()", "private void requestHeapInfo()", "public void clientChanged(@NotNull Client client, int changeMask)", "void stop()", "public void run()"], "prime_var_dic": {"Runnable": 1, "myData": 1, "myApplicationName": 1, "myBridge": 1, "mySampleFrequencyMs": 1}}, {"idx": 358, "status": "update", "global_index": 12012, "project_name": "android_", "written_on": "2014-08-27 17:18:22", "tufano_target": "public TYPE_1 METHOD_4 ( TYPE_2 VAR_1 , String VAR_2 , String VAR_3 ) throws TYPE_3 { TYPE_1 VAR_4 = new TYPE_1 ( VAR_5 , this ) ; if ( VAR_1 == VAR_6 ) { METHOD_1 ( STRING_2 , VAR_2 ) ; } else { METHOD_1 ( STRING_1 , VAR_2 ) ; } TYPE_4 VAR_7 = TYPE_4 . METHOD_5 ( VAR_5 , TYPE_5 . message ( STRING_3 ) ) ; if ( ! VAR_7 . METHOD_6 ( VAR_3 ) ) { VAR_7 . METHOD_7 ( VAR_3 ) ; } VAR_7 . METHOD_8 ( ) ; VAR_4 . METHOD_9 ( ) ; return VAR_4 ; }", "comment": "instead of having a method to select an app, and then click \"Run\", unify these two methods into \"runApplication(String)\". This method will select the app and run it.", "tokenized_comment": ["instead", "<|s|>", "of", "<|s|>", "having", "<|s|>", "a", "<|s|>", "method", "<|s|>", "to", "<|s|>", "select", "<|s|>", "an", "<|s|>", "app", ",", "<|s|>", "and", "<|s|>", "then", "<|s|>", "click", "<|s|>", "\"", "Run", "\"", ",", "<|s|>", "unify", "<|s|>", "these", "<|s|>", "two", "<|s|>", "methods", "<|s|>", "into", "<|s|>", "\"", "run", "Application", "(", "String", ")", "\"", ".", "<|s|>", "This", "<|s|>", "method", "<|s|>", "will", "<|s|>", "select", "<|s|>", "the", "<|s|>", "app", "<|s|>", "and", "<|s|>", "run", "<|s|>", "it", "."], "tufano_code": "public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; }", "our_target": "  @NotNull\n  public EmulatorBasicControls runApplicationInEmulator(@NotNull ApplicationRunMode runMode, @NotNull String appName, @NotNull String deviceName) throws ClassNotFoundException {\n    EmulatorBasicControls emulatorBasicControls = new EmulatorBasicControls(robot, this);\n\n    if (runMode == ApplicationRunMode.DEBUG) {\n      runApplication(\"Debug\", appName);\n    }\n    else {\n      runApplication(\"Run\", appName);\n    }\n\n    ChooseDeviceDialogFixture chooseDeviceDialogFixture = ChooseDeviceDialogFixture.find(robot, AndroidBundle.message(\"choose.device.dialog.title\"));\n    // Try to find already-running emulators to launch the app on.\n    if (!chooseDeviceDialogFixture.chooseRunningDeviceStep(deviceName)) {\n      // If we can't find an already-launched device, fire up a new one.\n      chooseDeviceDialogFixture.getChooseDeviceDialog(deviceName);\n    }\n    chooseDeviceDialogFixture.clickOk();\n\n    emulatorBasicControls.scanEmulatorOutput();\n\n    return emulatorBasicControls;\n", "our_code": "<|startfocus|>\n  public void runApplication() {\n    findActionButtonByActionId(\"Run\").click();\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "run", "Application", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "find", "Action", "Button", "By", "Action", "Id", "(", "\"", "Run", "\"", ")", ".", "click", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 282, "base_patch_number": 16, "changed_patch_number": 19, "code_file_name": "android_42", "comment_id": "7338e55c_e48ef424", "class_list": ["IdeFrameFixture", "ProjectSyncListener", "ProjectBuildListener", "NoOpDisposable"], "func_list": ["public static IdeFrameFixture find(@NotNull final Robot robot, @NotNull final File projectPath, @Nullable final String projectName)", "protected boolean isMatching(IdeFrameImpl frame)", "public boolean test()", "public IdeFrameFixture(@NotNull Robot robot, @NotNull IdeFrameImpl target, @NotNull File projectPath)", "public File getProjectPath()", "public IdeFrameFixture waitForGradleProjectSyncToFinish()", "private void waitForSourceGenerationToFinish()", "public IdeFrameFixture requireModuleCount(int expected)", "public IdeaAndroidProject getAndroidProjectForModule(@NotNull String name)", "public Module getModule(@NotNull String name)", "private ModuleManager getModuleManager()", "public Project getProject()", "public EditorFixture getEditor()", "public GradleInvocationResult invokeProjectMake()", "public void execute(@NotNull GradleInvocationResult result)", "public boolean execute(CompileContext context)", "public CompileContext invokeProjectMakeUsingJps()", "public void compilationFinished(boolean aborted, int errors, int warnings, CompileContext compileContext)", "public void fileGenerated(String outputRoot, String relativePath)", "public ActionButtonFixture findRunApplicationButton()", "public void runApplication()", "protected void selectProjectMakeAction()", "private JMenuItem findActionMenuItem(@NotNull String...path)", "private void waitForBuildToFinish(@NotNull BuildMode buildMode)", "public FileFixture findExistingFileByRelativePath(@NotNull String relativePath)", "public VirtualFile findFileByRelativePath(@NotNull String relativePath, boolean requireExists)", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture requestProjectSyncAndSimulateFailure(@NotNull final String failure)", "public void runApplication()", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture waitForGradleProjectSyncToFail()", "public IdeFrameFixture waitForBackgroundTasksToFinish()", "private ActionButtonFixture findActionButtonByActionId(String actionId)", "public MessagesToolWindowFixture getMessagesToolWindow()", "public void syncSucceeded(@NotNull Project project)", "public void syncFailed(@NotNull Project project, @NotNull String errorMessage)", "public void syncSkipped(@NotNull Project project)", "void reset()", "public void buildFinished(@NotNull Project project, @Nullable BuildMode mode)", "public void dispose()", "public static IdeFrameFixture find(@NotNull final Robot robot, @NotNull final File projectPath, @Nullable final String projectName)", "protected boolean isMatching(IdeFrameImpl frame)", "public boolean test()", "public boolean test()", "public File getProjectPath()"], "prime_var_dic": {}}, {"idx": 32080, "status": "update", "global_index": 20156, "project_name": "android_", "written_on": "2013-03-06 04:39:16", "tufano_target": "public TYPE_1 < String > METHOD_1 ( ) { String [ ] VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( ( VAR_2 . length == 0 ) && ( TYPE_4 . METHOD_3 ( VAR_1 , VAR_4 ) . length == 0 ) ) { return null ; } return new TYPE_2 < String > ( TYPE_3 . METHOD_2 ( VAR_2 ) ) ; }", "comment": "This method and the getNonCritical... below need to return null in some cases according to the X509Extension contract.", "tokenized_comment": ["This", "<|s|>", "method", "<|s|>", "and", "<|s|>", "the", "<|s|>", "get", "Non", "Critical", "...", "<|s|>", "below", "<|s|>", "need", "<|s|>", "to", "<|s|>", "return", "<|s|>", "null", "<|s|>", "in", "<|s|>", "some", "<|s|>", "cases", "<|s|>", "according", "<|s|>", "to", "<|s|>", "the", "<|s|>", "X", "509", "Extension", "<|s|>", "contract", "."], "tufano_code": "public TYPE_1 < String > METHOD_1 ( ) { return new TYPE_2 < String > ( TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 , 1 ) ) ) ; }", "our_target": "        String[] critOids =\n                NativeCrypto.get_X509_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_CRITICAL);\n\n        /*\n         * This API has a special case that if there are no extensions, we\n         * should return null. So if we have no critical extensions, we'll check\n         * non-critical extensions.\n         */\n        if ((critOids.length == 0)\n                && (NativeCrypto.get_X509_ext_oids(mContext,\n                        NativeCrypto.EXTENSION_TYPE_NON_CRITICAL).length == 0)) {\n            return null;\n        }\n\n        return new HashSet<String>(Arrays.asList(critOids));\n", "our_code": "    public Set<String> getCriticalExtensionOIDs() {\n<|startfocus|>\n        return new HashSet<String>(Arrays.asList(NativeCrypto.get_X509_ext_oids(mContext, 1)));\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Set", "<", "String", ">", "<|s|>", "get", "Critical", "Extension", "OIDs", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "Hash", "Set", "<", "String", ">", "(", "Arrays", ".", "as", "List", "(", "Native", "Crypto", ".", "get", "_", "X", "509", "_", "ext", "_", "oids", "(", "m", "Context", ",", "<|s|>", "1", ")", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 146, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_3160", "comment_id": "Q5gL9Ti0", "class_list": ["OpenSSLX509Certificate"], "func_list": ["private OpenSSLX509Certificate(long ctx)", "public Set<String> getCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)", "public Set<String> getNonCriticalExtensionOIDs()", "public boolean hasUnsupportedCriticalExtension()", "public int getVersion()", "public BigInteger getSerialNumber()", "public Principal getIssuerDN()", "public Principal getSubjectDN()", "public Date getNotBefore()", "public Date getNotAfter()", "public byte[] getSignature()", "public String getSigAlgName()", "public String getSigAlgOID()", "public byte[] getSigAlgParams()", "public boolean[] getIssuerUniqueID()", "public boolean[] getSubjectUniqueID()", "public boolean[] getKeyUsage()", "public int getBasicConstraints()", "public String toString()", "public PublicKey getPublicKey()", "public X500Principal getIssuerX500Principal()", "public X500Principal getSubjectX500Principal()", "public boolean equals(Object other)", "public int hashCode()", "long getContext()"], "prime_var_dic": {"mContext": 1}}, {"idx": 60982, "status": "update", "global_index": 21525, "project_name": "android_", "written_on": "2013-11-23 01:47:15", "tufano_target": "public static String METHOD_1 ( ) { String VAR_1 = null ; for ( TYPE_3 VAR_4 : TYPE_2 . METHOD_2 ( ) ) { TYPE_5 data = ( TYPE_5 ) VAR_4 . METHOD_7 ( ) ; assert data != null ; TYPE_3 VAR_3 = data . METHOD_4 ( ) ; if ( VAR_3 != null ) { VAR_1 = VAR_3 . METHOD_5 ( ) ; if ( VAR_1 != null ) break ; } } return TYPE_4 . METHOD_6 ( VAR_1 ) ; }", "comment": "Does this still need to be public?", "tokenized_comment": ["Does", "<|s|>", "this", "<|s|>", "still", "<|s|>", "need", "<|s|>", "to", "<|s|>", "be", "<|s|>", "public", "?"], "tufano_code": "public static String METHOD_1 ( ) { String VAR_1 = null ; for ( TYPE_1 VAR_2 : TYPE_2 . METHOD_2 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_3 != null ) { VAR_1 = VAR_3 . METHOD_5 ( ) ; if ( VAR_1 != null ) break ; } } return TYPE_4 . METHOD_6 ( VAR_1 ) ; }", "our_target": "    for (Sdk sdk : DefaultSdks.getEligibleAndroidSdks()) {\n      AndroidSdkAdditionalData data = (AndroidSdkAdditionalData)sdk.getSdkAdditionalData();\n      assert data != null;\n      Sdk jdk = data.getJavaSdk();\n", "our_code": "  public static String getDefaultJavaHome() {\n    String jdkHome = null;\n<|startfocus|>\n    for (AndroidSdkInfo sdkInfo : DefaultSdks.getEligibleAndroidSdks()) {\n      Sdk jdk = sdkInfo.getAdditionalData().getJavaSdk();\n<|endfocus|>\n      if (jdk != null) {\n        jdkHome = jdk.getHomePath();\n        if (jdkHome != null) break;\n      }\n    }\n    return Strings.nullToEmpty(jdkHome);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "String", "<|s|>", "get", "Default", "Java", "Home", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "jdk", "Home", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Android", "Sdk", "Info", "<|s|>", "sdk", "Info", "<|s|>", ":", "<|s|>", "Default", "Sdks", ".", "get", "Eligible", "Android", "Sdks", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Sdk", "<|s|>", "jdk", "<|s|>", "=", "<|s|>", "sdk", "Info", ".", "get", "Additional", "Data", "(", ")", ".", "get", "Java", "Sdk", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "jdk", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "jdk", "Home", "<|s|>", "=", "<|s|>", "jdk", ".", "get", "Home", "Path", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "jdk", "Home", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "Strings", ".", "null", "To", "Empty", "(", "jdk", "Home", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 312, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_579", "comment_id": "deaa69eb_38ba5ef5", "class_list": ["will", "AndroidHomeConfigurable"], "func_list": ["public AndroidHomeConfigurable()", "protected void textChanged(DocumentEvent e)", "public void disposeUIResources()", "public void reset()", "public void run()", "private static void deleteSdks(@NotNull List<Sdk> sdksToDelete)", "private static void setJdkPath(@NotNull Sdk sdk, @NotNull String path)", "private void createUIComponents()", "public String getDisplayName()", "public String getHelpTopic()", "public JComponent createComponent()", "public boolean isModified()", "private static String resolvePath(@NotNull String path)", "private static Sdk getFirstDefaultAndroidSdk(boolean create)", "private static void updateAllSdks(@NotNull Sdk jdk)", "private static String getDefaultAndroidHome()", "public static String getDefaultJavaHome()", "private boolean validateJavaHome()"], "prime_var_dic": {}}, {"idx": 76102, "status": "update", "global_index": 16585, "project_name": "android_", "written_on": "2015-06-25 12:50:58", "tufano_target": "public TYPE_1 METHOD_1 ( ) { String name = VAR_1 . getText ( ) ; if ( name . isEmpty ( ) || name . equals ( TYPE_2 . METHOD_2 ( VAR_2 , null ) ) ) { return VAR_1 ; } else if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else if ( VAR_4 . METHOD_3 ( ) ) { return VAR_4 ; } else { return VAR_5 ; } }", "comment": "name.isEmpty", "tokenized_comment": ["name", ".", "is", "Empty"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { String name = VAR_1 . getText ( ) ; if ( name . length ( ) == 0 || name . equals ( TYPE_2 . METHOD_2 ( VAR_2 , null ) ) ) { return VAR_1 ; } else if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else if ( VAR_4 . METHOD_3 ( ) ) { return VAR_4 ; } else { return VAR_5 ; } }", "our_target": "    if (name.isEmpty() || name.equals(ResourceHelper.prependResourcePrefix(myModule, null))) {\n", "our_code": "  public JComponent getPreferredFocusedComponent() {\n    String name = myNameField.getText();\n<|startfocus|>\n    if (name.length() == 0 || name.equals(ResourceHelper.prependResourcePrefix(myModule, null))) {\n<|endfocus|>\n      return myNameField;\n    }\n    else if (myValueField.isVisible()) {\n      return myValueField;\n    }\n    else if (myModuleCombo.isVisible()) {\n      return myModuleCombo;\n    }\n    else {\n      return myFileNameCombo;\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "JComponent", "<|s|>", "get", "Preferred", "Focused", "Component", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "name", "<|s|>", "=", "<|s|>", "my", "Name", "Field", ".", "get", "Text", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "name", ".", "length", "(", ")", "<|s|>", "==", "<|s|>", "0", "<|s|>", "||", "<|s|>", "name", ".", "equals", "(", "Resource", "Helper", ".", "prepend", "Resource", "Prefix", "(", "my", "Module", ",", "<|s|>", "null", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "my", "Name", "Field", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "else", "<|s|>", "if", "<|s|>", "(", "my", "Value", "Field", ".", "is", "Visible", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "my", "Value", "Field", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "else", "<|s|>", "if", "<|s|>", "(", "my", "Module", "Combo", ".", "is", "Visible", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "my", "Module", "Combo", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "my", "File", "Name", "Combo", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 436, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_723", "comment_id": "3e6e4e7b_c992d1ad", "class_list": ["CreateXmlResourcePanel"], "func_list": ["public CreateXmlResourcePanel(@NotNull Module module,", "public void run(AnActionButton button)", "public void actionPerformed(AnActionEvent e)", "public void addModuleComboActionListener(ActionListener actionListener)", "private void resetFromFile(@NotNull VirtualFile file, @NotNull Project project)", "private void doDeleteDirectory()", "public Object getData(@NonNls String dataId)", "private void doSelectAllDirs()", "private void doUnselectAllDirs()", "private void doAddNewDirectory()", "private void updateDirectories(boolean updateFileCombo)", "public int compare(VirtualFile f1, VirtualFile f2)", "protected ValidationInfo doValidate()", "else if (!myModule.equals(moduleForFile))", "public JComponent getPreferredFocusedComponent()", "public String getResourceName()", "public List<String> getDirNames()", "public String getFileName()", "public String getName()", "public String getValue()", "public SourceProvider getSourceProvider()", "public Module getModule()", "public JComponent getPanel()"], "prime_var_dic": {"myModule": 1, "myResourceType": 1, "myDirectoriesList": 1}}, {"idx": 38819, "status": "update", "global_index": 13428, "project_name": "android_", "written_on": "2014-12-02 21:27:44", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 result = new TYPE_2 ( ) . open ( ) ; switch ( result ) { case VAR_1 : TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_6 ( ) ) ; case VAR_5 : VAR_6 . METHOD_5 ( VAR_7 ) ; break ; case VAR_8 : break ; } }", "comment": "Nit: Do we have a style recommendation here? I know Tor asked me to be more explicit with my parenthesis before, but it was in a different context.\n\nThinking something like\n\nhanldoffTimestampe = (myMode == INSTALL_HANDOFF) ? ...", "tokenized_comment": ["Nit", ":", "<|s|>", "Do", "<|s|>", "we", "<|s|>", "have", "<|s|>", "a", "<|s|>", "style", "<|s|>", "recommendation", "<|s|>", "here", "?", "<|s|>", "I", "<|s|>", "know", "<|s|>", "Tor", "<|s|>", "asked", "<|s|>", "me", "<|s|>", "to", "<|s|>", "be", "<|s|>", "more", "<|s|>", "explicit", "<|s|>", "with", "<|s|>", "my", "<|s|>", "parenthesis", "<|s|>", "before", ",", "<|s|>", "but", "<|s|>", "it", "<|s|>", "was", "<|s|>", "in", "<|s|>", "a", "<|s|>", "different", "<|s|>", "context", ".", "<|nl|>", "<|nl|>", "Thinking", "<|s|>", "something", "<|s|>", "like", "<|nl|>", "<|nl|>", "hanldoff", "Timestampe", "<|s|>", "=", "<|s|>", "(", "my", "Mode", "<|s|>", "==", "<|s|>", "INSTALL", "_", "HANDOFF", ")", "<|s|>", "?", "<|s|>", "..."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 result = new TYPE_2 ( ) . open ( ) ; switch ( result ) { case VAR_1 : String VAR_2 = VAR_3 == VAR_4 ? TYPE_3 . get ( ) . METHOD_2 ( ) : null ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; case VAR_5 : VAR_6 . METHOD_5 ( VAR_7 ) ; break ; case VAR_8 : break ; } }", "our_target": "        AndroidFirstRunPersistentData.getInstance().markSdkUpToDate(myMode.getInstallerTimestamp());\n", "our_code": "  public void doCancelAction() {\n    ConfirmFirstRunWizardCloseDialog.Result result = new ConfirmFirstRunWizardCloseDialog().open();\n    switch (result) {\n      case Skip:\n<|startfocus|>\n        String handoffTimestamp = myMode == FirstRunWizardMode.INSTALL_HANDOFF ? InstallerData.get().getTimestamp() : null;\n        AndroidFirstRunPersistentData.getInstance().markSdkUpToDate(handoffTimestamp);\n<|endfocus|>\n        // Fallthrough\n      case Rerun:\n        myHost.close(DynamicWizardHost.CloseAction.CANCEL);\n        break;\n      case DoNotClose:\n        break; // Do nothing\n    }\n\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "do", "Cancel", "Action", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Confirm", "First", "Run", "Wizard", "Close", "Dialog", ".", "Result", "<|s|>", "result", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Confirm", "First", "Run", "Wizard", "Close", "Dialog", "(", ")", ".", "open", "(", ");", "<|nl|>", "<|4-s|>", "switch", "<|s|>", "(", "result", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "Skip", ":", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "String", "<|s|>", "handoff", "Timestamp", "<|s|>", "=", "<|s|>", "my", "Mode", "<|s|>", "==", "<|s|>", "First", "Run", "Wizard", "Mode", ".", "INSTALL", "_", "HANDOFF", "<|s|>", "?", "<|s|>", "Installer", "Data", ".", "get", "(", ")", ".", "get", "Timestamp", "(", ")", "<|s|>", ":", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "Android", "First", "Run", "Persistent", "Data", ".", "get", "Instance", "(", ")", ".", "mark", "Sdk", "Up", "To", "Date", "(", "handoff", "Timestamp", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Fallthrough", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "Rerun", ":", "<|nl|>", "<|8-s|>", "my", "Host", ".", "close", "(", "Dynamic", "Wizard", "Host", ".", "Close", "Action", ".", "CANCEL", ");", "<|nl|>", "<|8-s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "Do", "Not", "Close", ":", "<|nl|>", "<|8-s|>", "break", ";", "<|s|>", "//", "<|s|>", "Do", "<|s|>", "nothing", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 92, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_617", "comment_id": "3fce35a4_fa8f8192", "class_list": ["FirstRunWizard", "SetupProgressStep"], "func_list": ["public FirstRunWizard(@NotNull DynamicWizardHost host, @NotNull FirstRunWizardMode mode,", "public void init()", "public boolean canCancel()", "public void doCancelAction()", "public void doFinishAction()", "public void performFinishingActions()", "protected String getWizardActionDescription()", "public SetupProgressStep()", "protected void execute()", "public void run()", "public boolean canGoPrevious()", "public boolean isStepVisible()"], "prime_var_dic": {}}, {"idx": 70244, "status": "update", "global_index": 11331, "project_name": "android_", "written_on": "2014-12-17 22:05:33", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { if ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) != null ) { VAR_1 this . setText ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } } } ) ; }", "comment": "I think this line is over 140 characters?", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "this", "<|s|>", "line", "<|s|>", "is", "<|s|>", "over", "<|s|>", "140", "<|s|>", "characters", "?"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { if ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) != null ) { VAR_1 this . setText ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } } } ) ; }", "our_target": "            @SuppressWarnings(\"ConstantConditions\") // This suppresses a nullref warning for GoogleLogin.getInstance().getActiveUser().\n", "our_code": "        public void onLoginCompleted() {\n          SwingUtilities.invokeLater(new Runnable() {\n<|startfocus|>\n            @SuppressWarnings(\"ConstantConditions\") // This suppresses an invalid nullref warning for GoogleLogin.getInstance().getActiveUser().\n<|endfocus|>\n            @Override\n            public void run() {\n              if (GoogleLogin.getInstance().getActiveUser() != null) {\n                UserSelector.this.setText(GoogleLogin.getInstance().getActiveUser().getEmail());\n              }\n            }\n          });\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Login", "Completed", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "Swing", "Utilities", ".", "invoke", "Later", "(", "new", "<|s|>", "Runnable", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "@", "Suppress", "Warnings", "(", "\"", "Constant", "Conditions", "\"", ")", "<|s|>", "//", "<|s|>", "This", "<|s|>", "suppresses", "<|s|>", "an", "<|s|>", "invalid", "<|s|>", "nullref", "<|s|>", "warning", "<|s|>", "for", "<|s|>", "Google", "Login", ".", "get", "Instance", "(", ")", ".", "get", "Active", "User", "(", ")", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "<|2-s|>", "if", "<|s|>", "(", "Google", "Login", ".", "get", "Instance", "(", ")", ".", "get", "Active", "User", "(", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "User", "Selector", ".", "this", ".", "set", "Text", "(", "Google", "Login", ".", "get", "Instance", "(", ")", ".", "get", "Active", "User", "(", ")", ".", "get", "Email", "(", ")", ");", "<|nl|>", "<|12-s|>", "<|2-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "<|2-s|>", "}", ");", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 195, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4579", "comment_id": "61df3424_be85199c", "class_list": ["UserSelector", "PopupPanel", "marks", "EmptyMarker"], "func_list": ["public UserSelector()", "public CredentialedUser getSelectedUser()", "protected int getPreferredPopupHeight()", "protected CustomizableComboBoxPopup getPopup()", "private static boolean needsToSignIn()", "public void showPopup(RelativePoint showTarget)", "public PopupPanel()", "public JComponent getInitialFocus()", "public void initializeContent(@Nullable String selectedItem)", "public void valueChanged(ListSelectionEvent e)", "public void run()", "public void mouseMoved(MouseEvent me)", "protected void doLogin()", "public void onLoginCompleted()", "public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)", "public void hidePopup()", "public boolean isPopupVisible()"], "prime_var_dic": {}}, {"idx": 96083, "status": "update", "global_index": 11973, "project_name": "android_", "written_on": "2014-09-29 20:56:18", "tufano_target": "public TYPE_4 METHOD_1 ( ) { TYPE_1 . execute ( new TYPE_2 ( ) { protected void METHOD_2 ( ) throws TYPE_3 { if ( ! target . METHOD_3 ( ) ) { target . METHOD_4 ( true ) ; } boolean VAR_1 = target . METHOD_5 ( ) ; target . METHOD_6 ( true ) ; target . METHOD_1 ( ) ; target . METHOD_7 ( ) ; target . METHOD_8 ( ) ; if ( ! VAR_1 ) { target . METHOD_6 ( VAR_1 ) ; } } } ) ; }", "comment": "Make it return \"this\".", "tokenized_comment": ["Make", "<|s|>", "it", "<|s|>", "return", "<|s|>", "\"", "this", "\"", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . execute ( new TYPE_2 ( ) { protected void METHOD_2 ( ) throws TYPE_3 { if ( ! target . METHOD_3 ( ) ) { target . METHOD_4 ( true ) ; } boolean VAR_1 = target . METHOD_5 ( ) ; target . METHOD_6 ( true ) ; target . METHOD_1 ( ) ; target . METHOD_7 ( ) ; target . METHOD_8 ( ) ; if ( ! VAR_1 ) { target . METHOD_6 ( VAR_1 ) ; } } } ) ; }", "our_target": "  @NotNull\n  public IdeFrameFixture toFront() {\n", "our_code": "<|startfocus|>\n  public void toFront() {\n<|endfocus|>\n    GuiActionRunner.execute(new GuiTask() {\n      @Override\n      protected void executeInEDT() throws Throwable {\n        if (!target.isVisible()) {\n          target.setVisible(true);\n        }\n        boolean alwaysOnTop = target.isAlwaysOnTop();\n        target.setAlwaysOnTop(true);\n        target.toFront();\n        target.repaint();\n        target.requestFocus();\n        if (!alwaysOnTop) {\n          target.setAlwaysOnTop(alwaysOnTop);\n        }\n      }\n    });\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "to", "Front", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Gui", "Action", "Runner", ".", "execute", "(", "new", "<|s|>", "Gui", "Task", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Override", "<|nl|>", "<|4-s|>", "<|2-s|>", "protected", "<|s|>", "void", "<|s|>", "execute", "In", "EDT", "(", ")", "<|s|>", "throws", "<|s|>", "Throwable", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "target", ".", "is", "Visible", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "target", ".", "set", "Visible", "(", "true", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "always", "On", "Top", "<|s|>", "=", "<|s|>", "target", ".", "is", "Always", "On", "Top", "(", ");", "<|nl|>", "<|8-s|>", "target", ".", "set", "Always", "On", "Top", "(", "true", ");", "<|nl|>", "<|8-s|>", "target", ".", "to", "Front", "(", ");", "<|nl|>", "<|8-s|>", "target", ".", "repaint", "(", ");", "<|nl|>", "<|8-s|>", "target", ".", "request", "Focus", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "always", "On", "Top", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "target", ".", "set", "Always", "On", "Top", "(", "always", "On", "Top", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 317, "base_patch_number": 39, "changed_patch_number": 40, "code_file_name": "android_42", "comment_id": "50f83838_a0215494", "class_list": ["IdeFrameFixture", "NoOpDisposable"], "func_list": ["public static IdeFrameFixture find(@NotNull final Robot robot, @NotNull final File projectPath, @Nullable final String projectName)", "protected boolean isMatching(IdeFrameImpl frame)", "public boolean test()", "public IdeFrameFixture(@NotNull Robot robot, @NotNull IdeFrameImpl target, @NotNull File projectPath)", "public File getProjectPath()", "public IdeFrameFixture requireModuleCount(int expected)", "public IdeaAndroidProject getAndroidProjectForModule(@NotNull String name)", "public Module getModule(@NotNull String name)", "private ModuleManager getModuleManager()", "public Project getProject()", "public EditorFixture getEditor()", "public GradleInvocationResult invokeProjectMake()", "public void execute(@NotNull GradleInvocationResult result)", "public boolean execute(CompileContext context)", "public IdeFrameFixture invokeProjectMakeAndSimulateFailure(@NotNull final String failure)", "public void run()", "public CompileContext invokeProjectMakeUsingJps()", "public void compilationFinished(boolean aborted, int errors, int warnings, CompileContext compileContext)", "public void fileGenerated(String outputRoot, String relativePath)", "public ActionButtonFixture findRunApplicationButton()", "public ChooseDeviceDialogFixture findChooseDeviceDialog()", "public RunToolWindowFixture getRunToolWindow()", "public DebugToolWindowFixture getDebugToolWindow()", "public void toFront()", "protected void selectProjectMakeAction()", "private JMenuItem findActionMenuItem(@NotNull String... path)", "private void waitForBuildToFinish(@NotNull final BuildMode buildMode)", "public FileFixture findExistingFileByRelativePath(@NotNull String relativePath)", "public VirtualFile findFileByRelativePath(@NotNull String relativePath, boolean requireExists)", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture requestProjectSyncAndSimulateFailure(@NotNull final String failure)", "public IdeFrameFixture requestProjectSyncAndExpectFailure()", "public IdeFrameFixture waitForGradleProjectSyncToFail()", "public IdeFrameFixture waitForGradleProjectSyncToFinish()", "private void waitForGradleProjectSyncToFinish(final boolean expectSyncFailure)", "public IdeFrameFixture waitForBackgroundTasksToFinish()", "private ActionButtonFixture findActionButtonByActionId(String actionId)", "public AndroidToolWindowFixture getAndroidToolWindow()", "public MessagesToolWindowFixture getMessagesToolWindow()", "public void requireEditorNotification(@Nullable String message)", "private EditorNotificationPanel findPanel(@Nullable String message)", "private String getEditorNotificationLabel(@NotNull EditorNotificationPanel panel)", "public void clickEditorNotification(@NotNull String message, @NotNull final String linkText)", "public IdeSettingsDialogFixture openIdeSettings()", "public IdeFrameFixture deleteGradleWrapper()", "public IdeFrameFixture requireGradleWrapperSet()", "public static void deleteWrapper(@NotNull File projectDirPath)", "private static File getGradleWrapperDirPath(@NotNull File projectDirPath)", "public IdeFrameFixture useLocalGradleDistribution(@NotNull String gradleHome)", "public GradleProjectSettings getGradleSettings()", "public AvdManagerDialogFixture invokeAvdManager()", "public void dispose()", "public File getProjectPath()"], "prime_var_dic": {}}, {"idx": 68037, "status": "update", "global_index": 21605, "project_name": "android_", "written_on": "2013-12-05 15:28:06", "tufano_target": "private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( TYPE_3 . METHOD_8 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ) { return ; } VAR_1 . METHOD_5 ( VAR_2 ) ; try { VAR_1 . METHOD_6 ( ) ; } catch ( TYPE_4 VAR_3 ) { String msg = String . format ( STRING_1 , VAR_1 . METHOD_7 ( ) . METHOD_4 ( ) ) ; throw new TYPE_5 ( msg , VAR_3 ) ; } }", "comment": "I know this does something different (it updates local properties rather than the IntelliJ project), and perhaps we want to only handle this in gradle sync -- but we have to also update the project SDK (the Intellij project SDK) somewhere. See https://code.google.com/p/android/issues/detail?id=63249 . Somewhere we need to call ProjectRootManager.getInstance(project).setProjectSdk(sdk) with the new android sdk to ensure that for example javadoc generation will work. We should probably iterate over all projects and do this. Perhaps this already gets done in gradle sync, but just double check it (not necessarily as part of this CL). I see that AndroidFacetConfiguration#findAndSetAndroidSdk calls it, but I don't know if this will get always get invoked.", "tokenized_comment": ["I", "<|s|>", "know", "<|s|>", "this", "<|s|>", "does", "<|s|>", "something", "<|s|>", "different", "<|s|>", "(", "it", "<|s|>", "updates", "<|s|>", "local", "<|s|>", "properties", "<|s|>", "rather", "<|s|>", "than", "<|s|>", "the", "<|s|>", "Intelli", "J", "<|s|>", "project", ")", ",", "<|s|>", "and", "<|s|>", "perhaps", "<|s|>", "we", "<|s|>", "want", "<|s|>", "to", "<|s|>", "only", "<|s|>", "handle", "<|s|>", "this", "<|s|>", "in", "<|s|>", "gradle", "<|s|>", "sync", "<|s|>", "--", "<|s|>", "but", "<|s|>", "we", "<|s|>", "have", "<|s|>", "to", "<|s|>", "also", "<|s|>", "update", "<|s|>", "the", "<|s|>", "project", "<|s|>", "SDK", "<|s|>", "(", "the", "<|s|>", "Intellij", "<|s|>", "project", "<|s|>", "SDK", ")", "<|s|>", "somewhere", ".", "<|s|>", "See", "<|s|>", "https", "://", "code", ".", "google", ".", "com", "/", "p", "/", "android", "/", "issues", "/", "detail", "?", "id", "=", "63249", "<|s|>", ".", "<|s|>", "Somewhere", "<|s|>", "we", "<|s|>", "need", "<|s|>", "to", "<|s|>", "call", "<|s|>", "Project", "Root", "Manager", ".", "get", "Instance", "(", "project", ")", ".", "set", "Project", "Sdk", "(", "sdk", ")", "<|s|>", "with", "<|s|>", "the", "<|s|>", "new", "<|s|>", "android", "<|s|>", "sdk", "<|s|>", "to", "<|s|>", "ensure", "<|s|>", "that", "<|s|>", "for", "<|s|>", "example", "<|s|>", "javadoc", "<|s|>", "generation", "<|s|>", "will", "<|s|>", "work", ".", "<|s|>", "We", "<|s|>", "should", "<|s|>", "probably", "<|s|>", "iterate", "<|s|>", "over", "<|s|>", "all", "<|s|>", "projects", "<|s|>", "and", "<|s|>", "do", "<|s|>", "this", ".", "<|s|>", "Perhaps", "<|s|>", "this", "<|s|>", "already", "<|s|>", "gets", "<|s|>", "done", "<|s|>", "in", "<|s|>", "gradle", "<|s|>", "sync", ",", "<|s|>", "but", "<|s|>", "just", "<|s|>", "double", "<|s|>", "check", "<|s|>", "it", "<|s|>", "(", "not", "<|s|>", "necessarily", "<|s|>", "as", "<|s|>", "part", "<|s|>", "of", "<|s|>", "this", "<|s|>", "CL", ")", ".", "<|s|>", "I", "<|s|>", "see", "<|s|>", "that", "<|s|>", "Android", "Facet", "Configuration", "#", "find", "And", "Set", "Android", "Sdk", "<|s|>", "calls", "<|s|>", "it", ",", "<|s|>", "but", "<|s|>", "I", "<|s|>", "don", "'", "t", "<|s|>", "know", "<|s|>", "if", "<|s|>", "this", "<|s|>", "will", "<|s|>", "get", "<|s|>", "always", "<|s|>", "get", "<|s|>", "invoked", "."], "tufano_code": "private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) ) { return ; } VAR_1 . METHOD_5 ( VAR_2 ) ; try { VAR_1 . METHOD_6 ( ) ; } catch ( TYPE_4 VAR_3 ) { String msg = String . format ( STRING_1 , VAR_1 . METHOD_7 ( ) . METHOD_4 ( ) ) ; throw new TYPE_5 ( msg , VAR_3 ) ; } }", "our_target": "    if (FileUtil.filesEqual(localProperties.getAndroidSdkPath(), androidHomePath)) {\n", "our_code": "  private static void setProjectSdk(@NotNull LocalProperties localProperties, @NotNull File androidHomePath) {\n<|startfocus|>\n    if (FileUtil.pathsEqual(localProperties.getAndroidSdkPath(), androidHomePath.getPath())) {\n<|endfocus|>\n      return;\n    }\n    localProperties.setAndroidSdkPath(androidHomePath);\n    try {\n      localProperties.save();\n    }\n    catch (IOException e) {\n      String msg = String.format(\"Unable to save '%1$s'\", localProperties.getFilePath().getPath());\n      throw new ExternalSystemException(msg, e);\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "set", "Project", "Sdk", "(", "@", "Not", "Null", "<|s|>", "Local", "Properties", "<|s|>", "local", "Properties", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "File", "<|s|>", "android", "Home", "Path", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "File", "Util", ".", "paths", "Equal", "(", "local", "Properties", ".", "get", "Android", "Sdk", "Path", "(", ")", ",", "<|s|>", "android", "Home", "Path", ".", "get", "Path", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "local", "Properties", ".", "set", "Android", "Sdk", "Path", "(", "android", "Home", "Path", ");", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "local", "Properties", ".", "save", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "msg", "<|s|>", "=", "<|s|>", "String", ".", "format", "(", "\"", "Unable", "<|s|>", "to", "<|s|>", "save", "<|s|>", "'", "%", "1", "$", "s", "'", "\"", ",", "<|s|>", "local", "Properties", ".", "get", "File", "Path", "(", ")", ".", "get", "Path", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "External", "System", "Exception", "(", "msg", ",", "<|s|>", "e", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 164, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_402", "comment_id": "03d10a3f_3be5ffc0", "class_list": ["SdkSync"], "func_list": ["private SdkSync()", "static void syncIdeAndProjectAndroidHomes(@NotNull final LocalProperties localProperties, @Nullable final File androidHomePath)", "public void run()", "private static void promptUser(@NotNull LocalProperties localProperties, @NotNull AtomicBoolean sdkUpdated)", "private static void setIdeSdk(final @NotNull File projectAndroidHomePath, @NotNull final LocalProperties localProperties)", "private static void setProjectSdk(@NotNull LocalProperties localProperties, @NotNull File androidHomePath)"], "prime_var_dic": {}}, {"idx": 36653, "status": "update", "global_index": 4193, "project_name": "android_", "written_on": "2016-10-19 06:53:04", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 + VAR_1 ) ; if ( VAR_3 == null || VAR_3 == VAR_1 . getId ( ) ) { VAR_4 = VAR_1 ; if ( VAR_5 != null ) { VAR_5 . METHOD_3 ( ) ; } } }", "comment": "nit: unnecessary parenthesis.", "tokenized_comment": ["nit", ":", "<|s|>", "unnecessary", "<|s|>", "parenthesis", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 , STRING_1 + VAR_1 ) ; if ( ( VAR_3 == null ) || ( VAR_3 != null && VAR_3 == VAR_1 . getId ( ) ) ) { VAR_4 = VAR_1 ; if ( VAR_5 != null ) { VAR_5 . METHOD_3 ( ) ; } } }", "our_target": "            if (mExpectSensorId == null || mExpectSensorId == sensor.getId()) {\n", "our_code": "        public void onDynamicSensorConnected(Sensor sensor) {\n            Log.d(TAG, \"Sensor Connected: \" + sensor);\n\n<|startfocus|>\n            if ((mExpectSensorId == null) || (mExpectSensorId != null && mExpectSensorId == sensor.getId())) {\n<|endfocus|>\n                mSensor = sensor;\n                if (mConnectLatch != null) {\n                    mConnectLatch.countDown();\n                }\n            }\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Dynamic", "Sensor", "Connected", "(", "Sensor", "<|s|>", "sensor", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Log", ".", "d", "(", "TAG", ",", "<|s|>", "\"", "Sensor", "<|s|>", "Connected", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "sensor", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "(", "m", "Expect", "Sensor", "Id", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "||", "<|s|>", "(", "m", "Expect", "Sensor", "Id", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "m", "Expect", "Sensor", "Id", "<|s|>", "==", "<|s|>", "sensor", ".", "get", "Id", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "m", "Sensor", "<|s|>", "=", "<|s|>", "sensor", ";", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "m", "Connect", "Latch", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "m", "Connect", "Latch", ".", "count", "Down", "(", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 166, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_887", "comment_id": "bc28cfc6_5b099c0d", "class_list": ["DynamicSensorDiscoveryTestActivity", "Callback"], "func_list": ["public DynamicSensorDiscoveryTestActivity()", "public String test0_OnConnect()", "public String test1_DynamicSensorList()", "public String test2_SensorOperation()", "public String test3_OnDisconnect()", "public String test4_OnReconnect()", "public void onDynamicSensorConnected(Sensor sensor)", "public void onDynamicSensorDisconnected(Sensor sensor)", "public boolean waitForConnection(Integer sensorId)", "public boolean waitForDisconnection()", "public boolean waitForSensorEvent()", "new SensorEventCallback()", "public void onSensorChanged(SensorEvent e)", "public boolean isSensorInList()", "public boolean isSensorInListOfSpecificType()", "public Integer getSensorId()", "private boolean assumeSensorIsSet()", "private boolean isDynamicFlagSetCorrectly()", "private void featureSupportedOrSkip()", "private void sensorConnectedOrSkip()", "private void sensorDisconnectedOrSkip()", "private void showUserMessage(String s)", "public DynamicSensorDiscoveryTestActivity()", "public String test0_OnConnect()", "public String test1_DynamicSensorList()", "public String test2_SensorOperation()", "public String test3_OnDisconnect()", "public String test4_OnReconnect()", "public void onDynamicSensorConnected(Sensor sensor)", "public void onDynamicSensorDisconnected(Sensor sensor)", "public boolean waitForConnection(Integer sensorId)", "public boolean waitForDisconnection()", "public boolean waitForSensorEvent()", "new SensorEventCallback()", "public void onSensorChanged(SensorEvent e)", "public boolean isSensorInList()", "public boolean isSensorInListOfSpecificType()", "public Integer getSensorId()", "private boolean assumeSensorIsSet()", "private boolean isDynamicFlagSetCorrectly()", "private void featureSupportedOrSkip()", "private void sensorConnectedOrSkip()", "private void sensorDisconnectedOrSkip()", "private void showUserMessage(String s)"], "prime_var_dic": {"String": 1, "int": 3, "approach": 1}}, {"idx": 30411, "status": "update", "global_index": 9350, "project_name": "android_", "written_on": "2015-09-11 14:28:17", "tufano_target": "public TYPE_1 METHOD_1 ( String VAR_1 ) { if ( METHOD_2 ( VAR_3 , VAR_1 ) != null ) { try { return new TYPE_1 ( STRING_1 , null , - 1 , VAR_4 + STRING_2 + VAR_1 , this ) ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( STRING_3 , VAR_5 ) ; } } return null ; }", "comment": "There is now no longer any need to introduce this new variable.", "tokenized_comment": ["There", "<|s|>", "is", "<|s|>", "now", "<|s|>", "no", "<|s|>", "longer", "<|s|>", "any", "<|s|>", "need", "<|s|>", "to", "<|s|>", "introduce", "<|s|>", "this", "<|s|>", "new", "<|s|>", "variable", "."], "tufano_code": "public TYPE_1 METHOD_1 ( String VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_3 , VAR_1 ) ; if ( VAR_2 != null ) { try { return new TYPE_1 ( STRING_1 , null , - 1 , VAR_4 + STRING_2 + VAR_1 , this ) ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( STRING_3 , VAR_5 ) ; } } return null ; }", "our_target": "    if (findEntryWithDirectoryFallback(jarFile, entryName) != null) {\n", "our_code": "  public URL getEntryUrlOrNull(String entryName) {\n<|startfocus|>\n    ZipEntry entry = findEntryWithDirectoryFallback(jarFile, entryName);\n    if (entry != null) {\n<|endfocus|>\n      try {\n        // We rely on the URL/the stream handler to deal with any url encoding necessary here, and\n        // we assume it is completely reversible.\n        return new URL(\"jar\", null, -1, fileUri + \"!/\" + entryName, this);\n      } catch (MalformedURLException e) {\n        throw new RuntimeException(\"Invalid entry name\", e);\n      }\n    }\n    return null;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "URL", "<|s|>", "get", "Entry", "Url", "Or", "Null", "(", "String", "<|s|>", "entry", "Name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Zip", "Entry", "<|s|>", "entry", "<|s|>", "=", "<|s|>", "find", "Entry", "With", "Directory", "Fallback", "(", "jar", "File", ",", "<|s|>", "entry", "Name", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "entry", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "try", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "We", "<|s|>", "rely", "<|s|>", "on", "<|s|>", "the", "<|s|>", "URL", "/", "the", "<|s|>", "stream", "<|s|>", "handler", "<|s|>", "to", "<|s|>", "deal", "<|s|>", "with", "<|s|>", "any", "<|s|>", "url", "<|s|>", "encoding", "<|s|>", "necessary", "<|s|>", "here", ",", "<|s|>", "and", "<|nl|>", "<|8-s|>", "//", "<|s|>", "we", "<|s|>", "assume", "<|s|>", "it", "<|s|>", "is", "<|s|>", "completely", "<|s|>", "reversible", ".", "<|nl|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "URL", "(", "\"", "jar", "\"", ",", "<|s|>", "null", ",", "<|s|>", "-", "1", ",", "<|s|>", "file", "Uri", "<|s|>", "+", "<|s|>", "\"", "!", "/", "\"", "<|s|>", "+", "<|s|>", "entry", "Name", ",", "<|s|>", "this", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Malformed", "URLException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "\"", "Invalid", "<|s|>", "entry", "<|s|>", "name", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 60, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3110", "comment_id": "c4164adc_7bcd9b44", "class_list": ["path", "avoids", "of", "ClassPathURLStreamHandler", "ClassPathURLConnection"], "func_list": ["public URL getEntryUrlOrNull(String entryName)", "public boolean isEntryStored(String entryName)", "static ZipEntry findEntryWithDirectoryFallback(StrictJarFile jarFile, String entryName)", "public String getContentType()", "public int getContentLength()"], "prime_var_dic": {}}, {"idx": 12709, "status": "update", "global_index": 8132, "project_name": "android_", "written_on": "2016-01-13 18:27:46", "tufano_target": "public static int METHOD_1 ( int [ ] [ ] x , int j ) { float f = 0 ; int VAR_1 = 0 ; for ( int i = 0 ; i < INT_1 ; i ++ ) { do { f ++ ; VAR_1 += x [ i ] [ i ] ; } while ( ++ j < i ) ; } return VAR_1 ; }", "comment": "proper loop preheader? I'm having trouble parsing the sentence as it stands.", "tokenized_comment": ["proper", "<|s|>", "loop", "<|s|>", "preheader", "?", "<|s|>", "I", "'", "m", "<|s|>", "having", "<|s|>", "trouble", "<|s|>", "parsing", "<|s|>", "the", "<|s|>", "sentence", "<|s|>", "as", "<|s|>", "it", "<|s|>", "stands", "."], "tufano_code": "public static int METHOD_1 ( int [ ] [ ] x , int j ) { float f = 0 ; int VAR_1 = 0 ; for ( int i = 0 ; i < INT_1 ; i ++ ) { do { f ++ ; VAR_1 += x [ i ] [ i ] ; } while ( ++ j < i ) ; } return VAR_1 ; }", "our_target": "        // not moved to the proper loop preheader, the wrong values\n", "our_code": "  public static int doit(int[][] x, int j) {\n    float f = 0;\n    int acc = 0;\n    for (int i = 0; i < 2; i++) {\n      // The full body of a do-while loop is the loop header.\n      do {\n        // Some \"noise\" to avoid hoisting the array reference\n        // before the dynamic BCE phase runs.\n        f++;\n        // The invariant array reference with corresponding bounds check\n        // is a candidate for hoisting when dynamic BCE runs. If it is\n<|startfocus|>\n        // not moved to the loop preheader proper, the wrong values\n<|endfocus|>\n        // cause the test to fail.\n        acc += x[i][i];\n      } while (++j < i);\n    }\n    return acc;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "int", "<|s|>", "doit", "(", "int", "[", "]", "[", "]", "<|s|>", "x", ",", "<|s|>", "int", "<|s|>", "j", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "float", "<|s|>", "f", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "int", "<|s|>", "acc", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "2", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "The", "<|s|>", "full", "<|s|>", "body", "<|s|>", "of", "<|s|>", "a", "<|s|>", "do", "-", "while", "<|s|>", "loop", "<|s|>", "is", "<|s|>", "the", "<|s|>", "loop", "<|s|>", "header", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "do", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Some", "<|s|>", "\"", "noise", "\"", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "hoisting", "<|s|>", "the", "<|s|>", "array", "<|s|>", "reference", "<|nl|>", "<|8-s|>", "//", "<|s|>", "before", "<|s|>", "the", "<|s|>", "dynamic", "<|s|>", "BCE", "<|s|>", "phase", "<|s|>", "runs", ".", "<|nl|>", "<|8-s|>", "f", "++", ";", "<|nl|>", "<|8-s|>", "//", "<|s|>", "The", "<|s|>", "invariant", "<|s|>", "array", "<|s|>", "reference", "<|s|>", "with", "<|s|>", "corresponding", "<|s|>", "bounds", "<|s|>", "check", "<|nl|>", "<|8-s|>", "//", "<|s|>", "is", "<|s|>", "a", "<|s|>", "candidate", "<|s|>", "for", "<|s|>", "hoisting", "<|s|>", "when", "<|s|>", "dynamic", "<|s|>", "BCE", "<|s|>", "runs", ".", "<|s|>", "If", "<|s|>", "it", "<|s|>", "is", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "not", "<|s|>", "moved", "<|s|>", "to", "<|s|>", "the", "<|s|>", "loop", "<|s|>", "preheader", "<|s|>", "proper", ",", "<|s|>", "the", "<|s|>", "wrong", "<|s|>", "values", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "cause", "<|s|>", "the", "<|s|>", "test", "<|s|>", "to", "<|s|>", "fail", ".", "<|nl|>", "<|8-s|>", "acc", "<|s|>", "+=", "<|s|>", "x", "[", "i", "]", "[", "i", "];", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "while", "<|s|>", "(", "++", "j", "<|s|>", "<", "<|s|>", "i", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "acc", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 36, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_5125", "comment_id": "07f79a9a_8e23db81", "class_list": ["Main"], "func_list": ["public static int doit(int[][] x, int j)", "public static int foo(int[] x, int[] y, int n)", "public static void main(String args[])", "private static void expectEquals(int expected, int result)"], "prime_var_dic": {}}, {"idx": 13615, "status": "update", "global_index": 4081, "project_name": "android_", "written_on": "2016-09-22 17:42:37", "tufano_target": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , String name , boolean VAR_2 ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( name ) ; if ( VAR_3 != null && VAR_3 . getValue ( ) instanceof TYPE_3 ) { value = ( ( TYPE_3 ) VAR_3 . getValue ( ) ) . getValue ( ) ; } return value ; }", "comment": "nit: semantically you update the 'defaultValue', which is odd. I would have introduced a local 'value' (initialized with 'defaultValue') and update it with the value from the annotation.\n\n  bolean value = defaultValue;\n  JNameValuePair removeAfterValuePair = annotation.getNameValuePair(name);\n    if (removeAfterValuePair != null\n        && removeAfterValuePair.getValue() instanceof JBooleanLiteral) {\n      value = ((JBooleanLiteral) removeAfterValuePair.getValue()).getValue();\n    }\n    return value;\n\nBut feel free to ignore this, it's just my 2-cent comment :)", "tokenized_comment": ["nit", ":", "<|s|>", "semantically", "<|s|>", "you", "<|s|>", "update", "<|s|>", "the", "<|s|>", "'", "default", "Value", "'", ",", "<|s|>", "which", "<|s|>", "is", "<|s|>", "odd", ".", "<|s|>", "I", "<|s|>", "would", "<|s|>", "have", "<|s|>", "introduced", "<|s|>", "a", "<|s|>", "local", "<|s|>", "'", "value", "'", "<|s|>", "(", "initialized", "<|s|>", "with", "<|s|>", "'", "default", "Value", "'", ")", "<|s|>", "and", "<|s|>", "update", "<|s|>", "it", "<|s|>", "with", "<|s|>", "the", "<|s|>", "value", "<|s|>", "from", "<|s|>", "the", "<|s|>", "annotation", ".", "<|nl|>", "<|nl|>", "<|2-s|>", "bolean", "<|s|>", "value", "<|s|>", "=", "<|s|>", "default", "Value", ";", "<|nl|>", "<|2-s|>", "JName", "Value", "Pair", "<|s|>", "remove", "After", "Value", "Pair", "<|s|>", "=", "<|s|>", "annotation", ".", "get", "Name", "Value", "Pair", "(", "name", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "remove", "After", "Value", "Pair", "<|s|>", "!=", "<|s|>", "null", "<|nl|>", "<|8-s|>", "&&", "<|s|>", "remove", "After", "Value", "Pair", ".", "get", "Value", "(", ")", "<|s|>", "instanceof", "<|s|>", "JBoolean", "Literal", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "value", "<|s|>", "=", "<|s|>", "(", "(", "JBoolean", "Literal", ")", "<|s|>", "remove", "After", "Value", "Pair", ".", "get", "Value", "(", ")", ")", ".", "get", "Value", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "value", ";", "<|nl|>", "<|nl|>", "But", "<|s|>", "feel", "<|s|>", "free", "<|s|>", "to", "<|s|>", "ignore", "<|s|>", "this", ",", "<|s|>", "it", "'", "s", "<|s|>", "just", "<|s|>", "my", "<|s|>", "2", "-", "cent", "<|s|>", "comment", "<|s|>", ":)"], "tufano_code": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , String name , boolean VAR_2 ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( name ) ; if ( VAR_3 != null && VAR_3 . getValue ( ) instanceof TYPE_3 ) { VAR_2 = ( ( TYPE_3 ) VAR_3 . getValue ( ) ) . getValue ( ) ; } return VAR_2 ; }", "our_target": "      if (removeAfterValuePair != null\n          && removeAfterValuePair.getValue() instanceof JBooleanLiteral) {\n        value = ((JBooleanLiteral) removeAfterValuePair.getValue()).getValue();\n      }\n      return value;\n", "our_code": "  public static boolean getBooleanValueFromAnnotation(JAnnotation annotation, String name,\n      boolean defautValue) {\n    JNameValuePair removeAfterValuePair = annotation.getNameValuePair(name);\n<|startfocus|>\n    if (removeAfterValuePair != null\n        && removeAfterValuePair.getValue() instanceof JBooleanLiteral) {\n      defautValue = ((JBooleanLiteral) removeAfterValuePair.getValue()).getValue();\n    }\n    return defautValue;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "get", "Boolean", "Value", "From", "Annotation", "(", "JAnnotation", "<|s|>", "annotation", ",", "<|s|>", "String", "<|s|>", "name", ",", "<|nl|>", "<|4-s|>", "<|2-s|>", "boolean", "<|s|>", "defaut", "Value", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "JName", "Value", "Pair", "<|s|>", "remove", "After", "Value", "Pair", "<|s|>", "=", "<|s|>", "annotation", ".", "get", "Name", "Value", "Pair", "(", "name", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "remove", "After", "Value", "Pair", "<|s|>", "!=", "<|s|>", "null", "<|nl|>", "<|8-s|>", "&&", "<|s|>", "remove", "After", "Value", "Pair", ".", "get", "Value", "(", ")", "<|s|>", "instanceof", "<|s|>", "JBoolean", "Literal", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "defaut", "Value", "<|s|>", "=", "<|s|>", "(", "(", "JBoolean", "Literal", ")", "<|s|>", "remove", "After", "Value", "Pair", ".", "get", "Value", "(", ")", ")", ".", "get", "Value", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "defaut", "Value", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 82, "base_patch_number": 12, "changed_patch_number": 14, "code_file_name": "android_2551", "comment_id": "b0f70f09_bbc5c736", "class_list": ["AnnotationUtils"], "func_list": ["public static Set<JAnnotationType> getAnnotationTypes(", "public static List<JAnnotation> getAnnotation(@Nonnull Collection<JAnnotation> annotations,", "public static boolean getBooleanValueFromAnnotation(JAnnotation annotation, String name,"], "prime_var_dic": {}}, {"idx": 58378, "status": "update", "global_index": 17251, "project_name": "android_", "written_on": "2010-12-14 22:10:05", "tufano_target": "public void METHOD_3 ( ) { super . METHOD_3 ( ) ; METHOD_4 ( VAR_6 , new TYPE_2 ( VAR_7 ) ) ; VAR_8 = true ; } private void METHOD_5 ( final TYPE_1 intent ) { int VAR_1 = intent . METHOD_2 ( VAR_9 , - 1 ) ; int VAR_2 = intent . METHOD_2 ( VAR_10 , - 1 ) ; VAR_3 = VAR_2 > 0 && VAR_1 * VAR_4 / VAR_2 >= VAR_5 ; }", "comment": "Suggest renaming this to updateBatteryState().", "tokenized_comment": ["Suggest", "<|s|>", "renaming", "<|s|>", "this", "<|s|>", "to", "<|s|>", "update", "Battery", "State", "(", ")", "."], "tufano_code": "private void METHOD_1 ( final TYPE_1 intent ) { int VAR_1 = intent . METHOD_2 ( STRING_1 , - 1 ) ; int VAR_2 = intent . METHOD_2 ( STRING_2 , - 1 ) ; VAR_3 = VAR_2 > 0 && VAR_1 * VAR_4 / VAR_2 >= VAR_5 ; }", "our_target": "    @Override\n    public void onResume() {\n        super.onResume();\n\n        registerReceiver(mBatteryReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n        mReceiverRegistered = true;\n    }\n\n    private void updateBatteryState(final Intent intent) {\n        int level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);\n        int scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);\n", "our_code": "<|startfocus|>\n    private void setBatteryLow(final Intent intent) {\n        int level = intent.getIntExtra(\"level\", -1);\n        int scale = intent.getIntExtra(\"scale\", -1);\n<|endfocus|>\n        mBatteryLevelOk = scale > 0 &&\n            level * DENOMINATOR / scale >= MASTER_CLEAR_EXECUTE_LEVEL;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "void", "<|s|>", "set", "Battery", "Low", "(", "final", "<|s|>", "Intent", "<|s|>", "intent", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "level", "<|s|>", "=", "<|s|>", "intent", ".", "get", "Int", "Extra", "(", "\"", "level", "\"", ",", "<|s|>", "-", "1", ");", "<|nl|>", "<|8-s|>", "int", "<|s|>", "scale", "<|s|>", "=", "<|s|>", "intent", ".", "get", "Int", "Extra", "(", "\"", "scale", "\"", ",", "<|s|>", "-", "1", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "m", "Battery", "Level", "Ok", "<|s|>", "=", "<|s|>", "scale", "<|s|>", ">", "<|s|>", "0", "<|s|>", "&&", "<|nl|>", "<|12-s|>", "level", "<|s|>", "*", "<|s|>", "DENOMINATOR", "<|s|>", "/", "<|s|>", "scale", "<|s|>", ">=", "<|s|>", "MASTER", "_", "CLEAR", "_", "EXECUTE", "_", "LEVEL", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 218, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4472", "comment_id": "AAAA%2Bn%2F%2F%2F4k%3D", "class_list": ["MasterClear"], "func_list": ["public void onReceive(Context context, Intent intent)", "public void onClick(View v)", "private boolean runKeyguardConfirmation(int request)", "protected void onActivityResult(int requestCode, int resultCode, Intent data)", "private void establishFinalConfirmationState()", "private void establishInitialState()", "protected void onCreate(Bundle savedState)", "public void onPause()", "private void setBatteryLow(final Intent intent)", "protected Dialog onCreateDialog(int dialogId)", "public boolean onKey(final DialogInterface d,", "public void onBackPressed()"], "prime_var_dic": {"int": 5, "execute": 1, "MasterClear": 1, "registered": 1, "subactivity": 1}}, {"idx": 34423, "status": "update", "global_index": 5124, "project_name": "android_", "written_on": "2016-09-28 14:14:18", "tufano_target": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) ; if ( VAR_3 . size ( ) > 0 ) { for ( TYPE_4 VAR_4 : VAR_3 ) { VAR_10 . add ( VAR_5 ) ; } return VAR_2 ; } synchronized ( this ) { for ( TYPE_2 VAR_6 : VAR_7 ) { TYPE_4 VAR_4 = VAR_8 ; if ( VAR_4 != null && VAR_9 == VAR_1 ) { VAR_2 . add ( VAR_6 ) ; } } } return VAR_2 ; }", "comment": "Rename to isReceivingBroadcastLocked since the service lock should be held (and is held) when this method is called.", "tokenized_comment": ["Rename", "<|s|>", "to", "<|s|>", "is", "Receiving", "Broadcast", "Locked", "<|s|>", "since", "<|s|>", "the", "<|s|>", "service", "<|s|>", "lock", "<|s|>", "should", "<|s|>", "be", "<|s|>", "held", "<|s|>", "(", "and", "<|s|>", "is", "<|s|>", "held", ")", "<|s|>", "when", "<|s|>", "this", "<|s|>", "method", "<|s|>", "is", "<|s|>", "called", "."], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) ; if ( VAR_3 . size ( ) > 0 ) { for ( TYPE_4 VAR_4 : VAR_3 ) { VAR_2 . add ( VAR_5 ) ; } return VAR_2 ; } synchronized ( this ) { for ( TYPE_2 VAR_6 : VAR_7 ) { TYPE_4 VAR_4 = VAR_8 ; if ( VAR_4 != null && VAR_9 == VAR_1 ) { VAR_2 . add ( VAR_6 ) ; } } } return VAR_2 ; }", "our_target": "                receivingQueues.add(r.queue);\n", "our_code": "    private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app) {\n        final ArraySet<BroadcastQueue> queues = new ArraySet<BroadcastQueue>();\n        if (app.curReceivers.size() > 0) {\n            for (BroadcastRecord r : app.curReceivers) {\n<|startfocus|>\n                queues.add(r.queue);\n<|endfocus|>\n            }\n            return queues;\n        }\n\n        // It's not the current receiver, but it might be starting up to become one\n        synchronized (this) {\n            for (BroadcastQueue queue : mBroadcastQueues) {\n                BroadcastRecord r = queue.mPendingBroadcast;\n                if (r != null && r.curApp == app) {\n                    // found it; report which queue it's in\n                    queues.add(queue);\n                }\n            }\n        }\n\n        return queues;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Array", "Set", "<", "Broadcast", "Queue", ">", "<|s|>", "is", "Receiving", "Broadcast", "(", "Process", "Record", "<|s|>", "app", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Array", "Set", "<", "Broadcast", "Queue", ">", "<|s|>", "queues", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "Set", "<", "Broadcast", "Queue", ">", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "app", ".", "cur", "Receivers", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "for", "<|s|>", "(", "Broadcast", "Record", "<|s|>", "r", "<|s|>", ":", "<|s|>", "app", ".", "cur", "Receivers", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "queues", ".", "add", "(", "r", ".", "queue", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "return", "<|s|>", "queues", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "It", "'", "s", "<|s|>", "not", "<|s|>", "the", "<|s|>", "current", "<|s|>", "receiver", ",", "<|s|>", "but", "<|s|>", "it", "<|s|>", "might", "<|s|>", "be", "<|s|>", "starting", "<|s|>", "up", "<|s|>", "to", "<|s|>", "become", "<|s|>", "one", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "this", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "for", "<|s|>", "(", "Broadcast", "Queue", "<|s|>", "queue", "<|s|>", ":", "<|s|>", "m", "Broadcast", "Queues", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Broadcast", "Record", "<|s|>", "r", "<|s|>", "=", "<|s|>", "queue", ".", "m", "Pending", "Broadcast", ";", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "r", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "r", ".", "cur", "App", "<|s|>", "==", "<|s|>", "app", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "//", "<|s|>", "found", "<|s|>", "it", ";", "<|s|>", "report", "<|s|>", "which", "<|s|>", "queue", "<|s|>", "it", "'", "s", "<|s|>", "in", "<|nl|>", "<|16-s|>", "<|4-s|>", "queues", ".", "add", "(", "queue", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "queues", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 18905, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4081", "comment_id": "e5c1c7c3_abec4ab6", "class_list": ["ActivityManagerService", "PendingAssistExtras", "ForegroundToken", "of", "Association", "GrantUri", "FontScaleSettingObserver", "Identity", "ProcessChangeItem", "AppDeathRecipient", "KillHandler", "UiHandler", "MainHandler", "MemBinder", "GraphicsBinder", "DbBinder", "CpuBinder", "Lifecycle", "ProcessInfoService", "PermissionController", "IntentFirewallInterface", "NeededUriGrants", "", "ItemMatcher", "MemItem", "LocalService", "SleepTokenImpl", "AppTaskImpl"], "func_list": ["BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public void run()", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "void build(String name)", "int build(String[] args, int opti)", "boolean match(Object object, ComponentName comp)", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public ComponentName getHomeActivityForUser(int userId)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)"], "prime_var_dic": {"task": 1}}, {"idx": 44478, "status": "update", "global_index": 12350, "project_name": "android_", "written_on": "2014-08-19 06:11:57", "tufano_target": "public void METHOD_7 ( TYPE_1 < TYPE_2 , ? > VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( ) . METHOD_1 ( METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 ) ; } }", "comment": "I'd call this requestDebugBridge or similar to make explicit the semantic difference between the get one and this one.", "tokenized_comment": ["I", "'", "d", "<|s|>", "call", "<|s|>", "this", "<|s|>", "request", "Debug", "Bridge", "<|s|>", "or", "<|s|>", "similar", "<|s|>", "to", "<|s|>", "make", "<|s|>", "explicit", "<|s|>", "the", "<|s|>", "semantic", "<|s|>", "difference", "<|s|>", "between", "<|s|>", "the", "<|s|>", "get", "<|s|>", "one", "<|s|>", "and", "<|s|>", "this", "<|s|>", "one", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 < TYPE_2 , ? > VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( ) . METHOD_1 ( METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 ) ; } }", "our_target": "  public void requestDebugBridge(Function<AndroidDebugBridge, ?> callback) {\n", "our_code": "<|startfocus|>\n  public void getDebugBridge(Function<AndroidDebugBridge, ?> callback) {\n<|endfocus|>\n    AndroidPlatform platform = getConfiguration().getAndroidPlatform();\n    if (platform != null) {\n      platform.getSdkData().getDebugBridge(getModule().getProject(), callback);\n    }\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "get", "Debug", "Bridge", "(", "Function", "<", "Android", "Debug", "Bridge", ",", "<|s|>", "?", ">", "<|s|>", "callback", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Android", "Platform", "<|s|>", "platform", "<|s|>", "=", "<|s|>", "get", "Configuration", "(", ")", ".", "get", "Android", "Platform", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "platform", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "platform", ".", "get", "Sdk", "Data", "(", ")", ".", "get", "Debug", "Bridge", "(", "get", "Module", "(", ")", ".", "get", "Project", "(", ")", ",", "<|s|>", "callback", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 515, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_733", "comment_id": "33f66d4a_884afb6f", "class_list": ["AndroidFacet", "LegacySourceProvider"], "func_list": ["public AndroidFacet(@NotNull Module module, String name, @NotNull AndroidFacetConfiguration configuration)", "public boolean isAutogenerationEnabled()", "public boolean isGradleProject()", "public boolean isLibraryProject()", "public void setLibraryProject(boolean library)", "public SourceProvider getMainSourceProvider()", "public IdeaSourceProvider getMainIdeaSourceProvider()", "public List<IdeaSourceProvider> getMainIdeaTestSourceProviders()", "public SourceProvider getBuildTypeSourceProvider()", "public IdeaSourceProvider getIdeaBuildTypeSourceProvider()", "public List<IdeaSourceProvider> getIdeaBuildTypeTestSourceProvider()", "public ResourceFolderManager getResourceFolderManager()", "public List<VirtualFile> getAllResourceDirectories()", "public String getBuildTypeName()", "public List<SourceProvider> getFlavorSourceProviders()", "public List<IdeaSourceProvider> getIdeaFlavorSourceProviders()", "public List<IdeaSourceProvider> getIdeaFlavorTestSourceProviders()", "public SourceProvider getMultiFlavorSourceProvider()", "public IdeaSourceProvider getIdeaMultiFlavorSourceProvider()", "public SourceProvider getVariantSourceProvider()", "public IdeaSourceProvider getIdeaVariantSourceProvider()", "public VirtualFile getPrimaryResourceDir()", "public boolean isGeneratedFileRemoved(@NotNull AndroidAutogeneratorMode mode)", "public void clearAutogeneratedFiles(@NotNull AndroidAutogeneratorMode mode)", "public void markFileAutogenerated(@NotNull AndroidAutogeneratorMode mode, @NotNull VirtualFile file)", "public Set<String> getAutogeneratedFiles(@NotNull AndroidAutogeneratorMode mode)", "private void activateSourceAutogenerating()", "public void androidPlatformChanged()", "public AndroidDebugBridge getDebugBridge()", "public void getDebugBridge(Function<AndroidDebugBridge, ?> callback)", "public AvdInfo[] getAllAvds()", "private boolean reloadAvds(AvdManager manager)", "public AvdInfo[] getValidCompatibleAvds()", "private AvdInfo[] addCompatibleAvds(List<AvdInfo> to, @NotNull AvdInfo[] from)", "public AvdManager getAvdManagerSilently()", "public AndroidSdkData getSdkData()", "public IAndroidTarget getTargetFromHashString(@NotNull String hash)", "public void launchEmulator(@Nullable final String avdName, @NotNull final String commands, @NotNull final ProcessHandler handler)", "public void run()", "public void onTextAvailable(@NotNull String text)", "public void initFacet()", "public void rootsChanged(final ModuleRootEvent event)", "private void addResourceFolderToSdkRootsIfNecessary()", "private static void addFilesToSdkIfNecessary(@NotNull Sdk sdk, @NotNull Collection<VirtualFile> files)", "public void disposeFacet()", "public static AndroidFacet getInstance(@NotNull Module module)", "public ResourceManager getResourceManager(@Nullable String resourcePackage)", "private static boolean isInAndroidSdk(@NonNull PsiElement element)", "public LocalResourceManager getLocalResourceManager()", "public SystemResourceManager getSystemResourceManager()", "public Manifest getManifest()", "public static AndroidFacetType getFacetType()", "private static boolean isUpToDate(SmartPsiElementPointer<PsiClass> pointer, String tagName, ClassMapConstructor constructor)", "private boolean fillMap(@NotNull final String className,", "public PsiClass compute()", "public boolean process(PsiClass c)", "public void scheduleSourceRegenerating(@NotNull final AndroidAutogeneratorMode mode)", "public boolean cleanRegeneratingState(@NotNull final AndroidAutogeneratorMode mode)", "public ConfigurationManager getConfigurationManager()", "public AppResourceRepository getAppResources(boolean createIfNecessary)", "public ProjectResourceRepository getProjectResources(boolean createIfNecessary)", "public LocalResourceRepository getModuleResources(boolean createIfNecessary)", "public void refreshResources()", "public JpsAndroidModuleProperties getProperties()", "public void setIdeaAndroidProject(@Nullable IdeaAndroidProject project)", "public void addListener(@NotNull GradleSyncListener listener)", "public IdeaAndroidProject getIdeaAndroidProject()", "public void syncSelectedVariant()", "public AndroidModuleInfo getAndroidModuleInfo()", "public String getName()", "public File getManifestFile()", "public Set<File> getJavaDirectories()", "public Set<File> getResourcesDirectories()", "public Set<File> getAidlDirectories()", "public Set<File> getRenderscriptDirectories()", "public Set<File> getJniDirectories()", "public Set<File> getResDirectories()", "public Set<File> getAssetsDirectories()", "public Collection<File> getJniLibsDirectories()", "public IdeaSourceProvider getMainIdeaSourceProvider()"], "prime_var_dic": {}}, {"idx": 9461, "status": "update", "global_index": 9090, "project_name": "android_", "written_on": "2015-08-19 13:26:44", "tufano_target": "private int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { final int height = VAR_4 ; final int VAR_5 = VAR_6 ; int VAR_7 = 1 ; if ( height > VAR_3 || VAR_5 > VAR_2 ) { while ( ( height / VAR_7 ) > VAR_3 && ( VAR_5 / VAR_7 ) > VAR_2 ) { VAR_7 *= INT_1 ; } } return TYPE_2 . METHOD_2 ( height / VAR_3 , VAR_5 / VAR_2 ) + 1 ; }", "comment": "Can we not calculate this directly, using e.g.\nreturn Math.max(height/reqHeight, widget/reqWidth) + 1;\nWe might also want to check that reqHeight and reqWidth are not 0.", "tokenized_comment": ["Can", "<|s|>", "we", "<|s|>", "not", "<|s|>", "calculate", "<|s|>", "this", "<|s|>", "directly", ",", "<|s|>", "using", "<|s|>", "e", ".", "g", ".", "<|nl|>", "return", "<|s|>", "Math", ".", "max", "(", "height", "/", "req", "Height", ",", "<|s|>", "widget", "/", "req", "Width", ")", "<|s|>", "+", "<|s|>", "1", ";", "<|nl|>", "We", "<|s|>", "might", "<|s|>", "also", "<|s|>", "want", "<|s|>", "to", "<|s|>", "check", "<|s|>", "that", "<|s|>", "req", "Height", "<|s|>", "and", "<|s|>", "req", "Width", "<|s|>", "are", "<|s|>", "not", "<|s|>", "0", "."], "tufano_code": "private int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { final int height = VAR_4 ; final int VAR_5 = VAR_6 ; int VAR_7 = 1 ; if ( height > VAR_3 || VAR_5 > VAR_2 ) { while ( ( height / VAR_7 ) > VAR_3 && ( VAR_5 / VAR_7 ) > VAR_2 ) { VAR_7 *= INT_1 ; } } return VAR_7 ; }", "our_target": "        return Math.max(height/reqHeight, width/reqWidth) + 1;\n", "our_code": "    private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight){\n        // Raw height and width of image\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n        if(height > reqHeight || width > reqWidth){\n            while((height / inSampleSize) > reqHeight && (width / inSampleSize) > reqWidth){\n                inSampleSize *= 2;\n            }\n        }\n<|startfocus|>\n        return inSampleSize;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "int", "<|s|>", "calculate", "In", "Sample", "Size", "(", "Bitmap", "Factory", ".", "Options", "<|s|>", "options", ",", "<|s|>", "int", "<|s|>", "req", "Width", ",", "<|s|>", "int", "<|s|>", "req", "Height", ")", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Raw", "<|s|>", "height", "<|s|>", "and", "<|s|>", "width", "<|s|>", "of", "<|s|>", "image", "<|nl|>", "<|8-s|>", "final", "<|s|>", "int", "<|s|>", "height", "<|s|>", "=", "<|s|>", "options", ".", "out", "Height", ";", "<|nl|>", "<|8-s|>", "final", "<|s|>", "int", "<|s|>", "width", "<|s|>", "=", "<|s|>", "options", ".", "out", "Width", ";", "<|nl|>", "<|8-s|>", "int", "<|s|>", "in", "Sample", "Size", "<|s|>", "=", "<|s|>", "1", ";", "<|nl|>", "<|8-s|>", "if", "(", "height", "<|s|>", ">", "<|s|>", "req", "Height", "<|s|>", "||", "<|s|>", "width", "<|s|>", ">", "<|s|>", "req", "Width", ")", "{", "<|nl|>", "<|12-s|>", "while", "(", "(", "height", "<|s|>", "/", "<|s|>", "in", "Sample", "Size", ")", "<|s|>", ">", "<|s|>", "req", "Height", "<|s|>", "&&", "<|s|>", "(", "width", "<|s|>", "/", "<|s|>", "in", "Sample", "Size", ")", "<|s|>", ">", "<|s|>", "req", "Width", ")", "{", "<|nl|>", "<|16-s|>", "in", "Sample", "Size", "<|s|>", "*=", "<|s|>", "2", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "in", "Sample", "Size", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 96, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_872", "comment_id": "c4c3a958_18d9c969", "class_list": ["ByodPresentMediaDialog"], "func_list": ["public static ByodPresentMediaDialog newImageInstance(Uri uri)", "public static ByodPresentMediaDialog newVideoInstance(Uri uri)", "public static ByodPresentMediaDialog newAudioInstance(Uri uri)", "private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight)", "public Dialog onCreateDialog(Bundle savedInstanceState)", "public void onClick(View v)", "public void onPrepared(MediaPlayer mp)", "public void onCancel(DialogInterface dialog)", "public void onDestroyView()"], "prime_var_dic": {"TAG": 1, "String": 3, "playing": 1}}, {"idx": 34374, "status": "update", "global_index": 8274, "project_name": "android_", "written_on": "2016-02-03 17:52:43", "tufano_target": "public static void main ( String [ ] args ) { TYPE_1 . METHOD_1 ( args [ 0 ] ) ; if ( METHOD_2 ( ) != INT_1 ) { throw new TYPE_2 ( STRING_1 ) ; } if ( METHOD_3 ( ) != FLOAT_1 ) { throw new TYPE_2 ( STRING_1 ) ; } if ( METHOD_4 ( ) != TYPE_3 . METHOD_6 ( INT_3 ) ) { throw new TYPE_2 ( STRING_2 ) ; } if ( METHOD_5 ( ) != INT_2 ) { throw new TYPE_2 ( STRING_1 ) ; } }", "comment": "Nit: Didn't check what 53.3 translates to in binary, but I'd suggest doing\n\n  Double.longBitsToDouble\n\non the long hex below to guarantee that the value covers both registers.", "tokenized_comment": ["Nit", ":", "<|s|>", "Didn", "'", "t", "<|s|>", "check", "<|s|>", "what", "<|s|>", "53", ".", "3", "<|s|>", "translates", "<|s|>", "to", "<|s|>", "in", "<|s|>", "binary", ",", "<|s|>", "but", "<|s|>", "I", "'", "d", "<|s|>", "suggest", "<|s|>", "doing", "<|nl|>", "<|nl|>", "<|2-s|>", "Double", ".", "long", "Bits", "To", "Double", "<|nl|>", "<|nl|>", "on", "<|s|>", "the", "<|s|>", "long", "<|s|>", "hex", "<|s|>", "below", "<|s|>", "to", "<|s|>", "guarantee", "<|s|>", "that", "<|s|>", "the", "<|s|>", "value", "<|s|>", "covers", "<|s|>", "both", "<|s|>", "registers", "."], "tufano_code": "public static void main ( String [ ] args ) { TYPE_1 . METHOD_1 ( args [ 0 ] ) ; if ( METHOD_2 ( ) != INT_1 ) { throw new TYPE_2 ( STRING_1 ) ; } if ( METHOD_3 ( ) != FLOAT_1 ) { throw new TYPE_2 ( STRING_1 ) ; } if ( METHOD_4 ( ) != FLOAT_2 ) { throw new TYPE_2 ( STRING_1 ) ; } if ( METHOD_5 ( ) != INT_2 ) { throw new TYPE_2 ( STRING_1 ) ; } }", "our_target": "    if ($noinline$returnDouble() != Double.longBitsToDouble(0xF000000000001111L)) {\n      throw new Error(\"Unexpected return value \");\n", "our_code": "  public static void main(String[] args) {\n    System.loadLibrary(args[0]);\n    if ($noinline$returnInt() != 53) {\n      throw new Error(\"Unexpected return value\");\n    }\n    if ($noinline$returnFloat() != 42.2f) {\n      throw new Error(\"Unexpected return value\");\n    }\n<|startfocus|>\n    if ($noinline$returnDouble() != 53.3) {\n      throw new Error(\"Unexpected return value\");\n<|endfocus|>\n    }\n    if ($noinline$returnLong() != 0xFFFF000000001111L) {\n      throw new Error(\"Unexpected return value\");\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "main", "(", "String", "[", "]", "<|s|>", "args", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "System", ".", "load", "Library", "(", "args", "[", "0", "]", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "$", "noinline", "$", "return", "Int", "(", ")", "<|s|>", "!=", "<|s|>", "53", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Error", "(", "\"", "Unexpected", "<|s|>", "return", "<|s|>", "value", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "$", "noinline", "$", "return", "Float", "(", ")", "<|s|>", "!=", "<|s|>", "42", ".", "2", "f", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Error", "(", "\"", "Unexpected", "<|s|>", "return", "<|s|>", "value", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "$", "noinline", "$", "return", "Double", "(", ")", "<|s|>", "!=", "<|s|>", "53", ".", "3", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Error", "(", "\"", "Unexpected", "<|s|>", "return", "<|s|>", "value", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "$", "noinline", "$", "return", "Long", "(", ")", "<|s|>", "!=", "<|s|>", "0", "x", "FFFF", "00000000111", "1", "L", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Error", "(", "\"", "Unexpected", "<|s|>", "return", "<|s|>", "value", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 26, "base_patch_number": 5, "changed_patch_number": 8, "code_file_name": "android_5138", "comment_id": "71e018e1_c1d12427", "class_list": ["Main"], "func_list": ["public static void main(String[] args)"], "prime_var_dic": {"doThrow": 1}}, {"idx": 59676, "status": "update", "global_index": 12494, "project_name": "android_", "written_on": "2014-08-28 22:55:01", "tufano_target": "public void METHOD_4 ( String error ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; assertNotNull ( STRING_1 , VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; String VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; assertNotNull ( VAR_4 ) ; assertTrue ( STRING_2 + error + STRING_3 + VAR_4 , VAR_4 . contains ( error ) ) ; }", "comment": "assert vs require", "tokenized_comment": ["assert", "<|s|>", "vs", "<|s|>", "require"], "tufano_code": "public void METHOD_1 ( String error ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; assertNotNull ( STRING_1 , VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; String VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; assertNotNull ( VAR_4 ) ; assertTrue ( STRING_2 + error + STRING_3 + VAR_4 , VAR_4 . contains ( error ) ) ; }", "our_target": "  public void requireHaveRenderError(@NotNull String error) {\n", "our_code": "<|startfocus|>\n  public void assertHaveRenderError(@NotNull String error) {\n<|endfocus|>\n    RenderResult lastResult = myRenderContext.getLastResult();\n    assertNotNull(\"No render result available\", lastResult);\n    RenderErrorPanel panel = new RenderErrorPanel();\n    String html = panel.showErrors(lastResult);\n    assertNotNull(html);\n    assertTrue(\"Did not find \" + error + \" in \" + html, html.contains(error));\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "assert", "Have", "Render", "Error", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "error", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Render", "Result", "<|s|>", "last", "Result", "<|s|>", "=", "<|s|>", "my", "Render", "Context", ".", "get", "Last", "Result", "(", ");", "<|nl|>", "<|4-s|>", "assert", "Not", "Null", "(", "\"", "No", "<|s|>", "render", "<|s|>", "result", "<|s|>", "available", "\"", ",", "<|s|>", "last", "Result", ");", "<|nl|>", "<|4-s|>", "Render", "Error", "Panel", "<|s|>", "panel", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Render", "Error", "Panel", "(", ");", "<|nl|>", "<|4-s|>", "String", "<|s|>", "html", "<|s|>", "=", "<|s|>", "panel", ".", "show", "Errors", "(", "last", "Result", ");", "<|nl|>", "<|4-s|>", "assert", "Not", "Null", "(", "html", ");", "<|nl|>", "<|4-s|>", "assert", "True", "(", "\"", "Did", "<|s|>", "not", "<|s|>", "find", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "error", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "in", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "html", ",", "<|s|>", "html", ".", "contains", "(", "error", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 43, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_49", "comment_id": "b3541db2_49a1051b", "class_list": ["RenderErrorPanelFixture"], "func_list": ["public RenderErrorPanelFixture(@NotNull Robot robot, @NotNull LayoutFixture layoutFixture, @NotNull RenderContext renderContext)", "public void assertHaveRenderError(@NotNull String error)", "public void performSuggestion(@NotNull String linkText)", "public void assertRenderSuccessful(boolean allowErrors, boolean allowWarnings)"], "prime_var_dic": {"myRobot": 1, "myLayoutFixture": 1, "myRenderContext": 1}}, {"idx": 95099, "status": "update", "global_index": 5494, "project_name": "android_", "written_on": "2016-09-30 19:55:04", "tufano_target": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { byte [ ] VAR_3 = null ; if ( VAR_2 != null ) { try { VAR_3 = VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_3 VAR_4 ) { } } VAR_1 . METHOD_3 ( VAR_3 ) ; }", "comment": "Do we need this reset?", "tokenized_comment": ["Do", "<|s|>", "we", "<|s|>", "need", "<|s|>", "this", "<|s|>", "reset", "?"], "tufano_code": "public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { byte [ ] VAR_3 = null ; if ( VAR_2 != null ) { try { VAR_3 = VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_3 VAR_4 ) { VAR_3 = null ; } } VAR_1 . METHOD_3 ( VAR_3 ) ; }", "our_target": "            } catch (CertificateEncodingException e) {}\n", "our_code": "    public static void writeCertificate(Parcel dest, X509Certificate cert) {\n        byte[] certBytes = null;\n        if (cert != null) {\n            try {\n                certBytes = cert.getEncoded();\n<|startfocus|>\n            } catch (CertificateEncodingException e) {\n                certBytes = null;\n            }\n<|endfocus|>\n        }\n        dest.writeByteArray(certBytes);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "write", "Certificate", "(", "Parcel", "<|s|>", "dest", ",", "<|s|>", "X", "509", "Certificate", "<|s|>", "cert", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "byte", "[", "]", "<|s|>", "cert", "Bytes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "cert", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "cert", "Bytes", "<|s|>", "=", "<|s|>", "cert", ".", "get", "Encoded", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Certificate", "Encoding", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "cert", "Bytes", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "dest", ".", "write", "Byte", "Array", "(", "cert", "Bytes", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 99, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5685", "comment_id": "a28505ca_70369209", "class_list": ["ParcelUtil"], "func_list": ["public static void writePrivateKey(Parcel dest, PrivateKey key)", "public static PrivateKey readPrivateKey(Parcel in)", "public static void writeCertificate(Parcel dest, X509Certificate cert)", "public static X509Certificate readCertificate(Parcel in)", "public static void writeCertificates(Parcel dest, X509Certificate[] certs)", "public static X509Certificate[] readCertificates(Parcel in)"], "prime_var_dic": {"data": 1, "name": 1, "String": 1}}, {"idx": 84882, "status": "update", "global_index": 4687, "project_name": "android_", "written_on": "2016-12-02 00:21:26", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) { synchronized ( VAR_3 ) { if ( VAR_6 ) TYPE_4 . METHOD_2 ( VAR_4 , STRING_1 + VAR_2 . METHOD_3 ( ) + STRING_2 + VAR_5 . size ( ) ) ; VAR_5 . METHOD_4 ( new TYPE_5 ( VAR_1 , VAR_2 , listener ) ) ; if ( VAR_5 . size ( ) == 1 ) { METHOD_5 ( ) ; } } }", "comment": "wrap with if (DEBUG)", "tokenized_comment": ["wrap", "<|s|>", "with", "<|s|>", "if", "<|s|>", "(", "DEBUG", ")"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 listener ) { synchronized ( VAR_3 ) { TYPE_4 . METHOD_2 ( VAR_4 , STRING_1 + VAR_2 . METHOD_3 ( ) + STRING_2 + VAR_5 . size ( ) ) ; VAR_5 . METHOD_4 ( new TYPE_5 ( VAR_1 , VAR_2 , listener ) ) ; if ( VAR_5 . size ( ) == 1 ) { METHOD_5 ( ) ; } } }", "our_target": "            if (DEBUG) Log.d(TAG, \"Adding resolve of \" + serviceInfo.getServiceName() +\n", "our_code": "    public void resolve(NsdManager nsdManager, NsdServiceInfo serviceInfo,\n            NsdManager.ResolveListener listener) {\n        synchronized (mLock) {\n<|startfocus|>\n            Log.d(TAG, \"Adding resolve of \" + serviceInfo.getServiceName() +\n<|endfocus|>\n                    \" to queue size=\" + mResolveRequests.size());\n            mResolveRequests.addLast(new NsdResolveRequest(nsdManager, serviceInfo, listener));\n            if (mResolveRequests.size() == 1) {\n                resolveNextRequest();\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "resolve", "(", "Nsd", "Manager", "<|s|>", "nsd", "Manager", ",", "<|s|>", "Nsd", "Service", "Info", "<|s|>", "service", "Info", ",", "<|nl|>", "<|12-s|>", "Nsd", "Manager", ".", "Resolve", "Listener", "<|s|>", "listener", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "Log", ".", "d", "(", "TAG", ",", "<|s|>", "\"", "Adding", "<|s|>", "resolve", "<|s|>", "of", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "service", "Info", ".", "get", "Service", "Name", "(", ")", "<|s|>", "+", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "<|s|>", "to", "<|s|>", "queue", "<|s|>", "size", "=", "\"", "<|s|>", "+", "<|s|>", "m", "Resolve", "Requests", ".", "size", "(", ")", ");", "<|nl|>", "<|12-s|>", "m", "Resolve", "Requests", ".", "add", "Last", "(", "new", "<|s|>", "Nsd", "Resolve", "Request", "(", "nsd", "Manager", ",", "<|s|>", "service", "Info", ",", "<|s|>", "listener", ")", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Resolve", "Requests", ".", "size", "(", ")", "<|s|>", "==", "<|s|>", "1", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "resolve", "Next", "Request", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 64, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4200", "comment_id": "0d6b6b00_1d98a55f", "class_list": ["synchronizes", "NsdResolveQueue", "NsdResolveRequest"], "func_list": ["public static NsdResolveQueue getInstance()", "public void resolve(NsdManager nsdManager, NsdServiceInfo serviceInfo,", "void clear()", "private void resolveNextRequest()", "private NsdResolveRequest(NsdManager nsdManager,", "public void start()", "public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode)", "public void onServiceResolved(NsdServiceInfo serviceInfo)", "public static NsdResolveQueue getInstance()", "public void resolve(NsdManager nsdManager, NsdServiceInfo serviceInfo,", "void clear()", "private void resolveNextRequest()", "private NsdResolveRequest(NsdManager nsdManager,", "public void start()", "public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode)", "public void onServiceResolved(NsdServiceInfo serviceInfo)"], "prime_var_dic": {}}, {"idx": 80765, "status": "update", "global_index": 19477, "project_name": "android_", "written_on": "2011-03-08 17:25:22", "tufano_target": "private TYPE_1 METHOD_3 ( TYPE_2 type , String name ) { TYPE_3 < TYPE_1 > list = VAR_1 . get ( type ) ; if ( list != null ) { for ( TYPE_1 item : list ) { if ( name . equals ( item . getName ( ) ) && item . METHOD_2 ( ) == false ) { return item ; } } } return null ; }", "comment": "Since it ignores inline resources maybe the name could be \"findDeclaredResource\" ?", "tokenized_comment": ["Since", "<|s|>", "it", "<|s|>", "ignores", "<|s|>", "inline", "<|s|>", "resources", "<|s|>", "maybe", "<|s|>", "the", "<|s|>", "name", "<|s|>", "could", "<|s|>", "be", "<|s|>", "\"", "find", "Declared", "Resource", "\"", "<|s|>", "?"], "tufano_code": "private TYPE_1 METHOD_1 ( TYPE_2 type , String name ) { TYPE_3 < TYPE_1 > list = VAR_1 . get ( type ) ; if ( list != null ) { for ( TYPE_1 item : list ) { if ( name . equals ( item . getName ( ) ) && item . METHOD_2 ( ) == false ) { return item ; } } } return null ; }", "our_target": "    private ResourceItem findDeclaredResourceItem(ResourceType type, String name) {\n", "our_code": "<|startfocus|>\n    private ResourceItem findResourceItem(ResourceType type, String name) {\n<|endfocus|>\n        List<ResourceItem> list = mResourceMap.get(type);\n\n        if (list != null) {\n            for (ResourceItem item : list) {\n                // ignore inline\n                if (name.equals(item.getName()) && item.isDeclaredInline() == false) {\n                    return item;\n                }\n            }\n        }\n\n        return null;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "Resource", "Item", "<|s|>", "find", "Resource", "Item", "(", "Resource", "Type", "<|s|>", "type", ",", "<|s|>", "String", "<|s|>", "name", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "List", "<", "Resource", "Item", ">", "<|s|>", "list", "<|s|>", "=", "<|s|>", "m", "Resource", "Map", ".", "get", "(", "type", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "list", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "for", "<|s|>", "(", "Resource", "Item", "<|s|>", "item", "<|s|>", ":", "<|s|>", "list", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "//", "<|s|>", "ignore", "<|s|>", "inline", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "name", ".", "equals", "(", "item", ".", "get", "Name", "(", ")", ")", "<|s|>", "&&", "<|s|>", "item", ".", "is", "Declared", "Inline", "(", ")", "<|s|>", "==", "<|s|>", "false", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "return", "<|s|>", "item", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 638, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_1890", "comment_id": "AAAA%2FH%2F%2F%2FE8%3D", "class_list": ["for", "ResourceRepository"], "func_list": ["protected ResourceRepository(boolean isFrameworkRepository)", "protected ResourceRepository(boolean isFrameworkRepository)", "protected ResourceFolder add(ResourceFolderType type, FolderConfiguration config,", "protected ResourceFolder removeFolder(ResourceFolderType type, IAbstractFolder removedFolder)", "protected ResourceItem createResourceItem(ResourceType type, String name)", "public List<ResourceFolder> getFolders(ResourceFolderType type)", "public ResourceType[] getAvailableResourceTypes()", "public Collection<ResourceItem> getResourceItems(ResourceType type)", "public boolean hasResources(ResourceType type)", "public ResourceFolder getResourceFolder(IFolder folder)", "public ResourceFile getMatchingFile(String name, ResourceFolderType type,", "public List<ResourceFile> getSourceFiles(ResourceType type, String name,", "public SortedSet<String> getLanguages()", "public SortedSet<String> getRegions(String currentLanguage)", "protected void removeFile(Collection<ResourceType> types, ResourceFile file)", "private Configurable findMatchingConfigurable(List<? extends Configurable> configurables,", "protected void postUpdate()", "private ResourceItem findResourceItem(ResourceType type, String name)"], "prime_var_dic": {"ResourceRepository": 1, "mFrameworkRepository": 1, "project": 1, "resource": 3, "IAbstractFolder": 1, "ResourceFolderType": 1, "IFolder": 1, "Resource": 2}}, {"idx": 86923, "status": "update", "global_index": 8572, "project_name": "android_", "written_on": "2015-08-18 17:30:22", "tufano_target": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertTrue ( STRING_1 , VAR_5 != 0 ) ; TYPE_2 VAR_6 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( STRING_1 , 0 , VAR_8 ) ; METHOD_4 ( VAR_1 ) ; }", "comment": "null? (you're checking the ID against 0).", "tokenized_comment": ["null", "?", "<|s|>", "(", "you", "'", "re", "<|s|>", "checking", "<|s|>", "the", "<|s|>", "ID", "<|s|>", "against", "<|s|>", "0", ")", "."], "tufano_code": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; METHOD_3 ( STRING_1 , VAR_5 == 0 ) ; TYPE_2 VAR_6 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( STRING_1 , 0 , VAR_8 ) ; METHOD_4 ( VAR_1 ) ; }", "our_target": "        assertTrue(\"Invalid exception object id\", invokeNewObject.objectID != 0);\n", "our_code": "    protected void checkInvokeReply(ReplyPacket reply) {\n        // Check result is an object.\n        TaggedObject invokeNewObject = reply.getNextValueAsTaggedObject();\n        assertEquals(JDWPConstants.Tag.OBJECT_TAG, invokeNewObject.tag);\n<|startfocus|>\n        assertFalse(\"Invalid exception object id\", invokeNewObject.objectID == 0);\n<|endfocus|>\n\n        // Check exception is null.\n        TaggedObject invokeException = reply.getNextValueAsTaggedObject();\n        assertEquals(JDWPConstants.Tag.OBJECT_TAG, invokeException.tag);\n        assertEquals(\"Invalid exception object id\", 0, invokeException.objectID);\n\n        assertAllDataRead(reply);\n\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "check", "Invoke", "Reply", "(", "Reply", "Packet", "<|s|>", "reply", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "result", "<|s|>", "is", "<|s|>", "an", "<|s|>", "object", ".", "<|nl|>", "<|8-s|>", "Tagged", "Object", "<|s|>", "invoke", "New", "Object", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Tagged", "Object", "(", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "JDWPConstants", ".", "Tag", ".", "OBJECT", "_", "TAG", ",", "<|s|>", "invoke", "New", "Object", ".", "tag", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "assert", "False", "(", "\"", "Invalid", "<|s|>", "exception", "<|s|>", "object", "<|s|>", "id", "\"", ",", "<|s|>", "invoke", "New", "Object", ".", "object", "ID", "<|s|>", "==", "<|s|>", "0", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "exception", "<|s|>", "is", "<|s|>", "null", ".", "<|nl|>", "<|8-s|>", "Tagged", "Object", "<|s|>", "invoke", "Exception", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Tagged", "Object", "(", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "JDWPConstants", ".", "Tag", ".", "OBJECT", "_", "TAG", ",", "<|s|>", "invoke", "Exception", ".", "tag", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "\"", "Invalid", "<|s|>", "exception", "<|s|>", "object", "<|s|>", "id", "\"", ",", "<|s|>", "0", ",", "<|s|>", "invoke", "Exception", ".", "object", "ID", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "assert", "All", "Data", "Read", "(", "reply", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 57, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2741", "comment_id": "04b221f6_d70f1ce9", "class_list": ["NewInstanceWithSuspensionTest"], "func_list": ["public void testInvokeWithMultipleEvents001()", "protected CommandPacket buildInvokeCommand(long threadId, long classID,", "protected String getInvokeCommandName()", "protected void checkInvokeReply(ReplyPacket reply)"], "prime_var_dic": {}}, {"idx": 78417, "status": "update", "global_index": 16612, "project_name": "android_", "written_on": "2015-06-26 15:45:46", "tufano_target": "public String getText ( ) { if ( VAR_1 . size ( ) == 1 ) { TYPE_1 VAR_2 = METHOD_1 ( VAR_1 ) ; assert VAR_2 != null ; return TYPE_3 . message ( STRING_1 , VAR_2 . getName ( ) ) ; } else { return STRING_2 ; } }", "comment": "Remove.", "tokenized_comment": ["Remove", "."], "tufano_code": "public String getText ( ) { if ( VAR_1 . size ( ) == 1 ) { final TYPE_1 VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; return TYPE_3 . message ( STRING_1 , VAR_2 . getName ( ) ) ; } else { return STRING_2 ; } }", "our_target": "      Module module = getFirstItem(myModules);\n      assert module != null;\n", "our_code": "  public String getText() {\n    if (myModules.size() == 1) {\n<|startfocus|>\n      final Module module = ContainerUtil.getFirstItem(myModules);\n<|endfocus|>\n      return QuickFixBundle.message(\"orderEntry.fix.add.dependency.on.module\", module.getName());\n    }\n    else {\n      return \"Add dependency on module...\";\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Text", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Modules", ".", "size", "(", ")", "<|s|>", "==", "<|s|>", "1", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "final", "<|s|>", "Module", "<|s|>", "module", "<|s|>", "=", "<|s|>", "Container", "Util", ".", "get", "First", "Item", "(", "my", "Modules", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Quick", "Fix", "Bundle", ".", "message", "(", "\"", "order", "Entry", ".", "fix", ".", "add", ".", "dependency", ".", "on", ".", "module", "\"", ",", "<|s|>", "module", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "\"", "Add", "<|s|>", "dependency", "<|s|>", "on", "<|s|>", "module", "...", "\"", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 99, "base_patch_number": 14, "changed_patch_number": 15, "code_file_name": "android_503", "comment_id": "9eabbaef_0f4c898f", "class_list": ["AddGradleProjectDependencyFix"], "func_list": ["public AddGradleProjectDependencyFix(@NotNull Module currentModule,", "public String getText()", "public String getFamilyName()", "public boolean isAvailable(@NotNull Project project, @Nullable Editor editor, @Nullable PsiFile file)", "public void invoke(@NotNull final Project project, @Nullable final Editor editor, @Nullable PsiFile file)", "public void run()", "private void addDependencyOnModule(@NotNull final Project project, @Nullable final Editor editor, @NotNull final Module module)", "public void syncStarted(@NotNull Project project)", "public void syncSucceeded(@NotNull Project project)", "public void syncFailed(@NotNull Project project, @NotNull String errorMessage)", "public void syncSkipped(@NotNull Project project)", "private static void showCircularWarningAndContinue(@NotNull final Project project, @NotNull final Pair<Module, Module> circularModules,", "public boolean startInWriteAction()", "private void addDependencyOnModule(@NotNull final Project project, @Nullable final Editor editor, @NotNull final Module module)"], "prime_var_dic": {"myCurrentModule": 1, "myClassVFile": 1, "myReference": 1}}, {"idx": 24693, "status": "update", "global_index": 9294, "project_name": "android_", "written_on": "2015-09-04 18:45:35", "tufano_target": "private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 field : VAR_1 . METHOD_2 ( ) ) { String fieldName = field . METHOD_3 ( ) . getName ( ) ; TYPE_3 VAR_2 = field . getValue ( ) ; if ( STRING_1 . equals ( fieldName ) && ( VAR_2 instanceof TYPE_1 ) ) { TYPE_1 result = ( TYPE_1 ) VAR_2 ; String className = result . METHOD_4 ( ) . METHOD_5 ( ) ; if ( STRING_2 . equals ( className ) ) { return result ; } } } return null ; }", "comment": "same here", "tokenized_comment": ["same", "<|s|>", "here"], "tufano_code": "private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 field : VAR_1 . METHOD_2 ( ) ) { String fieldName = field . METHOD_3 ( ) . getName ( ) ; TYPE_3 VAR_2 = field . getValue ( ) ; if ( STRING_1 . equals ( fieldName ) && ( VAR_2 instanceof TYPE_1 ) ) { return ( TYPE_1 ) VAR_2 ; } } return null ; }", "our_target": "        ClassInstance result = (ClassInstance)fieldValue;\n        String className = result.getClassObj().getClassName();\n        if (\"android.graphics.drawable.BitmapDrawable$BitmapState\".equals(className)) {\n          return result;\n        }\n", "our_code": "  private static ClassInstance getBitmapStateFromBitmapDrawable(@NotNull ClassInstance bitmapDrawable) {\n    for (ClassInstance.FieldValue field : bitmapDrawable.getValues()) {\n      String fieldName = field.getField().getName();\n      Object fieldValue = field.getValue();\n      //todo type\n      if (\"mBitmapState\".equals(fieldName) && (fieldValue instanceof ClassInstance)) {\n<|startfocus|>\n        return (ClassInstance)fieldValue;\n<|endfocus|>\n      }\n    }\n    return null;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "Class", "Instance", "<|s|>", "get", "Bitmap", "State", "From", "Bitmap", "Drawable", "(", "@", "Not", "Null", "<|s|>", "Class", "Instance", "<|s|>", "bitmap", "Drawable", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Class", "Instance", ".", "Field", "Value", "<|s|>", "field", "<|s|>", ":", "<|s|>", "bitmap", "Drawable", ".", "get", "Values", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "field", "Name", "<|s|>", "=", "<|s|>", "field", ".", "get", "Field", "(", ")", ".", "get", "Name", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "Object", "<|s|>", "field", "Value", "<|s|>", "=", "<|s|>", "field", ".", "get", "Value", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "todo", "<|s|>", "type", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "\"", "m", "Bitmap", "State", "\"", ".", "equals", "(", "field", "Name", ")", "<|s|>", "&&", "<|s|>", "(", "field", "Value", "<|s|>", "instanceof", "<|s|>", "Class", "Instance", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "Class", "Instance", ")", "field", "Value", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 134, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_200", "comment_id": "644d9e85_d3341778", "class_list": ["HprofBitmapEvaluator"], "func_list": ["public static BufferedImage getBitmap(@NotNull Instance value)", "else if (\"mWidth\".equals(bitmapFieldName) && (bitmapFieldValue instanceof Integer))", "public static boolean canGetBitmapFromInstance(@NotNull Instance value)", "private static ClassInstance getBitmapClassInstance(@NotNull Instance value)", "private static ClassInstance getBitmapFromBitmapDrawable(@NotNull ClassInstance bitmapDrawable)", "private static ClassInstance getBitmapStateFromBitmapDrawable(@NotNull ClassInstance bitmapDrawable)"], "prime_var_dic": {}}, {"idx": 37020, "status": "update", "global_index": 4196, "project_name": "android_", "written_on": "2016-10-19 16:56:24", "tufano_target": "public VAR_1 ( ) { super ( VAR_2 , 1.0 , STRING_1 ) ; put ( STRING_2 , VAR_5 class . getName ( ) ) ; put ( STRING_4 , VAR_6 class . getName ( ) ) ; put ( STRING_3 , VAR_7 class . getName ( ) ) ; }", "comment": "We also need to assert that opaque EC keys work. Thus, it might be easier to create a single OpaquePrivateKey which can be used for any private key algorithm. That is, unless we want the platform-default TLS stack to require the private key to be an instance of RSAKey or ECKey as well.", "tokenized_comment": ["We", "<|s|>", "also", "<|s|>", "need", "<|s|>", "to", "<|s|>", "assert", "<|s|>", "that", "<|s|>", "opaque", "<|s|>", "EC", "<|s|>", "keys", "<|s|>", "work", ".", "<|s|>", "Thus", ",", "<|s|>", "it", "<|s|>", "might", "<|s|>", "be", "<|s|>", "easier", "<|s|>", "to", "<|s|>", "create", "<|s|>", "a", "<|s|>", "single", "<|s|>", "Opaque", "Private", "Key", "<|s|>", "which", "<|s|>", "can", "<|s|>", "be", "<|s|>", "used", "<|s|>", "for", "<|s|>", "any", "<|s|>", "private", "<|s|>", "key", "<|s|>", "algorithm", ".", "<|s|>", "That", "<|s|>", "is", ",", "<|s|>", "unless", "<|s|>", "we", "<|s|>", "want", "<|s|>", "the", "<|s|>", "platform", "-", "default", "<|s|>", "TLS", "<|s|>", "stack", "<|s|>", "to", "<|s|>", "require", "<|s|>", "the", "<|s|>", "private", "<|s|>", "key", "<|s|>", "to", "<|s|>", "be", "<|s|>", "an", "<|s|>", "instance", "<|s|>", "of", "<|s|>", "RSAKey", "<|s|>", "or", "<|s|>", "ECKey", "<|s|>", "as", "<|s|>", "well", "."], "tufano_code": "public VAR_1 ( ) { super ( VAR_2 , 1.0 , STRING_1 ) ; put ( STRING_2 , VAR_3 class . getName ( ) ) ; put ( STRING_3 , VAR_4 class . getName ( ) ) ; }", "our_target": "            put(\"Signature.NONEwithRSA\", OpaqueSignatureSpi.RSA.class.getName());\n            put(\"Signature.NONEwithECDSA\", OpaqueSignatureSpi.ECDSA.class.getName());\n            put(\"Cipher.RSA/ECB/NoPadding\", OpaqueCipherSpi.class.getName());\n", "our_code": "        public OpaqueWrappingProvider() {\n            super(NAME, 1.0, \"test provider\");\n\n<|startfocus|>\n            put(\"Signature.NONEwithRSA\", OpaqueWrappingSignatureSpi.class.getName());\n            put(\"Cipher.RSA/ECB/NoPadding\", OpaqueWrappingCipherSpi.class.getName());\n<|endfocus|>\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "Opaque", "Wrapping", "Provider", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "super", "(", "NAME", ",", "<|s|>", "1", ".", "0", ",", "<|s|>", "\"", "test", "<|s|>", "provider", "\"", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "put", "(", "\"", "Signature", ".", "NONEwith", "RSA", "\"", ",", "<|s|>", "Opaque", "Wrapping", "Signature", "Spi", ".", "class", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|12-s|>", "put", "(", "\"", "Cipher", ".", "RSA", "/", "ECB", "/", "No", "Padding", "\"", ",", "<|s|>", "Opaque", "Wrapping", "Cipher", "Spi", ".", "class", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 1000, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3342", "comment_id": "3cf3ffac_30d95283", "class_list": ["SSLSocketTest", "SSLServerSessionIdCallable", "TestUncaughtExceptionHandler", "OpaqueWrappingProvider", "OpaqueWrappingSignatureSpi", "OpaqueWrappingCipherSpi", "OpaqueWrappingRSAPrivateKey"], "func_list": ["new PSKKeyManagerProxy()", "protected SecretKey getKey(String identityHint, String identity, Socket socket)", "private SSLServerSessionIdCallable(SSLSocket server)", "public void handshakeCompleted(HandshakeCompletedEvent event)", "@Override public void uncaughtException(Thread thread, Throwable ex)", "@Override public String chooseClientAlias(String[] keyType,", "@Override public String chooseServerAlias(String keyType,", "@Override public X509Certificate[] getCertificateChain(String alias)", "@Override public String[] getClientAliases(String keyType, Principal[] issuers)", "@Override public String[] getServerAliases(String keyType, Principal[] issuers)", "@Override public PrivateKey getPrivateKey(String alias)", "public OpaqueWrappingProvider()", "public OpaqueWrappingSignatureSpi()", "public OpaqueWrappingCipherSpi()", "protected int engineGetBlockSize()", "protected int engineGetOutputSize(int inputLen)", "protected byte[] engineGetIV()", "protected AlgorithmParameters engineGetParameters()", "protected byte[] engineUpdate(byte[] input, int inputOffset, int inputLen)", "public OpaqueWrappingRSAPrivateKey(RSAPrivateKey delegate)", "public BigInteger getPrivateExponent()", "public String getAlgorithm()", "public String getFormat()", "public byte[] getEncoded()", "public BigInteger getModulus()", "@Override public X509Certificate[] getAcceptedIssuers()", "public Thread newThread(Runnable r)", "public void test_TestSSLSocketPair_create()", "protected SSLSocket configureSocket(SSLSocket socket)", "private static void assertInappropriateFallbackIsCause(Throwable cause)", "public void stress_test_TestSSLSocketPair_create()", "public static void main (String[] args)", "private SSLServerSessionIdCallable(SSLSocket server)", "@Override public void uncaughtException(Thread thread, Throwable ex)", "public String chooseClientAlias(String[] keyType, Principal[] issuers,", "public String chooseServerAlias(String keyType, Principal[] issuers,", "public X509Certificate[] getCertificateChain(String alias)", "public String[] getClientAliases(String keyType, Principal[] issuers)", "public String[] getServerAliases(String keyType, Principal[] issuers)", "public PrivateKey getPrivateKey(String alias)", "public OpaqueWrappingSignatureSpi()", "public OpaqueWrappingSignatureSpi()"], "prime_var_dic": {}}, {"idx": 21225, "status": "update", "global_index": 2124, "project_name": "android_", "written_on": "2017-03-03 19:36:38", "tufano_target": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_1 != null ) && ( VAR_2 == VAR_1 . getId ( ) ) ) { TYPE_1 context = getContext ( ) ; if ( context != null ) { int VAR_3 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_3 url = TYPE_4 . METHOD_4 ( VAR_4 , VAR_3 ) ; TYPE_5 VAR_5 = new TYPE_5 ( VAR_6 , url ) ; VAR_5 . METHOD_5 ( VAR_7 , VAR_8 ) ; context . METHOD_6 ( VAR_5 ) ; } } }", "comment": "nit: add space between , and url", "tokenized_comment": ["nit", ":", "<|s|>", "add", "<|s|>", "space", "<|s|>", "between", "<|s|>", ",", "<|s|>", "and", "<|s|>", "url"], "tufano_code": "public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( VAR_1 != null ) && ( VAR_2 == VAR_1 . getId ( ) ) ) { TYPE_1 context = getContext ( ) ; if ( context != null ) { int VAR_3 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_3 url = TYPE_4 . METHOD_4 ( VAR_4 , VAR_3 ) ; TYPE_5 VAR_5 = new TYPE_5 ( VAR_6 , url ) ; VAR_5 . METHOD_5 ( VAR_7 , VAR_8 ) ; context . METHOD_6 ( VAR_5 ) ; } } }", "our_target": "                Intent editIntent = new Intent(Intent.ACTION_EDIT, url);\n", "our_code": "    public void onClick(android.view.View v) {\n        if ((v != null) && (R.id.text_layout == v.getId())) {\n            Context context = getContext();\n            if (context != null) {\n                int pos = Integer.parseInt(getKey());\n                Uri url = ContentUris.withAppendedId(Telephony.Carriers.CONTENT_URI, pos);\n<|startfocus|>\n                Intent editIntent = new Intent(Intent.ACTION_EDIT,url);\n<|endfocus|>\n                editIntent.putExtra(ApnSettings.SUB_ID, mSubId);\n                context.startActivity(editIntent);\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Click", "(", "android", ".", "view", ".", "View", "<|s|>", "v", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "(", "v", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "&&", "<|s|>", "(", "R", ".", "id", ".", "text", "_", "layout", "<|s|>", "==", "<|s|>", "v", ".", "get", "Id", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Context", "<|s|>", "context", "<|s|>", "=", "<|s|>", "get", "Context", "(", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "context", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "int", "<|s|>", "pos", "<|s|>", "=", "<|s|>", "Integer", ".", "parse", "Int", "(", "get", "Key", "(", ")", ");", "<|nl|>", "<|16-s|>", "Uri", "<|s|>", "url", "<|s|>", "=", "<|s|>", "Content", "Uris", ".", "with", "Appended", "Id", "(", "Telephony", ".", "Carriers", ".", "CONTENT", "_", "URI", ",", "<|s|>", "pos", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "Intent", "<|s|>", "edit", "Intent", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Intent", "(", "Intent", ".", "ACTION", "_", "EDIT", ",", "url", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "edit", "Intent", ".", "put", "Extra", "(", "Apn", "Settings", ".", "SUB", "_", "ID", ",", "<|s|>", "m", "Sub", "Id", ");", "<|nl|>", "<|16-s|>", "context", ".", "start", "Activity", "(", "edit", "Intent", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 122, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4439", "comment_id": "34807101_508ae9a1", "class_list": ["ApnPreference"], "func_list": ["public ApnPreference(Context context, AttributeSet attrs, int defStyle)", "public void onBindViewHolder(PreferenceViewHolder view)", "boolean isChecked = getKey().equals(mSelectedKey);", "public void setChecked()", "public void onCheckedChanged(CompoundButton buttonView, boolean isChecked)", "public void onClick(android.view.View v)", "public void setSelectable(boolean selectable)", "public boolean getSelectable()", "public void setSubId(int subId)"], "prime_var_dic": {"TAG": 1, "mSelectedKey": 1, "mCurrentChecked": 1}}, {"idx": 28443, "status": "update", "global_index": 7180, "project_name": "android_", "written_on": "2016-03-08 11:24:53", "tufano_target": "public void METHOD_7 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertEquals ( 0 , VAR_1 . METHOD_2 ( ) ) ; assertEquals ( FLOAT_1 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( FLOAT_1 , VAR_1 . METHOD_4 ( ) ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_6 ( ) ) ; }", "comment": "test_empty is a better name.", "tokenized_comment": ["test", "_", "empty", "<|s|>", "is", "<|s|>", "a", "<|s|>", "better", "<|s|>", "name", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertEquals ( 0 , VAR_1 . METHOD_2 ( ) ) ; assertEquals ( FLOAT_1 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( FLOAT_1 , VAR_1 . METHOD_4 ( ) ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_6 ( ) ) ; }", "our_target": "    public void test_empty() {\n", "our_code": "<|startfocus|>\n    public void test_constructor() {\n<|endfocus|>\n        DoubleSummaryStatistics dss = new DoubleSummaryStatistics();\n        assertEquals(0, dss.getCount());\n        assertEquals(0.0d, dss.getSum());\n        assertEquals(0.0d, dss.getAverage());\n        assertEquals(Double.POSITIVE_INFINITY, dss.getMin());\n        assertEquals(Double.NEGATIVE_INFINITY, dss.getMax());\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "constructor", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Double", "Summary", "Statistics", "<|s|>", "dss", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Double", "Summary", "Statistics", "(", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "0", ",", "<|s|>", "dss", ".", "get", "Count", "(", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "0", ".", "0", "d", ",", "<|s|>", "dss", ".", "get", "Sum", "(", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "0", ".", "0", "d", ",", "<|s|>", "dss", ".", "get", "Average", "(", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "Double", ".", "POSITIVE", "_", "INFINITY", ",", "<|s|>", "dss", ".", "get", "Min", "(", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "Double", ".", "NEGATIVE", "_", "INFINITY", ",", "<|s|>", "dss", ".", "get", "Max", "(", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 26, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3293", "comment_id": "f7fb1d84_2ce75302", "class_list": ["DoubleSummaryStatisticsTest"], "func_list": ["public void test_constructor()", "public void test_accept()", "public void test_combine()", "public void test_getCount()", "public void test_getSum()", "public void test_getMin()", "public void test_getMax()", "public void test_getAverage()", "public void test_toString()", "public DoubleSummaryStatistics getDoubleSummaryStatistics1()", "public DoubleSummaryStatistics getDoubleSummaryStatistics2()"], "prime_var_dic": {}}, {"idx": 93508, "status": "update", "global_index": 1831, "project_name": "android_", "written_on": "2017-05-02 05:21:00", "tufano_target": "private int METHOD_1 ( TYPE_1 listener , TYPE_2 VAR_1 ) { METHOD_2 ( listener ) ; final int key ; synchronized ( VAR_2 ) { int VAR_3 = VAR_4 . METHOD_3 ( listener ) ; METHOD_4 ( VAR_3 == - 1 , STRING_1 ) ; key = METHOD_6 ( ) ; VAR_4 . put ( key , listener ) ; VAR_6 . put ( key , VAR_1 ) ; } return key ; }", "comment": "Math.abs is surprising enough to deserve a comment?", "tokenized_comment": ["Math", ".", "abs", "<|s|>", "is", "<|s|>", "surprising", "<|s|>", "enough", "<|s|>", "to", "<|s|>", "deserve", "<|s|>", "a", "<|s|>", "comment", "?"], "tufano_code": "private int METHOD_1 ( TYPE_1 listener , TYPE_2 VAR_1 ) { METHOD_2 ( listener ) ; final int key ; synchronized ( VAR_2 ) { int VAR_3 = VAR_4 . METHOD_3 ( listener ) ; METHOD_4 ( VAR_3 == - 1 , STRING_1 ) ; key = TYPE_3 . METHOD_5 ( VAR_5 ++ ) ; VAR_4 . put ( key , listener ) ; VAR_6 . put ( key , VAR_1 ) ; } return key ; }", "our_target": "            key = nextListenerKey();\n", "our_code": "    private int putListener(Object listener, NsdServiceInfo s) {\n        checkListener(listener);\n        final int key;\n        synchronized (mMapLock) {\n            int valueIndex = mListenerMap.indexOfValue(listener);\n            checkArgument(valueIndex == -1, \"listener already in use\");\n<|startfocus|>\n            key = Math.abs(mListenerKey++);\n<|endfocus|>\n            mListenerMap.put(key, listener);\n            mServiceMap.put(key, s);\n        }\n        return key;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "int", "<|s|>", "put", "Listener", "(", "Object", "<|s|>", "listener", ",", "<|s|>", "Nsd", "Service", "Info", "<|s|>", "s", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "check", "Listener", "(", "listener", ");", "<|nl|>", "<|8-s|>", "final", "<|s|>", "int", "<|s|>", "key", ";", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Map", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "int", "<|s|>", "value", "Index", "<|s|>", "=", "<|s|>", "m", "Listener", "Map", ".", "index", "Of", "Value", "(", "listener", ");", "<|nl|>", "<|12-s|>", "check", "Argument", "(", "value", "Index", "<|s|>", "==", "<|s|>", "-", "1", ",", "<|s|>", "\"", "listener", "<|s|>", "already", "<|s|>", "in", "<|s|>", "use", "\"", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "key", "<|s|>", "=", "<|s|>", "Math", ".", "abs", "(", "m", "Listener", "Key", "++", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "m", "Listener", "Map", ".", "put", "(", "key", ",", "<|s|>", "listener", ");", "<|nl|>", "<|12-s|>", "m", "Service", "Map", ".", "put", "(", "key", ",", "<|s|>", "s", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "key", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 435, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_1376", "comment_id": "1156b440_8bfffe2d", "class_list": ["provides", "by", "NsdManager", "ServiceHandler"], "func_list": ["public static String nameOf(int event)", "public NsdManager(Context context, INsdManager service)", "public void handleMessage(Message message)", "private int putListener(Object listener, NsdServiceInfo s)", "private void removeListener(int key)", "private int getListenerKey(Object listener)", "private static String getNsdServiceInfoType(NsdServiceInfo s)", "private void init()", "private static void fatal(String msg)", "public void registerService(NsdServiceInfo serviceInfo, int protocolType,", "public void unregisterService(RegistrationListener listener)", "public void discoverServices(String serviceType, int protocolType, DiscoveryListener listener)", "public void stopServiceDiscovery(DiscoveryListener listener)", "public void resolveService(NsdServiceInfo serviceInfo, ResolveListener listener)", "public void setEnabled(boolean enabled)", "private Messenger getMessenger()", "private static void checkListener(Object listener)", "private static void checkProtocol(int protocolType)", "private static void checkServiceInfo(NsdServiceInfo serviceInfo)"], "prime_var_dic": {}}, {"idx": 59965, "status": "update", "global_index": 4438, "project_name": "android_", "written_on": "2016-11-04 15:16:08", "tufano_target": "protected void METHOD_1 ( TYPE_1 < ? > type ) { if ( VAR_1 >= VAR_2 || VAR_1 == - 1 ) { throw new TYPE_2 ( STRING_1 + VAR_1 ) ; } final TYPE_1 < ? > VAR_3 = ( VAR_1 == VAR_5 ) ? VAR_4 . METHOD_2 ( ) : VAR_4 . METHOD_3 ( ) [ VAR_1 ] ; if ( VAR_3 != type ) { throw new TYPE_2 ( STRING_2 + type + STRING_3 + VAR_3 ) ; } }", "comment": "== RETURN_VALUE_INDEX ?", "tokenized_comment": ["==", "<|s|>", "RETURN", "_", "VALUE", "_", "INDEX", "<|s|>", "?"], "tufano_code": "protected void METHOD_1 ( TYPE_1 < ? > type ) { if ( VAR_1 >= VAR_2 || VAR_1 == - 1 ) { throw new TYPE_2 ( STRING_1 + VAR_1 ) ; } final TYPE_1 < ? > VAR_3 = ( VAR_1 < 0 ) ? VAR_4 . METHOD_2 ( ) : VAR_4 . METHOD_3 ( ) [ VAR_1 ] ; if ( VAR_3 != type ) { throw new TYPE_2 ( STRING_2 + type + STRING_3 + VAR_3 ) ; } }", "our_target": "            final Class<?> expectedType = (argumentIdx == RETURN_VALUE_IDX) ?\n", "our_code": "        protected void checkType(Class<?> type) {\n            if (argumentIdx >= numArgs || argumentIdx == -1) {\n                throw new IllegalArgumentException(\"Invalid argument index: \" + argumentIdx);\n            }\n\n<|startfocus|>\n            final Class<?> expectedType = (argumentIdx < 0) ?\n<|endfocus|>\n                    frame.type.rtype() : frame.type.ptypes()[argumentIdx];\n\n            if (expectedType != type) {\n                throw new IllegalArgumentException(\"Incorrect type: \" + type +\n                        \", expected: \" + expectedType);\n            }\n        }", "tokenized_code": ["<|8-s|>", "protected", "<|s|>", "void", "<|s|>", "check", "Type", "(", "Class", "<?>", "<|s|>", "type", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "argument", "Idx", "<|s|>", ">=", "<|s|>", "num", "Args", "<|s|>", "||", "<|s|>", "argument", "Idx", "<|s|>", "==", "<|s|>", "-", "1", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Invalid", "<|s|>", "argument", "<|s|>", "index", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "argument", "Idx", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "final", "<|s|>", "Class", "<?>", "<|s|>", "expected", "Type", "<|s|>", "=", "<|s|>", "(", "argument", "Idx", "<|s|>", "<", "<|s|>", "0", ")", "<|s|>", "?", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "frame", ".", "type", ".", "rtype", "(", ")", "<|s|>", ":", "<|s|>", "frame", ".", "type", ".", "ptypes", "(", ")", "[", "argument", "Idx", "];", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "expected", "Type", "<|s|>", "!=", "<|s|>", "type", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Incorrect", "<|s|>", "type", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "type", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "\"", ",", "<|s|>", "expected", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "expected", "Type", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 290, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1601", "comment_id": "0b12739d_247652fc", "class_list": ["EmulatedStackFrame", "Range", "||", "StackFrameAccessor", "StackFrameWriter", "StackFrameReader"], "func_list": ["private EmulatedStackFrame(MethodType type, Object[] references, byte[] stackFrame)", "private Range(int referencesStart, int numReferences, int stackFrameStart, int numBytes)", "public static Range of(MethodType frameType, int startArg, int endArg)", "public static EmulatedStackFrame create(MethodType frameType)", "public void setReference(int idx, Object reference)", "public void copyRangeTo(EmulatedStackFrame other, Range fromRange, int referencesStart,", "public void copyReturnValueTo(EmulatedStackFrame other)", "private static boolean is64BitPrimitive(Class<?> type)", "private static int getSize(Class<?> type)", "protected StackFrameAccessor()", "public StackFrameAccessor attach(EmulatedStackFrame stackFrame)", "protected void checkType(Class<?> type)", "protected StackFrameAccessor asReturnValueAccessor()", "public void putNextByte(byte value)", "public void putNextInt(int value)", "public void putNextLong(long value)", "public void putNextChar(char value)", "public void putNextBoolean(boolean value)", "public void putNextShort(short value)", "public void putNextFloat(float value)", "public void putNextDouble(double value)", "public void putNextReference(Object value, Class<?> expectedType)", "public StackFrameWriter asReturnValueWriter()", "public int nextInt()", "public long nextLong()", "public char nextChar()", "public boolean nextBoolean()", "public short nextShort()", "public float nextFloat()", "public double nextDouble()", "public StackFrameReader asReturnValueReader()", "private Range(int referencesStart, int numReferences, int stackFrameStart, int numBytes)", "public static Range of(MethodType frameType, int startArg, int endArg)", "protected StackFrameAccessor()", "public StackFrameAccessor attach(EmulatedStackFrame stackFrame)", "protected void checkType(Class<?> type)", "protected StackFrameAccessor asReturnValueAccessor()", "public void putNextByte(byte value)", "public void putNextInt(int value)", "public void putNextLong(long value)", "public void putNextChar(char value)", "public void putNextBoolean(boolean value)", "public void putNextShort(short value)", "public void putNextFloat(float value)", "public void putNextDouble(double value)", "public void putNextReference(Object value, Class<?> expectedType)", "public StackFrameWriter asReturnValueWriter()", "public int nextInt()", "public long nextLong()", "public char nextChar()", "public boolean nextBoolean()", "public short nextShort()", "public float nextFloat()", "public double nextDouble()", "public StackFrameReader asReturnValueReader()"], "prime_var_dic": {}}, {"idx": 18271, "status": "update", "global_index": 18159, "project_name": "android_", "written_on": "2009-01-27 22:48:39", "tufano_target": "static boolean METHOD_1 ( TYPE_1 context , String VAR_1 , boolean VAR_2 ) { if ( VAR_1 . equals ( VAR_3 ) ) { int VAR_4 = ( ( TYPE_2 ) context . METHOD_2 ( VAR_5 ) ) . METHOD_3 ( ) ; if ( VAR_4 == VAR_7 || VAR_4 == VAR_8 || VAR_4 == VAR_9 ) { METHOD_5 ( context , VAR_2 ) ; return true ; } } return false ; }", "comment": "Should be } else { all on one line", "tokenized_comment": ["Should", "<|s|>", "be", "<|s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|s|>", "all", "<|s|>", "on", "<|s|>", "one", "<|s|>", "line"], "tufano_code": "static boolean METHOD_1 ( TYPE_1 context , String VAR_1 , boolean VAR_2 ) { if ( VAR_1 . equals ( VAR_3 ) ) { int VAR_4 = ( ( TYPE_2 ) context . METHOD_2 ( VAR_5 ) ) . METHOD_3 ( ) ; if ( VAR_4 == VAR_6 ) { METHOD_4 ( context , VAR_2 ) ; return false ; } else { METHOD_5 ( context , VAR_2 ) ; return true ; } } return false ; }", "our_target": "            // check for GSM\n            if(networkType == TelephonyManager.NETWORK_TYPE_GPRS || \n                    networkType == TelephonyManager.NETWORK_TYPE_EDGE || \n                    networkType == TelephonyManager.NETWORK_TYPE_UMTS ) { \n\n                showIMEIPanel(context, useSystemWindow); \n", "our_code": "    static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow) {\n        if (input.equals(MMI_IMEI_DISPLAY)) {\n            int networkType = ((TelephonyManager)context.getSystemService(\n                    Context.TELEPHONY_SERVICE)).getNetworkType();\n<|startfocus|>\n            // check for CDMA\n            if (networkType == TelephonyManager.NETWORK_TYPE_CDMA) {\n                showNotSupportedPanel(context, useSystemWindow);\n                return false;\n            }\n            else {\n                showIMEIPanel(context, useSystemWindow);\n<|endfocus|>\n                return true;\n            }\n        }\n\n        return false;\n    }", "tokenized_code": ["<|4-s|>", "static", "<|s|>", "boolean", "<|s|>", "handle", "IMEIDisplay", "(", "Context", "<|s|>", "context", ",", "<|s|>", "String", "<|s|>", "input", ",", "<|s|>", "boolean", "<|s|>", "use", "System", "Window", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "input", ".", "equals", "(", "MMI", "_", "IMEI", "_", "DISPLAY", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "int", "<|s|>", "network", "Type", "<|s|>", "=", "<|s|>", "(", "(", "Telephony", "Manager", ")", "context", ".", "get", "System", "Service", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "Context", ".", "TELEPHONY", "_", "SERVICE", ")", ")", ".", "get", "Network", "Type", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "check", "<|s|>", "for", "<|s|>", "CDMA", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "network", "Type", "<|s|>", "==", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "CDMA", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "show", "Not", "Supported", "Panel", "(", "context", ",", "<|s|>", "use", "System", "Window", ");", "<|nl|>", "<|16-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "show", "IMEIPanel", "(", "context", ",", "<|s|>", "use", "System", "Window", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 189, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4302", "comment_id": "AAAAA3%2F%2F%2F%2F4%3D", "class_list": ["to", "SpecialCharSequenceMgr", "is", "SimContactQueryCookie", "QueryHandler"], "func_list": ["private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)", "private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)", "private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)", "private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)"], "prime_var_dic": {"String": 4, "never": 1, "int": 1, "the": 2, "dialog": 1, "if": 1, "handleAdnEntry": 1, "ADN": 1}}, {"idx": 83603, "status": "update", "global_index": 15787, "project_name": "android_", "written_on": "2015-03-02 23:24:27", "tufano_target": "public abstract void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 item , TYPE_3 url , boolean VAR_2 , TYPE_4 VAR_3 ) ; public static TYPE_5 METHOD_2 ( TYPE_6 type , TYPE_7 VAR_4 , TYPE_8 VAR_5 ) { switch ( type ) { case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : return new TYPE_9 ( VAR_4 , VAR_5 ) ; case VAR_12 : return new TYPE_10 ( VAR_4 , VAR_5 ) ; case VAR_13 : case VAR_14 : return new TYPE_11 ( VAR_4 , VAR_5 ) ; case VAR_15 : return new TYPE_12 ( VAR_4 , VAR_5 ) ; default : return null ; } }", "comment": "formatting", "tokenized_comment": ["formatting"], "tufano_code": "public abstract void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 item , TYPE_3 url , boolean VAR_2 , TYPE_4 VAR_3 ) ; public static TYPE_5 METHOD_2 ( TYPE_6 type , TYPE_7 VAR_4 , TYPE_8 VAR_5 ) { switch ( type ) { case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : return new TYPE_9 ( VAR_4 , VAR_5 ) ; case VAR_12 : return new TYPE_10 ( VAR_4 , VAR_5 ) ; case VAR_13 : case VAR_14 : return new TYPE_11 ( VAR_4 , VAR_5 ) ; case VAR_15 : return new TYPE_12 ( VAR_4 , VAR_5 ) ; default : return null ; } }", "our_target": "    /**\n     * Creates a renderer suitable for the given resource type\n     */\n", "our_code": "    public abstract void renderToHtml(@NotNull HtmlBuilder builder, @NotNull ItemInfo item, @NotNull ResourceUrl url,\n                                      boolean showResolution, @Nullable ResourceValue resourceValue);\n\n<|startfocus|>\n      /** Creates a renderer suitable for the given resource type */\n<|endfocus|>\n    @Nullable\n    public static ResourceValueRenderer create(@NotNull ResourceType type, @NotNull Module module, @Nullable Configuration configuration) {\n      switch (type) {\n        case ATTR:\n        case STRING:\n        case DIMEN:\n        case INTEGER:\n        case BOOL:\n        case STYLE:\n          return new TextValueRenderer(module, configuration);\n        case ARRAY:\n          return new ArrayRenderer(module, configuration);\n        case MIPMAP:\n        case DRAWABLE:\n          return new DrawableValueRenderer(module, configuration);\n        case COLOR:\n          return new ColorValueRenderer(module, configuration);\n        default:\n          // Ignore\n          return null;\n      }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "abstract", "<|s|>", "void", "<|s|>", "render", "To", "Html", "(", "@", "Not", "Null", "<|s|>", "Html", "Builder", "<|s|>", "builder", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Item", "Info", "<|s|>", "item", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Resource", "Url", "<|s|>", "url", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "<|2-s|>", "boolean", "<|s|>", "show", "Resolution", ",", "<|s|>", "@", "Nullable", "<|s|>", "Resource", "Value", "<|s|>", "resource", "Value", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "/*", "*", "<|s|>", "Creates", "<|s|>", "a", "<|s|>", "renderer", "<|s|>", "suitable", "<|s|>", "for", "<|s|>", "the", "<|s|>", "given", "<|s|>", "resource", "<|s|>", "type", "<|s|>", "*/", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "@", "Nullable", "<|nl|>", "<|4-s|>", "public", "<|s|>", "static", "<|s|>", "Resource", "Value", "Renderer", "<|s|>", "create", "(", "@", "Not", "Null", "<|s|>", "Resource", "Type", "<|s|>", "type", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Module", "<|s|>", "module", ",", "<|s|>", "@", "Nullable", "<|s|>", "Configuration", "<|s|>", "configuration", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "switch", "<|s|>", "(", "type", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "case", "<|s|>", "ATTR", ":", "<|nl|>", "<|8-s|>", "case", "<|s|>", "STRING", ":", "<|nl|>", "<|8-s|>", "case", "<|s|>", "DIMEN", ":", "<|nl|>", "<|8-s|>", "case", "<|s|>", "INTEGER", ":", "<|nl|>", "<|8-s|>", "case", "<|s|>", "BOOL", ":", "<|nl|>", "<|8-s|>", "case", "<|s|>", "STYLE", ":", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Text", "Value", "Renderer", "(", "module", ",", "<|s|>", "configuration", ");", "<|nl|>", "<|8-s|>", "case", "<|s|>", "ARRAY", ":", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Array", "Renderer", "(", "module", ",", "<|s|>", "configuration", ");", "<|nl|>", "<|8-s|>", "case", "<|s|>", "MIPMAP", ":", "<|nl|>", "<|8-s|>", "case", "<|s|>", "DRAWABLE", ":", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Drawable", "Value", "Renderer", "(", "module", ",", "<|s|>", "configuration", ");", "<|nl|>", "<|8-s|>", "case", "<|s|>", "COLOR", ":", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Color", "Value", "Renderer", "(", "module", ",", "<|s|>", "configuration", ");", "<|nl|>", "<|8-s|>", "default", ":", "<|nl|>", "<|8-s|>", "<|2-s|>", "//", "<|s|>", "Ignore", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 174, "base_patch_number": 6, "changed_patch_number": 8, "code_file_name": "android_445", "comment_id": "92c00617_f0805ef6", "class_list": ["AndroidJavaDocRenderer", "ResourceValueRenderer", "TextValueRenderer", "ArrayRenderer", "DrawableValueRenderer", "ColorValueRenderer", "ItemInfo"], "func_list": ["public static String render(@NotNull Module module, @Nullable Configuration configuration, @NotNull ResourceType type, @NotNull String name, boolean framework)", "public static String renderColor(Module module, @NotNull Color color)", "public static String injectExternalDocumentation(@Nullable String rendered, @Nullable String external)", "protected ResourceValueRenderer(@NotNull Module module, @Nullable Configuration configuration)", "public void setSmall(boolean small)", "public static ResourceValueRenderer create(@NotNull ResourceType type, @NotNull Module module, @Nullable Configuration configuration)", "protected void setShowAttrDoc(boolean showAttrDoc)", "private static FrameworkResources getLatestPublicFrameworkResources(Module module)", "private List<ItemInfo> gatherItems(@NotNull ResourceUrl url)", "private static void addItemsFromSourceSet(@Nullable String flavor,", "private void addItemsFromFramework(@Nullable String flavor,", "private static void addItemsFromRepository(@Nullable String flavor,", "private String renderKeyValues(@NotNull List<ItemInfo> items, @NotNull ResourceUrl url)", "private void addTableCell(@NotNull HtmlBuilder builder,", "protected ResourceItemResolver createResolver(@NotNull ItemInfo item)", "protected Object resolveValue(@NotNull ResourceItemResolver resolver, @Nullable ResourceValue itemValue, @NotNull ResourceUrl url)", "protected void displayChain(@NotNull ResourceUrl url, @NotNull List<ResourceValue> lookupChain,", "protected void displayAttributeDoc(ResourceValue resourceValue, HtmlBuilder builder)", "public ResourceRepository getFrameworkResources()", "public AppResourceRepository getAppResources()", "public ResourceResolver getResolver(boolean createIfNecessary)", "boolean haveFlavors = haveFlavors(items);", "private static void markHidden(List<ItemInfo> items)", "private static String renderFolderName(String name)", "private TextValueRenderer(@NotNull Module module, @Nullable Configuration configuration)", "protected String resolveValue(@NotNull ResourceItemResolver resolver, @Nullable ResourceValue value, @NotNull ResourceUrl url)", "public abstract void renderToHtml(@NotNull HtmlBuilder builder, @NotNull ItemInfo item, @NotNull ResourceUrl url,", "private void displayStyleValues(HtmlBuilder builder, ItemInfo item, ResourceItemResolver resolver, StyleResourceValue styleValue)", "} else if (external == null)", "private ArrayRenderer(@NotNull Module module, @Nullable Configuration configuration)", "private DrawableValueRenderer(@NotNull Module module, @Nullable Configuration configuration)", "protected File resolveValue(@NotNull ResourceItemResolver resolver, @Nullable ResourceValue value, @NotNull ResourceUrl url)", "private static int px2dp(int px, Density density)", "private ColorValueRenderer(@NotNull Module module, @Nullable Configuration configuration)", "protected Color resolveValue(@NotNull ResourceItemResolver resolver, @Nullable ResourceValue value, @NotNull ResourceUrl url)", "public void renderColorToHtml(@NotNull HtmlBuilder builder, @NotNull Color color)", "private static Dimension getSize(File file)", "private ItemInfo(@Nullable ResourceValue value, @NotNull FolderConfiguration configuration,", "public boolean equals(Object o)", "public int hashCode()", "public int compareTo(@NotNull ItemInfo other)", "protected void setShowAttrDoc(boolean showAttrDoc)", "private static FrameworkResources getLatestPublicFrameworkResources(Module module)", "protected void setShowAttrDoc(boolean showAttrDoc)", "private static FrameworkResources getLatestPublicFrameworkResources(Module module)", "protected void setShowAttrDoc(boolean showAttrDoc)", "private static FrameworkResources getLatestPublicFrameworkResources(Module module)", "public static ResourceValueRenderer create(@NotNull ResourceType type, @NotNull Module module, @Nullable Configuration configuration)"], "prime_var_dic": {"ResourceValue": 1}}, {"idx": 942, "status": "update", "global_index": 10023, "project_name": "android_", "written_on": "2015-04-13 11:34:34", "tufano_target": "public boolean contains ( TYPE_1 VAR_3 ) { byte [ ] VAR_5 = ( VAR_3 == null ) ? null : VAR_3 . METHOD_1 ( ) ; if ( VAR_5 == null || VAR_5 . length != this . VAR_3 . length ) { return false ; } TYPE_2 . METHOD_2 ( VAR_2 , VAR_4 ) ; return TYPE_3 . equals ( VAR_3 , VAR_2 ) ; }", "comment": "Use \"address\" for consistency with the rest of the class.", "tokenized_comment": ["Use", "<|s|>", "\"", "address", "\"", "<|s|>", "for", "<|s|>", "consistency", "<|s|>", "with", "<|s|>", "the", "<|s|>", "rest", "<|s|>", "of", "<|s|>", "the", "<|s|>", "class", "."], "tufano_code": "public boolean contains ( TYPE_1 VAR_1 ) { byte [ ] VAR_2 = ( VAR_1 == null ) ? null : VAR_1 . METHOD_1 ( ) ; if ( VAR_2 == null || VAR_2 . length != VAR_3 . length ) { return false ; } TYPE_2 . METHOD_2 ( VAR_2 , VAR_4 ) ; return TYPE_3 . equals ( VAR_3 , VAR_2 ) ; }", "our_target": "    public boolean contains(InetAddress address) {\n        byte[] addrBytes = (address == null) ? null : address.getAddress();\n        if (addrBytes == null || addrBytes.length != this.address.length) {\n", "our_code": "<|startfocus|>\n    public boolean contains(InetAddress ipAddr) {\n        byte[] ipBytes = (ipAddr == null) ? null : ipAddr.getAddress();\n        if (ipBytes == null || ipBytes.length != address.length) {\n<|endfocus|>\n            return false;\n        }\n        NetworkUtils.maskRawAddress(ipBytes, prefixLength);\n        return Arrays.equals(address, ipBytes);\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "contains", "(", "Inet", "Address", "<|s|>", "ip", "Addr", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "byte", "[", "]", "<|s|>", "ip", "Bytes", "<|s|>", "=", "<|s|>", "(", "ip", "Addr", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "?", "<|s|>", "null", "<|s|>", ":", "<|s|>", "ip", "Addr", ".", "get", "Address", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "ip", "Bytes", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "ip", "Bytes", ".", "length", "<|s|>", "!=", "<|s|>", "address", ".", "length", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "Network", "Utils", ".", "mask", "Raw", "Address", "(", "ip", "Bytes", ",", "<|s|>", "prefix", "Length", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "Arrays", ".", "equals", "(", "address", ",", "<|s|>", "ip", "Bytes", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 178, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_1360", "comment_id": "10f25655_c908095d", "class_list": ["represents", "are", "IpPrefix"], "func_list": ["private void checkAndMaskAddressAndPrefixLength()", "public IpPrefix(byte[] address, int prefixLength)", "public boolean equals(Object obj)", "public int hashCode()", "public InetAddress getAddress()", "public byte[] getRawAddress()", "public int getPrefixLength()", "public boolean contains(InetAddress ipAddr)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public IpPrefix createFromParcel(Parcel in)", "public IpPrefix[] newArray(int size)", "private void checkAndMaskAddressAndPrefixLength()", "public IpPrefix(byte[] address, int prefixLength)", "public boolean equals(Object obj)", "public int hashCode()", "public InetAddress getAddress()", "public byte[] getRawAddress()", "public int getPrefixLength()", "public boolean contains(InetAddress ipAddr)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public IpPrefix createFromParcel(Parcel in)", "public IpPrefix[] newArray(int size)", "private void checkAndMaskAddressAndPrefixLength()", "public IpPrefix(byte[] address, int prefixLength)", "public boolean equals(Object obj)", "public int hashCode()", "public InetAddress getAddress()", "public byte[] getRawAddress()", "public int getPrefixLength()", "public boolean contains(InetAddress ipAddr)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public IpPrefix createFromParcel(Parcel in)", "public IpPrefix[] newArray(int size)"], "prime_var_dic": {"byte": 1, "prefixLength": 1, "to": 1, "contents": 1, "interface": 3, "Creator": 1}}, {"idx": 63066, "status": "update", "global_index": 18416, "project_name": "android_", "written_on": "2010-06-12 01:05:40", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 c = METHOD_3 ( ) . query ( VAR_3 , null , null , null , null ) ; METHOD_4 ( c ) ; TYPE_3 VAR_4 = new TYPE_4 ( this , VAR_5 , c , new String [ ] { VAR_6 } , new int [ ] { VAR_7 } ) ; TYPE_5 VAR_8 = ( TYPE_5 ) METHOD_5 ( VAR_9 ) ; VAR_8 . METHOD_6 ( VAR_4 ) ; }", "comment": "As always, it would be nice to have an explicit projection for this query.  It only needs one field, but pulls a dozen.", "tokenized_comment": ["As", "<|s|>", "always", ",", "<|s|>", "it", "<|s|>", "would", "<|s|>", "be", "<|s|>", "nice", "<|s|>", "to", "<|s|>", "have", "<|s|>", "an", "<|s|>", "explicit", "<|s|>", "projection", "<|s|>", "for", "<|s|>", "this", "<|s|>", "query", ".", "<|2-s|>", "It", "<|s|>", "only", "<|s|>", "needs", "<|s|>", "one", "<|s|>", "field", ",", "<|s|>", "but", "<|s|>", "pulls", "<|s|>", "a", "<|s|>", "dozen", "."], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; TYPE_2 c = METHOD_3 ( ) . query ( VAR_3 , null , null , null , null ) ; METHOD_4 ( c ) ; TYPE_3 VAR_4 = new TYPE_4 ( this , VAR_5 , c , new String [ ] { VAR_6 } , new int [ ] { VAR_7 } ) ; TYPE_5 VAR_8 = ( TYPE_5 ) METHOD_5 ( VAR_9 ) ; VAR_8 . METHOD_6 ( VAR_4 ) ; }", "our_target": "\n", "our_code": "    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.gallery_2);\n\n        // Get a cursor with all people\n        Cursor c = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,\n                null, null, null, null);\n        startManagingCursor(c);\n<|startfocus|>\n        \n<|endfocus|>\n        SpinnerAdapter adapter = new SimpleCursorAdapter(this,\n        // Use a template that displays a text view\n                android.R.layout.simple_gallery_item,\n                // Give the cursor to the list adatper\n                c,\n                // Map the NAME column in the people database to...\n                new String[] {ContactsContract.Contacts.DISPLAY_NAME},\n                // The \"text1\" view defined in the XML template\n                new int[] { android.R.id.text1 });\n\n        Gallery g = (Gallery) findViewById(R.id.gallery);\n        g.setAdapter(adapter);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Create", "(", "Bundle", "<|s|>", "saved", "Instance", "State", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Create", "(", "saved", "Instance", "State", ");", "<|nl|>", "<|8-s|>", "set", "Content", "View", "(", "R", ".", "layout", ".", "gallery", "_", "2", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Get", "<|s|>", "a", "<|s|>", "cursor", "<|s|>", "with", "<|s|>", "all", "<|s|>", "people", "<|nl|>", "<|8-s|>", "Cursor", "<|s|>", "c", "<|s|>", "=", "<|s|>", "get", "Content", "Resolver", "(", ")", ".", "query", "(", "Contacts", "Contract", ".", "Contacts", ".", "CONTENT", "_", "URI", ",", "<|nl|>", "<|16-s|>", "null", ",", "<|s|>", "null", ",", "<|s|>", "null", ",", "<|s|>", "null", ");", "<|nl|>", "<|8-s|>", "start", "Managing", "Cursor", "(", "c", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Spinner", "Adapter", "<|s|>", "adapter", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Simple", "Cursor", "Adapter", "(", "this", ",", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Use", "<|s|>", "a", "<|s|>", "template", "<|s|>", "that", "<|s|>", "displays", "<|s|>", "a", "<|s|>", "text", "<|s|>", "view", "<|nl|>", "<|16-s|>", "android", ".", "R", ".", "layout", ".", "simple", "_", "gallery", "_", "item", ",", "<|nl|>", "<|16-s|>", "//", "<|s|>", "Give", "<|s|>", "the", "<|s|>", "cursor", "<|s|>", "to", "<|s|>", "the", "<|s|>", "list", "<|s|>", "adatper", "<|nl|>", "<|16-s|>", "c", ",", "<|nl|>", "<|16-s|>", "//", "<|s|>", "Map", "<|s|>", "the", "<|s|>", "NAME", "<|s|>", "column", "<|s|>", "in", "<|s|>", "the", "<|s|>", "people", "<|s|>", "database", "<|s|>", "to", "...", "<|nl|>", "<|16-s|>", "new", "<|s|>", "String", "[", "]", "<|s|>", "{", "Contacts", "Contract", ".", "Contacts", ".", "DISPLAY", "_", "NAME", "}", ",", "<|nl|>", "<|16-s|>", "//", "<|s|>", "The", "<|s|>", "\"", "text", "1", "\"", "<|s|>", "view", "<|s|>", "defined", "<|s|>", "in", "<|s|>", "the", "<|s|>", "XML", "<|s|>", "template", "<|nl|>", "<|16-s|>", "new", "<|s|>", "int", "[", "]", "<|s|>", "{", "<|s|>", "android", ".", "R", ".", "id", ".", "text", "1", "<|s|>", "}", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "Gallery", "<|s|>", "g", "<|s|>", "=", "<|s|>", "(", "Gallery", ")", "<|s|>", "find", "View", "By", "Id", "(", "R", ".", "id", ".", "gallery", ");", "<|nl|>", "<|8-s|>", "g", ".", "set", "Adapter", "(", "adapter", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 40, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3700", "comment_id": "AAAAzX%2F%2F%2Bmk%3D", "class_list": ["is", "Gallery2"], "func_list": ["public void onCreate(Bundle savedInstanceState)", "public void onCreate(Bundle savedInstanceState)"], "prime_var_dic": {}}, {"idx": 5078, "status": "update", "global_index": 5083, "project_name": "android_", "written_on": "2016-09-08 20:02:14", "tufano_target": "public void METHOD_1 ( String VAR_1 , String VAR_2 ) { TYPE_1 < String > keys = VAR_3 . METHOD_2 ( ) ; if ( ! keys . contains ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 + VAR_1 + STRING_2 ) ; } if ( keys . contains ( VAR_2 ) ) { throw new TYPE_2 ( STRING_5 + VAR_2 + STRING_6 ) ; } TYPE_3 VAR_4 = VAR_3 . remove ( VAR_1 ) ; assert VAR_4 != null ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_3 . put ( VAR_2 , VAR_4 ) ; }", "comment": "\"The new key \\\"\" + newKey + \"\\\" already exists.\"", "tokenized_comment": ["\"", "The", "<|s|>", "new", "<|s|>", "key", "<|s|>", "\\", "\"", "\"", "<|s|>", "+", "<|s|>", "new", "Key", "<|s|>", "+", "<|s|>", "\"", "\\", "\"", "<|s|>", "already", "<|s|>", "exists", ".", "\""], "tufano_code": "public void METHOD_1 ( String VAR_1 , String VAR_2 ) { TYPE_1 < String > keys = VAR_3 . METHOD_2 ( ) ; if ( ! keys . contains ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 + VAR_1 + STRING_2 ) ; } if ( keys . contains ( VAR_2 ) ) { throw new TYPE_2 ( STRING_3 + VAR_2 + STRING_4 ) ; } TYPE_3 VAR_4 = VAR_3 . remove ( VAR_1 ) ; assert VAR_4 != null ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_3 . put ( VAR_2 , VAR_4 ) ; }", "our_target": "      throw new IllegalArgumentException(\"The new key \\\"\" + newKey + \"\\\" already exists.\");\n", "our_code": "  public void changeKeyName(@NotNull String oldKey, @NotNull String newKey) {\n    Set<String> keys = myKeyToResourceMap.keySet();\n    if (!keys.contains(oldKey)) {\n      throw new IllegalArgumentException(\"Key to change (\" + oldKey + \") doesn't exist.\");\n    }\n\n    if (keys.contains(newKey)) {\n<|startfocus|>\n      throw new IllegalArgumentException(\"Key to replace old key (\" + newKey + \") already exists.\");\n<|endfocus|>\n    }\n\n    StringResource stringResource = myKeyToResourceMap.remove(oldKey);\n    assert stringResource != null;\n    stringResource.setKey(newKey);\n    myKeyToResourceMap.put(newKey, stringResource);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "change", "Key", "Name", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "old", "Key", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "new", "Key", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Set", "<", "String", ">", "<|s|>", "keys", "<|s|>", "=", "<|s|>", "my", "Key", "To", "Resource", "Map", ".", "key", "Set", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "keys", ".", "contains", "(", "old", "Key", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Key", "<|s|>", "to", "<|s|>", "change", "<|s|>", "(", "\"", "<|s|>", "+", "<|s|>", "old", "Key", "<|s|>", "+", "<|s|>", "\"", ")", "<|s|>", "doesn", "'", "t", "<|s|>", "exist", ".", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "keys", ".", "contains", "(", "new", "Key", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Key", "<|s|>", "to", "<|s|>", "replace", "<|s|>", "old", "<|s|>", "key", "<|s|>", "(", "\"", "<|s|>", "+", "<|s|>", "new", "Key", "<|s|>", "+", "<|s|>", "\"", ")", "<|s|>", "already", "<|s|>", "exists", ".", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "String", "Resource", "<|s|>", "string", "Resource", "<|s|>", "=", "<|s|>", "my", "Key", "To", "Resource", "Map", ".", "remove", "(", "old", "Key", ");", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "string", "Resource", "<|s|>", "!=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "string", "Resource", ".", "set", "Key", "(", "new", "Key", ");", "<|nl|>", "<|4-s|>", "my", "Key", "To", "Resource", "Map", ".", "put", "(", "new", "Key", ",", "<|s|>", "string", "Resource", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 51, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_224", "comment_id": "1691b3ce_b25f8873", "class_list": ["StringResourceData"], "func_list": ["public StringResourceData(@NotNull AndroidFacet facet,", "public void changeKeyName(@NotNull String oldKey, @NotNull String newKey)", "public boolean setTranslatable(String key, boolean translatable)", "public boolean setTranslation(@NotNull String key, @Nullable Locale locale, @NotNull String value)", "else if (changed)", "public String validateKey(@NotNull String key)", "public String validateTranslation(@NotNull String key, @Nullable Locale locale)", "Collection<Locale> getMissingTranslations(@NotNull String key)", "static String summarizeLocales(@NotNull Collection<Locale> locales)", "private static List<Locale> getLowest(Collection<Locale> locales, int n)", "public int compare(Locale l1, Locale l2)", "private static String getLabels(Iterable<Locale> locales)", "public String apply(Locale locale)", "private static String getLabels(Iterable<Locale> locales)", "public StringResource getStringResource(@NotNull String key)", "public Collection<StringResource> getResources()", "public List<String> getKeys()", "public List<Locale> getLocales()"], "prime_var_dic": {"myFacet": 1}}, {"idx": 85338, "status": "update", "global_index": 4697, "project_name": "android_", "written_on": "2016-12-08 20:09:32", "tufano_target": "private boolean METHOD_1 ( int VAR_1 ) { if ( VAR_2 == null ) return false ; if ( VAR_3 != null && VAR_3 . METHOD_2 ( ) != VAR_1 ) { METHOD_6 ( ) ; } if ( VAR_3 == null ) { VAR_3 = VAR_2 . METHOD_1 ( VAR_1 ) ; } return true ; }", "comment": "move one line up so that we can check for mPage != null in run()", "tokenized_comment": ["move", "<|s|>", "one", "<|s|>", "line", "<|s|>", "up", "<|s|>", "so", "<|s|>", "that", "<|s|>", "we", "<|s|>", "can", "<|s|>", "check", "<|s|>", "for", "<|s|>", "m", "Page", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "in", "<|s|>", "run", "(", ")"], "tufano_code": "private boolean METHOD_1 ( int VAR_1 ) { if ( VAR_2 == null ) return false ; if ( VAR_3 != null && VAR_3 . METHOD_2 ( ) != VAR_1 ) { VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; VAR_3 = null ; } if ( VAR_3 == null ) { VAR_3 = VAR_2 . METHOD_1 ( VAR_1 ) ; } return true ; }", "our_target": "                closePage();\n", "our_code": "        private boolean openPage(int page) {\n            if (mRenderer == null) return false;\n\n            // Close old page if this is a new page\n            if (mPage != null && mPage.getIndex() != page) {\n<|startfocus|>\n                mPageLock.lock();\n                mPage.close();\n                mPageLock.unlock();\n                mPage = null;\n<|endfocus|>\n            }\n\n            // Open new page if necessary\n            if (mPage == null) {\n                mPage = mRenderer.openPage(page);\n            }\n            return true;\n        }", "tokenized_code": ["<|8-s|>", "private", "<|s|>", "boolean", "<|s|>", "open", "Page", "(", "int", "<|s|>", "page", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Renderer", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Close", "<|s|>", "old", "<|s|>", "page", "<|s|>", "if", "<|s|>", "this", "<|s|>", "is", "<|s|>", "a", "<|s|>", "new", "<|s|>", "page", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Page", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "m", "Page", ".", "get", "Index", "(", ")", "<|s|>", "!=", "<|s|>", "page", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "m", "Page", "Lock", ".", "lock", "(", ");", "<|nl|>", "<|16-s|>", "m", "Page", ".", "close", "(", ");", "<|nl|>", "<|16-s|>", "m", "Page", "Lock", ".", "unlock", "(", ");", "<|nl|>", "<|16-s|>", "m", "Page", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Open", "<|s|>", "new", "<|s|>", "page", "<|s|>", "if", "<|s|>", "necessary", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Page", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "m", "Page", "<|s|>", "=", "<|s|>", "m", "Renderer", ".", "open", "Page", "(", "page", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 131, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_4210", "comment_id": "2d32ef87_9aac11d6", "class_list": ["PdfRenderService", "RenderThread"], "func_list": ["public IBinder onBind(Intent intent)", "public boolean onUnbind(Intent intent)", "private boolean open(ParcelFileDescriptor pfd)", "private boolean openPage(int page)", "private void closeAll()", "public void run()", "private void renderToBitmap(int startRow, Bitmap bitmap)"], "prime_var_dic": {"input": 1}}, {"idx": 91652, "status": "update", "global_index": 18808, "project_name": "android_", "written_on": "2010-08-30 18:59:19", "tufano_target": "private void METHOD_1 ( TYPE_1 parameters ) { assertEquals ( parameters . METHOD_2 ( ) , 0 ) ; int VAR_1 = parameters . METHOD_3 ( ) ; int min = parameters . METHOD_4 ( ) ; float step = parameters . METHOD_5 ( ) ; if ( VAR_1 == 0 && min == 0 ) { assertEquals ( FLOAT_2 , step , FLOAT_3 ) ; return ; } assertTrue ( step > 0 ) ; assertTrue ( VAR_1 >= 0 ) ; assertTrue ( min <= 0 ) ; }", "comment": "Please change to 0f and 0.000001f. Otherwise assertEquals(double, double, double) will be called.", "tokenized_comment": ["Please", "<|s|>", "change", "<|s|>", "to", "<|s|>", "0", "f", "<|s|>", "and", "<|s|>", "0", ".", "000001", "f", ".", "<|s|>", "Otherwise", "<|s|>", "assert", "Equals", "(", "double", ",", "<|s|>", "double", ",", "<|s|>", "double", ")", "<|s|>", "will", "<|s|>", "be", "<|s|>", "called", "."], "tufano_code": "private void METHOD_1 ( TYPE_1 parameters ) { assertEquals ( parameters . METHOD_2 ( ) , 0 ) ; int VAR_1 = parameters . METHOD_3 ( ) ; int min = parameters . METHOD_4 ( ) ; float step = parameters . METHOD_5 ( ) ; if ( VAR_1 == 0 && min == 0 ) { assertEquals ( 0 , step , FLOAT_1 ) ; return ; } assertTrue ( step > 0 ) ; assertTrue ( VAR_1 >= 0 ) ; assertTrue ( min <= 0 ) ; }", "our_target": "            assertEquals(0f, step, 0.000001f);\n", "our_code": "    private void checkExposureCompensation(Parameters parameters) {\n        assertEquals(parameters.getExposureCompensation(), 0);\n        int max = parameters.getMaxExposureCompensation();\n        int min = parameters.getMinExposureCompensation();\n        float step = parameters.getExposureCompensationStep();\n        if (max == 0 && min == 0) {\n<|startfocus|>\n            assertEquals(0, step, 0.000001);\n<|endfocus|>\n            return;\n        }\n        assertTrue(step > 0);\n        assertTrue(max >= 0);\n        assertTrue(min <= 0);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "check", "Exposure", "Compensation", "(", "Parameters", "<|s|>", "parameters", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "parameters", ".", "get", "Exposure", "Compensation", "(", ")", ",", "<|s|>", "0", ");", "<|nl|>", "<|8-s|>", "int", "<|s|>", "max", "<|s|>", "=", "<|s|>", "parameters", ".", "get", "Max", "Exposure", "Compensation", "(", ");", "<|nl|>", "<|8-s|>", "int", "<|s|>", "min", "<|s|>", "=", "<|s|>", "parameters", ".", "get", "Min", "Exposure", "Compensation", "(", ");", "<|nl|>", "<|8-s|>", "float", "<|s|>", "step", "<|s|>", "=", "<|s|>", "parameters", ".", "get", "Exposure", "Compensation", "Step", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "max", "<|s|>", "==", "<|s|>", "0", "<|s|>", "&&", "<|s|>", "min", "<|s|>", "==", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "assert", "Equals", "(", "0", ",", "<|s|>", "step", ",", "<|s|>", "0", ".", "000001", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "assert", "True", "(", "step", "<|s|>", ">", "<|s|>", "0", ");", "<|nl|>", "<|8-s|>", "assert", "True", "(", "max", "<|s|>", ">=", "<|s|>", "0", ");", "<|nl|>", "<|8-s|>", "assert", "True", "(", "min", "<|s|>", "<=", "<|s|>", "0", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 635, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5349", "comment_id": "AAAA6n%2F%2F%2F5g%3D", "class_list": ["CameraTest", "RawPreviewCallback", "TestShutterCallback", "RawPictureCallback", "JpegPictureCallback", "TestErrorCallback", "AutoFocusCallback", "PreviewCallbackWithBuffer", "ZoomListener"], "func_list": ["public CameraTest()", "private void initializeMessageLooper()", "new Thread()", "public void run()", "public void onPreviewFrame(byte [] rawData, Camera camera)", "public void onShutter()", "public void onPictureTaken(byte [] rawData, Camera camera)", "public void onError(int error, Camera camera)", "public void onAutoFocus(boolean success, Camera camera)", "private void waitForPreviewDone()", "private boolean waitForFocusDone()", "private void waitForSnapshotDone()", "private void assertParameters(Parameters parameters)", "private void checkExposureCompensation(Parameters parameters)", "private boolean isValidPixelFormat(int format)", "public void onZoomChange(int value, boolean stopped, Camera camera)", "public CameraTest()", "public CameraTest()", "public CameraTest()", "public CameraTest()", "public CameraTest()", "public CameraTest()"], "prime_var_dic": {}}, {"idx": 45102, "status": "update", "global_index": 13494, "project_name": "android_", "written_on": "2014-12-03 11:58:31", "tufano_target": "static void METHOD_1 ( ) { int a = 0 ; int b = 1 ; for ( int i = 0 ; i < INT_1 ; i ++ ) { try { a = 1 ; int c = a % b ; } finally { VAR_1 . METHOD_2 ( STRING_1 ) ; } } }", "comment": "This sounds a bit off knowing that 'b' is always 1.", "tokenized_comment": ["This", "<|s|>", "sounds", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "off", "<|s|>", "knowing", "<|s|>", "that", "<|s|>", "'", "b", "'", "<|s|>", "is", "<|s|>", "always", "<|s|>", "1", "."], "tufano_code": "static void METHOD_1 ( ) { int a = 0 ; int b = 1 ; for ( int i = 0 ; i < INT_1 ; i ++ ) { try { a = 1 ; int c = a % b ; } finally { VAR_1 . METHOD_2 ( STRING_1 ) ; } } }", "our_target": "        // Would throw an ArithmeticException if b were null (hence\n        // the enclosing `try' statement).\n", "our_code": "  static void foo() {\n    int a = 0;\n    int b = 1;\n\n    for (int i = 0; i < 3; i++) {\n      try {\n        a = 1;\n<|startfocus|>\n        // Might throw an ArithmeticException if b == 0.\n<|endfocus|>\n        int c = a % b;\n      }\n      finally {\n        System.out.println(\"In finally\");\n      }\n    }\n  }", "tokenized_code": ["<|2-s|>", "static", "<|s|>", "void", "<|s|>", "foo", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "int", "<|s|>", "a", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|4-s|>", "int", "<|s|>", "b", "<|s|>", "=", "<|s|>", "1", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "3", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "try", "<|s|>", "{", "<|nl|>", "<|8-s|>", "a", "<|s|>", "=", "<|s|>", "1", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Might", "<|s|>", "throw", "<|s|>", "an", "<|s|>", "Arithmetic", "Exception", "<|s|>", "if", "<|s|>", "b", "<|s|>", "==", "<|s|>", "0", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "int", "<|s|>", "c", "<|s|>", "=", "<|s|>", "a", "<|s|>", "%", "<|s|>", "b", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "finally", "<|s|>", "{", "<|nl|>", "<|8-s|>", "System", ".", "out", ".", "println", "(", "\"", "In", "<|s|>", "finally", "\"", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 32, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_5039", "comment_id": "ff82dd17_13f45632", "class_list": ["Main"], "func_list": ["public static void main(String[] args)", "static void foo()"], "prime_var_dic": {}}, {"idx": 94089, "status": "update", "global_index": 8973, "project_name": "android_", "written_on": "2015-08-04 13:22:14", "tufano_target": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; super . METHOD_1 ( x , y , VAR_1 , height ) ; TYPE_1 VAR_3 = METHOD_2 ( ) ; synchronized ( VAR_4 ) { if ( VAR_5 != null && ! VAR_3 . equals ( VAR_2 ) ) { VAR_5 . METHOD_3 ( VAR_1 , 1 ) ; } } }", "comment": "Nit: one word on a separate line, looks weird", "tokenized_comment": ["Nit", ":", "<|s|>", "one", "<|s|>", "word", "<|s|>", "on", "<|s|>", "a", "<|s|>", "separate", "<|s|>", "line", ",", "<|s|>", "looks", "<|s|>", "weird"], "tufano_code": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; super . METHOD_1 ( x , y , VAR_1 , height ) ; TYPE_1 VAR_3 = METHOD_2 ( ) ; synchronized ( VAR_4 ) { if ( VAR_5 != null && ! VAR_3 . equals ( VAR_2 ) ) { VAR_5 . METHOD_3 ( VAR_1 , ( VAR_6 < VAR_1 ) ? 1 : height ) ; VAR_6 = VAR_1 ; } } }", "our_target": "        myGraphicsLayoutRenderer.setSize(width, 1);\n", "our_code": "  public void setBounds(int x, int y, int width, int height) {\n    Dimension previousSize = getSize();\n\n    super.setBounds(x, y, width, height);\n\n    // Update the size of the layout renderer. This is done here instead of a component listener because\n    // this runs before the paintComponent saving an extra paint cycle.\n    Dimension currentSize = getSize();\n    synchronized (myGraphicsLayoutRendererLock) {\n      if (myGraphicsLayoutRenderer != null && !currentSize.equals(previousSize)) {\n        // Because we use GraphicsLayoutRender in vertical scroll mode, the height passed it's only a minimum. If the actual rendering results\n        // in a bigger size, the GraphicsLayoutRenderer.getPreferredSize() call will return the correct size.\n<|startfocus|>\n        myGraphicsLayoutRenderer.setSize(width, (myCurrentWidth < width) ? 1 : height);\n        myCurrentWidth = width;\n<|endfocus|>\n      }\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Bounds", "(", "int", "<|s|>", "x", ",", "<|s|>", "int", "<|s|>", "y", ",", "<|s|>", "int", "<|s|>", "width", ",", "<|s|>", "int", "<|s|>", "height", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Dimension", "<|s|>", "previous", "Size", "<|s|>", "=", "<|s|>", "get", "Size", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "super", ".", "set", "Bounds", "(", "x", ",", "<|s|>", "y", ",", "<|s|>", "width", ",", "<|s|>", "height", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Update", "<|s|>", "the", "<|s|>", "size", "<|s|>", "of", "<|s|>", "the", "<|s|>", "layout", "<|s|>", "renderer", ".", "<|s|>", "This", "<|s|>", "is", "<|s|>", "done", "<|s|>", "here", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "a", "<|s|>", "component", "<|s|>", "listener", "<|s|>", "because", "<|nl|>", "<|4-s|>", "//", "<|s|>", "this", "<|s|>", "runs", "<|s|>", "before", "<|s|>", "the", "<|s|>", "paint", "Component", "<|s|>", "saving", "<|s|>", "an", "<|s|>", "extra", "<|s|>", "paint", "<|s|>", "cycle", ".", "<|nl|>", "<|4-s|>", "Dimension", "<|s|>", "current", "Size", "<|s|>", "=", "<|s|>", "get", "Size", "(", ");", "<|nl|>", "<|4-s|>", "synchronized", "<|s|>", "(", "my", "Graphics", "Layout", "Renderer", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "my", "Graphics", "Layout", "Renderer", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "!", "current", "Size", ".", "equals", "(", "previous", "Size", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Because", "<|s|>", "we", "<|s|>", "use", "<|s|>", "Graphics", "Layout", "Render", "<|s|>", "in", "<|s|>", "vertical", "<|s|>", "scroll", "<|s|>", "mode", ",", "<|s|>", "the", "<|s|>", "height", "<|s|>", "passed", "<|s|>", "it", "'", "s", "<|s|>", "only", "<|s|>", "a", "<|s|>", "minimum", ".", "<|s|>", "If", "<|s|>", "the", "<|s|>", "actual", "<|s|>", "rendering", "<|s|>", "results", "<|nl|>", "<|8-s|>", "//", "<|s|>", "in", "<|s|>", "a", "<|s|>", "bigger", "<|s|>", "size", ",", "<|s|>", "the", "<|s|>", "Graphics", "Layout", "Renderer", ".", "get", "Preferred", "Size", "(", ")", "<|s|>", "call", "<|s|>", "will", "<|s|>", "return", "<|s|>", "the", "<|s|>", "correct", "<|s|>", "size", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "my", "Graphics", "Layout", "Renderer", ".", "set", "Size", "(", "width", ",", "<|s|>", "(", "my", "Current", "Width", "<|s|>", "<", "<|s|>", "width", ")", "<|s|>", "?", "<|s|>", "1", "<|s|>", ":", "<|s|>", "height", ");", "<|nl|>", "<|8-s|>", "my", "Current", "Width", "<|s|>", "=", "<|s|>", "width", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 142, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_704", "comment_id": "4d7fda4c_b5c85850", "class_list": ["AndroidPreviewPanel", "InvalidateTask"], "func_list": ["public void run()", "protected void done()", "public AndroidPreviewPanel(@NotNull Configuration configuration)", "public void setBounds(int x, int y, int width, int height)", "public void setScale(double scale)", "public void invalidateGraphicsRenderer()", "public void updateConfiguration(@NotNull Configuration configuration)", "public void setDocument(@NotNull Document document)", "public void paintComponent(final Graphics graphics)", "private static void notifyUnsupportedLayoutlib()", "public Dimension getPreferredScrollableViewportSize()", "public Dimension getPreferredSize()", "public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)", "public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)", "public boolean getScrollableTracksViewportWidth()", "public boolean getScrollableTracksViewportHeight()", "public Set<String> getUsedAttrs()", "public ViewInfo findViewAtPoint(Point p)", "public void run()", "protected void done()"], "prime_var_dic": {}}, {"idx": 28871, "status": "update", "global_index": 10344, "project_name": "android_", "written_on": "2015-05-01 18:17:18", "tufano_target": "public static void main ( String [ ] args ) { if ( METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( STRING_1 ) ; } if ( METHOD_3 ( ) ) { VAR_1 . METHOD_2 ( STRING_2 ) ; } if ( METHOD_4 ( ) ) { VAR_1 . METHOD_2 ( STRING_3 ) ; } if ( METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( STRING_1 ) ; } }", "comment": "tws", "tokenized_comment": ["tws"], "tufano_code": "public static void main ( String [ ] args ) { if ( METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( STRING_1 ) ; } if ( METHOD_3 ( ) ) { VAR_1 . METHOD_2 ( STRING_2 ) ; } if ( METHOD_4 ( ) ) { VAR_1 . METHOD_2 ( STRING_3 ) ; } if ( METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( STRING_1 ) ; } }", "our_target": "\n", "our_code": "    public static void main(String[] args) {\n        if (triggerReflectionOOM()) {\n            System.out.println(\"Test reflection correctly threw\");\n        }\n\n        if (triggerArrayOOM()) {\n            System.out.println(\"NEW_ARRAY correctly threw OOME\");\n        }\n\n        if (triggerInstanceOOM()) {\n            System.out.println(\"NEW_INSTANCE correctly threw OOME\");\n        }\n<|startfocus|>\n        \n<|endfocus|>\n        if (triggerReflectionOOM()) {\n            System.out.println(\"Test reflection correctly threw\");\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "main", "(", "String", "[", "]", "<|s|>", "args", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "trigger", "Reflection", "OOM", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "System", ".", "out", ".", "println", "(", "\"", "Test", "<|s|>", "reflection", "<|s|>", "correctly", "<|s|>", "threw", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "trigger", "Array", "OOM", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "System", ".", "out", ".", "println", "(", "\"", "NEW", "_", "ARRAY", "<|s|>", "correctly", "<|s|>", "threw", "<|s|>", "OOME", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "trigger", "Instance", "OOM", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "System", ".", "out", ".", "println", "(", "\"", "NEW", "_", "INSTANCE", "<|s|>", "correctly", "<|s|>", "threw", "<|s|>", "OOME", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "trigger", "Reflection", "OOM", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "System", ".", "out", ".", "println", "(", "\"", "Test", "<|s|>", "reflection", "<|s|>", "correctly", "<|s|>", "threw", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 85, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4994", "comment_id": "70bf1233_63360262", "class_list": ["Main", "ArrayMemEater", "InstanceMemEater"], "func_list": ["static void blowup(char[][] holder)", "static InstanceMemEater allocate()", "static void confuseCompilerOptimization(InstanceMemEater instance)", "static boolean triggerArrayOOM()", "static boolean triggerInstanceOOM()", "public static void main(String[] args)", "boolean triggerReflectionOOM()", "static void blowup(char[][] holder)", "static InstanceMemEater allocate()", "static void confuseCompilerOptimization(InstanceMemEater instance)"], "prime_var_dic": {}}, {"idx": 56213, "status": "update", "global_index": 13591, "project_name": "android_", "written_on": "2015-01-23 19:38:57", "tufano_target": "private void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 < TYPE_3 > VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; if ( VAR_2 . size ( ) > 0 ) { TYPE_3 VAR_4 = VAR_2 . get ( 0 ) ; if ( VAR_3 != null ) { if ( VAR_2 . contains ( VAR_3 ) ) { VAR_4 = VAR_3 ; } } METHOD_5 ( VAR_4 ) ; VAR_6 . METHOD_6 ( VAR_4 ) ; } }", "comment": "if (devices.contains(previouslySelected))\n  deviceToSelect = previouslySelected;", "tokenized_comment": ["if", "<|s|>", "(", "devices", ".", "contains", "(", "previously", "Selected", ")", ")", "<|nl|>", "<|2-s|>", "device", "To", "Select", "<|s|>", "=", "<|s|>", "previously", "Selected", ";"], "tufano_code": "private void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 < TYPE_3 > VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; if ( VAR_2 . size ( ) > 0 ) { TYPE_3 VAR_4 = VAR_2 . get ( 0 ) ; if ( VAR_3 != null ) { for ( TYPE_3 VAR_5 : VAR_2 ) { if ( VAR_3 == VAR_5 ) { VAR_4 = VAR_5 ; } } } METHOD_5 ( VAR_4 ) ; VAR_6 . METHOD_6 ( VAR_4 ) ; } }", "our_target": "        if (devices.contains(previouslySelected)) {\n          deviceToSelect = previouslySelected;\n", "our_code": "  private void updateAvailableDevices(@NotNull DeviceId[] deviceIds, @NotNull List<Device> devices, @Nullable Device previouslySelected) {\n    ApplicationManager.getApplication().assertIsDispatchThread();\n\n    updateDeviceList(deviceIds, devices);\n\n    if (devices.size() > 0) {\n      Device deviceToSelect = devices.get(0);\n      if (previouslySelected != null) {\n<|startfocus|>\n        for (Device device : devices) {\n          if (previouslySelected == device) {\n            deviceToSelect = device;\n          }\n<|endfocus|>\n        }\n      }\n      selectDevice(deviceToSelect);\n      myEditor.notifyDeviceChanged(deviceToSelect);\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "update", "Available", "Devices", "(", "@", "Not", "Null", "<|s|>", "Device", "Id", "[", "]", "<|s|>", "device", "Ids", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "List", "<", "Device", ">", "<|s|>", "devices", ",", "<|s|>", "@", "Nullable", "<|s|>", "Device", "<|s|>", "previously", "Selected", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Application", "Manager", ".", "get", "Application", "(", ")", ".", "assert", "Is", "Dispatch", "Thread", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "update", "Device", "List", "(", "device", "Ids", ",", "<|s|>", "devices", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "devices", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Device", "<|s|>", "device", "To", "Select", "<|s|>", "=", "<|s|>", "devices", ".", "get", "(", "0", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "previously", "Selected", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "Device", "<|s|>", "device", "<|s|>", ":", "<|s|>", "devices", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "if", "<|s|>", "(", "previously", "Selected", "<|s|>", "==", "<|s|>", "device", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "device", "To", "Select", "<|s|>", "=", "<|s|>", "device", ";", "<|nl|>", "<|8-s|>", "<|2-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "select", "Device", "(", "device", "To", "Select", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Editor", ".", "notify", "Device", "Changed", "(", "device", "To", "Select", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 283, "base_patch_number": 20, "changed_patch_number": 21, "code_file_name": "android_176", "comment_id": "2b70bb17_aef4f863", "class_list": ["ContextController"], "func_list": ["public ContextController(@NotNull GfxTraceEditor editor,", "public void customize(JList list, Device value, int index, boolean selected, boolean hasFocus)", "else if (index == -1 && myCurrentDevice == null)", "public Device getCurrentDevice()", "public DeviceId getCurrentDeviceId()", "public Capture getCurrentCapture()", "public CaptureId getCurrentCaptureId()", "public Long getCurrentContext()", "public void initializeOnce()", "public void run()", "public void itemStateChanged(ItemEvent itemEvent)", "public void populateUi(@NotNull long[] contextIds)", "private void updateAvailableDevices(@NotNull DeviceId[] deviceIds, @NotNull List<Device> devices, @Nullable Device previouslySelected)", "private void selectDevice(@NotNull Device selectedDevice)", "private void selectCapture(@NotNull Capture selectedCapture)", "private void setGfxContext(@NotNull final Long contextId)", "private ComboBox getDevicesView()", "private ComboBox getCapturesView()", "private ComboBox getGfxContextsView()", "private void updateDeviceList(@NotNull DeviceId[] deviceIds, @NotNull List<Device> devices)", "private void updateCaptureList(@NotNull CaptureId[] captureIds, @NotNull List<Capture> captures)", "private void updateGfxContextView(@NotNull long[] contextList)", "private void clearGfxContextView()"], "prime_var_dic": {"GfxTraceEditor": 1, "ComboBox": 3, "myCurrentDevice": 1, "myCurrentCapture": 1, "Long": 1}}, {"idx": 86956, "status": "update", "global_index": 19593, "project_name": "android_", "written_on": "2011-05-17 19:39:05", "tufano_target": "public String METHOD_1 ( String VAR_1 , int VAR_2 ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( ) . path ( VAR_3 ) . METHOD_5 ( VAR_4 , VAR_1 ) . METHOD_5 ( VAR_5 , TYPE_2 . toString ( VAR_2 ) ) . build ( ) . toString ( ) ; }", "comment": "Integer.toString()?", "tokenized_comment": ["Integer", ".", "to", "String", "(", ")", "?"], "tufano_code": "public String METHOD_1 ( String VAR_1 , int VAR_2 ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( ) . path ( VAR_3 ) . METHOD_5 ( VAR_4 , VAR_1 ) . METHOD_5 ( VAR_5 , STRING_1 + VAR_2 ) . build ( ) . toString ( ) ; }", "our_target": "                .appendQueryParameter(NUM_BYTES_PARAMETER, Integer.toString(numBytes))\n", "our_code": "    public String getTestDownloadUrl(String downloadId, int numBytes) {\n        return Uri.parse(getBaseUri())\n                .buildUpon()\n                .path(TEST_DOWNLOAD_PATH)\n                .appendQueryParameter(DOWNLOAD_ID_PARAMETER, downloadId)\n<|startfocus|>\n                .appendQueryParameter(NUM_BYTES_PARAMETER, \"\" + numBytes)\n<|endfocus|>\n                .build()\n                .toString();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Test", "Download", "Url", "(", "String", "<|s|>", "download", "Id", ",", "<|s|>", "int", "<|s|>", "num", "Bytes", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "Uri", ".", "parse", "(", "get", "Base", "Uri", "(", ")", ")", "<|nl|>", "<|16-s|>", ".", "build", "Upon", "(", ")", "<|nl|>", "<|16-s|>", ".", "path", "(", "TEST", "_", "DOWNLOAD", "_", "PATH", ")", "<|nl|>", "<|16-s|>", ".", "append", "Query", "Parameter", "(", "DOWNLOAD", "_", "ID", "_", "PARAMETER", ",", "<|s|>", "download", "Id", ")", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", ".", "append", "Query", "Parameter", "(", "NUM", "_", "BYTES", "_", "PARAMETER", ",", "<|s|>", "\"", "\"", "<|s|>", "+", "<|s|>", "num", "Bytes", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", ".", "build", "(", ")", "<|nl|>", "<|16-s|>", ".", "to", "String", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 374, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5278", "comment_id": "AAABAn%2F%2F%2Fq8%3D", "class_list": ["CtsTestServer", "CtsTrustManager", "CtsHostnameVerifier", "ServerThread"], "func_list": ["public static String getReasonString(int status)", "public void shutdown()", "public void checkClientTrusted(X509Certificate[] chain, String authType)", "public void checkServerTrusted(X509Certificate[] chain, String authType)", "public X509Certificate[] getAcceptedIssuers()", "public boolean verify(String hostname, SSLSession session)", "public String getBaseUri()", "public String getAssetUrl(String path)", "public String getDelayedAssetUrl(String path)", "public String getAuthAssetUrl(String path)", "public String getRedirectingAssetUrl(String path)", "public String getBinaryUrl(String mimeType, int contentLength)", "public String getCookieUrl(String path)", "public String getUserAgentUrl()", "public String getAppCacheUrl()", "public String getTestDownloadUrl(String downloadId, int numBytes)", "public String getLastRequestUrl()", "public int getRequestCount()", "public void setDocumentValidity(long timeMillis)", "public void setDocumentAge(long timeMillis)", "\"      function updateTitle()  document.title = \\\"Done\\\"; }\" +", "private void setDateHeaders(HttpResponse response)", "private HttpResponse createResponse(int status)", "private StringEntity createEntity(String content)", "public void run()", "private boolean isShutdownRequest(HttpRequest request)"], "prime_var_dic": {}}, {"idx": 48241, "status": "update", "global_index": 19282, "project_name": "android_", "written_on": "2011-02-01 23:54:15", "tufano_target": "public void METHOD_1 ( TYPE_1 context , TYPE_2 intent ) { VAR_1 = context ; if ( TYPE_3 . equals ( intent . METHOD_2 ( ) ) ) { TYPE_4 VAR_2 = intent . getData ( ) ; byte [ ] VAR_3 = ( byte [ ] ) intent . METHOD_3 ( STRING_1 ) ; TYPE_5 message = METHOD_4 ( context , VAR_2 , VAR_3 ) ; if ( message . METHOD_5 ( ) < VAR_4 ) TYPE_6 . METHOD_6 ( context , true , message . METHOD_7 ( ) ) ; } }", "comment": "Aren't you missing the () on calling the message.isStatusReportMessage() function?", "tokenized_comment": ["Aren", "'", "t", "<|s|>", "you", "<|s|>", "missing", "<|s|>", "the", "<|s|>", "(", ")", "<|s|>", "on", "<|s|>", "calling", "<|s|>", "the", "<|s|>", "message", ".", "is", "Status", "Report", "Message", "(", ")", "<|s|>", "function", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 context , TYPE_2 intent ) { VAR_1 = context ; if ( TYPE_3 . equals ( intent . METHOD_2 ( ) ) ) { TYPE_4 VAR_2 = intent . getData ( ) ; byte [ ] VAR_3 = ( byte [ ] ) intent . METHOD_3 ( STRING_1 ) ; TYPE_5 message = METHOD_4 ( context , VAR_2 , VAR_3 ) ; if ( message . METHOD_5 ( ) < VAR_4 ) TYPE_6 . METHOD_6 ( context , true , VAR_5 ) ; } }", "our_target": "                        true, message.isStatusReportMessage());\n", "our_code": "    public void onReceive(Context context, Intent intent) {\n        mContext = context;\n        if (MESSAGE_STATUS_RECEIVED_ACTION.equals(intent.getAction())) {\n\n            Uri messageUri = intent.getData();\n            byte[] pdu = (byte[]) intent.getExtra(\"pdu\");\n\n            SmsMessage message = updateMessageStatus(context, messageUri, pdu);\n\n            // Called on the UI thread so don't block.\n            if (message.getStatus() < Sms.STATUS_PENDING)\n                MessagingNotification.nonBlockingUpdateNewMessageIndicator(context,\n<|startfocus|>\n                        true, message.isStatusReportMessage);\n<|endfocus|>\n       }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Receive", "(", "Context", "<|s|>", "context", ",", "<|s|>", "Intent", "<|s|>", "intent", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Context", "<|s|>", "=", "<|s|>", "context", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "MESSAGE", "_", "STATUS", "_", "RECEIVED", "_", "ACTION", ".", "equals", "(", "intent", ".", "get", "Action", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|12-s|>", "Uri", "<|s|>", "message", "Uri", "<|s|>", "=", "<|s|>", "intent", ".", "get", "Data", "(", ");", "<|nl|>", "<|12-s|>", "byte", "[", "]", "<|s|>", "pdu", "<|s|>", "=", "<|s|>", "(", "byte", "[", "]", ")", "<|s|>", "intent", ".", "get", "Extra", "(", "\"", "pdu", "\"", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "Sms", "Message", "<|s|>", "message", "<|s|>", "=", "<|s|>", "update", "Message", "Status", "(", "context", ",", "<|s|>", "message", "Uri", ",", "<|s|>", "pdu", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Called", "<|s|>", "on", "<|s|>", "the", "<|s|>", "UI", "<|s|>", "thread", "<|s|>", "so", "<|s|>", "don", "'", "t", "<|s|>", "block", ".", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "message", ".", "get", "Status", "(", ")", "<|s|>", "<", "<|s|>", "Sms", ".", "STATUS", "_", "PENDING", ")", "<|nl|>", "<|16-s|>", "Messaging", "Notification", ".", "non", "Blocking", "Update", "New", "Message", "Indicator", "(", "context", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "true", ",", "<|s|>", "message", ".", "is", "Status", "Report", "Message", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "<|s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 56, "base_patch_number": 4, "changed_patch_number": 6, "code_file_name": "android_4329", "comment_id": "AAAA%2B3%2F%2F6jY%3D", "class_list": ["MessageStatusReceiver"], "func_list": ["public void onReceive(Context context, Intent intent)", "private SmsMessage updateMessageStatus(Context context, Uri messageUri, byte[] pdu)", "private void error(String message)", "private void log(String message)"], "prime_var_dic": {"String": 2, "Uri": 1}}, {"idx": 72980, "status": "update", "global_index": 21673, "project_name": "android_", "written_on": "2013-12-19 20:09:25", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 == VAR_3 ) { String VAR_4 = VAR_5 . getText ( ) ; if ( ! VAR_4 . isEmpty ( ) ) { if ( VAR_4 . equals ( VAR_6 ) ) { METHOD_2 ( ) ; return ; } VAR_7 = VAR_8 . METHOD_3 ( VAR_4 ) ; if ( VAR_7 . size ( ) > 0 ) { VAR_9 = 0 ; METHOD_4 ( ) ; VAR_6 = VAR_4 ; } } } }", "comment": "use isEmpty()", "tokenized_comment": ["use", "<|s|>", "is", "Empty", "(", ")"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 == VAR_3 ) { String VAR_4 = VAR_5 . getText ( ) . trim ( ) ; if ( VAR_4 . length ( ) > 0 ) { if ( VAR_4 . equals ( VAR_6 ) ) { METHOD_2 ( ) ; return ; } VAR_7 = VAR_8 . METHOD_3 ( VAR_4 ) ; if ( VAR_7 . size ( ) > 0 ) { VAR_9 = 0 ; METHOD_4 ( ) ; VAR_6 = VAR_4 ; } } } }", "our_target": "                    String term = searchTextarea.getText();\n                    if (!term.isEmpty()) {\n", "our_code": "            public void keyReleased(KeyEvent arg0) {\n                if (arg0.keyCode == SWT.CR) {\n<|startfocus|>\n                    String term = searchTextarea.getText().trim();\n                    if (term.length() > 0) {\n<|endfocus|>\n                        if (term.equals(mLastSearchedTerm)) {\n                            nextSearchResult();\n                            return;\n                        }\n                        mSearchResult = mModel.searchNode(term);\n                        if (mSearchResult.size() > 0) {\n                            mSearchResultIndex = 0;\n                            updateSearchResultSelection();\n                            mLastSearchedTerm = term;\n                        }\n                    }\n                }\n            }", "tokenized_code": ["<|12-s|>", "public", "<|s|>", "void", "<|s|>", "key", "Released", "(", "Key", "Event", "<|s|>", "arg", "0", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "arg", "0", ".", "key", "Code", "<|s|>", "==", "<|s|>", "SWT", ".", "CR", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "String", "<|s|>", "term", "<|s|>", "=", "<|s|>", "search", "Textarea", ".", "get", "Text", "(", ")", ".", "trim", "(", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "term", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "term", ".", "equals", "(", "m", "Last", "Searched", "Term", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "next", "Search", "Result", "(", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "return", ";", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|8-s|>", "m", "Search", "Result", "<|s|>", "=", "<|s|>", "m", "Model", ".", "search", "Node", "(", "term", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Search", "Result", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "m", "Search", "Result", "Index", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|16-s|>", "<|12-s|>", "update", "Search", "Result", "Selection", "(", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "m", "Last", "Searched", "Term", "<|s|>", "=", "<|s|>", "term", ";", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 330, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_5628", "comment_id": "e871338d_d45cfc66", "class_list": ["UiAutomatorView", "AttributeTableEditingSupport"], "func_list": ["public UiAutomatorView(Composite parent, int style)", "public void handleEvent(Event arg0)", "public void mouseUp(MouseEvent e)", "public void paintControl(PaintEvent e)", "public void mouseMove(MouseEvent e)", "public void widgetSelected(SelectionEvent arg0)", "public void keyReleased(KeyEvent arg0)", "public void keyPressed(KeyEvent arg0)", "public void widgetDefaultSelected(SelectionEvent arg0)", "public void selectionChanged(SelectionChangedEvent event)", "public String getText(Object element)", "protected void prevSearchResult()", "protected void nextSearchResult()", "private void updateSearchResultSelection()", "private int getScaledSize(int size)", "private int getInverseScaledSize(int size)", "private void updateScreenshotTransformation()", "public AttributeTableEditingSupport(TableViewer viewer)", "protected boolean canEdit(Object arg0)", "protected CellEditor getCellEditor(Object arg0)", "protected Object getValue(Object o)", "protected void setValue(Object arg0, Object arg1)", "public void redrawScreenshot()", "public void setInputHierarchy(Object input)", "public void loadAttributeTable()", "public void expandAll()", "public void updateTreeSelection(BasicTreeNode node)", "public void setModel(UiAutomatorModel model, File modelBackingFile, Image screenshot)", "public boolean shouldShowNafNodes()", "public void toggleShowNaf()", "public Image getScreenShot()", "public File getModelFile()", "public String getText(Object element)"], "prime_var_dic": {}}, {"idx": 61675, "status": "update", "global_index": 12521, "project_name": "android_", "written_on": "2014-09-03 16:47:37", "tufano_target": "public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) { return ; } final TYPE_4 VAR_3 = TYPE_4 . get ( VAR_1 ) ; if ( VAR_3 != null ) { final TYPE_5 VAR_4 = VAR_3 . METHOD_4 ( ) ; TYPE_2 VAR_5 = TYPE_6 . METHOD_5 ( VAR_4 ) ; if ( VAR_5 != null ) { new TYPE_7 < TYPE_8 > ( VAR_1 , STRING_1 , VAR_4 ) { protected void METHOD_6 ( TYPE_9 < TYPE_8 > result ) throws TYPE_10 { VAR_3 . METHOD_7 ( VAR_2 ) ; } } . execute ( ) ; } } }", "comment": "Change (project, psiFile) to (project, \"Update settings.gradle\", psiFile)", "tokenized_comment": ["Change", "<|s|>", "(", "project", ",", "<|s|>", "psi", "File", ")", "<|s|>", "to", "<|s|>", "(", "project", ",", "<|s|>", "\"", "Update", "<|s|>", "settings", ".", "gradle", "\"", ",", "<|s|>", "psi", "File", ")"], "tufano_code": "public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) { return ; } final TYPE_4 VAR_3 = TYPE_4 . get ( VAR_1 ) ; if ( VAR_3 != null ) { final TYPE_5 VAR_4 = VAR_3 . METHOD_4 ( ) ; TYPE_2 VAR_5 = TYPE_6 . METHOD_5 ( VAR_4 ) ; if ( VAR_5 != null ) { new TYPE_7 < TYPE_8 > ( VAR_1 , VAR_4 ) { protected void METHOD_6 ( TYPE_9 < TYPE_8 > result ) throws TYPE_10 { VAR_3 . METHOD_7 ( VAR_2 ) ; } } . execute ( ) ; } } }", "our_target": "        new WriteCommandAction<Void>(project, \"Update settings.gradle\", psiFile) {\n", "our_code": "  public void moduleAdded(@NotNull final Project project, @NotNull final Module module) {\n    // Don't do anything if we are in the middle of a project sync.\n    if (GradleSyncState.getInstance(project).isSyncInProgress()) {\n      return;\n    }\n    final GradleSettingsFile settingsFile = GradleSettingsFile.get(project);\n    if (settingsFile != null) {\n      // if settings.gradle does not have a module, we are in the middle of setting up a project.\n      final PsiFile psiFile = settingsFile.getPsiFile();\n      Module found = ModuleUtilCore.findModuleForPsiElement(psiFile);\n      if (found != null) {\n<|startfocus|>\n        new WriteCommandAction<Void>(project, psiFile) {\n<|endfocus|>\n          @Override\n          protected void run(@NotNull Result<Void> result) throws Throwable {\n            settingsFile.addModule(module);\n          }\n        }.execute();\n      }\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "module", "Added", "(", "@", "Not", "Null", "<|s|>", "final", "<|s|>", "Project", "<|s|>", "project", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "final", "<|s|>", "Module", "<|s|>", "module", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Don", "'", "t", "<|s|>", "do", "<|s|>", "anything", "<|s|>", "if", "<|s|>", "we", "<|s|>", "are", "<|s|>", "in", "<|s|>", "the", "<|s|>", "middle", "<|s|>", "of", "<|s|>", "a", "<|s|>", "project", "<|s|>", "sync", ".", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "Gradle", "Sync", "State", ".", "get", "Instance", "(", "project", ")", ".", "is", "Sync", "In", "Progress", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "final", "<|s|>", "Gradle", "Settings", "File", "<|s|>", "settings", "File", "<|s|>", "=", "<|s|>", "Gradle", "Settings", "File", ".", "get", "(", "project", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "settings", "File", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "if", "<|s|>", "settings", ".", "gradle", "<|s|>", "does", "<|s|>", "not", "<|s|>", "have", "<|s|>", "a", "<|s|>", "module", ",", "<|s|>", "we", "<|s|>", "are", "<|s|>", "in", "<|s|>", "the", "<|s|>", "middle", "<|s|>", "of", "<|s|>", "setting", "<|s|>", "up", "<|s|>", "a", "<|s|>", "project", ".", "<|nl|>", "<|4-s|>", "<|2-s|>", "final", "<|s|>", "Psi", "File", "<|s|>", "psi", "File", "<|s|>", "=", "<|s|>", "settings", "File", ".", "get", "Psi", "File", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "Module", "<|s|>", "found", "<|s|>", "=", "<|s|>", "Module", "Util", "Core", ".", "find", "Module", "For", "Psi", "Element", "(", "psi", "File", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "found", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "new", "<|s|>", "Write", "Command", "Action", "<", "Void", ">", "(", "project", ",", "<|s|>", "psi", "File", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "@", "Override", "<|nl|>", "<|8-s|>", "<|2-s|>", "protected", "<|s|>", "void", "<|s|>", "run", "(", "@", "Not", "Null", "<|s|>", "Result", "<", "Void", ">", "<|s|>", "result", ")", "<|s|>", "throws", "<|s|>", "Throwable", "<|s|>", "{", "<|nl|>", "<|12-s|>", "settings", "File", ".", "add", "Module", "(", "module", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "}", "<|nl|>", "<|8-s|>", "}", ".", "execute", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 65, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_386", "comment_id": "503f57b5_5046ec3d", "class_list": ["GradleBuildFileUpdater", "gets"], "func_list": ["public GradleBuildFileUpdater(@NotNull Project project)", "public void moduleAdded(@NotNull final Project project, @NotNull final Module module)", "public void moduleRemoved(@NotNull Project project, @NotNull final Module module)", "public void before(@NotNull List<? extends VFileEvent> events)", "public void after(@NotNull List<? extends VFileEvent> events)", "private static String updateProjectNameInGradlePath(@NotNull AndroidGradleFacet androidGradleFacet, @NotNull VirtualFile moduleDir)"], "prime_var_dic": {}}, {"idx": 75749, "status": "update", "global_index": 3485, "project_name": "android_", "written_on": "2017-01-18 06:29:57", "tufano_target": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { int size = VAR_1 . METHOD_2 ( ) ; if ( size == VAR_3 ) { return null ; } TYPE_1 < TYPE_2 > VAR_2 = new TYPE_4 < > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { VAR_2 . add ( VAR_1 . METHOD_3 ( null ) ) ; } return VAR_2 ; }", "comment": "1) define -1 as macro. 2) it is safer to do 'if (size <= -1)'.", "tokenized_comment": ["1", ")", "<|s|>", "define", "<|s|>", "-", "1", "<|s|>", "as", "<|s|>", "macro", ".", "<|s|>", "2", ")", "<|s|>", "it", "<|s|>", "is", "<|s|>", "safer", "<|s|>", "to", "<|s|>", "do", "<|s|>", "'", "if", "<|s|>", "(", "size", "<|s|>", "<=", "<|s|>", "-", "1", ")", "'", "."], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { int size = VAR_1 . METHOD_2 ( ) ; if ( size == - 1 ) { return null ; } TYPE_1 < TYPE_2 > VAR_2 = new TYPE_4 < > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { VAR_2 . add ( VAR_1 . METHOD_3 ( null ) ) ; } return VAR_2 ; }", "our_target": "                if (size == NULL_VALUE) {\n", "our_code": "            private List<RoamingPartner> readRoamingPartnerList(Parcel in) {\n                int size = in.readInt();\n<|startfocus|>\n                if (size == -1) {\n<|endfocus|>\n                    return null;\n                }\n                List<RoamingPartner> partnerList = new ArrayList<>();\n                for (int i = 0; i < size; i++) {\n                    partnerList.add(in.readParcelable(null));\n                }\n                return partnerList;\n            }", "tokenized_code": ["<|12-s|>", "private", "<|s|>", "List", "<", "Roaming", "Partner", ">", "<|s|>", "read", "Roaming", "Partner", "List", "(", "Parcel", "<|s|>", "in", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "int", "<|s|>", "size", "<|s|>", "=", "<|s|>", "in", ".", "read", "Int", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "size", "<|s|>", "==", "<|s|>", "-", "1", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "List", "<", "Roaming", "Partner", ">", "<|s|>", "partner", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", ">", "(", ");", "<|nl|>", "<|16-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "size", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "partner", "List", ".", "add", "(", "in", ".", "read", "Parcelable", "(", "null", ")", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "return", "<|s|>", "partner", "List", ";", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 396, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_5679", "comment_id": "a35c3506_788241ed", "class_list": ["Policy", "RoamingPartner"], "func_list": ["public RoamingPartner() }", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object thatObject)", "public boolean validate()", "public RoamingPartner createFromParcel(Parcel in)", "public RoamingPartner[] newArray(int size)", "public Policy() }", "public Policy createFromParcel(Parcel in)", "public Policy[] newArray(int size)", "private List<RoamingPartner> readRoamingPartnerList(Parcel in)", "private static void writeProtoPortMap(Parcel dest, Map<Integer, String> protoPortMap)", "private static void writeRoamingPartnerList(Parcel dest, int flags,", "public RoamingPartner() }", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object thatObject)", "public boolean validate()", "public RoamingPartner createFromParcel(Parcel in)", "public RoamingPartner[] newArray(int size)"], "prime_var_dic": {"PerProviderSubscription": 1, "roaming": 1, "Creator": 1}}, {"idx": 23216, "status": "update", "global_index": 15253, "project_name": "android_", "written_on": "2014-06-10 12:04:33", "tufano_target": "public void METHOD_1 ( ) { assertTrue ( STRING_4 , VAR_1 . METHOD_2 ( ) > 0 ) ; assertTrue ( STRING_5 , VAR_1 . METHOD_3 ( ) >= VAR_1 . METHOD_2 ( ) ) ; assertTrue ( STRING_6 , VAR_1 . METHOD_4 ( ) >= VAR_1 . METHOD_3 ( ) ) ; }", "comment": "These assert messages are pretty unhelpful. If you don't want to lose the messages consider \"freeMemory was negative\" \"freeMomory > totalMemory\" and \"totalMemory > maxMemory\"", "tokenized_comment": ["These", "<|s|>", "assert", "<|s|>", "messages", "<|s|>", "are", "<|s|>", "pretty", "<|s|>", "unhelpful", ".", "<|s|>", "If", "<|s|>", "you", "<|s|>", "don", "'", "t", "<|s|>", "want", "<|s|>", "to", "<|s|>", "lose", "<|s|>", "the", "<|s|>", "messages", "<|s|>", "consider", "<|s|>", "\"", "free", "Memory", "<|s|>", "was", "<|s|>", "negative", "\"", "<|s|>", "\"", "free", "Momory", "<|s|>", ">", "<|s|>", "total", "Memory", "\"", "<|s|>", "and", "<|s|>", "\"", "total", "Memory", "<|s|>", ">", "<|s|>", "max", "Memory", "\""], "tufano_code": "public void METHOD_1 ( ) { assertTrue ( STRING_1 , VAR_1 . METHOD_2 ( ) > 0 ) ; assertTrue ( STRING_2 , VAR_1 . METHOD_3 ( ) >= VAR_1 . METHOD_2 ( ) ) ; assertTrue ( STRING_3 , VAR_1 . METHOD_4 ( ) >= VAR_1 . METHOD_3 ( ) ) ; }", "our_target": "        assertTrue(\"freeMemory <= 0\", r.freeMemory() > 0);\n        assertTrue(\"totalMemory() < freeMemory()\", r.totalMemory() >= r.freeMemory());\n        assertTrue(\"maxMemory() < totalMemory()\", r.maxMemory() >= r.totalMemory());\n", "our_code": "    public void test_memory() {\n<|startfocus|>\n        assertTrue(\"freeMemory returned a nonsense value\", r.freeMemory() > 0);\n        assertTrue(\"totalMemory() or freeMemory() returned a nonsense value\",\n                r.totalMemory() >= r.freeMemory());\n        assertTrue(\"maxMemory() or totalMemory() returned a nonsense value\",\n                r.maxMemory() >= r.totalMemory());\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "memory", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "assert", "True", "(", "\"", "free", "Memory", "<|s|>", "returned", "<|s|>", "a", "<|s|>", "nonsense", "<|s|>", "value", "\"", ",", "<|s|>", "r", ".", "free", "Memory", "(", ")", "<|s|>", ">", "<|s|>", "0", ");", "<|nl|>", "<|8-s|>", "assert", "True", "(", "\"", "total", "Memory", "(", ")", "<|s|>", "or", "<|s|>", "free", "Memory", "(", ")", "<|s|>", "returned", "<|s|>", "a", "<|s|>", "nonsense", "<|s|>", "value", "\"", ",", "<|nl|>", "<|16-s|>", "r", ".", "total", "Memory", "(", ")", "<|s|>", ">=", "<|s|>", "r", ".", "free", "Memory", "(", ")", ");", "<|nl|>", "<|8-s|>", "assert", "True", "(", "\"", "max", "Memory", "(", ")", "<|s|>", "or", "<|s|>", "total", "Memory", "(", ")", "<|s|>", "returned", "<|s|>", "a", "<|s|>", "nonsense", "<|s|>", "value", "\"", ",", "<|nl|>", "<|16-s|>", "r", ".", "max", "Memory", "(", ")", "<|s|>", ">=", "<|s|>", "r", ".", "total", "Memory", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 143, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2028", "comment_id": "3fb70c4e_b01318be", "class_list": ["RuntimeTest", "HasFinalizer"], "func_list": ["protected void finalize()", "protected RuntimeTest createInstance()", "public void test_exitI()", "public void test_exec()", "public void test_gc()", "public void test_getRuntime()", "public void test_runFinalization()", "public void test_memory()", "public void test_freeMemory()", "public RuntimeTest()", "protected void finalize()"], "prime_var_dic": {}}, {"idx": 94963, "status": "update", "global_index": 19947, "project_name": "android_", "written_on": "2012-09-19 01:51:06", "tufano_target": "public void METHOD_1 ( TYPE_6 file ) { if ( VAR_1 == null || file == null ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . data = new TYPE_2 [ ] { VAR_1 . METHOD_2 ( ) } ; try { VAR_2 . METHOD_3 ( path , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { TYPE_4 . METHOD_4 ( METHOD_5 ( ) , STRING_1 , STRING_2 , new TYPE_5 ( VAR_5 , VAR_6 , VAR_4 . toString ( ) ) ) ; } }", "comment": "I think it's better to use File instead of Strings when passing paths around. (File is just a poorly named Path class.)", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "it", "'", "s", "<|s|>", "better", "<|s|>", "to", "<|s|>", "use", "<|s|>", "File", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "Strings", "<|s|>", "when", "<|s|>", "passing", "<|s|>", "paths", "<|s|>", "around", ".", "<|s|>", "(", "File", "<|s|>", "is", "<|s|>", "just", "<|s|>", "a", "<|s|>", "poorly", "<|s|>", "named", "<|s|>", "Path", "<|s|>", "class", ".", ")"], "tufano_code": "public void METHOD_1 ( String path ) { if ( VAR_1 == null || path == null ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . data = new TYPE_2 [ ] { VAR_1 . METHOD_2 ( ) } ; try { VAR_2 . METHOD_3 ( path , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { TYPE_4 . METHOD_4 ( METHOD_5 ( ) , STRING_1 , STRING_2 , new TYPE_5 ( VAR_5 , VAR_6 , VAR_4 . toString ( ) ) ) ; } }", "our_target": "    public void exportImageTo(File file) {\n        if (mImage == null || file == null) {\n", "our_code": "<|startfocus|>\n    public void exportImageTo(String path) {\n        if (mImage == null || path == null) {\n<|endfocus|>\n            return;\n        }\n\n        ImageLoader imageLoader = new ImageLoader();\n        imageLoader.data = new ImageData[] { mImage.getImageData() };\n\n        try {\n            imageLoader.save(path, SWT.IMAGE_PNG);\n        } catch (Exception e) {\n            ErrorDialog.openError(getShell(), \"Save Image\", \"Error saving image\",\n                    new Status(Status.ERROR, GlTracePlugin.PLUGIN_ID, e.toString()));\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "export", "Image", "To", "(", "String", "<|s|>", "path", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Image", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "path", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "Image", "Loader", "<|s|>", "image", "Loader", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Image", "Loader", "(", ");", "<|nl|>", "<|8-s|>", "image", "Loader", ".", "data", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Image", "Data", "[", "]", "<|s|>", "{", "<|s|>", "m", "Image", ".", "get", "Image", "Data", "(", ")", "<|s|>", "};", "<|nl|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "image", "Loader", ".", "save", "(", "path", ",", "<|s|>", "SWT", ".", "IMAGE", "_", "PNG", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Error", "Dialog", ".", "open", "Error", "(", "get", "Shell", "(", ")", ",", "<|s|>", "\"", "Save", "<|s|>", "Image", "\"", ",", "<|s|>", "\"", "Error", "<|s|>", "saving", "<|s|>", "image", "\"", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "new", "<|s|>", "Status", "(", "Status", ".", "ERROR", ",", "<|s|>", "Gl", "Trace", "Plugin", ".", "PLUGIN", "_", "ID", ",", "<|s|>", "e", ".", "to", "String", "(", ")", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 233, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1942", "comment_id": "AAAJP3%2F%2F%2Fjw%3D", "class_list": ["ImageCanvas"], "func_list": ["public ImageCanvas(Composite parent)", "public void widgetSelected(SelectionEvent e)", "addListener(SWT.Resize,  new Listener()", "public void handleEvent(Event e)", "public void setFitToCanvas(boolean en)", "public void setImage(Image image)", "private void updateScrollBars()", "private void setScrollBarPageIncrements(Rectangle clientArea)", "private void setScrollBarIncrements()", "private void scrollHorizontally()", "private void scrollVertically()", "private void paintCanvas(GC gc)", "private void drawBorder(GC gc, int x, int y, int width, int height)", "public void dispose()", "public void exportImageTo(String path)"], "prime_var_dic": {"int": 1}}, {"idx": 66548, "status": "update", "global_index": 3465, "project_name": "android_", "written_on": "2017-01-17 00:09:00", "tufano_target": "private void METHOD_9 ( ) { boolean VAR_8 = TYPE_3 . METHOD_10 ( METHOD_5 ( ) ) ; if ( VAR_8 ) { TYPE_4 . METHOD_7 ( VAR_4 this , VAR_5 , VAR_6 ) . show ( ) ; } }", "comment": "Ditto, currentLegacyVpn to make it clear it will be null for VpnService vpns", "tokenized_comment": ["Ditto", ",", "<|s|>", "current", "Legacy", "Vpn", "<|s|>", "to", "<|s|>", "make", "<|s|>", "it", "<|s|>", "clear", "<|s|>", "it", "<|s|>", "will", "<|s|>", "be", "<|s|>", "null", "<|s|>", "for", "<|s|>", "Vpn", "Service", "<|s|>", "vpns"], "tufano_code": "private void METHOD_1 ( ) { try { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; if ( VAR_1 != null ) { TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_3 , VAR_3 , TYPE_2 . METHOD_3 ( ) ) ; TYPE_4 . METHOD_7 ( VAR_4 this , VAR_5 , VAR_6 ) . show ( ) ; } } catch ( TYPE_5 VAR_7 ) { VAR_7 . METHOD_8 ( ) ; } }", "our_target": "    private void clearLegacyVpnIfEstablished() {\n        boolean isDone = VpnUtils.disconnectLegacyVpn(getApplicationContext());\n        if (isDone) {\n            Toast.makeText(CredentialStorage.this, R.string.vpn_disconnected,\n                    Toast.LENGTH_SHORT).show();\n", "our_code": "<|startfocus|>\n    private void clearVpnIfEstablished() {\n        try {\n            LegacyVpnInfo currentVpn = mConnectivityService.\n                    getLegacyVpnInfo(UserHandle.myUserId());\n            if (currentVpn != null) {\n                VpnUtils.clearLockdownVpn(getApplicationContext());\n                mConnectivityService.prepareVpn(VpnConfig.LEGACY_VPN,\n                        VpnConfig.LEGACY_VPN, UserHandle.myUserId());\n                Toast.makeText(CredentialStorage.this, R.string.vpn_disconnected,\n                        Toast.LENGTH_SHORT).show();\n            }\n        } catch (RemoteException e) {\n            e.printStackTrace();\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "void", "<|s|>", "clear", "Vpn", "If", "Established", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Legacy", "Vpn", "Info", "<|s|>", "current", "Vpn", "<|s|>", "=", "<|s|>", "m", "Connectivity", "Service", ".", "<|nl|>", "<|16-s|>", "<|4-s|>", "get", "Legacy", "Vpn", "Info", "(", "User", "Handle", ".", "my", "User", "Id", "(", ")", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "current", "Vpn", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Vpn", "Utils", ".", "clear", "Lockdown", "Vpn", "(", "get", "Application", "Context", "(", ")", ");", "<|nl|>", "<|16-s|>", "m", "Connectivity", "Service", ".", "prepare", "Vpn", "(", "Vpn", "Config", ".", "LEGACY", "_", "VPN", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "Vpn", "Config", ".", "LEGACY", "_", "VPN", ",", "<|s|>", "User", "Handle", ".", "my", "User", "Id", "(", ")", ");", "<|nl|>", "<|16-s|>", "Toast", ".", "make", "Text", "(", "Credential", "Storage", ".", "this", ",", "<|s|>", "R", ".", "string", ".", "vpn", "_", "disconnected", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "Toast", ".", "LENGTH", "_", "SHORT", ")", ".", "show", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Remote", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "e", ".", "print", "Stack", "Trace", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 382, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4450", "comment_id": "032ee190_5f915ba5", "class_list": ["CredentialStorage", "ResetDialog", "ResetKeyStoreAndKeyChain", "ConfigureKeyGuardDialog", "UnlockDialog"], "func_list": ["protected void onResume()", "private void handleUnlockOrInstall()", "private void ensureKeyGuard()", "private boolean checkKeyGuardQuality()", "private boolean isHardwareBackedKey(byte[] keyData)", "private void installIfAvailable()", "private ResetDialog()", "@Override public void onClick(DialogInterface dialog, int button)", "@Override public void onDismiss(DialogInterface dialog)", "@Override protected Boolean doInBackground(Void... unused)", "@Override protected void onPostExecute(Boolean success)", "private void clearVpnIfEstablished()", "private ConfigureKeyGuardDialog()", "private boolean checkCallerIsCertInstallerOrSelfInProfile()", "private boolean confirmKeyGuard(int requestCode)", "public void onActivityResult(int requestCode, int resultCode, Intent data)", "private UnlockDialog()", "@Override public void afterTextChanged(Editable editable)", "@Override public void beforeTextChanged(CharSequence s, int start, int count, int after)", "@Override public void onTextChanged(CharSequence s,int start, int before, int count)", "@Override protected Boolean doInBackground(Void... unused)", "@Override protected void onPostExecute(Boolean success)", "private void ensureKeyGuard()", "private boolean checkKeyGuardQuality()", "private boolean isHardwareBackedKey(byte[] keyData)", "private void installIfAvailable()", "private ResetDialog()", "@Override public void onClick(DialogInterface dialog, int button)", "@Override public void onDismiss(DialogInterface dialog)"], "prime_var_dic": {}}, {"idx": 56452, "status": "update", "global_index": 13593, "project_name": "android_", "written_on": "2015-01-23 19:38:57", "tufano_target": "private void METHOD_1 ( long [ ] VAR_1 ) { assert ( VAR_1 . length > 0 ) ; TYPE_3 [ ] VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( 0 ) ; }", "comment": "use Guava's:\n\nLongs.asList(contextList).toArray()", "tokenized_comment": ["use", "<|s|>", "Guava", "'", "s", ":", "<|nl|>", "<|nl|>", "Longs", ".", "as", "List", "(", "context", "List", ")", ".", "to", "Array", "(", ")"], "tufano_code": "private void METHOD_1 ( long [ ] VAR_1 ) { assert ( VAR_1 . length > 0 ) ; TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_1 . length ] ; for ( int i = 0 ; i < VAR_1 . length ; ++ i ) { VAR_2 [ i ] = VAR_1 [ i ] ; } TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( 0 ) ; }", "our_target": "    Object[] boxedContextList = Longs.asList(contextList).toArray();\n", "our_code": "  private void updateGfxContextView(@NotNull long[] contextList) {\n    assert (contextList.length > 0);\n<|startfocus|>\n    Long[] boxedContextList = new Long[contextList.length];\n    for (int i = 0; i < contextList.length; ++i) {\n      boxedContextList[i] = contextList[i];\n    }\n<|endfocus|>\n    DefaultComboBoxModel model = new DefaultComboBoxModel(boxedContextList);\n    myGfxContextsView.setModel(model);\n    myGfxContextsView.setSelectedIndex(0);\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "update", "Gfx", "Context", "View", "(", "@", "Not", "Null", "<|s|>", "long", "[", "]", "<|s|>", "context", "List", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "(", "context", "List", ".", "length", "<|s|>", ">", "<|s|>", "0", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Long", "[", "]", "<|s|>", "boxed", "Context", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Long", "[", "context", "List", ".", "length", "];", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "context", "List", ".", "length", ";", "<|s|>", "++", "i", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "boxed", "Context", "List", "[", "i", "]", "<|s|>", "=", "<|s|>", "context", "List", "[", "i", "];", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Default", "Combo", "Box", "Model", "<|s|>", "model", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Default", "Combo", "Box", "Model", "(", "boxed", "Context", "List", ");", "<|nl|>", "<|4-s|>", "my", "Gfx", "Contexts", "View", ".", "set", "Model", "(", "model", ");", "<|nl|>", "<|4-s|>", "my", "Gfx", "Contexts", "View", ".", "set", "Selected", "Index", "(", "0", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 358, "base_patch_number": 20, "changed_patch_number": 21, "code_file_name": "android_176", "comment_id": "4b732f24_d4362ad1", "class_list": ["ContextController"], "func_list": ["public ContextController(@NotNull GfxTraceEditor editor,", "public void customize(JList list, Device value, int index, boolean selected, boolean hasFocus)", "else if (index == -1 && myCurrentDevice == null)", "public Device getCurrentDevice()", "public DeviceId getCurrentDeviceId()", "public Capture getCurrentCapture()", "public CaptureId getCurrentCaptureId()", "public Long getCurrentContext()", "public void initializeOnce()", "public void run()", "public void itemStateChanged(ItemEvent itemEvent)", "public void populateUi(@NotNull long[] contextIds)", "private void updateAvailableDevices(@NotNull DeviceId[] deviceIds, @NotNull List<Device> devices, @Nullable Device previouslySelected)", "private void selectDevice(@NotNull Device selectedDevice)", "private void selectCapture(@NotNull Capture selectedCapture)", "private void setGfxContext(@NotNull final Long contextId)", "private ComboBox getDevicesView()", "private ComboBox getCapturesView()", "private ComboBox getGfxContextsView()", "private void updateDeviceList(@NotNull DeviceId[] deviceIds, @NotNull List<Device> devices)", "private void updateCaptureList(@NotNull CaptureId[] captureIds, @NotNull List<Capture> captures)", "private void updateGfxContextView(@NotNull long[] contextList)", "private void clearGfxContextView()"], "prime_var_dic": {"GfxTraceEditor": 1, "ComboBox": 3, "myCurrentDevice": 1, "myCurrentCapture": 1, "Long": 1}}, {"idx": 30517, "status": "update", "global_index": 7208, "project_name": "android_", "written_on": "2016-03-10 13:30:31", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ; for ( int i = 0 ; i < VAR_2 . length ; ++ i ) { VAR_1 . add ( VAR_2 [ i ] ) ; int VAR_4 = INT_3 + INT_4 * ( i + 1 ) + i ; assertEquals ( VAR_4 , VAR_1 . length ( ) ) ; } assertEquals ( VAR_3 , VAR_1 . toString ( ) ) ; }", "comment": "Comment it accordingly and make it clearer. e.g.\n\nint expectedLength = 4 * (i + 1); // Each entry added is \"xyz\" + \",\"\nexpectedLength += 2; // \"[\" + \"]\"\n\nHere and everywhere else.\nOr it could be more self-describing:\n\nint expectedLength = (3 /* entry length */ + separator.length()) * (i + 1);\nexpectedLength += prefix.length() + suffix.length();", "tokenized_comment": ["Comment", "<|s|>", "it", "<|s|>", "accordingly", "<|s|>", "and", "<|s|>", "make", "<|s|>", "it", "<|s|>", "clearer", ".", "<|s|>", "e", ".", "g", ".", "<|nl|>", "<|nl|>", "int", "<|s|>", "expected", "Length", "<|s|>", "=", "<|s|>", "4", "<|s|>", "*", "<|s|>", "(", "i", "<|s|>", "+", "<|s|>", "1", ");", "<|s|>", "//", "<|s|>", "Each", "<|s|>", "entry", "<|s|>", "added", "<|s|>", "is", "<|s|>", "\"", "xyz", "\"", "<|s|>", "+", "<|s|>", "\"", ",", "\"", "<|nl|>", "expected", "Length", "<|s|>", "+=", "<|s|>", "2", ";", "<|s|>", "//", "<|s|>", "\"", "[", "\"", "<|s|>", "+", "<|s|>", "\"", "]", "\"", "<|nl|>", "<|nl|>", "Here", "<|s|>", "and", "<|s|>", "everywhere", "<|s|>", "else", ".", "<|nl|>", "Or", "<|s|>", "it", "<|s|>", "could", "<|s|>", "be", "<|s|>", "more", "<|s|>", "self", "-", "describing", ":", "<|nl|>", "<|nl|>", "int", "<|s|>", "expected", "Length", "<|s|>", "=", "<|s|>", "(", "3", "<|s|>", "/*", "<|s|>", "entry", "<|s|>", "length", "<|s|>", "*/", "<|s|>", "+", "<|s|>", "separator", ".", "length", "(", ")", ")", "<|s|>", "*", "<|s|>", "(", "i", "<|s|>", "+", "<|s|>", "1", ");", "<|nl|>", "expected", "Length", "<|s|>", "+=", "<|s|>", "prefix", ".", "length", "(", ")", "<|s|>", "+", "<|s|>", "suffix", ".", "length", "(", ");"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ; for ( int i = 0 ; i < VAR_2 . length ; ++ i ) { VAR_1 . add ( VAR_2 [ i ] ) ; assertEquals ( INT_1 * i + INT_2 , VAR_1 . length ( ) ) ; } assertEquals ( VAR_3 , VAR_1 . toString ( ) ) ; }", "our_target": "            int expectedLength = 2 /* prefix and postfix */\n                    + 3 * (i + 1) /* length of elements */\n                    + i /* length of separators, one less than number of elements */;\n            assertEquals(expectedLength, sj.length());\n", "our_code": "    public void testAddString() {\n        StringJoiner sj = new StringJoiner(\",\", \"[\", \"]\");\n\n        for (int i = 0; i < WEEKDAYS.length; ++i) {\n            sj.add(WEEKDAYS[i]);\n<|startfocus|>\n            assertEquals(4 * i + 5, sj.length());\n<|endfocus|>\n        }\n        assertEquals(EXPECTED, sj.toString());\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Add", "String", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "Joiner", "<|s|>", "sj", "<|s|>", "=", "<|s|>", "new", "<|s|>", "String", "Joiner", "(", "\"", ",", "\"", ",", "<|s|>", "\"", "[", "\"", ",", "<|s|>", "\"", "]", "\"", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "WEEKDAYS", ".", "length", ";", "<|s|>", "++", "i", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "sj", ".", "add", "(", "WEEKDAYS", "[", "i", "]", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "assert", "Equals", "(", "4", "<|s|>", "*", "<|s|>", "i", "<|s|>", "+", "<|s|>", "5", ",", "<|s|>", "sj", ".", "length", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "EXPECTED", ",", "<|s|>", "sj", ".", "to", "String", "(", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 50, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3314", "comment_id": "976e6179_0c20f790", "class_list": ["StringJoinerTest"], "func_list": ["public void testConstructorNull()", "public void testAddString()", "public void testAddStringBuilder()", "public void testAddNone()", "public void testAddNull()", "public void testMerge()", "public void testMergeEmpty()", "public void testMergeSelf()", "public void testMergeNull()", "public void testSetEmptyValue()", "public void testSetEmptyValuePopulated()", "public void testSetEmptyValuePopulated2()", "public void testSetEmptyValueEmpty()", "public void testSetEmptyValueNull()"], "prime_var_dic": {"String": 2}}, {"idx": 82578, "status": "update", "global_index": 6921, "project_name": "android_", "written_on": "2016-03-09 13:41:42", "tufano_target": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , String name ) { if ( VAR_1 == VAR_8 ) { return VAR_1 ; } try { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( name , VAR_4 ) ; boolean VAR_5 = METHOD_3 ( VAR_2 ) ; boolean VAR_6 = METHOD_4 ( VAR_2 ) ; if ( VAR_5 || VAR_6 ) { VAR_1 = VAR_6 ; } } catch ( TYPE_3 VAR_7 ) { METHOD_5 ( STRING_1 + name ) ; } return VAR_1 ; }", "comment": "Suggest:\n\n    if (currentPermission == Boolean.TRUE) {\n        return currentPermission;\n    }\n\nor, better, if you make SYSTEM be a Boolean:\n\n    if (currentPermission == SYSTEM) {\n        return currentPermission;\n    }", "tokenized_comment": ["Suggest", ":", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "current", "Permission", "<|s|>", "==", "<|s|>", "Boolean", ".", "TRUE", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "current", "Permission", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "or", ",", "<|s|>", "better", ",", "<|s|>", "if", "<|s|>", "you", "<|s|>", "make", "<|s|>", "SYSTEM", "<|s|>", "be", "<|s|>", "a", "<|s|>", "Boolean", ":", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "current", "Permission", "<|s|>", "==", "<|s|>", "SYSTEM", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "current", "Permission", ";", "<|nl|>", "<|4-s|>", "}"], "tufano_code": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , String name ) { if ( VAR_1 != null && VAR_1 ) { return true ; } try { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( name , VAR_4 ) ; boolean VAR_5 = METHOD_3 ( VAR_2 ) ; boolean VAR_6 = METHOD_4 ( VAR_2 ) ; if ( VAR_5 || VAR_6 ) { VAR_1 = VAR_6 ; } } catch ( TYPE_3 VAR_7 ) { METHOD_5 ( STRING_1 + name ) ; } return VAR_1 ; }", "our_target": "        if (currentPermission == SYSTEM) {\n            return currentPermission;\n", "our_code": "    private Boolean highestPermissionForApp(Boolean currentPermission, String name) {\n<|startfocus|>\n        if (currentPermission != null && currentPermission) {\n            return true;\n<|endfocus|>\n        }\n        try {\n            PackageInfo app = mPackageManager.getPackageInfo(name, GET_PERMISSIONS);\n            boolean isNetwork = hasNetworkPermission(app);\n            boolean isSystem = hasSystemPermission(app);\n            if (isNetwork || isSystem) {\n                currentPermission = isSystem;\n            }\n        } catch (NameNotFoundException e) {\n            // App not found.\n            loge(\"NameNotFoundException \" + name);\n        }\n        return currentPermission;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Boolean", "<|s|>", "highest", "Permission", "For", "App", "(", "Boolean", "<|s|>", "current", "Permission", ",", "<|s|>", "String", "<|s|>", "name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "current", "Permission", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "current", "Permission", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Package", "Info", "<|s|>", "app", "<|s|>", "=", "<|s|>", "m", "Package", "Manager", ".", "get", "Package", "Info", "(", "name", ",", "<|s|>", "GET", "_", "PERMISSIONS", ");", "<|nl|>", "<|12-s|>", "boolean", "<|s|>", "is", "Network", "<|s|>", "=", "<|s|>", "has", "Network", "Permission", "(", "app", ");", "<|nl|>", "<|12-s|>", "boolean", "<|s|>", "is", "System", "<|s|>", "=", "<|s|>", "has", "System", "Permission", "(", "app", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "is", "Network", "<|s|>", "||", "<|s|>", "is", "System", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "current", "Permission", "<|s|>", "=", "<|s|>", "is", "System", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Name", "Not", "Found", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "App", "<|s|>", "not", "<|s|>", "found", ".", "<|nl|>", "<|12-s|>", "loge", "(", "\"", "Name", "Not", "Found", "Exception", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "name", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "current", "Permission", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 231, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4092", "comment_id": "77172dd9_58a3fd78", "class_list": ["to", "PermissionMonitor"], "func_list": ["public PermissionMonitor(Context context, INetworkManagementService netd)", "public void onReceive(Context context, Intent intent)", "private boolean hasPermission(PackageInfo app, String permission)", "private boolean hasNetworkPermission(PackageInfo app)", "private boolean hasSystemPermission(PackageInfo app)", "private int[] toIntArray(List<Integer> list)", "private void update(Set<Integer> users, Map<Integer, Boolean> apps, boolean add)", "private Boolean highestPermissionForApp(Boolean currentPermission, String name)", "private static void log(String s)", "private static void loge(String s)", "public PermissionMonitor(Context context, INetworkManagementService netd)", "public void onReceive(Context context, Intent intent)", "private boolean hasPermission(PackageInfo app, String permission)", "private boolean hasNetworkPermission(PackageInfo app)", "private boolean hasSystemPermission(PackageInfo app)", "private int[] toIntArray(List<Integer> list)", "private void update(Set<Integer> users, Map<Integer, Boolean> apps, boolean add)", "private Boolean highestPermissionForApp(Boolean currentPermission, String name)", "private static void log(String s)", "private static void loge(String s)"], "prime_var_dic": {"String": 1, "boolean": 3, "mContext": 1, "mPackageManager": 1, "mUserManager": 1, "mNetd": 1, "mIntentReceiver": 1, "IDs": 1}}, {"idx": 8362, "status": "update", "global_index": 15096, "project_name": "android_", "written_on": "2014-05-30 13:59:11", "tufano_target": "private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_1 . METHOD_7 ( ) ) ; VAR_2 . METHOD_4 ( new TYPE_4 ( VAR_1 ) ) ; VAR_2 . METHOD_5 ( ) . show ( new TYPE_5 ( this , new TYPE_6 ( 0 , this . METHOD_6 ( ) - 1 ) ) ) ; }", "comment": "The panel is not focusable, so passing it as the preferred focus component makes no sense. Most likely the preferred focus component should be the list inside the panel.\n\nAlso, please don't use the \"my\" prefix for local variables.", "tokenized_comment": ["The", "<|s|>", "panel", "<|s|>", "is", "<|s|>", "not", "<|s|>", "focusable", ",", "<|s|>", "so", "<|s|>", "passing", "<|s|>", "it", "<|s|>", "as", "<|s|>", "the", "<|s|>", "preferred", "<|s|>", "focus", "<|s|>", "component", "<|s|>", "makes", "<|s|>", "no", "<|s|>", "sense", ".", "<|s|>", "Most", "<|s|>", "likely", "<|s|>", "the", "<|s|>", "preferred", "<|s|>", "focus", "<|s|>", "component", "<|s|>", "should", "<|s|>", "be", "<|s|>", "the", "<|s|>", "list", "<|s|>", "inside", "<|s|>", "the", "<|s|>", "panel", ".", "<|nl|>", "<|nl|>", "Also", ",", "<|s|>", "please", "<|s|>", "don", "'", "t", "<|s|>", "use", "<|s|>", "the", "<|s|>", "\"", "my", "\"", "<|s|>", "prefix", "<|s|>", "for", "<|s|>", "local", "<|s|>", "variables", "."], "tufano_code": "private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_1 ) ; VAR_2 . METHOD_4 ( new TYPE_4 ( VAR_1 ) ) ; VAR_2 . METHOD_5 ( ) . show ( new TYPE_5 ( this , new TYPE_6 ( 0 , this . METHOD_6 ( ) - 1 ) ) ) ; }", "our_target": "    GoogleLoginUsersPanel usersPanel = new GoogleLoginUsersPanel();\n    ComponentPopupBuilder popup = JBPopupFactory.getInstance().createComponentPopupBuilder(usersPanel, usersPanel.getList());\n", "our_code": "  private void showPopup() {\n<|startfocus|>\n    usersPanel = new GoogleLoginUsersPanel();\n    ComponentPopupBuilder myPopup = JBPopupFactory.getInstance().createComponentPopupBuilder(usersPanel, usersPanel);\n<|endfocus|>\n\n    // Add custom canClose() check to leave popup open when verification\n    // dialog is opened.\n    myPopup.setCancelCallback(new MyClosePopupChecker(usersPanel));\n    myPopup.createPopup().show(new RelativePoint(this, new Point(0, this.getHeight() - 1)));\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "show", "Popup", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "users", "Panel", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Google", "Login", "Users", "Panel", "(", ");", "<|nl|>", "<|4-s|>", "Component", "Popup", "Builder", "<|s|>", "my", "Popup", "<|s|>", "=", "<|s|>", "JBPopup", "Factory", ".", "get", "Instance", "(", ")", ".", "create", "Component", "Popup", "Builder", "(", "users", "Panel", ",", "<|s|>", "users", "Panel", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Add", "<|s|>", "custom", "<|s|>", "can", "Close", "(", ")", "<|s|>", "check", "<|s|>", "to", "<|s|>", "leave", "<|s|>", "popup", "<|s|>", "open", "<|s|>", "when", "<|s|>", "verification", "<|nl|>", "<|4-s|>", "//", "<|s|>", "dialog", "<|s|>", "is", "<|s|>", "opened", ".", "<|nl|>", "<|4-s|>", "my", "Popup", ".", "set", "Cancel", "Callback", "(", "new", "<|s|>", "My", "Close", "Popup", "Checker", "(", "users", "Panel", ")", ");", "<|nl|>", "<|4-s|>", "my", "Popup", ".", "create", "Popup", "(", ")", ".", "show", "(", "new", "<|s|>", "Relative", "Point", "(", "this", ",", "<|s|>", "new", "<|s|>", "Point", "(", "0", ",", "<|s|>", "this", ".", "get", "Height", "(", ")", "<|s|>", "-", "<|s|>", "1", ")", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 76, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_2959", "comment_id": "bfe21c19_8f40396a", "class_list": ["GoogleLoginToolbarButton", "MyClosePopupChecker"], "func_list": ["public GoogleLoginToolbarButton(Presentation presentation)", "public void actionPerformed(final ActionEvent e)", "private void showPopup()", "public void updateUi()", "public  MyClosePopupChecker(GoogleLoginUsersPanel loginUsersPanel)", "public Boolean compute()", "public void updateUi()"], "prime_var_dic": {}}, {"idx": 161, "status": "update", "global_index": 21011, "project_name": "android_", "written_on": "2013-08-27 23:01:58", "tufano_target": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ! TYPE_3 . METHOD_2 ( VAR_2 ) || TYPE_5 . getBoolean ( VAR_3 ) ) { return true ; } switch ( VAR_1 ) { case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : default : return false ; } }", "comment": "The System.getProperty() != null is redundant since Boolean.getBoolean takes care of that.", "tokenized_comment": ["The", "<|s|>", "System", ".", "get", "Property", "(", ")", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "is", "<|s|>", "redundant", "<|s|>", "since", "<|s|>", "Boolean", ".", "get", "Boolean", "<|s|>", "takes", "<|s|>", "care", "<|s|>", "of", "<|s|>", "that", "."], "tufano_code": "public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ! TYPE_3 . METHOD_2 ( VAR_2 ) || ( TYPE_4 . METHOD_3 ( VAR_3 ) != null && TYPE_5 . getBoolean ( VAR_3 ) ) ) { return true ; } switch ( VAR_1 ) { case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : default : return false ; } }", "our_target": "    if (!Projects.isGradleProject(project) || Boolean.getBoolean(SHOW_ALL_CONFIGURABLES)) {\n", "our_code": "  public boolean isAvailable(@NotNull ConfigurableId setting, @NotNull Project project) {\n<|startfocus|>\n    if (!Projects.isGradleProject(project) ||\n        (System.getProperty(SHOW_ALL_CONFIGURABLES) != null && Boolean.getBoolean(SHOW_ALL_CONFIGURABLES))) {\n<|endfocus|>\n      return true;\n    }\n    switch(setting) {\n      case JDK_LIST:\n      case MODULES:\n      case PROJECT:\n      case GLOBAL_LIBRARIES:\n      case ARTIFACTS:\n      case FACETS:\n      case PROJECT_LIBRARIES:\n      default:\n        return false;\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "is", "Available", "(", "@", "Not", "Null", "<|s|>", "Configurable", "Id", "<|s|>", "setting", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "Projects", ".", "is", "Gradle", "Project", "(", "project", ")", "<|s|>", "||", "<|nl|>", "<|8-s|>", "(", "System", ".", "get", "Property", "(", "SHOW", "_", "ALL", "_", "CONFIGURABLES", ")", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "Boolean", ".", "get", "Boolean", "(", "SHOW", "_", "ALL", "_", "CONFIGURABLES", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "switch", "(", "setting", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "JDK", "_", "LIST", ":", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "MODULES", ":", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "PROJECT", ":", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "GLOBAL", "_", "LIBRARIES", ":", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "ARTIFACTS", ":", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "FACETS", ":", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "PROJECT", "_", "LIBRARIES", ":", "<|nl|>", "<|4-s|>", "<|2-s|>", "default", ":", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 29, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_501", "comment_id": "4d4ec857_f15e684b", "class_list": ["AndroidStudioConfigurableFilter"], "func_list": ["public boolean isAvailable(@NotNull ConfigurableId setting, @NotNull Project project)"], "prime_var_dic": {"String": 1}}, {"idx": 23536, "status": "update", "global_index": 13234, "project_name": "android_", "written_on": "2014-11-05 17:27:44", "tufano_target": "public void METHOD_1 ( ) { String msg = STRING_10 + VAR_2 + STRING_11 + VAR_3 + STRING_8 ; TYPE_1 . METHOD_2 ( String . format ( msg , VAR_2 , VAR_3 ) , STRING_9 ) ; }", "comment": "instead \\n after the plural form in case the list is long? (to avoid wide dialog)", "tokenized_comment": ["instead", "<|s|>", "\\", "n", "<|s|>", "after", "<|s|>", "the", "<|s|>", "plural", "<|s|>", "form", "<|s|>", "in", "<|s|>", "case", "<|s|>", "the", "<|s|>", "list", "<|s|>", "is", "<|s|>", "long", "?", "<|s|>", "(", "to", "<|s|>", "avoid", "<|s|>", "wide", "<|s|>", "dialog", ")"], "tufano_code": "public void METHOD_1 ( ) { boolean VAR_1 = VAR_2 . size ( ) == 1 ; String msg = STRING_1 + ( VAR_1 ? STRING_2 : STRING_3 ) + STRING_4 + ( VAR_1 ? STRING_5 : STRING_6 ) + ( VAR_1 ? VAR_2 . get ( 0 ) : VAR_2 ) + STRING_7 + VAR_3 + STRING_8 ; TYPE_1 . METHOD_2 ( String . format ( msg , VAR_2 , VAR_3 ) , STRING_9 ) ; }", "our_target": "            String msg = \"The local.properties file(s) in the project(s)\\n \" + projectsToUpdateNames +\n                         \"\\nwill be modified with the path of Android Studio's default Android Studio:\\n'\" + sdkHomePath + \"'\";\n", "our_code": "          public void run() {\n<|startfocus|>\n            boolean singleProject = projectsToUpdateNames.size() == 1;\n            String msg = \"The local.properties \" + (singleProject ? \"file\" : \"files\") + \" in the \" +\n                         (singleProject ? \"project \" : \"projects \") +\n                         (singleProject ? projectsToUpdateNames.get(0) : projectsToUpdateNames) +\n                         \" will be modified with the path of Android Studio's default Android Studio:\\n'\" + sdkHomePath + \"'\";\n<|endfocus|>\n            Messages.showErrorDialog(String.format(msg, projectsToUpdateNames, sdkHomePath), \"Sync Android SDKs\");\n          }", "tokenized_code": ["<|8-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "boolean", "<|s|>", "single", "Project", "<|s|>", "=", "<|s|>", "projects", "To", "Update", "Names", ".", "size", "(", ")", "<|s|>", "==", "<|s|>", "1", ";", "<|nl|>", "<|12-s|>", "String", "<|s|>", "msg", "<|s|>", "=", "<|s|>", "\"", "The", "<|s|>", "local", ".", "properties", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "(", "single", "Project", "<|s|>", "?", "<|s|>", "\"", "file", "\"", "<|s|>", ":", "<|s|>", "\"", "files", "\"", ")", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "in", "<|s|>", "the", "<|s|>", "\"", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|s|>", "(", "single", "Project", "<|s|>", "?", "<|s|>", "\"", "project", "<|s|>", "\"", "<|s|>", ":", "<|s|>", "\"", "projects", "<|s|>", "\"", ")", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|s|>", "(", "single", "Project", "<|s|>", "?", "<|s|>", "projects", "To", "Update", "Names", ".", "get", "(", "0", ")", "<|s|>", ":", "<|s|>", "projects", "To", "Update", "Names", ")", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "<|s|>", "\"", "<|s|>", "will", "<|s|>", "be", "<|s|>", "modified", "<|s|>", "with", "<|s|>", "the", "<|s|>", "path", "<|s|>", "of", "<|s|>", "Android", "<|s|>", "Studio", "'", "s", "<|s|>", "default", "<|s|>", "Android", "<|s|>", "Studio", ":\\", "n", "'", "\"", "<|s|>", "+", "<|s|>", "sdk", "Home", "Path", "<|s|>", "+", "<|s|>", "\"", "'", "\"", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "Messages", ".", "show", "Error", "Dialog", "(", "String", ".", "format", "(", "msg", ",", "<|s|>", "projects", "To", "Update", "Names", ",", "<|s|>", "sdk", "Home", "Path", ")", ",", "<|s|>", "\"", "Sync", "<|s|>", "Android", "<|s|>", "SDKs", "\"", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "}"], "base_code_line_number": 347, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_555", "comment_id": "f533de7c_7c0a7990", "class_list": ["DefaultSdks"], "func_list": ["private DefaultSdks()", "public static File getDefaultAndroidHome()", "public static File getDefaultJavaHome()", "private static Sdk getFirstAndroidSdk()", "public static void setDefaultJavaHome(@NotNull File path)", "public static List<Sdk> setDefaultAndroidHome(@NotNull File path, @Nullable Project currentProject)", "private static void setJdkPath(@NotNull Sdk sdk, @NotNull File path)", "private static void updateAllSdks(@NotNull Sdk jdk)", "public static boolean isValidAndroidSdkPath(@NotNull File path)", "public static List<Sdk> createAndroidSdksForAllTargets(@NotNull File androidHome)", "private static boolean doesDefaultAndroidSdkExist(@NotNull IAndroidTarget target)", "private static IAndroidTarget getTarget(@NotNull Sdk sdk)", "private static void updateLocalPropertiesAndSync(@NotNull final File sdkHomePath, @Nullable Project currentProject)", "public void run()", "private static void logAndShowErrorWhenUpdatingLocalProperties(@NotNull Project project,", "private static String getMessage(@NotNull Exception e)", "private static File resolvePath(@NotNull File path)", "public static Sdk getDefaultJdk()", "public static List<Sdk> getEligibleAndroidSdks()", "private static Sdk createJdk(@NotNull VirtualFile homeDirectory)"], "prime_var_dic": {"DefaultSdks": 1}}, {"idx": 30903, "status": "update", "global_index": 14183, "project_name": "android_", "written_on": "2014-01-18 22:53:43", "tufano_target": "private TYPE_1 < TYPE_2 > METHOD_4 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 < TYPE_2 > VAR_2 = new TYPE_3 < TYPE_2 > ( VAR_1 . size ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { if ( ! VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR_2 . add ( VAR_3 ) ; } return VAR_2 ; }", "comment": "You might want to specify the initial size.\n\n\"new ArrayList<InterfaceAddress>()\" creates an array with an initial capacity of 10 items, which is wasteful since we'll typically only have 2 (IPv4 + IPv6 link-local) or 4 (IPv4 + IPv6 link-local+global + privacy) addresses.\n\nMaybe ... \"new ArrayList<InterfaceAddress>(addresses.size())\"", "tokenized_comment": ["You", "<|s|>", "might", "<|s|>", "want", "<|s|>", "to", "<|s|>", "specify", "<|s|>", "the", "<|s|>", "initial", "<|s|>", "size", ".", "<|nl|>", "<|nl|>", "\"", "new", "<|s|>", "Array", "List", "<", "Interface", "Address", ">", "(", ")", "\"", "<|s|>", "creates", "<|s|>", "an", "<|s|>", "array", "<|s|>", "with", "<|s|>", "an", "<|s|>", "initial", "<|s|>", "capacity", "<|s|>", "of", "<|s|>", "10", "<|s|>", "items", ",", "<|s|>", "which", "<|s|>", "is", "<|s|>", "wasteful", "<|s|>", "since", "<|s|>", "we", "'", "ll", "<|s|>", "typically", "<|s|>", "only", "<|s|>", "have", "<|s|>", "2", "<|s|>", "(", "IPv", "4", "<|s|>", "+", "<|s|>", "IPv", "6", "<|s|>", "link", "-", "local", ")", "<|s|>", "or", "<|s|>", "4", "<|s|>", "(", "IPv", "4", "<|s|>", "+", "<|s|>", "IPv", "6", "<|s|>", "link", "-", "local", "+", "global", "<|s|>", "+", "<|s|>", "privacy", ")", "<|s|>", "addresses", ".", "<|nl|>", "<|nl|>", "Maybe", "<|s|>", "...", "<|s|>", "\"", "new", "<|s|>", "Array", "List", "<", "Interface", "Address", ">", "(", "addresses", ".", "size", "(", ")", ")", "\""], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 < TYPE_2 > VAR_2 = new TYPE_3 < TYPE_2 > ( ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { if ( ! VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR_2 . add ( VAR_3 ) ; } return VAR_2 ; }", "our_target": "    private List<InterfaceAddress> excludeLinkLocal(List<InterfaceAddress> addresses) {\n        ArrayList<InterfaceAddress> filtered = new ArrayList<InterfaceAddress>(addresses.size());\n", "our_code": "<|startfocus|>\n    private List<InterfaceAddress> noLinkLocal(List<InterfaceAddress> addresses) {\n        ArrayList<InterfaceAddress> filtered = new ArrayList<InterfaceAddress>();\n<|endfocus|>\n        for (InterfaceAddress ia : addresses) {\n            if (!ia.getAddress().isLinkLocalAddress())\n                filtered.add(ia);\n        }\n        return filtered;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "List", "<", "Interface", "Address", ">", "<|s|>", "no", "Link", "Local", "(", "List", "<", "Interface", "Address", ">", "<|s|>", "addresses", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Array", "List", "<", "Interface", "Address", ">", "<|s|>", "filtered", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "Interface", "Address", ">", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "Interface", "Address", "<|s|>", "ia", "<|s|>", ":", "<|s|>", "addresses", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "ia", ".", "get", "Address", "(", ")", ".", "is", "Link", "Local", "Address", "(", ")", ")", "<|nl|>", "<|16-s|>", "filtered", ".", "add", "(", "ia", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "filtered", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1028, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4158", "comment_id": "723ff6b5_4403cea0", "class_list": ["NetworkManagementService", "NetdResponseCode", "IdleTimerParams", "NetdCallbackReceiver", "state"], "func_list": ["private NetworkManagementService(Context context, String socket)", "public void systemReady()", "public void registerObserver(INetworkManagementEventObserver observer)", "public void unregisterObserver(INetworkManagementEventObserver observer)", "private void notifyInterfaceStatusChanged(String iface, boolean up)", "private void notifyInterfaceLinkStateChanged(String iface, boolean up)", "private void notifyInterfaceAdded(String iface)", "private void notifyInterfaceRemoved(String iface)", "private void notifyLimitReached(String limitName, String iface)", "private void notifyInterfaceClassActivity(String label, boolean active)", "private void prepareNativeDaemon()", "private void notifyAddressUpdated(String iface, LinkAddress address)", "private void notifyAddressRemoved(String iface, LinkAddress address)", "private void notifyInterfaceDnsServerInfo(String iface, long lifetime, String[] addresses)", "public void onDaemonConnected()", "public void run()", "public boolean onEvent(int code, String raw, String[] cooked)", "public String[] listInterfaces()", "public InterfaceConfiguration getInterfaceConfig(String iface)", "public void setInterfaceConfig(String iface, InterfaceConfiguration cfg)", "public void setInterfaceDown(String iface)", "public void setInterfaceUp(String iface)", "public void setInterfaceIpv6PrivacyExtensions(String iface, boolean enable)", "public void clearInterfaceAddresses(String iface)", "public void enableIpv6(String iface)", "public void disableIpv6(String iface)", "public void addRoute(String interfaceName, RouteInfo route)", "public void removeRoute(String interfaceName, RouteInfo route)", "public void addSecondaryRoute(String interfaceName, RouteInfo route)", "public void removeSecondaryRoute(String interfaceName, RouteInfo route)", "private void modifyRoute(String interfaceName, String action, RouteInfo route, String type)", "private ArrayList<String> readRouteList(String filename)", "public RouteInfo[] getRoutes(String interfaceName)", "public void setMtu(String iface, int mtu)", "public void shutdown()", "public void setIpForwardingEnabled(boolean enable)", "public void startTethering(String[] dhcpRange)", "public void stopTethering()", "public boolean isTetheringStarted()", "public void tetherInterface(String iface)", "public void untetherInterface(String iface)", "public String[] listTetheredInterfaces()", "public void setDnsForwarders(String[] dns)", "public String[] getDnsForwarders()", "private List<InterfaceAddress> noLinkLocal(List<InterfaceAddress> addresses)", "public void enableNat(String internalInterface, String externalInterface)", "public void disableNat(String internalInterface, String externalInterface)", "public String[] listTtys()", "public void attachPppd(", "public void detachPppd(String tty)", "public void startAccessPoint(", "private static String getSecurityType(WifiConfiguration wifiConfig)", "public void wifiFirmwareReload(String wlanIface, String mode)", "public void stopAccessPoint(String wlanIface)", "public void setAccessPoint(WifiConfiguration wifiConfig, String wlanIface)", "public void addIdleTimer(String iface, int timeout, String label)", "public void removeIdleTimer(String iface)", "public NetworkStats getNetworkStatsSummaryDev()", "public NetworkStats getNetworkStatsSummaryXt()", "public NetworkStats getNetworkStatsDetail()", "public void setInterfaceQuota(String iface, long quotaBytes)", "public void removeInterfaceQuota(String iface)", "public void setInterfaceAlert(String iface, long alertBytes)", "public void removeInterfaceAlert(String iface)", "public void setGlobalAlert(long alertBytes)", "public void setUidNetworkRules(int uid, boolean rejectOnQuotaInterfaces)", "public boolean isBandwidthControlEnabled()", "public NetworkStats getNetworkStatsUidDetail(int uid)", "public NetworkStats getNetworkStatsTethering()", "public void setDefaultInterfaceForDns(String iface)", "public void setDnsServersForInterface(String iface, String[] servers, String domains)", "public void setUidRangeRoute(String iface, int uid_start, int uid_end)", "public void clearUidRangeRoute(String iface, int uid_start, int uid_end)", "public void setMarkedForwarding(String iface)", "public void clearMarkedForwarding(String iface)", "public int getMarkForUid(int uid)", "public int getMarkForProtect()", "public void setMarkedForwardingRoute(String iface, RouteInfo route)", "public void clearMarkedForwardingRoute(String iface, RouteInfo route)", "public void setHostExemption(LinkAddress host)", "public void clearHostExemption(LinkAddress host)", "public void setDnsInterfaceForUidRange(String iface, int uid_start, int uid_end)", "public void clearDnsInterfaceForUidRange(int uid_start, int uid_end)", "public void clearDnsInterfaceMaps()", "public void flushDefaultDnsCache()", "public void flushInterfaceDnsCache(String iface)", "public void setFirewallEnabled(boolean enabled)", "public boolean isFirewallEnabled()", "public void setFirewallInterfaceRule(String iface, boolean allow)", "public void setFirewallEgressSourceRule(String addr, boolean allow)", "public void setFirewallEgressDestRule(String addr, int port, boolean allow)", "public void setFirewallUidRule(int uid, boolean allow)", "private static void enforceSystemUid()", "public boolean isClatdStarted()", "public void monitor()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private NetworkManagementService(Context context, String socket)", "public void systemReady()", "public void registerObserver(INetworkManagementEventObserver observer)", "public void unregisterObserver(INetworkManagementEventObserver observer)", "private void notifyInterfaceStatusChanged(String iface, boolean up)", "private void notifyInterfaceLinkStateChanged(String iface, boolean up)", "private void notifyInterfaceAdded(String iface)", "private void notifyInterfaceRemoved(String iface)", "private void notifyLimitReached(String limitName, String iface)", "private void notifyInterfaceClassActivity(String label, boolean active)", "private void prepareNativeDaemon()", "private void notifyAddressUpdated(String iface, LinkAddress address)", "private void notifyAddressRemoved(String iface, LinkAddress address)", "private void notifyInterfaceDnsServerInfo(String iface, long lifetime, String[] addresses)", "public void onDaemonConnected()", "public void run()", "public boolean onEvent(int code, String raw, String[] cooked)", "public String[] listInterfaces()", "public InterfaceConfiguration getInterfaceConfig(String iface)", "public void setInterfaceConfig(String iface, InterfaceConfiguration cfg)", "public void setInterfaceDown(String iface)", "public void setInterfaceUp(String iface)", "public void setInterfaceIpv6PrivacyExtensions(String iface, boolean enable)", "public void clearInterfaceAddresses(String iface)", "public void enableIpv6(String iface)", "public void disableIpv6(String iface)", "public void addRoute(String interfaceName, RouteInfo route)", "public void removeRoute(String interfaceName, RouteInfo route)", "public void addSecondaryRoute(String interfaceName, RouteInfo route)", "public void removeSecondaryRoute(String interfaceName, RouteInfo route)", "private void modifyRoute(String interfaceName, String action, RouteInfo route, String type)", "private ArrayList<String> readRouteList(String filename)", "public RouteInfo[] getRoutes(String interfaceName)", "public void setMtu(String iface, int mtu)", "public void shutdown()", "public void setIpForwardingEnabled(boolean enable)", "public void startTethering(String[] dhcpRange)", "public void stopTethering()", "public boolean isTetheringStarted()", "public void tetherInterface(String iface)", "public void untetherInterface(String iface)", "public String[] listTetheredInterfaces()", "public void setDnsForwarders(String[] dns)", "public String[] getDnsForwarders()", "private List<InterfaceAddress> noLinkLocal(List<InterfaceAddress> addresses)", "public void enableNat(String internalInterface, String externalInterface)", "public void disableNat(String internalInterface, String externalInterface)", "public String[] listTtys()", "public void attachPppd(", "public void detachPppd(String tty)", "public void startAccessPoint(", "private static String getSecurityType(WifiConfiguration wifiConfig)", "public void wifiFirmwareReload(String wlanIface, String mode)", "public void stopAccessPoint(String wlanIface)", "public void setAccessPoint(WifiConfiguration wifiConfig, String wlanIface)", "public void addIdleTimer(String iface, int timeout, String label)", "public void removeIdleTimer(String iface)", "public NetworkStats getNetworkStatsSummaryDev()", "public NetworkStats getNetworkStatsSummaryXt()", "public NetworkStats getNetworkStatsDetail()", "public void setInterfaceQuota(String iface, long quotaBytes)", "public void removeInterfaceQuota(String iface)", "public void setInterfaceAlert(String iface, long alertBytes)", "public void removeInterfaceAlert(String iface)", "public void setGlobalAlert(long alertBytes)", "public void setUidNetworkRules(int uid, boolean rejectOnQuotaInterfaces)", "public boolean isBandwidthControlEnabled()", "public NetworkStats getNetworkStatsUidDetail(int uid)", "public NetworkStats getNetworkStatsTethering()", "public void setDefaultInterfaceForDns(String iface)", "public void setDnsServersForInterface(String iface, String[] servers, String domains)", "public void setUidRangeRoute(String iface, int uid_start, int uid_end)", "public void clearUidRangeRoute(String iface, int uid_start, int uid_end)", "public void setMarkedForwarding(String iface)", "public void clearMarkedForwarding(String iface)", "public int getMarkForUid(int uid)", "public int getMarkForProtect()", "public void setMarkedForwardingRoute(String iface, RouteInfo route)", "public void clearMarkedForwardingRoute(String iface, RouteInfo route)", "public void setHostExemption(LinkAddress host)", "public void clearHostExemption(LinkAddress host)", "public void setDnsInterfaceForUidRange(String iface, int uid_start, int uid_end)", "public void clearDnsInterfaceForUidRange(int uid_start, int uid_end)", "public void clearDnsInterfaceMaps()", "public void flushDefaultDnsCache()", "public void flushInterfaceDnsCache(String iface)", "public void setFirewallEnabled(boolean enabled)", "public boolean isFirewallEnabled()", "public void setFirewallInterfaceRule(String iface, boolean allow)", "public void setFirewallEgressSourceRule(String addr, boolean allow)", "public void setFirewallEgressDestRule(String addr, int port, boolean allow)", "public void setFirewallUidRule(int uid, boolean allow)", "private static void enforceSystemUid()", "public boolean isClatdStarted()", "public void monitor()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private void notifyInterfaceLinkStateChanged(String iface, boolean up)"], "prime_var_dic": {}}, {"idx": 7403, "status": "update", "global_index": 15081, "project_name": "android_", "written_on": "2014-05-30 13:59:11", "tufano_target": "public static TYPE_1 < String > METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; String VAR_2 = VAR_1 . get ( VAR_3 , null ) ; TYPE_1 < String > VAR_4 = new TYPE_3 < String > ( ) ; if ( VAR_2 . isEmpty ( ) ) { return VAR_4 ; } TYPE_4 VAR_7 = TYPE_4 . METHOD_3 ( VAR_6 ) . METHOD_4 ( ) ; for ( String VAR_5 : VAR_7 . split ( VAR_2 ) ) { VAR_4 . add ( VAR_5 ) ; } return VAR_4 ; }", "comment": "Use Splitter.on(DELIMITER).omitEmptyStrings()", "tokenized_comment": ["Use", "<|s|>", "Splitter", ".", "on", "(", "DELIMITER", ")", ".", "omit", "Empty", "Strings", "(", ")"], "tufano_code": "public static TYPE_1 < String > METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; String VAR_2 = VAR_1 . get ( VAR_3 , null ) ; TYPE_1 < String > VAR_4 = new TYPE_3 < String > ( ) ; if ( VAR_2 . isEmpty ( ) ) { return VAR_4 ; } if ( VAR_2 != null ) { for ( String VAR_5 : VAR_2 . split ( VAR_6 ) ) { if ( ! VAR_5 . isEmpty ( ) ) { VAR_4 . add ( VAR_5 ) ; } } } return VAR_4 ; }", "our_target": "    Splitter splitter = Splitter.on(DELIMITER).omitEmptyStrings();\n    for (String aUser : splitter.split(allUsersString)) {\n      allUsers.add(aUser);\n", "our_code": "  public static SortedSet<String> getStoredUsers() {\n    Preferences prefs = getPrefs();\n    String allUsersString = prefs.get(USERS, null);\n    SortedSet<String> allUsers = new TreeSet<String>();\n    if(allUsersString.isEmpty()) {\n      return allUsers;\n    }\n\n<|startfocus|>\n    if (allUsersString != null) {\n      for (String aUser : allUsersString.split(DELIMITER)) {\n        if(!aUser.isEmpty()) {\n          allUsers.add(aUser);\n        }\n      }\n<|endfocus|>\n    }\n    return allUsers;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Sorted", "Set", "<", "String", ">", "<|s|>", "get", "Stored", "Users", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Preferences", "<|s|>", "prefs", "<|s|>", "=", "<|s|>", "get", "Prefs", "(", ");", "<|nl|>", "<|4-s|>", "String", "<|s|>", "all", "Users", "String", "<|s|>", "=", "<|s|>", "prefs", ".", "get", "(", "USERS", ",", "<|s|>", "null", ");", "<|nl|>", "<|4-s|>", "Sorted", "Set", "<", "String", ">", "<|s|>", "all", "Users", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Tree", "Set", "<", "String", ">", "(", ");", "<|nl|>", "<|4-s|>", "if", "(", "all", "Users", "String", ".", "is", "Empty", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "all", "Users", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "all", "Users", "String", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "for", "<|s|>", "(", "String", "<|s|>", "a", "User", "<|s|>", ":", "<|s|>", "all", "Users", "String", ".", "split", "(", "DELIMITER", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "(", "!", "a", "User", ".", "is", "Empty", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "all", "Users", ".", "add", "(", "a", "User", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "all", "Users", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 175, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_2953", "comment_id": "bfe21c19_ef88dda6", "class_list": ["responsible", "GoogleLoginPrefs"], "func_list": ["public static void saveOAuthData(OAuthData credentials)", "public static OAuthData loadOAuthData()", "public static void clearStoredOAuthData()", "public static void saveIconOnlyPref(boolean logoutOnExit)", "public static boolean getLogoutOnExitPref()", "public static void saveLogoutOnExitPref(boolean logoutOnExit)", "public static SortedSet<String> getStoredUsers()", "public static void saveActiveUser(@NotNull String user)", "public static void removeActiveUser()", "public static String getActiveUser()", "public static void setTestPreferencesPath(String testPreferencesPath)", "private static void flushPrefs(Preferences prefs)", "private static Preferences getPrefs()", "private static String getCustomUserKey(String key)", "private static void addUser(Preferences prefs, String user)", "private static void removeUser(Preferences prefs, String user) ;"], "prime_var_dic": {"String": 11, "preferencesPath": 1, "Android": 1, "user": 1}}, {"idx": 9143, "status": "update", "global_index": 18103, "project_name": "android_", "written_on": "2009-02-11 12:57:50", "tufano_target": "public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { TYPE_2 VAR_2 ; int VAR_3 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; if ( VAR_4 == VAR_3 ) { VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 ) ; } else { VAR_2 = TYPE_5 . METHOD_1 ( VAR_1 ) ; } return new TYPE_1 ( VAR_2 ) ; }", "comment": ">This seems wrong: getSmsFacility() returns a new instance of [cdma|gsm].SmsMessage. So you've basically instantiated an object whose sole purpose is to call a static factory method, which in turn instantiates another copy of the same object.\n\nI'm not enough of a Java expert to say what is the proper way to accomplish what you're trying to do. But I would think using if-else here to access the static method would be preferable to calling getSmsFacility(). Eg, instead of calling getSmsFacility().doCreateFromPdu(pdu), wouldn't it be more efficient to have: if (CDMA) { cdma.SmsMessage.createFromPdu(pdu);\n} else { gsm.SmsMessage.createFromPdu(pdu);\n}\n\n?\n\nOf course the downside is that readability and maintainability are affected, since now several methods (basically all the static ones) have an if-else.\n\nNote: This review comment applies for all the static methods below (basically, I don't think you should be calling getSmsFacility() from anywhere except the above constructor).\n\n--\nLike discussed in the mails, this will be changed to a simpler but tighter coupled version.\nThis issue is fixed as wished in patch3.", "tokenized_comment": [">", "This", "<|s|>", "seems", "<|s|>", "wrong", ":", "<|s|>", "get", "Sms", "Facility", "(", ")", "<|s|>", "returns", "<|s|>", "a", "<|s|>", "new", "<|s|>", "instance", "<|s|>", "of", "<|s|>", "[", "cdma", "|", "gsm", "]", ".", "Sms", "Message", ".", "<|s|>", "So", "<|s|>", "you", "'", "ve", "<|s|>", "basically", "<|s|>", "instantiated", "<|s|>", "an", "<|s|>", "object", "<|s|>", "whose", "<|s|>", "sole", "<|s|>", "purpose", "<|s|>", "is", "<|s|>", "to", "<|s|>", "call", "<|s|>", "a", "<|s|>", "static", "<|s|>", "factory", "<|s|>", "method", ",", "<|s|>", "which", "<|s|>", "in", "<|s|>", "turn", "<|s|>", "instantiates", "<|s|>", "another", "<|s|>", "copy", "<|s|>", "of", "<|s|>", "the", "<|s|>", "same", "<|s|>", "object", ".", "<|nl|>", "<|nl|>", "I", "'", "m", "<|s|>", "not", "<|s|>", "enough", "<|s|>", "of", "<|s|>", "a", "<|s|>", "Java", "<|s|>", "expert", "<|s|>", "to", "<|s|>", "say", "<|s|>", "what", "<|s|>", "is", "<|s|>", "the", "<|s|>", "proper", "<|s|>", "way", "<|s|>", "to", "<|s|>", "accomplish", "<|s|>", "what", "<|s|>", "you", "'", "re", "<|s|>", "trying", "<|s|>", "to", "<|s|>", "do", ".", "<|s|>", "But", "<|s|>", "I", "<|s|>", "would", "<|s|>", "think", "<|s|>", "using", "<|s|>", "if", "-", "else", "<|s|>", "here", "<|s|>", "to", "<|s|>", "access", "<|s|>", "the", "<|s|>", "static", "<|s|>", "method", "<|s|>", "would", "<|s|>", "be", "<|s|>", "preferable", "<|s|>", "to", "<|s|>", "calling", "<|s|>", "get", "Sms", "Facility", "(", ")", ".", "<|s|>", "Eg", ",", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "calling", "<|s|>", "get", "Sms", "Facility", "(", ")", ".", "do", "Create", "From", "Pdu", "(", "pdu", ")", ",", "<|s|>", "wouldn", "'", "t", "<|s|>", "it", "<|s|>", "be", "<|s|>", "more", "<|s|>", "efficient", "<|s|>", "to", "<|s|>", "have", ":", "<|s|>", "if", "<|s|>", "(", "CDMA", ")", "<|s|>", "{", "<|s|>", "cdma", ".", "Sms", "Message", ".", "create", "From", "Pdu", "(", "pdu", ");", "<|nl|>", "}", "<|s|>", "else", "<|s|>", "{", "<|s|>", "gsm", ".", "Sms", "Message", ".", "create", "From", "Pdu", "(", "pdu", ");", "<|nl|>", "}", "<|nl|>", "<|nl|>", "?", "<|nl|>", "<|nl|>", "Of", "<|s|>", "course", "<|s|>", "the", "<|s|>", "downside", "<|s|>", "is", "<|s|>", "that", "<|s|>", "readability", "<|s|>", "and", "<|s|>", "maintainability", "<|s|>", "are", "<|s|>", "affected", ",", "<|s|>", "since", "<|s|>", "now", "<|s|>", "several", "<|s|>", "methods", "<|s|>", "(", "basically", "<|s|>", "all", "<|s|>", "the", "<|s|>", "static", "<|s|>", "ones", ")", "<|s|>", "have", "<|s|>", "an", "<|s|>", "if", "-", "else", ".", "<|nl|>", "<|nl|>", "Note", ":", "<|s|>", "This", "<|s|>", "review", "<|s|>", "comment", "<|s|>", "applies", "<|s|>", "for", "<|s|>", "all", "<|s|>", "the", "<|s|>", "static", "<|s|>", "methods", "<|s|>", "below", "<|s|>", "(", "basically", ",", "<|s|>", "I", "<|s|>", "don", "'", "t", "<|s|>", "think", "<|s|>", "you", "<|s|>", "should", "<|s|>", "be", "<|s|>", "calling", "<|s|>", "get", "Sms", "Facility", "(", ")", "<|s|>", "from", "<|s|>", "anywhere", "<|s|>", "except", "<|s|>", "the", "<|s|>", "above", "<|s|>", "constructor", ")", ".", "<|nl|>", "<|nl|>", "--", "<|nl|>", "Like", "<|s|>", "discussed", "<|s|>", "in", "<|s|>", "the", "<|s|>", "mails", ",", "<|s|>", "this", "<|s|>", "will", "<|s|>", "be", "<|s|>", "changed", "<|s|>", "to", "<|s|>", "a", "<|s|>", "simpler", "<|s|>", "but", "<|s|>", "tighter", "<|s|>", "coupled", "<|s|>", "version", ".", "<|nl|>", "This", "<|s|>", "issue", "<|s|>", "is", "<|s|>", "fixed", "<|s|>", "as", "<|s|>", "wished", "<|s|>", "in", "<|s|>", "patch", "3", "."], "tufano_code": "public static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; return new TYPE_1 ( VAR_2 ) ; }", "our_target": "        SmsMessageBase wrappedMessage;\n        int activePhone = TelephonyManager.getDefault().getPhoneType();\n\n        if (PHONE_TYPE_CDMA == activePhone) {\n            wrappedMessage = com.android.internal.telephony.cdma.SmsMessage.createFromPdu(pdu);\n        } else {\n            wrappedMessage = com.android.internal.telephony.gsm.SmsMessage.createFromPdu(pdu);\n        }\n\n", "our_code": "    public static SmsMessage createFromPdu(byte[] pdu) {\n<|startfocus|>\n        SmsMessageBase wrappedMessage = getSmsFacility().doCreateFromPdu(pdu);\n<|endfocus|>\n        return new SmsMessage(wrappedMessage);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "Sms", "Message", "<|s|>", "create", "From", "Pdu", "(", "byte", "[", "]", "<|s|>", "pdu", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Sms", "Message", "Base", "<|s|>", "wrapped", "Message", "<|s|>", "=", "<|s|>", "get", "Sms", "Facility", "(", ")", ".", "do", "Create", "From", "Pdu", "(", "pdu", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "Sms", "Message", "(", "wrapped", "Message", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 107, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4908", "comment_id": "AAAAEH%2F%2F%2F%2BY%3D", "class_list": ["SmsMessage", "SubmitPdu", "of", "(bits"], "func_list": ["public SubmitPdu()", "protected SubmitPdu(SubmitPduBase spb)", "public SmsMessageBase mWrappedSmsMessage;", "private SmsMessage(SmsMessageBase smb)", "public static SmsMessage createFromPdu(byte[] pdu)", "public static SmsMessage newFromCMT(String[] lines)", "protected static SmsMessage newFromCMTI(String line)", "public static SmsMessage newFromCDS(String line)", "public static SmsMessage newFromParcel(Parcel p)", "public static SmsMessage createFromEfRecord(int index, byte[] data)", "public static int getTPLayerLengthForPDU(String pdu)", "public static int[] calculateLength(String messageBody, boolean use7bitOnly)", "public static SubmitPdu getSubmitPdu(String scAddress,", "public String getServiceCenterAddress()", "public String getOriginatingAddress()", "public String getDisplayOriginatingAddress()", "public String getMessageBody()", "public MessageClass getMessageClass()", "public String getDisplayMessageBody()", "public String getPseudoSubject()", "public long getTimestampMillis()", "public boolean isEmail()", "public String getEmailBody()", "public String getEmailFrom()", "public int getProtocolIdentifier()", "public boolean isReplace()", "public boolean isCphsMwiMessage()", "public boolean isMWIClearMessage()", "public boolean isMWISetMessage()", "public boolean isMwiDontStore()", "public byte[] getUserData()", "public byte[] getPdu()", "@Deprecated public int getStatusOnSim()", "public int getStatusOnIcc()", "@Deprecated public int getIndexOnSim()", "public int getIndexOnIcc()", "@Deprecated public int getStatusOnSim()", "public boolean isStatusReportMessage()", "public boolean isReplyPathPresent()", "public SubmitPdu()", "protected SubmitPdu(SubmitPduBase spb)", "public SmsMessageBase mWrappedSmsMessage;", "private SmsMessage(SmsMessageBase smb)", "public static SmsMessage createFromPdu(byte[] pdu)", "public static SmsMessage newFromCMT(String[] lines)", "protected static SmsMessage newFromCMTI(String line)", "public static SmsMessage newFromCDS(String line)", "public static SmsMessage newFromParcel(Parcel p)", "public static SmsMessage createFromEfRecord(int index, byte[] data)", "public static int getTPLayerLengthForPDU(String pdu)", "public static int[] calculateLength(String messageBody, boolean use7bitOnly)", "public static SubmitPdu getSubmitPdu(String scAddress,", "public String getServiceCenterAddress()", "public String getOriginatingAddress()", "public String getDisplayOriginatingAddress()", "public String getMessageBody()", "public MessageClass getMessageClass()", "public String getDisplayMessageBody()", "public String getPseudoSubject()", "public long getTimestampMillis()", "public boolean isEmail()", "public String getEmailBody()", "public String getEmailFrom()", "public int getProtocolIdentifier()", "public boolean isReplace()", "public boolean isCphsMwiMessage()", "public boolean isMWIClearMessage()", "public boolean isMWISetMessage()", "public boolean isMwiDontStore()", "public byte[] getUserData()", "public byte[] getPdu()", "@Deprecated public int getStatusOnSim()", "public int getStatusOnIcc()", "@Deprecated public int getIndexOnSim()", "public int getIndexOnIcc()", "@Deprecated public int getStatusOnSim()", "public boolean isStatusReportMessage()", "public boolean isReplyPathPresent()", "public SubmitPdu()", "protected SubmitPdu(SubmitPduBase spb)", "public SmsMessageBase mWrappedSmsMessage;", "private SmsMessage(SmsMessageBase smb)", "public static SmsMessage createFromPdu(byte[] pdu)", "public static SmsMessage newFromCMT(String[] lines)", "protected static SmsMessage newFromCMTI(String line)", "public static SmsMessage newFromCDS(String line)", "public static SmsMessage newFromParcel(Parcel p)", "public static SmsMessage createFromEfRecord(int index, byte[] data)", "public static int getTPLayerLengthForPDU(String pdu)", "public static int[] calculateLength(String messageBody, boolean use7bitOnly)", "public static SubmitPdu getSubmitPdu(String scAddress,", "public String getServiceCenterAddress()", "public String getOriginatingAddress()", "public String getDisplayOriginatingAddress()", "public String getMessageBody()", "public MessageClass getMessageClass()", "public String getDisplayMessageBody()", "public String getPseudoSubject()", "public long getTimestampMillis()", "public boolean isEmail()", "public String getEmailBody()", "public String getEmailFrom()", "public int getProtocolIdentifier()", "public boolean isReplace()", "public boolean isCphsMwiMessage()", "public boolean isMWIClearMessage()", "public boolean isMWISetMessage()", "public boolean isMwiDontStore()", "public byte[] getUserData()", "public byte[] getPdu()", "@Deprecated public int getStatusOnSim()", "public int getStatusOnIcc()", "@Deprecated public int getIndexOnSim()", "public int getIndexOnIcc()", "@Deprecated public int getStatusOnSim()", "public boolean isStatusReportMessage()", "public boolean isReplyPathPresent()", "public int getStatus()"], "prime_var_dic": {"and": 1}}, {"idx": 93237, "status": "update", "global_index": 8879, "project_name": "android_", "written_on": "2015-07-29 18:57:02", "tufano_target": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( null ) ; } else { VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( VAR_6 . METHOD_9 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_10 ( 0 , VAR_7 ) ; VAR_3 . METHOD_5 ( TYPE_2 . METHOD_11 ( new TYPE_3 ( 0 , VAR_8 ) ) ) ; } }", "comment": "you should either set each time we call config filter, or just set it when its created, then we wont need to re-config with this setting", "tokenized_comment": ["you", "<|s|>", "should", "<|s|>", "either", "<|s|>", "set", "<|s|>", "each", "<|s|>", "time", "<|s|>", "we", "<|s|>", "call", "<|s|>", "config", "<|s|>", "filter", ",", "<|s|>", "or", "<|s|>", "just", "<|s|>", "set", "<|s|>", "it", "<|s|>", "when", "<|s|>", "its", "<|s|>", "created", ",", "<|s|>", "then", "<|s|>", "we", "<|s|>", "wont", "<|s|>", "need", "<|s|>", "to", "<|s|>", "re", "-", "config", "<|s|>", "with", "<|s|>", "this", "<|s|>", "setting"], "tufano_code": "private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( null ) ; } else { VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( VAR_6 . METHOD_9 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_10 ( 0 , VAR_7 ) ; VAR_3 . METHOD_5 ( TYPE_2 . METHOD_11 ( new TYPE_3 ( 0 , VAR_8 ) ) ) ; } }", "our_target": "      myAttributesSorter.setSortKeys(ImmutableList.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));\n", "our_code": "  private void configureFilter() {\n    if (myPanel.isAdvancedMode()) {\n      myAttributesFilter.setFilterEnabled(false);\n      myAttributesSorter.setRowFilter(myAttributesFilter);\n      myAttributesSorter.setSortKeys(null);\n    } else {\n      mySimpleModeFilter.configure(myModel.getDefinedAttributes(), ThemeEditorUtils.isAppCompatTheme(\n        myThemeEditorContext.getConfiguration()));\n      myAttributesSorter.setRowFilter(mySimpleModeFilter);\n      myAttributesSorter.setComparator(0, SIMPLE_MODE_COMPARATOR);\n<|startfocus|>\n      myAttributesSorter.setSortKeys(ImmutableList.of(\n        new RowSorter.SortKey(0, SortOrder.ASCENDING)\n      ));\n<|endfocus|>\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "configure", "Filter", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Panel", ".", "is", "Advanced", "Mode", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Attributes", "Filter", ".", "set", "Filter", "Enabled", "(", "false", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Attributes", "Sorter", ".", "set", "Row", "Filter", "(", "my", "Attributes", "Filter", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Attributes", "Sorter", ".", "set", "Sort", "Keys", "(", "null", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Simple", "Mode", "Filter", ".", "configure", "(", "my", "Model", ".", "get", "Defined", "Attributes", "(", ")", ",", "<|s|>", "Theme", "Editor", "Utils", ".", "is", "App", "Compat", "Theme", "(", "<|nl|>", "<|8-s|>", "my", "Theme", "Editor", "Context", ".", "get", "Configuration", "(", ")", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Attributes", "Sorter", ".", "set", "Row", "Filter", "(", "my", "Simple", "Mode", "Filter", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Attributes", "Sorter", ".", "set", "Comparator", "(", "0", ",", "<|s|>", "SIMPLE", "_", "MODE", "_", "COMPARATOR", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Attributes", "Sorter", ".", "set", "Sort", "Keys", "(", "Immutable", "List", ".", "of", "(", "<|nl|>", "<|8-s|>", "new", "<|s|>", "Row", "Sorter", ".", "Sort", "Key", "(", "0", ",", "<|s|>", "Sort", "Order", ".", "ASCENDING", ")", "<|nl|>", "<|4-s|>", "<|2-s|>", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 533, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_307", "comment_id": "4d7fda4c_44e120b8", "class_list": ["ThemeEditorComponent", "SimpleModeFilter", "AttributesFilter", "StyleAttributesFilter"], "func_list": ["public int compare(Object o1, Object o2)", "public ThemeEditorComponent(@NotNull final Project project)", "public void actionPerformed(ActionEvent e)", "public void customize(JList list, Module value, int index, boolean selected, boolean hasFocus)", "public boolean changed(int flags)", "void goTo(@NotNull EditedStyleItem value);", "void goToParent();", "public Component getTableCellRendererComponent(JTable table,", "protected void textChanged(DocumentEvent e)", "public void run()", "public void resourcesChanged(@NotNull Set<ResourceNotificationManager.Reason> reason)", "public Module getSelectedModule()", "private void initializeModulesCombo(@Nullable String defaultModuleName)", "private void subscribeResourceNotification()", "private void unsubscribeResourceNotification()", "public void selectNotify()", "public void deselectNotify()", "private void configureFilter()", "private boolean createNewTheme()", "private boolean selectNewTheme()", "private boolean renameTheme()", "ThemeEditorStyle getSelectedTheme()", "private ThemeEditorStyle getUsedStyle()", "ThemeEditorStyle getCurrentSubStyle()", "private boolean isSubStyleSelected()", "private void createNewThemeWithAttributeValue(@NotNull final EditedStyleItem rv, @NotNull final String strValue)", "public void reload(@Nullable final String defaultThemeName)", "private void loadStyleAttributes()", "public void attributeChangedOnReadOnlyTheme(final EditedStyleItem attribute, final String newValue)", "public void itemStateChanged(ItemEvent e)", "public void dispose()", "public SimpleModeFilter()", "private void configureFilter()", "public boolean include(Entry<? extends AttributesTableModel, ? extends Integer> entry)", "public StyleAttributesFilter()", "public void setFilterEnabled(boolean enabled)", "public void setAttributesFilter(@NotNull Set<String> attributeNames)", "public void setUI(PanelUI ui)", "private void updateUiParameters()"], "prime_var_dic": {"myAttributesFilter": 1, "mySimpleModeFilter": 1, "myPanel": 1, "myAttributesTable": 1, "myResourceChangeListener": 1, "myGoToListener": 1}}, {"idx": 74965, "status": "update", "global_index": 10803, "project_name": "android_", "written_on": "2015-05-20 07:32:50", "tufano_target": "private static void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) ; METHOD_4 ( new TYPE_1 ( ) ) ; METHOD_6 ( new TYPE_3 ( ) ) ; }", "comment": "I was more thinking of putting the try catch in the helper, eg:\n\nexpectThrows(() => new TestSub().foo());\n\nBut then realized closures are too 2020 for Java.\n\nAn alternative could be to have the helper call the \"foo\" method on the passed argument.", "tokenized_comment": ["I", "<|s|>", "was", "<|s|>", "more", "<|s|>", "thinking", "<|s|>", "of", "<|s|>", "putting", "<|s|>", "the", "<|s|>", "try", "<|s|>", "catch", "<|s|>", "in", "<|s|>", "the", "<|s|>", "helper", ",", "<|s|>", "eg", ":", "<|nl|>", "<|nl|>", "expect", "Throws", "(", "(", ")", "<|s|>", "=", ">", "<|s|>", "new", "<|s|>", "Test", "Sub", "(", ")", ".", "foo", "(", ")", ");", "<|nl|>", "<|nl|>", "But", "<|s|>", "then", "<|s|>", "realized", "<|s|>", "closures", "<|s|>", "are", "<|s|>", "too", "<|s|>", "2020", "<|s|>", "for", "<|s|>", "Java", ".", "<|nl|>", "<|nl|>", "An", "<|s|>", "alternative", "<|s|>", "could", "<|s|>", "be", "<|s|>", "to", "<|s|>", "have", "<|s|>", "the", "<|s|>", "helper", "<|s|>", "call", "<|s|>", "the", "<|s|>", "\"", "foo", "\"", "<|s|>", "method", "<|s|>", "on", "<|s|>", "the", "<|s|>", "passed", "<|s|>", "argument", "."], "tufano_code": "private static void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) ; try { new TYPE_1 ( ) . METHOD_3 ( ) ; } catch ( TYPE_2 t ) { METHOD_4 ( t , STRING_1 ) ; } try { new TYPE_3 ( ) . METHOD_5 ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_2 ) { } }", "our_target": "    expectNotThrows(new TestSub());\n    expectThrows(new TestSuper());\n", "our_code": "  private static void testRegistration1() {\n    registerNatives(TestSub.class);\n\n<|startfocus|>\n    try {\n      new TestSub().foo();\n    } catch (Throwable t) {\n      expectNotThrows(t, \"TestSub.foo\");\n    }\n\n    try {\n      new TestSuper().fooTest();\n      expectThrows(\"TestSuper.foo\");\n    } catch (Throwable ignored) {\n    }\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "test", "Registration", "1", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "register", "Natives", "(", "Test", "Sub", ".", "class", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "new", "<|s|>", "Test", "Sub", "(", ")", ".", "foo", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Throwable", "<|s|>", "t", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "expect", "Not", "Throws", "(", "t", ",", "<|s|>", "\"", "Test", "Sub", ".", "foo", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "new", "<|s|>", "Test", "Super", "(", ")", ".", "foo", "Test", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "expect", "Throws", "(", "\"", "Test", "Super", ".", "foo", "\"", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Throwable", "<|s|>", "ignored", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 36, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_5016", "comment_id": "0d179dd9_5e044518", "class_list": ["Main", "doesn't", "has", "TestSuper", "TestSub", "TestSuper2", "TestSub2", "TestSuper3", "TestSub3"], "func_list": ["public static void main(String[] args)", "private static void testRegistration1()", "private static void testRegistration2()", "private static void testRegistration3()", "private static void expectThrows(String s)", "private static void expectNotThrows(Throwable t, String s)", "private static void testRegistration2()", "private static void testRegistration3()"], "prime_var_dic": {}}, {"idx": 90343, "status": "update", "global_index": 8700, "project_name": "android_", "written_on": "2015-07-21 12:22:18", "tufano_target": "public static String METHOD_1 ( String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 result = new TYPE_3 ( ) ; TYPE_4 info = new TYPE_4 ( ) ; VAR_3 . METHOD_3 ( VAR_1 , result , info ) ; if ( info . METHOD_4 ( ) ) { throw new TYPE_5 ( STRING_1 + VAR_1 ) ; } return result . toString ( ) ; }", "comment": "I believe the recommendation was to use com.ibm.icu.text.IDNA.getUts64Instance(). In general, it should be a bit of a red flag if you're directly using something from the impl package.", "tokenized_comment": ["I", "<|s|>", "believe", "<|s|>", "the", "<|s|>", "recommendation", "<|s|>", "was", "<|s|>", "to", "<|s|>", "use", "<|s|>", "com", ".", "ibm", ".", "icu", ".", "text", ".", "IDNA", ".", "get", "Uts", "64", "Instance", "(", ")", ".", "<|s|>", "In", "<|s|>", "general", ",", "<|s|>", "it", "<|s|>", "should", "<|s|>", "be", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "of", "<|s|>", "a", "<|s|>", "red", "<|s|>", "flag", "<|s|>", "if", "<|s|>", "you", "'", "re", "<|s|>", "directly", "<|s|>", "using", "<|s|>", "something", "<|s|>", "from", "<|s|>", "the", "<|s|>", "impl", "<|s|>", "package", "."], "tufano_code": "public static String METHOD_1 ( String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 result = new TYPE_3 ( ) ; VAR_3 . METHOD_3 ( VAR_1 , result , new TYPE_4 ( ) ) ; return result . toString ( ) ; }", "our_target": "        IDNA.Info info = new IDNA.Info();\n        converter.nameToASCII(input, result, info);\n\n        if (info.hasErrors()) {\n            throw new IllegalArgumentException(\"Invalid input to toASCII: \" + input);\n        }\n\n", "our_code": "    public static String toASCII(String input, int flags) {\n        IDNA converter = com.ibm.icu.impl.UTS46.getUTS46Instance(flags);\n        StringBuilder result = new StringBuilder();\n<|startfocus|>\n        converter.nameToASCII(input, result, new IDNA.Info());\n<|endfocus|>\n        return result.toString();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "String", "<|s|>", "to", "ASCII", "(", "String", "<|s|>", "input", ",", "<|s|>", "int", "<|s|>", "flags", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "IDNA", "<|s|>", "converter", "<|s|>", "=", "<|s|>", "com", ".", "ibm", ".", "icu", ".", "impl", ".", "UTS", "46", ".", "get", "UTS", "46", "Instance", "(", "flags", ");", "<|nl|>", "<|8-s|>", "String", "Builder", "<|s|>", "result", "<|s|>", "=", "<|s|>", "new", "<|s|>", "String", "Builder", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "converter", ".", "name", "To", "ASCII", "(", "input", ",", "<|s|>", "result", ",", "<|s|>", "new", "<|s|>", "IDNA", ".", "Info", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "result", ".", "to", "String", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 64, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3008", "comment_id": "ed296e86_ee517f30", "class_list": ["IDN"], "func_list": ["private IDN()", "public static String toASCII(String input, int flags)", "public static String toUnicode(String input, int flags)"], "prime_var_dic": {"full": 1, "IDN": 1, "int": 2, "thrown": 1, "Unicode": 2, "ACE": 2}}, {"idx": 33320, "status": "update", "global_index": 7218, "project_name": "android_", "written_on": "2016-03-21 21:34:23", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 < TYPE_4 , TYPE_5 > VAR_1 = new TYPE_1 ( ) ; VAR_1 . put ( INT_1 , FLOAT_1 ) ; VAR_1 . put ( INT_2 , null ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; assertEquals ( - 1.0 , VAR_2 . METHOD_3 ( 1 , - 1.0 ) ) ; assertEquals ( FLOAT_1 , VAR_2 . METHOD_3 ( INT_1 , - 1.0 ) ) ; assertEquals ( null , VAR_2 . METHOD_3 ( INT_2 , - 1.0 ) ) ; }", "comment": "Why no generics?\n\n<Integer, Double>\n\nHere and below.", "tokenized_comment": ["Why", "<|s|>", "no", "<|s|>", "generics", "?", "<|nl|>", "<|nl|>", "<", "Integer", ",", "<|s|>", "Double", ">", "<|nl|>", "<|nl|>", "Here", "<|s|>", "and", "<|s|>", "below", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . put ( INT_1 , FLOAT_1 ) ; VAR_1 . put ( INT_2 , null ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; assertEquals ( - 1.0 , VAR_2 . METHOD_3 ( 1 , - 1.0 ) ) ; assertEquals ( FLOAT_1 , VAR_2 . METHOD_3 ( INT_1 , - 1.0 ) ) ; assertEquals ( null , VAR_2 . METHOD_3 ( INT_2 , - 1.0 ) ) ; }", "our_target": "        HashMap<Integer, Double> hashMap = new HashMap();\n", "our_code": "    public void test_unmodifiableMap_getOrDefault() {\n<|startfocus|>\n        HashMap hashMap = new HashMap();\n<|endfocus|>\n        hashMap.put(2, 12.0);\n        hashMap.put(3, null);\n        Map m = Collections.unmodifiableMap(hashMap);\n        assertEquals(-1.0, m.getOrDefault(1, -1.0));\n        assertEquals(12.0, m.getOrDefault(2, -1.0));\n        assertEquals(null, m.getOrDefault(3, -1.0));\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "unmodifiable", "Map", "_", "get", "Or", "Default", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Hash", "Map", "<|s|>", "hash", "Map", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hash", "Map", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "hash", "Map", ".", "put", "(", "2", ",", "<|s|>", "12", ".", "0", ");", "<|nl|>", "<|8-s|>", "hash", "Map", ".", "put", "(", "3", ",", "<|s|>", "null", ");", "<|nl|>", "<|8-s|>", "Map", "<|s|>", "m", "<|s|>", "=", "<|s|>", "Collections", ".", "unmodifiable", "Map", "(", "hash", "Map", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "-", "1", ".", "0", ",", "<|s|>", "m", ".", "get", "Or", "Default", "(", "1", ",", "<|s|>", "-", "1", ".", "0", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "12", ".", "0", ",", "<|s|>", "m", ".", "get", "Or", "Default", "(", "2", ",", "<|s|>", "-", "1", ".", "0", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "null", ",", "<|s|>", "m", ".", "get", "Or", "Default", "(", "3", ",", "<|s|>", "-", "1", ".", "0", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 212, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_3286", "comment_id": "5cd96e3d_a5ca6a16", "class_list": ["CollectionsTest", "ArrayListInheritor<T>", "IntegerWithExtremeComparator"], "func_list": ["public void testEmptyEnumeration()", "public void testEmptyIterator()", "public void testEmptyListIterator()", "public ArrayListInheritor(int capacity)", "public void testSort_leavesModcountUnmodified()", "public IntegerWithExtremeComparator(int value)", "public int compareTo(IntegerWithExtremeComparator another)", "public void testBinarySearch_comparatorThatReturnsMinAndMaxValue()", "public int compareTo(IntegerWithExtremeComparator another)", "public void testBinarySearch_emptyCollection()", "public void testSingletonSpliterator()", "public void test_unmodifiableMap_getOrDefault()", "public void test_unmodifiableMap_forEach()", "public void test_unmodifiableMap_putIfAbsent()", "public void test_unmodifiableMap_remove()", "public void test_unmodifiableMap_computeIfAbsent()", "public void test_unmodifiableMap_computeIfPresent()", "public void test_unmodifiableMap_computeIfAbsent()", "public void test_unmodifiableMap_merge()", "public void test_EmptyMap_getOrDefault()", "public void test_EmptyMap_forEach()", "public void test_EmptyMap_putIfAbsent()", "public void test_EmptyMap_remove()", "public void test_EmptyMap_computeIfAbsent()", "public void test_EmptyMap_computeIfPresent()", "public void test_EmptyMap_computeIfAbsent()", "public void test_EmptyMap_merge()", "public void test_SingletonMap_getOrDefault()", "public void test_SingletonMap_forEach()", "public void test_SingletonMap_putIfAbsent()", "public void test_SingletonMap_remove()", "public void test_SingletonMap_computeIfAbsent()", "public void test_SingletonMap_computeIfPresent()", "public void test_SingletonMap_computeIfAbsent()", "public void test_SingletonMap_merge()", "public ArrayListInheritor(int capacity)", "public IntegerWithExtremeComparator(int value)", "public int compareTo(IntegerWithExtremeComparator another)"], "prime_var_dic": {"IntegerWithExtremeComparator": 1, "value": 1}}, {"idx": 91028, "status": "update", "global_index": 20778, "project_name": "android_", "written_on": "2013-07-12 17:39:04", "tufano_target": "private static String METHOD_1 ( String str , String VAR_1 ) { final TYPE_1 VAR_2 = new TYPE_1 ( str . length ( ) + INT_1 * VAR_1 . length ( ) ) . append ( VAR_1 ) ; VAR_2 . append ( str ) ; VAR_2 . append ( VAR_1 ) ; return VAR_2 . toString ( ) ; }", "comment": "nit: or maybe new StringBuilder(str.length() + 2 * quote.length).append(quote);\nto avoid having to resize the array if the string to be quoted is longer than 15 characters?", "tokenized_comment": ["nit", ":", "<|s|>", "or", "<|s|>", "maybe", "<|s|>", "new", "<|s|>", "String", "Builder", "(", "str", ".", "length", "(", ")", "<|s|>", "+", "<|s|>", "2", "<|s|>", "*", "<|s|>", "quote", ".", "length", ")", ".", "append", "(", "quote", ");", "<|nl|>", "to", "<|s|>", "avoid", "<|s|>", "having", "<|s|>", "to", "<|s|>", "resize", "<|s|>", "the", "<|s|>", "array", "<|s|>", "if", "<|s|>", "the", "<|s|>", "string", "<|s|>", "to", "<|s|>", "be", "<|s|>", "quoted", "<|s|>", "is", "<|s|>", "longer", "<|s|>", "than", "<|s|>", "15", "<|s|>", "characters", "?"], "tufano_code": "private static String METHOD_1 ( String str , String VAR_1 ) { final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . append ( str ) ; VAR_2 . append ( VAR_1 ) ; return VAR_2 . toString ( ) ; }", "our_target": "        final StringBuilder sb = new StringBuilder(str.length() + 2 * quote.length()).append(quote);\n", "our_code": "    private static String quoteWith(String str, String quote) {\n<|startfocus|>\n        final StringBuilder sb = new StringBuilder(quote);\n<|endfocus|>\n        sb.append(str);\n        sb.append(quote);\n        return sb.toString();\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "quote", "With", "(", "String", "<|s|>", "str", ",", "<|s|>", "String", "<|s|>", "quote", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "String", "Builder", "<|s|>", "sb", "<|s|>", "=", "<|s|>", "new", "<|s|>", "String", "Builder", "(", "quote", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "sb", ".", "append", "(", "str", ");", "<|nl|>", "<|8-s|>", "sb", ".", "append", "(", "quote", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "sb", ".", "to", "String", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 285, "base_patch_number": 12, "changed_patch_number": 13, "code_file_name": "android_508", "comment_id": "27b2905c_d4f7b246", "class_list": ["RtlSupportProcessor"], "func_list": ["private static void initMapMirroredAttributes()", "protected RtlSupportProcessor(Project project, @NotNull RtlSupportProperties properties)", "protected UsageViewDescriptor createUsageViewDescriptor(UsageInfo[] usages)", "protected UsageInfo[] findUsages()", "protected void performRefactoring(UsageInfo[] usages)", "protected void performPsiSpoilingRefactoring()", "private void addManifestRefactoring(List<UsageInfo> list)", "private static String quote(String str)", "private static String quoteWith(String str, String quote)", "private VirtualFile getLayoutV17(final VirtualFile oneLayoutRes, boolean bCreateIfNeeded)", "private List<UsageInfo> getLayoutRefactoringForOneFile(@NotNull VirtualFile layoutFile, boolean createV17)", "private List<UsageInfo> getLayoutRefactoringForOneDir(@NotNull VirtualFile layoutDir, boolean createV17)", "private void addLayoutRefactoring(List<UsageInfo> list)", "private List<UsageInfo> getLayoutRefactoringForFile(@NotNull final PsiFile layoutFile, final boolean createV17)", "public void visitXmlTag(XmlTag tag)", "private List<UsageInfo> getLayoutRefactoringForTag(@NotNull XmlTag tag, boolean createV17)", "private void performRefactoringForAndroidManifestApplicationTag(@NotNull UsageInfo usageInfo)", "private void performRefactoringForAndroidManifestTargetSdk(@NotNull UsageInfo usageInfo)", "private void performRefactoringForLayoutFile(@NotNull RtlRefactoringUsageInfo usageInfo)", "public void run()", "private void updateAttributeForElement(@NotNull XmlAttribute attribute)", "protected String getCommandName()"], "prime_var_dic": {"String": 33, "myProperties": 1, "myProject": 1, "RTL_TARGET_SDK_START": 1}}, {"idx": 1943, "status": "update", "global_index": 7042, "project_name": "android_", "written_on": "2016-02-25 21:42:27", "tufano_target": "private void METHOD_1 ( TYPE_1 view ) { if ( view instanceof TYPE_4 ) { ( ( TYPE_4 ) view ) . METHOD_2 ( null ) ; } if ( view instanceof TYPE_3 ) { ( ( TYPE_3 ) view ) . METHOD_3 ( VAR_1 ) ; } if ( view instanceof TYPE_2 ) { ( ( TYPE_2 ) view ) . METHOD_2 ( VAR_2 ) ; } }", "comment": "You can use CompoundButton here instead of CheckBox.", "tokenized_comment": ["You", "<|s|>", "can", "<|s|>", "use", "<|s|>", "Compound", "Button", "<|s|>", "here", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "Check", "Box", "."], "tufano_code": "private void METHOD_1 ( TYPE_1 view ) { if ( view instanceof TYPE_2 ) { ( ( TYPE_2 ) view ) . METHOD_2 ( null ) ; } if ( view instanceof TYPE_3 ) { ( ( TYPE_3 ) view ) . METHOD_3 ( VAR_1 ) ; } if ( view instanceof TYPE_2 ) { ( ( TYPE_2 ) view ) . METHOD_2 ( VAR_2 ) ; } }", "our_target": "        if (view instanceof CompoundButton) {\n            ((CompoundButton) view).setOnCheckedChangeListener(null);\n", "our_code": "    private void syncCheckboxView(View view) {\n<|startfocus|>\n        if (view instanceof CheckBox) {\n            ((CheckBox) view).setOnCheckedChangeListener(null);\n<|endfocus|>\n        }\n        if (view instanceof Checkable) {\n            ((Checkable) view).setChecked(mChecked);\n        }\n        if (view instanceof CheckBox) {\n            ((CheckBox) view).setOnCheckedChangeListener(mListener);\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "sync", "Checkbox", "View", "(", "View", "<|s|>", "view", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "view", "<|s|>", "instanceof", "<|s|>", "Check", "Box", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "(", "(", "Check", "Box", ")", "<|s|>", "view", ")", ".", "set", "On", "Checked", "Change", "Listener", "(", "null", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "view", "<|s|>", "instanceof", "<|s|>", "Checkable", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "(", "(", "Checkable", ")", "<|s|>", "view", ")", ".", "set", "Checked", "(", "m", "Checked", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "view", "<|s|>", "instanceof", "<|s|>", "Check", "Box", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "(", "(", "Check", "Box", ")", "<|s|>", "view", ")", ".", "set", "On", "Checked", "Change", "Listener", "(", "m", "Listener", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 123, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5654", "comment_id": "02e4ed24_38bf37da", "class_list": ["CheckBoxPreference", "Listener"], "func_list": ["public void onCheckedChanged(CompoundButton buttonView, boolean isChecked)", "public CheckBoxPreference(Context context, AttributeSet attrs, int defStyleAttr)", "public void onBindViewHolder(PreferenceViewHolder holder)", "protected void performClick(View view)", "private void syncViewIfAccessibilityEnabled(View view)", "private void syncCheckboxView(View view)", "public void onCheckedChanged(CompoundButton buttonView, boolean isChecked)"], "prime_var_dic": {"implements": 1}}, {"idx": 44406, "status": "update", "global_index": 11242, "project_name": "android_", "written_on": "2014-12-18 17:19:47", "tufano_target": "private static TYPE_1 < String > METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 < String > VAR_2 = new TYPE_4 < String > ( VAR_1 . size ( ) ) ; for ( TYPE_6 VAR_3 : VAR_1 ) { VAR_2 . add ( VAR_3 . getName ( ) ) ; } TYPE_5 . METHOD_2 ( VAR_2 ) ; return VAR_2 ; }", "comment": "this name could be a bit more descriptive :-)", "tokenized_comment": ["this", "<|s|>", "name", "<|s|>", "could", "<|s|>", "be", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "more", "<|s|>", "descriptive", "<|s|>", ":-)"], "tufano_code": "private static TYPE_1 < String > METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 < String > VAR_2 = new TYPE_4 < String > ( VAR_1 . size ( ) ) ; for ( TYPE_3 VAR_3 : VAR_1 ) { VAR_2 . add ( VAR_3 . getName ( ) ) ; } TYPE_5 . METHOD_2 ( VAR_2 ) ; return VAR_2 ; }", "our_target": "    for (ThemeEditorStyle theme : themesRaw) {\n", "our_code": "  private static List<String> convert(Collection<StyleWrapper> themesRaw) {\n    List<String> themes = new ArrayList<String>(themesRaw.size());\n<|startfocus|>\n    for (StyleWrapper theme : themesRaw) {\n<|endfocus|>\n      themes.add(theme.getName());\n    }\n    Collections.sort(themes);\n    return themes;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "List", "<", "String", ">", "<|s|>", "convert", "(", "Collection", "<", "Style", "Wrapper", ">", "<|s|>", "themes", "Raw", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "List", "<", "String", ">", "<|s|>", "themes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "String", ">", "(", "themes", "Raw", ".", "size", "(", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Style", "Wrapper", "<|s|>", "theme", "<|s|>", ":", "<|s|>", "themes", "Raw", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "themes", ".", "add", "(", "theme", ".", "get", "Name", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "Collections", ".", "sort", "(", "themes", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "themes", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 547, "base_patch_number": 72, "changed_patch_number": 73, "code_file_name": "android_148", "comment_id": "c19e206c_91b91cbe", "class_list": ["ThemeSelectionPanel", "CategoryModel", "ThemeFilterComponent"], "func_list": ["public ThemeSelectionPanel(@NotNull ThemeSelectionDialog dialog, @NotNull Configuration configuration)", "protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus)", "private void setInitialSelection(@Nullable String currentTheme)", "private void selectCategory(ThemeCategory category, boolean updateList)", "public JPanel getContentPanel()", "private List<String> getThemes(@Nullable ThemeCategory category)", "private void updateThemeList()", "private static boolean matchesFilter(String theme, String filter)", "private List<String> getFrameworkThemes()", "private List<String> getProjectThemes()", "public void valueChanged(ListSelectionEvent listSelectionEvent)", "public String getTheme()", "private static void touchTheme(@Nullable String selected)", "public JComponent getPreferredFocusedComponent()", "public void dispose()", "public Object getRoot()", "public Object getChild(Object parent, int index)", "public int getChildCount(Object parent)", "public boolean isLeaf(Object node)", "public void valueForPathChanged(TreePath path, Object newValue)", "public int getIndexOfChild(Object parent, Object child)", "public void addTreeModelListener(TreeModelListener l)", "public void removeTreeModelListener(TreeModelListener l)", "private static List<String> convert(Collection<StyleWrapper> themesRaw)", "public String toString()", "public void focus()", "public void run()", "private static boolean haveMatches(String filter, List<String> themes)", "private boolean haveAnyMatches(String filter)", "private void createUIComponents()", "public void keyPressed(final KeyEvent e)", "@NotNull private ThemeFilterComponent myFilter;", "public void filter()", "protected void onEscape(KeyEvent e)", "protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus)", "public ThemeSelectionPanel(@NotNull ThemeSelectionDialog dialog, @NotNull Configuration configuration)", "protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus)"], "prime_var_dic": {"myFilter": 1, "Deque": 1, "myCategory": 1, "myThemeResolver": 1}}, {"idx": 77905, "status": "update", "global_index": 18499, "project_name": "android_", "written_on": "2010-06-22 20:08:45", "tufano_target": "public static boolean METHOD_1 ( String VAR_1 ) { return VAR_1 . METHOD_2 ( STRING_1 ) == false && VAR_1 . METHOD_2 ( STRING_2 ) == false && VAR_1 . METHOD_2 ( STRING_3 ) == false && VAR_1 . METHOD_2 ( STRING_4 ) == false && VAR_1 . startsWith ( STRING_5 ) == false ; }", "comment": "I think these extensions/names be tested with equalsIgnoreCase (at least on windows)", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "these", "<|s|>", "extensions", "/", "names", "<|s|>", "be", "<|s|>", "tested", "<|s|>", "with", "<|s|>", "equals", "Ignore", "Case", "<|s|>", "(", "at", "<|s|>", "least", "<|s|>", "on", "<|s|>", "windows", ")"], "tufano_code": "public static boolean METHOD_1 ( String VAR_1 ) { return VAR_1 . equals ( STRING_1 ) == false && VAR_1 . equals ( STRING_2 ) == false && VAR_1 . equals ( STRING_3 ) == false && VAR_1 . equals ( STRING_4 ) == false && VAR_1 . startsWith ( STRING_5 ) == false ; }", "our_target": "        return folderName.equalsIgnoreCase(\"CVS\") == false &&\n            folderName.equalsIgnoreCase(\".svn\") == false &&\n            folderName.equalsIgnoreCase(\"SCCS\") == false &&\n            folderName.equalsIgnoreCase(\"META-INF\") == false &&\n", "our_code": "    public static boolean checkFolderForPackaging(String folderName) {\n<|startfocus|>\n        return folderName.equals(\"CVS\") == false &&\n            folderName.equals(\".svn\") == false &&\n            folderName.equals(\"SCCS\") == false &&\n            folderName.equals(\"META-INF\") == false &&\n<|endfocus|>\n            folderName.startsWith(\"_\") == false;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "check", "Folder", "For", "Packaging", "(", "String", "<|s|>", "folder", "Name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "folder", "Name", ".", "equals", "(", "\"", "CVS", "\"", ")", "<|s|>", "==", "<|s|>", "false", "<|s|>", "&&", "<|nl|>", "<|12-s|>", "folder", "Name", ".", "equals", "(", "\"", ".", "svn", "\"", ")", "<|s|>", "==", "<|s|>", "false", "<|s|>", "&&", "<|nl|>", "<|12-s|>", "folder", "Name", ".", "equals", "(", "\"", "SCCS", "\"", ")", "<|s|>", "==", "<|s|>", "false", "<|s|>", "&&", "<|nl|>", "<|12-s|>", "folder", "Name", ".", "equals", "(", "\"", "META", "-", "INF", "\"", ")", "<|s|>", "==", "<|s|>", "false", "<|s|>", "&&", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "folder", "Name", ".", "starts", "With", "(", "\"", "_", "\"", ")", "<|s|>", "==", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 786, "base_patch_number": 12, "changed_patch_number": 13, "code_file_name": "android_3925", "comment_id": "AAAA0n%2F%2F%2F8w%3D", "class_list": ["ApkBuilder", "NullZipFilter", "JavaAndNativeResourceFilter", "ApkCreationException", "DuplicateFileException", "SealedApkException", "JarStatusImpl", "dex", "files"], "func_list": ["void reset(File inputFile)", "List<String> getNativeLibs()", "boolean getNativeLibsConflict()", "public ApkCreationException(String format, Object... args)", "public DuplicateFileException(String archivePath, File file1, File file2)", "public String getArchivePath()", "public File getFile1()", "public File getFile2()", "public String getMessage()", "public SealedApkException(String format, Object... args)", "public JarStatusImpl(List<String> libs, boolean nativeLibsConflict)", "boolean hasNativeLibsConflicts();", "public void out(String message)", "public void err(String message)", "public void setDebugMode(boolean debugMode)", "private void verbosePrintln(String format, Object... args)", "private File checkFileForDuplicate(String archivePath)", "public static boolean checkFolderForPackaging(String folderName)", "public static boolean checkFileForPackaging(String fileName)", "void reset(File inputFile)", "List<String> getNativeLibs()", "boolean getNativeLibsConflict()", "void reset(File inputFile)", "public ApkCreationException(String format, Object... args)", "public SealedApkException(String format, Object... args)", "public JarStatusImpl(List<String> libs, boolean nativeLibsConflict)", "public List<String> getNativeLibs()", "public boolean hasNativeLibsConflicts()", "void reset(File inputFile)", "List<String> getNativeLibs()", "boolean getNativeLibsConflict()", "public ApkCreationException(String format, Object... args)", "public DuplicateFileException(String archivePath, File file1, File file2)", "public String getArchivePath()", "public File getFile1()", "public File getFile2()", "public String getMessage()", "public SealedApkException(String format, Object... args)", "public JarStatusImpl(List<String> libs, boolean nativeLibsConflict)", "boolean hasNativeLibsConflicts();", "public void out(String message)", "public void err(String message)", "public void setDebugMode(boolean debugMode)", "private void verbosePrintln(String format, Object... args)", "private File checkFileForDuplicate(String archivePath)", "public static boolean checkFolderForPackaging(String folderName)", "public static boolean checkFileForPackaging(String fileName)"], "prime_var_dic": {"ApkBuilder": 1, "into": 1, "mApkFile": 1, "mResFile": 1, "mDexFile": 1, "mVerboseStream": 1, "mBuilder": 1, "long": 3, "mArchivePath": 1, "mFile1": 1, "mFile2": 1, "mNativeLibsConflict": 1, "instance": 2, "ApkCreationException": 2, "files": 1, "key": 1, "expiration": 1, "one": 1, "zip": 1, "jar": 1, "source": 1, "native": 1, "string": 1, "file": 1, "check": 1, "content": 1, "File": 2, "following": 2}}, {"idx": 64185, "status": "update", "global_index": 12548, "project_name": "android_", "written_on": "2014-09-05 17:55:53", "tufano_target": "public void METHOD_1 ( String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( target ( ) , TYPE_2 . METHOD_5 ( STRING_1 ) ) . METHOD_6 ( ) ; TYPE_3 VAR_3 = VAR_6 . METHOD_3 ( ) . METHOD_7 ( VAR_2 , VAR_4 class , true ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_6 ) ; VAR_5 . METHOD_8 ( VAR_3 ) ; VAR_5 . setText ( VAR_3 , VAR_1 ) ; }", "comment": "a better alternative is to use method findByType: finder().findByType(parent, JTextComponent.class, true)", "tokenized_comment": ["a", "<|s|>", "better", "<|s|>", "alternative", "<|s|>", "is", "<|s|>", "to", "<|s|>", "use", "<|s|>", "method", "<|s|>", "find", "By", "Type", ":", "<|s|>", "finder", "(", ")", ".", "find", "By", "Type", "(", "parent", ",", "<|s|>", "JText", "Component", ".", "class", ",", "<|s|>", "true", ")"], "tufano_code": "public void METHOD_1 ( String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( target ( ) , TYPE_2 . METHOD_5 ( STRING_1 ) ) . METHOD_6 ( ) ; TYPE_3 VAR_3 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_2 , VAR_4 class , true ) ; TYPE_4 VAR_5 = new TYPE_4 ( METHOD_2 ( ) ) ; VAR_5 . METHOD_8 ( VAR_3 ) ; VAR_5 . setText ( VAR_3 , VAR_1 ) ; }", "our_target": "    JTextComponent directoryField = robot.finder().findByType(parent, JTextComponent.class, true);\n    JTextComponentDriver driver = new JTextComponentDriver(robot);\n", "our_code": "  public void setDirectoryName(@NotNull String directory) {\n    Container parent = robot().finder().find(target(), JLabelMatcher.withText(\"Directory name:\")).getParent();\n\n<|startfocus|>\n    JTextComponent directoryField = robot().finder().findByType(parent, JTextComponent.class, true);\n    JTextComponentDriver driver = new JTextComponentDriver(robot());\n<|endfocus|>\n    driver.selectAll(directoryField);\n    driver.setText(directoryField, directory);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Directory", "Name", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "directory", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Container", "<|s|>", "parent", "<|s|>", "=", "<|s|>", "robot", "(", ")", ".", "finder", "(", ")", ".", "find", "(", "target", "(", ")", ",", "<|s|>", "JLabel", "Matcher", ".", "with", "Text", "(", "\"", "Directory", "<|s|>", "name", ":", "\"", ")", ")", ".", "get", "Parent", "(", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "JText", "Component", "<|s|>", "directory", "Field", "<|s|>", "=", "<|s|>", "robot", "(", ")", ".", "finder", "(", ")", ".", "find", "By", "Type", "(", "parent", ",", "<|s|>", "JText", "Component", ".", "class", ",", "<|s|>", "true", ");", "<|nl|>", "<|4-s|>", "JText", "Component", "Driver", "<|s|>", "driver", "<|s|>", "=", "<|s|>", "new", "<|s|>", "JText", "Component", "Driver", "(", "robot", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "driver", ".", "select", "All", "(", "directory", "Field", ");", "<|nl|>", "<|4-s|>", "driver", ".", "set", "Text", "(", "directory", "Field", ",", "<|s|>", "directory", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 47, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_56", "comment_id": "90baaf9a_644b4675", "class_list": ["ResourceChooserDialogFixture"], "func_list": ["public static ResourceChooserDialogFixture findDialog(@NotNull Robot robot)", "private ResourceChooserDialogFixture(@NotNull Robot robot, Dialog target)", "public void setDirectoryName(@NotNull String directory)", "public ResourceChooserDialogFixture clickOK()"], "prime_var_dic": {}}, {"idx": 654, "status": "update", "global_index": 5020, "project_name": "android_", "written_on": "2016-08-19 15:58:58", "tufano_target": "public VAR_1 ( String VAR_2 , TYPE_1 VAR_3 , String VAR_4 , TYPE_2 VAR_5 ) { super ( VAR_5 ) ; this . VAR_6 = new TYPE_3 ( this , VAR_2 , VAR_4 , VAR_3 ) ; }", "comment": "Should not be public.", "tokenized_comment": ["Should", "<|s|>", "not", "<|s|>", "be", "<|s|>", "public", "."], "tufano_code": "public VAR_1 ( String VAR_2 , TYPE_1 VAR_3 , String VAR_4 , TYPE_2 VAR_5 ) { super ( VAR_5 ) ; this . VAR_6 = new TYPE_3 ( this , VAR_2 , VAR_4 , null ) ; if ( VAR_7 != null ) { VAR_7 . METHOD_1 ( this . VAR_6 . METHOD_2 ( ) ) ; } }", "our_target": "        this.pathList = new DexPathList(this, dexPath, librarySearchPath, optimizedDirectory);\n", "our_code": "    public BaseDexClassLoader(String dexPath, File optimizedDirectory,\n            String librarySearchPath, ClassLoader parent) {\n        super(parent);\n<|startfocus|>\n        this.pathList = new DexPathList(this, dexPath, librarySearchPath, null);\n\n        if (reporter != null) {\n            reporter.report(this.pathList.getDexPaths());\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Base", "Dex", "Class", "Loader", "(", "String", "<|s|>", "dex", "Path", ",", "<|s|>", "File", "<|s|>", "optimized", "Directory", ",", "<|nl|>", "<|12-s|>", "String", "<|s|>", "library", "Search", "Path", ",", "<|s|>", "Class", "Loader", "<|s|>", "parent", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", "(", "parent", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "this", ".", "path", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Dex", "Path", "List", "(", "this", ",", "<|s|>", "dex", "Path", ",", "<|s|>", "library", "Search", "Path", ",", "<|s|>", "null", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "reporter", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "reporter", ".", "report", "(", "this", ".", "path", "List", ".", "get", "Dex", "Paths", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 62, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_1595", "comment_id": "db249f97_3f5d1783", "class_list": ["for", "BaseDexClassLoader", "loader", "\\\"\"", "don't", ""], "func_list": ["public BaseDexClassLoader(String dexPath, File optimizedDirectory,", "public void addDexPath(String dexPath)", "protected URL findResource(String name)", "protected Enumeration<URL> findResources(String name)", "public String findLibrary(String name)", "public String getLdLibraryPath()", "@Override public String toString()", "public static void setReporter(Reporter newReporter)", "public static Reporter getReporter()", "public BaseDexClassLoader(String dexPath, File optimizedDirectory,"], "prime_var_dic": {"License": 1}}, {"idx": 79540, "status": "update", "global_index": 2544, "project_name": "android_", "written_on": "2017-03-02 16:22:13", "tufano_target": "private boolean METHOD_1 ( boolean result ) { if ( VAR_1 == VAR_2 ) return result ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 [ ] VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_2 ) . c ( METHOD_5 ( VAR_4 , INT_1 ) ) . c ( result ) . METHOD_6 ( ) ; return result ; }", "comment": "Same.", "tokenized_comment": ["Same", "."], "tufano_code": "private boolean METHOD_1 ( boolean result ) { if ( VAR_1 == VAR_2 ) return result ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 [ ] VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 ) . c ( VAR_3 . getId ( ) ) . c ( METHOD_5 ( VAR_4 , INT_1 ) ) . c ( result ) . METHOD_6 ( ) ; return result ; }", "our_target": "        mLog.err(\"% returns %\")\n", "our_code": "    private boolean boolResult(boolean result) {\n        if (mLog == sNoLog) return result;\n        // Currently only seen if verbose logging is on\n\n        Thread cur = Thread.currentThread();\n        StackTraceElement[] trace = cur.getStackTrace();\n\n<|startfocus|>\n        mLog.err(\"th % % returns %\")\n                .c(cur.getId())\n<|endfocus|>\n                .c(niceMethodName(trace, 3))\n                .c(result)\n                .flush();\n\n        return result;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "boolean", "<|s|>", "bool", "Result", "(", "boolean", "<|s|>", "result", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Log", "<|s|>", "==", "<|s|>", "s", "No", "Log", ")", "<|s|>", "return", "<|s|>", "result", ";", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Currently", "<|s|>", "only", "<|s|>", "seen", "<|s|>", "if", "<|s|>", "verbose", "<|s|>", "logging", "<|s|>", "is", "<|s|>", "on", "<|nl|>", "<|nl|>", "<|8-s|>", "Thread", "<|s|>", "cur", "<|s|>", "=", "<|s|>", "Thread", ".", "current", "Thread", "(", ");", "<|nl|>", "<|8-s|>", "Stack", "Trace", "Element", "[", "]", "<|s|>", "trace", "<|s|>", "=", "<|s|>", "cur", ".", "get", "Stack", "Trace", "(", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Log", ".", "err", "(", "\"", "th", "<|s|>", "%", "<|s|>", "%", "<|s|>", "returns", "<|s|>", "%", "\"", ")", "<|nl|>", "<|16-s|>", ".", "c", "(", "cur", ".", "get", "Id", "(", ")", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", ".", "c", "(", "nice", "Method", "Name", "(", "trace", ",", "<|s|>", "3", ")", ")", "<|nl|>", "<|16-s|>", ".", "c", "(", "result", ")", "<|nl|>", "<|16-s|>", ".", "flush", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "result", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 152, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4077", "comment_id": "a6aa0a2b_f35c3c4d", "class_list": ["WifiVendorHal", "should", "CurrentBackgroundScan", "AnswerBox", "RttEventCallback", "AnswerBox", "AnswerBox", "AnswerBox", "AnswerBox", "AnswerBox", "AnswerBox", "AnswerBox", "StaIfaceEventCallback", "ChipEventCallback", "HalDeviceManagerStatusListener"], "func_list": ["public void enableVerboseLogging(boolean verbose)", "private boolean ok(WifiStatus status)", "private boolean boolResult(boolean result)", "private static String niceMethodName(StackTraceElement[] trace, int start)", "private void kilroy()", "public WifiVendorHal(HalDeviceManager halDeviceManager,", "private void handleRemoteException(RemoteException e)", "private void noteHidlError(WifiStatus status, String culprit)", "public boolean initialize()", "public boolean startVendorHalAp()", "public boolean startVendorHalSta()", "public boolean startVendorHalAp()", "private boolean registerStaIfaceCallback()", "private boolean registerChipCallback()", "public void stopVendorHal()", "public boolean isHalStarted()", "public boolean getScanCapabilities(WifiNative.ScanCapabilities capabilities)", "private int makeWifiBandFromFrameworkBand(int frameworkBand)", "private int makeReportSchemeFromBucketSettingsReportEvents(int reportUnderscoreEvents)", "public boolean startScan(WifiNative.ScanSettings settings,", "public void stopScan()", "public void pauseScan()", "public void restartScan()", "public WifiLinkLayerStats getWifiLinkLayerStats()", "private void enableLinkLayerStats()", "int wifiFeatureMaskFromStaCapabilities(int capabilities)", "public int getSupportedFeatureSet()", "public void onResults(int cmdId, java.util.ArrayList<RttResult> results)", "static RttConfig halRttConfigFromFrameworkRttParams(RttManager.RttParams params)", "static int halRttTypeFromFrameworkRttType(int frameworkRttType)", "static int frameworkRttTypeFromHalRttType(int halType)", "static int halPeerFromFrameworkPeer(int frameworkPeer)", "static int frameworkPeerFromHalPeer(int halPeer)", "static int halChannelWidthFromFrameworkChannelWidth(int frameworkChannelWidth)", "static int frameworkChannelWidthFromHalChannelWidth(int halChannelWidth)", "static int halPreambleFromFrameworkPreamble(int rttManagerPreamble)", "static int frameworkPreambleFromHalPreamble(int halPreamble)", "static int halBwFromFrameworkBw(int rttManagerBandwidth)", "static int frameworkBwFromHalBw(int rttBw)", "static ArrayList<RttConfig> halRttConfigArrayFromFrameworkRttParamsArray(", "public boolean requestRtt(RttManager.RttParams[] params, WifiNative.RttEventHandler handler)", "public boolean cancelRtt(RttManager.RttParams[] params)", "private RttResponder getRttResponder()", "private ResponderConfig frameworkResponderConfigFromHalRttResponder(RttResponder info)", "public ResponderConfig enableRttResponder(int timeoutSeconds)", "public boolean disableRttResponder()", "public boolean setScanningMacOui(byte[] oui)", "public int[] getChannelsForBand(int band)", "private int[] intArrayFromArrayList(ArrayList<Integer> in)", "public boolean isGetChannelsForBandSupported()", "public boolean setDfsFlag(boolean dfsOn)", "public ApfCapabilities getApfCapabilities()", "public boolean installPacketFilter(byte[] filter)", "public boolean setCountryCodeHal(String countryCode)", "public boolean setLoggingEventHandler(WifiNative.WifiLoggerEventHandler handler)", "public boolean resetLogHandler()", "public boolean startLoggingRingBuffer(int verboseLevel, int flags, int maxIntervalInSec,", "public int getSupportedLoggerFeatureSet()", "public String getDriverVersion()", "public String getFirmwareVersion()", "private void requestChipDebugInfo()", "private static int frameworkRingBufferFlagsFromHal(int wifiDebugRingBufferFlag)", "public boolean getRingBufferData(String ringName)", "public byte[] getFwMemoryDump()", "public byte[] getDriverStateDump()", "public boolean startPktFateMonitoring()", "private byte halToFrameworkPktFateFrameType(int type)", "private byte halToFrameworkRxPktFate(int type)", "private byte halToFrameworkTxPktFate(int type)", "public boolean getTxPktFates(WifiNative.TxFateReport[] reportBufs)", "public boolean getRxPktFates(WifiNative.RxFateReport[] reportBufs)", "public int startSendingOffloadedPacket(", "public int stopSendingOffloadedPacket(int slot)", "public int startRssiMonitoring(byte maxRssi, byte minRssi,", "public int stopRssiMonitoring()", "private static int[] intsFromArrayList(ArrayList<Integer> a)", "private static WifiWakeReasonAndCounts halToFrameworkWakeReasons(", "public WifiWakeReasonAndCounts getWlanWakeReasonCount()", "public boolean configureNeighborDiscoveryOffload(boolean enabled)", "public boolean getRoamingCapabilities(WifiNative.RoamingCapabilities capabilities)", "public int enableFirmwareRoaming(int state)", "public boolean configureRoaming(WifiNative.RoamingConfig config)", "private static byte[] hidlIeArrayToFrameworkIeBlob(ArrayList<WifiInformationElement> ies)", "private static ScanResult hidlToFrameworkScanResult(StaScanResult scanResult)", "private static ScanResult[] hidlToFrameworkScanResults(ArrayList<StaScanResult> scanResults)", "private static int hidlToFrameworkScanDataFlags(int flag)", "public void onBackgroundScanFailure(int cmdId)", "public void onBackgroundFullScanResult(", "public void onBackgroundScanResults(int cmdId, ArrayList<StaScanData> scanDatas)", "public void onRssiThresholdBreached(int cmdId, byte[/* 6 */] currBssid, int currRssi)", "public void onChipReconfigured(int modeId)", "public void onChipReconfigureFailure(WifiStatus status)", "public void onIfaceAdded(int type, String name)", "public void onIfaceRemoved(int type, String name)", "public void onDebugRingBufferDataAvailable(", "public void onDebugErrorAlert(int errorCode, java.util.ArrayList<Byte> debugData)", "public void onStatusChanged()", "public void enableVerboseLogging(boolean verbose)", "public void onResults(int cmdId, java.util.ArrayList<RttResult> results)", "public void enableVerboseLogging(boolean verbose)", "private boolean ok(WifiStatus status)", "private boolean boolResult(boolean result)", "private static String niceMethodName(StackTraceElement[] trace, int start)", "private void kilroy()", "public WifiVendorHal(HalDeviceManager halDeviceManager,", "private void handleRemoteException(RemoteException e)", "private void noteHidlError(WifiStatus status, String culprit)", "public boolean initialize()", "public boolean startVendorHalAp()", "public boolean startVendorHalSta()", "public boolean startVendorHalAp()", "private boolean registerStaIfaceCallback()", "private boolean registerChipCallback()", "public void stopVendorHal()", "public boolean isHalStarted()", "public boolean getScanCapabilities(WifiNative.ScanCapabilities capabilities)", "private int makeWifiBandFromFrameworkBand(int frameworkBand)", "private int makeReportSchemeFromBucketSettingsReportEvents(int reportUnderscoreEvents)", "public boolean startScan(WifiNative.ScanSettings settings,", "public void stopScan()", "public void pauseScan()", "public void restartScan()", "public WifiLinkLayerStats getWifiLinkLayerStats()", "private void enableLinkLayerStats()", "int wifiFeatureMaskFromStaCapabilities(int capabilities)", "public int getSupportedFeatureSet()", "public void onResults(int cmdId, java.util.ArrayList<RttResult> results)", "static RttConfig halRttConfigFromFrameworkRttParams(RttManager.RttParams params)", "static int halRttTypeFromFrameworkRttType(int frameworkRttType)", "static int frameworkRttTypeFromHalRttType(int halType)", "static int halPeerFromFrameworkPeer(int frameworkPeer)", "static int frameworkPeerFromHalPeer(int halPeer)", "static int halChannelWidthFromFrameworkChannelWidth(int frameworkChannelWidth)", "static int frameworkChannelWidthFromHalChannelWidth(int halChannelWidth)", "static int halPreambleFromFrameworkPreamble(int rttManagerPreamble)", "static int frameworkPreambleFromHalPreamble(int halPreamble)", "static int halBwFromFrameworkBw(int rttManagerBandwidth)", "static int frameworkBwFromHalBw(int rttBw)", "static ArrayList<RttConfig> halRttConfigArrayFromFrameworkRttParamsArray(", "public boolean requestRtt(RttManager.RttParams[] params, WifiNative.RttEventHandler handler)", "public boolean cancelRtt(RttManager.RttParams[] params)", "private RttResponder getRttResponder()", "private ResponderConfig frameworkResponderConfigFromHalRttResponder(RttResponder info)", "public ResponderConfig enableRttResponder(int timeoutSeconds)", "public boolean disableRttResponder()", "public boolean setScanningMacOui(byte[] oui)", "public int[] getChannelsForBand(int band)", "private int[] intArrayFromArrayList(ArrayList<Integer> in)", "public boolean isGetChannelsForBandSupported()", "public boolean setDfsFlag(boolean dfsOn)", "public ApfCapabilities getApfCapabilities()", "public boolean installPacketFilter(byte[] filter)", "public boolean setCountryCodeHal(String countryCode)", "public boolean setLoggingEventHandler(WifiNative.WifiLoggerEventHandler handler)", "public boolean resetLogHandler()", "public boolean startLoggingRingBuffer(int verboseLevel, int flags, int maxIntervalInSec,", "public int getSupportedLoggerFeatureSet()", "public String getDriverVersion()", "public String getFirmwareVersion()", "private void requestChipDebugInfo()", "private static int frameworkRingBufferFlagsFromHal(int wifiDebugRingBufferFlag)", "public boolean getRingBufferData(String ringName)", "public byte[] getFwMemoryDump()", "public byte[] getDriverStateDump()", "public boolean startPktFateMonitoring()", "private byte halToFrameworkPktFateFrameType(int type)", "private byte halToFrameworkRxPktFate(int type)", "private byte halToFrameworkTxPktFate(int type)", "public boolean getTxPktFates(WifiNative.TxFateReport[] reportBufs)", "public boolean getRxPktFates(WifiNative.RxFateReport[] reportBufs)", "public int startSendingOffloadedPacket(", "public int stopSendingOffloadedPacket(int slot)", "public int startRssiMonitoring(byte maxRssi, byte minRssi,", "public int stopRssiMonitoring()", "private static int[] intsFromArrayList(ArrayList<Integer> a)", "private static WifiWakeReasonAndCounts halToFrameworkWakeReasons(", "public WifiWakeReasonAndCounts getWlanWakeReasonCount()", "public boolean configureNeighborDiscoveryOffload(boolean enabled)", "public boolean getRoamingCapabilities(WifiNative.RoamingCapabilities capabilities)", "public int enableFirmwareRoaming(int state)", "public boolean configureRoaming(WifiNative.RoamingConfig config)", "private static byte[] hidlIeArrayToFrameworkIeBlob(ArrayList<WifiInformationElement> ies)", "private static ScanResult hidlToFrameworkScanResult(StaScanResult scanResult)", "private static ScanResult[] hidlToFrameworkScanResults(ArrayList<StaScanResult> scanResults)", "private static int hidlToFrameworkScanDataFlags(int flag)", "public void onBackgroundScanFailure(int cmdId)", "public void onBackgroundFullScanResult(", "public void onBackgroundScanResults(int cmdId, ArrayList<StaScanData> scanDatas)", "public void onRssiThresholdBreached(int cmdId, byte[/* 6 */] currBssid, int currRssi)", "public void onChipReconfigured(int modeId)", "public void onChipReconfigureFailure(WifiStatus status)", "public void onIfaceAdded(int type, String name)", "public void onIfaceRemoved(int type, String name)", "public void onDebugRingBufferDataAvailable(", "public void onDebugErrorAlert(int errorCode, java.util.ArrayList<Byte> debugData)", "public void onStatusChanged()", "public void enableVerboseLogging(boolean verbose)", "private boolean ok(WifiStatus status)", "private boolean boolResult(boolean result)", "private static String niceMethodName(StackTraceElement[] trace, int start)", "private void kilroy()", "public WifiVendorHal(HalDeviceManager halDeviceManager,", "private void handleRemoteException(RemoteException e)", "private void noteHidlError(WifiStatus status, String culprit)", "public boolean initialize()", "public boolean startVendorHalAp()", "public boolean startVendorHalSta()", "public boolean startVendorHalAp()", "private boolean registerStaIfaceCallback()", "private boolean registerChipCallback()", "public void stopVendorHal()", "public boolean isHalStarted()", "public boolean getScanCapabilities(WifiNative.ScanCapabilities capabilities)", "private int makeWifiBandFromFrameworkBand(int frameworkBand)", "private int makeReportSchemeFromBucketSettingsReportEvents(int reportUnderscoreEvents)", "public boolean startScan(WifiNative.ScanSettings settings,", "public void stopScan()", "public void pauseScan()", "public void restartScan()", "public WifiLinkLayerStats getWifiLinkLayerStats()", "private void enableLinkLayerStats()", "int wifiFeatureMaskFromStaCapabilities(int capabilities)", "public int getSupportedFeatureSet()", "public void onResults(int cmdId, java.util.ArrayList<RttResult> results)", "static RttConfig halRttConfigFromFrameworkRttParams(RttManager.RttParams params)", "static int halRttTypeFromFrameworkRttType(int frameworkRttType)", "static int frameworkRttTypeFromHalRttType(int halType)", "static int halPeerFromFrameworkPeer(int frameworkPeer)", "static int frameworkPeerFromHalPeer(int halPeer)", "static int halChannelWidthFromFrameworkChannelWidth(int frameworkChannelWidth)", "static int frameworkChannelWidthFromHalChannelWidth(int halChannelWidth)", "static int halPreambleFromFrameworkPreamble(int rttManagerPreamble)", "static int frameworkPreambleFromHalPreamble(int halPreamble)", "static int halBwFromFrameworkBw(int rttManagerBandwidth)", "static int frameworkBwFromHalBw(int rttBw)", "static ArrayList<RttConfig> halRttConfigArrayFromFrameworkRttParamsArray(", "public boolean requestRtt(RttManager.RttParams[] params, WifiNative.RttEventHandler handler)", "public boolean cancelRtt(RttManager.RttParams[] params)", "private RttResponder getRttResponder()", "private ResponderConfig frameworkResponderConfigFromHalRttResponder(RttResponder info)", "public ResponderConfig enableRttResponder(int timeoutSeconds)", "public boolean disableRttResponder()", "public boolean setScanningMacOui(byte[] oui)", "public int[] getChannelsForBand(int band)", "private int[] intArrayFromArrayList(ArrayList<Integer> in)", "public boolean isGetChannelsForBandSupported()", "public boolean setDfsFlag(boolean dfsOn)", "public ApfCapabilities getApfCapabilities()", "public boolean installPacketFilter(byte[] filter)", "public boolean setCountryCodeHal(String countryCode)", "public boolean setLoggingEventHandler(WifiNative.WifiLoggerEventHandler handler)", "public boolean resetLogHandler()", "public boolean startLoggingRingBuffer(int verboseLevel, int flags, int maxIntervalInSec,", "public int getSupportedLoggerFeatureSet()", "public String getDriverVersion()", "public String getFirmwareVersion()", "private void requestChipDebugInfo()", "private static int frameworkRingBufferFlagsFromHal(int wifiDebugRingBufferFlag)", "public boolean getRingBufferData(String ringName)", "public byte[] getFwMemoryDump()", "public byte[] getDriverStateDump()", "public boolean startPktFateMonitoring()", "private byte halToFrameworkPktFateFrameType(int type)", "private byte halToFrameworkRxPktFate(int type)", "private byte halToFrameworkTxPktFate(int type)", "public boolean getTxPktFates(WifiNative.TxFateReport[] reportBufs)", "public boolean getRxPktFates(WifiNative.RxFateReport[] reportBufs)", "public int startSendingOffloadedPacket(", "public int stopSendingOffloadedPacket(int slot)", "public int startRssiMonitoring(byte maxRssi, byte minRssi,", "public int stopRssiMonitoring()", "private static int[] intsFromArrayList(ArrayList<Integer> a)", "private static WifiWakeReasonAndCounts halToFrameworkWakeReasons(", "public WifiWakeReasonAndCounts getWlanWakeReasonCount()", "public boolean configureNeighborDiscoveryOffload(boolean enabled)", "public boolean getRoamingCapabilities(WifiNative.RoamingCapabilities capabilities)", "public int enableFirmwareRoaming(int state)", "public boolean configureRoaming(WifiNative.RoamingConfig config)", "private static byte[] hidlIeArrayToFrameworkIeBlob(ArrayList<WifiInformationElement> ies)", "private static ScanResult hidlToFrameworkScanResult(StaScanResult scanResult)", "private static ScanResult[] hidlToFrameworkScanResults(ArrayList<StaScanResult> scanResults)", "private static int hidlToFrameworkScanDataFlags(int flag)", "public void onBackgroundScanFailure(int cmdId)", "public void onBackgroundFullScanResult(", "public void onBackgroundScanResults(int cmdId, ArrayList<StaScanData> scanDatas)", "public void onRssiThresholdBreached(int cmdId, byte[/* 6 */] currBssid, int currRssi)", "public void onChipReconfigured(int modeId)", "public void onChipReconfigureFailure(WifiStatus status)", "public void onIfaceAdded(int type, String name)", "public void onIfaceRemoved(int type, String name)", "public void onDebugRingBufferDataAvailable(", "public void onDebugErrorAlert(int errorCode, java.util.ArrayList<Byte> debugData)", "public void onStatusChanged()", "public WifiVendorHal(HalDeviceManager halDeviceManager,"], "prime_var_dic": {"mHalDeviceManagerStatusCallbacks": 1, "mWifiStateMachineHandlerThread": 1, "mIWifiStaIfaceEventCallback": 1, "mIWifiChipEventCallback": 1}}, {"idx": 94074, "status": "update", "global_index": 8972, "project_name": "android_", "written_on": "2015-08-04 13:22:14", "tufano_target": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; super . METHOD_1 ( x , y , VAR_1 , height ) ; TYPE_1 VAR_3 = METHOD_2 ( ) ; synchronized ( VAR_4 ) { if ( VAR_5 != null && ! VAR_3 . equals ( VAR_2 ) ) { VAR_5 . METHOD_3 ( VAR_1 , 1 ) ; } } }", "comment": "It would be great if comment lines would be a little shorter - right now it requires horizontal scrolling while looking at changed in Gerrit. Same suggestion applies to comments on next several lines", "tokenized_comment": ["It", "<|s|>", "would", "<|s|>", "be", "<|s|>", "great", "<|s|>", "if", "<|s|>", "comment", "<|s|>", "lines", "<|s|>", "would", "<|s|>", "be", "<|s|>", "a", "<|s|>", "little", "<|s|>", "shorter", "<|s|>", "-", "<|s|>", "right", "<|s|>", "now", "<|s|>", "it", "<|s|>", "requires", "<|s|>", "horizontal", "<|s|>", "scrolling", "<|s|>", "while", "<|s|>", "looking", "<|s|>", "at", "<|s|>", "changed", "<|s|>", "in", "<|s|>", "Gerrit", ".", "<|s|>", "Same", "<|s|>", "suggestion", "<|s|>", "applies", "<|s|>", "to", "<|s|>", "comments", "<|s|>", "on", "<|s|>", "next", "<|s|>", "several", "<|s|>", "lines"], "tufano_code": "public void METHOD_1 ( int x , int y , int VAR_1 , int height ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; super . METHOD_1 ( x , y , VAR_1 , height ) ; TYPE_1 VAR_3 = METHOD_2 ( ) ; synchronized ( VAR_4 ) { if ( VAR_5 != null && ! VAR_3 . equals ( VAR_2 ) ) { VAR_5 . METHOD_3 ( VAR_1 , ( VAR_6 < VAR_1 ) ? 1 : height ) ; VAR_6 = VAR_1 ; } } }", "our_target": "        myGraphicsLayoutRenderer.setSize(width, 1);\n", "our_code": "  public void setBounds(int x, int y, int width, int height) {\n    Dimension previousSize = getSize();\n\n    super.setBounds(x, y, width, height);\n\n    // Update the size of the layout renderer. This is done here instead of a component listener because\n    // this runs before the paintComponent saving an extra paint cycle.\n    Dimension currentSize = getSize();\n    synchronized (myGraphicsLayoutRendererLock) {\n      if (myGraphicsLayoutRenderer != null && !currentSize.equals(previousSize)) {\n        // Because we use GraphicsLayoutRender in vertical scroll mode, the height passed it's only a minimum. If the actual rendering results\n        // in a bigger size, the GraphicsLayoutRenderer.getPreferredSize() call will return the correct size.\n<|startfocus|>\n        myGraphicsLayoutRenderer.setSize(width, (myCurrentWidth < width) ? 1 : height);\n        myCurrentWidth = width;\n<|endfocus|>\n      }\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Bounds", "(", "int", "<|s|>", "x", ",", "<|s|>", "int", "<|s|>", "y", ",", "<|s|>", "int", "<|s|>", "width", ",", "<|s|>", "int", "<|s|>", "height", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Dimension", "<|s|>", "previous", "Size", "<|s|>", "=", "<|s|>", "get", "Size", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "super", ".", "set", "Bounds", "(", "x", ",", "<|s|>", "y", ",", "<|s|>", "width", ",", "<|s|>", "height", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Update", "<|s|>", "the", "<|s|>", "size", "<|s|>", "of", "<|s|>", "the", "<|s|>", "layout", "<|s|>", "renderer", ".", "<|s|>", "This", "<|s|>", "is", "<|s|>", "done", "<|s|>", "here", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "a", "<|s|>", "component", "<|s|>", "listener", "<|s|>", "because", "<|nl|>", "<|4-s|>", "//", "<|s|>", "this", "<|s|>", "runs", "<|s|>", "before", "<|s|>", "the", "<|s|>", "paint", "Component", "<|s|>", "saving", "<|s|>", "an", "<|s|>", "extra", "<|s|>", "paint", "<|s|>", "cycle", ".", "<|nl|>", "<|4-s|>", "Dimension", "<|s|>", "current", "Size", "<|s|>", "=", "<|s|>", "get", "Size", "(", ");", "<|nl|>", "<|4-s|>", "synchronized", "<|s|>", "(", "my", "Graphics", "Layout", "Renderer", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "my", "Graphics", "Layout", "Renderer", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "!", "current", "Size", ".", "equals", "(", "previous", "Size", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Because", "<|s|>", "we", "<|s|>", "use", "<|s|>", "Graphics", "Layout", "Render", "<|s|>", "in", "<|s|>", "vertical", "<|s|>", "scroll", "<|s|>", "mode", ",", "<|s|>", "the", "<|s|>", "height", "<|s|>", "passed", "<|s|>", "it", "'", "s", "<|s|>", "only", "<|s|>", "a", "<|s|>", "minimum", ".", "<|s|>", "If", "<|s|>", "the", "<|s|>", "actual", "<|s|>", "rendering", "<|s|>", "results", "<|nl|>", "<|8-s|>", "//", "<|s|>", "in", "<|s|>", "a", "<|s|>", "bigger", "<|s|>", "size", ",", "<|s|>", "the", "<|s|>", "Graphics", "Layout", "Renderer", ".", "get", "Preferred", "Size", "(", ")", "<|s|>", "call", "<|s|>", "will", "<|s|>", "return", "<|s|>", "the", "<|s|>", "correct", "<|s|>", "size", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "my", "Graphics", "Layout", "Renderer", ".", "set", "Size", "(", "width", ",", "<|s|>", "(", "my", "Current", "Width", "<|s|>", "<", "<|s|>", "width", ")", "<|s|>", "?", "<|s|>", "1", "<|s|>", ":", "<|s|>", "height", ");", "<|nl|>", "<|8-s|>", "my", "Current", "Width", "<|s|>", "=", "<|s|>", "width", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 138, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_704", "comment_id": "ea1a34b3_66e5ee98", "class_list": ["AndroidPreviewPanel", "InvalidateTask"], "func_list": ["public void run()", "protected void done()", "public AndroidPreviewPanel(@NotNull Configuration configuration)", "public void setBounds(int x, int y, int width, int height)", "public void setScale(double scale)", "public void invalidateGraphicsRenderer()", "public void updateConfiguration(@NotNull Configuration configuration)", "public void setDocument(@NotNull Document document)", "public void paintComponent(final Graphics graphics)", "private static void notifyUnsupportedLayoutlib()", "public Dimension getPreferredScrollableViewportSize()", "public Dimension getPreferredSize()", "public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)", "public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)", "public boolean getScrollableTracksViewportWidth()", "public boolean getScrollableTracksViewportHeight()", "public Set<String> getUsedAttrs()", "public ViewInfo findViewAtPoint(Point p)", "public void run()", "protected void done()"], "prime_var_dic": {}}, {"idx": 57292, "status": "update", "global_index": 14452, "project_name": "android_", "written_on": "2014-03-20 15:26:01", "tufano_target": "public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { TYPE_1 < TYPE_2 > VAR_3 = TYPE_5 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_6 VAR_4 = TYPE_7 . METHOD_3 ( VAR_2 ) ; for ( TYPE_2 VAR_5 : METHOD_4 ( VAR_1 ) ) { if ( METHOD_5 ( VAR_5 , VAR_4 ) || METHOD_6 ( VAR_5 , VAR_4 ) ) { VAR_3 . add ( VAR_5 ) ; } } } if ( VAR_3 . isEmpty ( ) && VAR_6 != null ) { VAR_3 . add ( VAR_6 ) ; } return VAR_3 ; }", "comment": "(same comment as for the IdeaSourceProvider method)", "tokenized_comment": ["(", "same", "<|s|>", "comment", "<|s|>", "as", "<|s|>", "for", "<|s|>", "the", "<|s|>", "Idea", "Source", "Provider", "<|s|>", "method", ")"], "tufano_code": "public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { TYPE_1 < TYPE_2 > VAR_3 = TYPE_5 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_6 VAR_4 = TYPE_7 . METHOD_3 ( VAR_2 ) ; for ( TYPE_2 VAR_5 : METHOD_4 ( VAR_1 ) ) { if ( METHOD_5 ( VAR_5 , VAR_4 ) || METHOD_6 ( VAR_5 , VAR_4 ) ) { VAR_3 . add ( VAR_5 ) ; } } } if ( VAR_3 . isEmpty ( ) ) { VAR_3 . add ( VAR_1 . METHOD_7 ( ) ) ; } return VAR_3 ; }", "our_target": "    if (sourceProviderList.isEmpty() && defaultSourceProvider != null) {\n      sourceProviderList.add(defaultSourceProvider);\n", "our_code": "  public static List<SourceProvider> getSourceProvidersForFile(AndroidFacet facet, @Nullable VirtualFile targetFolder) {\n    List<SourceProvider> sourceProviderList = Lists.newArrayList();\n\n\n    if (targetFolder != null) {\n      File targetIoFolder = VfsUtilCore.virtualToIoFile(targetFolder);\n      // Add source providers that contain the file (if any) and any that have files under the given folder\n      for (SourceProvider provider : getAllSourceProviders(facet)) {\n        if (containsFile(provider, targetIoFolder) || isContainedBy(provider, targetIoFolder)) {\n          sourceProviderList.add(provider);\n        }\n      }\n    }\n\n<|startfocus|>\n    if (sourceProviderList.isEmpty()) {\n      sourceProviderList.add(facet.getMainSourceSet());\n<|endfocus|>\n    }\n    return sourceProviderList;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "List", "<", "Source", "Provider", ">", "<|s|>", "get", "Source", "Providers", "For", "File", "(", "Android", "Facet", "<|s|>", "facet", ",", "<|s|>", "@", "Nullable", "<|s|>", "Virtual", "File", "<|s|>", "target", "Folder", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "List", "<", "Source", "Provider", ">", "<|s|>", "source", "Provider", "List", "<|s|>", "=", "<|s|>", "Lists", ".", "new", "Array", "List", "(", ");", "<|nl|>", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "target", "Folder", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "File", "<|s|>", "target", "Io", "Folder", "<|s|>", "=", "<|s|>", "Vfs", "Util", "Core", ".", "virtual", "To", "Io", "File", "(", "target", "Folder", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Add", "<|s|>", "source", "<|s|>", "providers", "<|s|>", "that", "<|s|>", "contain", "<|s|>", "the", "<|s|>", "file", "<|s|>", "(", "if", "<|s|>", "any", ")", "<|s|>", "and", "<|s|>", "any", "<|s|>", "that", "<|s|>", "have", "<|s|>", "files", "<|s|>", "under", "<|s|>", "the", "<|s|>", "given", "<|s|>", "folder", "<|nl|>", "<|4-s|>", "<|2-s|>", "for", "<|s|>", "(", "Source", "Provider", "<|s|>", "provider", "<|s|>", ":", "<|s|>", "get", "All", "Source", "Providers", "(", "facet", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "contains", "File", "(", "provider", ",", "<|s|>", "target", "Io", "Folder", ")", "<|s|>", "||", "<|s|>", "is", "Contained", "By", "(", "provider", ",", "<|s|>", "target", "Io", "Folder", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "source", "Provider", "List", ".", "add", "(", "provider", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "source", "Provider", "List", ".", "is", "Empty", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "source", "Provider", "List", ".", "add", "(", "facet", ".", "get", "Main", "Source", "Set", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "source", "Provider", "List", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 499, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_735", "comment_id": "dc4d1911_2acd7fa2", "class_list": ["IdeaSourceProvider", "Gradle", "Legacy"], "func_list": ["private IdeaSourceProvider()", "public static IdeaSourceProvider create(@NotNull SourceProvider provider)", "private Gradle(@NotNull SourceProvider provider)", "public abstract VirtualFile getManifestFile();", "private static Set<VirtualFile> convertFileSet(@NotNull Collection<File> fileSet)", "public abstract Set<VirtualFile> getJavaDirectories();", "public abstract Set<VirtualFile> getResourcesDirectories();", "public abstract Set<VirtualFile> getAidlDirectories();", "public abstract Set<VirtualFile> getRenderscriptDirectories();", "public abstract Set<VirtualFile> getJniDirectories();", "public abstract Set<VirtualFile> getResDirectories();", "public abstract Set<VirtualFile> getAssetsDirectories();", "private Legacy(@NotNull AndroidFacet facet)", "public static Iterable<IdeaSourceProvider> getCurrentSourceProviders(@NotNull AndroidFacet facet)", "private Collection<VirtualFile> getAllSourceFolders()", "private static Collection<File> getAllSourceFolders(SourceProvider provider)", "public boolean containsFile(@NotNull VirtualFile file)", "public static boolean isContainedBy(@NotNull SourceProvider provider, File targetFolder)", "public static List<SourceProvider> getAllSourceProviders(@NotNull AndroidFacet facet)", "public static List<IdeaSourceProvider> getAllIdeaSourceProviders(@NotNull AndroidFacet facet)", "public static List<IdeaSourceProvider> getIdeaSourceProvidersForFile(@NotNull AndroidFacet facet,", "public static List<SourceProvider> getSourceProvidersForFile(AndroidFacet facet, @Nullable VirtualFile targetFolder)", "public static boolean isManifestFile(@NotNull AndroidFacet facet, @Nullable VirtualFile candidate)", "public static List<VirtualFile> getManifestFiles(@NotNull AndroidFacet facet)", "public static IdeaSourceProvider create(@NotNull final AndroidFacet facet)"], "prime_var_dic": {}}, {"idx": 1837, "status": "update", "global_index": 3015, "project_name": "android_", "written_on": "2016-01-08 12:07:41", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_5 = VAR_1 ; if ( VAR_1 == null ) { METHOD_2 ( VAR_4 ) ; METHOD_3 ( ) ; VAR_3 = null ; } } }", "comment": "the actual component value of mPreferredForegroundService is never used anywhere. I wonder if this can be a boolean or whether we even need this logic?\n\nProbably in onHostEmulationData below, we'd have to double check that the NFCID2 that we get corresponds to the enabled service, and only let the data through then?", "tokenized_comment": ["the", "<|s|>", "actual", "<|s|>", "component", "<|s|>", "value", "<|s|>", "of", "<|s|>", "m", "Preferred", "Foreground", "Service", "<|s|>", "is", "<|s|>", "never", "<|s|>", "used", "<|s|>", "anywhere", ".", "<|s|>", "I", "<|s|>", "wonder", "<|s|>", "if", "<|s|>", "this", "<|s|>", "can", "<|s|>", "be", "<|s|>", "a", "<|s|>", "boolean", "<|s|>", "or", "<|s|>", "whether", "<|s|>", "we", "<|s|>", "even", "<|s|>", "need", "<|s|>", "this", "<|s|>", "logic", "?", "<|nl|>", "<|nl|>", "Probably", "<|s|>", "in", "<|s|>", "on", "Host", "Emulation", "Data", "<|s|>", "below", ",", "<|s|>", "we", "'", "d", "<|s|>", "have", "<|s|>", "to", "<|s|>", "double", "<|s|>", "check", "<|s|>", "that", "<|s|>", "the", "<|s|>", "NFCID", "2", "<|s|>", "that", "<|s|>", "we", "<|s|>", "get", "<|s|>", "corresponds", "<|s|>", "to", "<|s|>", "the", "<|s|>", "enabled", "<|s|>", "service", ",", "<|s|>", "and", "<|s|>", "only", "<|s|>", "let", "<|s|>", "the", "<|s|>", "data", "<|s|>", "through", "<|s|>", "then", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_1 != null ) { if ( VAR_3 != null ) { return ; } VAR_3 = VAR_1 ; } else { if ( VAR_3 == null ) { return ; } METHOD_2 ( VAR_4 ) ; METHOD_3 ( ) ; VAR_3 = null ; } } }", "our_target": "            mEnabledFgServiceName = service;\n            if (service == null) {\n", "our_code": "    public void onPreferredForegroundNfcFServiceChanged(ComponentName service) {\n        synchronized (mLock) {\n<|startfocus|>\n            if (service != null) {\n                // The service will be bound when packets addressed to the service\n                // is received\n                if (mPreferredForegroundService != null) {\n                    return;\n                }\n                mPreferredForegroundService = service;\n            } else {\n                // Unbind the foreground service. But if the service is communicating,\n                // wait until the service is deactivated.\n                if (mPreferredForegroundService == null) {\n                    return;\n                }\n<|endfocus|>\n                sendDeactivateToActiveServiceLocked(HostNfcFService.DEACTIVATION_LINK_LOSS);\n                unbindServiceIfNeededLocked();\n                mPreferredForegroundService = null;\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Preferred", "Foreground", "Nfc", "FService", "Changed", "(", "Component", "Name", "<|s|>", "service", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "m", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "service", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "//", "<|s|>", "The", "<|s|>", "service", "<|s|>", "will", "<|s|>", "be", "<|s|>", "bound", "<|s|>", "when", "<|s|>", "packets", "<|s|>", "addressed", "<|s|>", "to", "<|s|>", "the", "<|s|>", "service", "<|nl|>", "<|16-s|>", "//", "<|s|>", "is", "<|s|>", "received", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "m", "Preferred", "Foreground", "Service", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "return", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "m", "Preferred", "Foreground", "Service", "<|s|>", "=", "<|s|>", "service", ";", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "//", "<|s|>", "Unbind", "<|s|>", "the", "<|s|>", "foreground", "<|s|>", "service", ".", "<|s|>", "But", "<|s|>", "if", "<|s|>", "the", "<|s|>", "service", "<|s|>", "is", "<|s|>", "communicating", ",", "<|nl|>", "<|16-s|>", "//", "<|s|>", "wait", "<|s|>", "until", "<|s|>", "the", "<|s|>", "service", "<|s|>", "is", "<|s|>", "deactivated", ".", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "m", "Preferred", "Foreground", "Service", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "return", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "send", "Deactivate", "To", "Active", "Service", "Locked", "(", "Host", "Nfc", "FService", ".", "DEACTIVATION", "_", "LINK", "_", "LOSS", ");", "<|nl|>", "<|16-s|>", "unbind", "Service", "If", "Needed", "Locked", "(", ");", "<|nl|>", "<|16-s|>", "m", "Preferred", "Foreground", "Service", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 89, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_4359", "comment_id": "4a2c372e_1be7c3fd", "class_list": ["HostNfcFEmulationManager", "MessageHandler"], "func_list": ["public HostNfcFEmulationManager(Context context,", "public void onPreferredForegroundNfcFServiceChanged(ComponentName service)", "public void onHostEmulationActivated()", "public void onHostEmulationData(byte[] data)", "public void onHostEmulationDeactivated()", "public void onNfcDisabled()", "public void onUserSwitched()", "void sendDataToServiceLocked(Messenger service, byte[] data)", "void sendDeactivateToActiveServiceLocked(int reason)", "Messenger bindServiceIfNeededLocked(ComponentName service)", "void unbindServiceIfNeededLocked()", "String findNfcid2(byte[] data)", "public void onServiceConnected(ComponentName name, IBinder service)", "public void onServiceDisconnected(ComponentName name)", "public void handleMessage(Message msg)", "static String bytesToString(byte[] bytes, int offset, int length)", "private String getByteDump(final byte[] cmd)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public HostNfcFEmulationManager(Context context,"], "prime_var_dic": {"service": 1}}, {"idx": 19810, "status": "update", "global_index": 3114, "project_name": "android_", "written_on": "2016-12-06 03:08:44", "tufano_target": "public void METHOD_1 ( ) { if ( VAR_1 ) METHOD_2 ( STRING_1 ) ; int VAR_2 = VAR_3 . METHOD_3 ( ) ; if ( VAR_4 . METHOD_4 ( VAR_2 ) != VAR_2 && TYPE_1 . METHOD_5 ( VAR_2 ) ) { if ( VAR_5 ) { METHOD_2 ( STRING_2 + VAR_2 + STRING_3 ) ; } METHOD_6 ( VAR_7 ) ; METHOD_7 ( VAR_7 ) ; } }", "comment": "already inside setDataActivationState?", "tokenized_comment": ["already", "<|s|>", "inside", "<|s|>", "set", "Data", "Activation", "State", "?"], "tufano_code": "public void METHOD_1 ( ) { if ( VAR_1 ) METHOD_2 ( STRING_1 ) ; int VAR_2 = VAR_3 . METHOD_3 ( ) ; if ( VAR_4 . METHOD_4 ( VAR_2 ) != VAR_2 && TYPE_1 . METHOD_5 ( VAR_2 ) ) { if ( VAR_5 ) { METHOD_2 ( STRING_2 + VAR_2 + STRING_3 ) ; } METHOD_6 ( VAR_6 ) ; METHOD_7 ( VAR_6 ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } }", "our_target": "                    setVoiceActivationState(SIM_ACTIVATION_STATE_UNKNOWN);\n                    setDataActivationState(SIM_ACTIVATION_STATE_UNKNOWN);\n", "our_code": "            public void onSubscriptionsChanged() {\n                if (VDBG) log(\"SubscriptionListener.onSubscriptionInfoChanged\");\n                int subId = mPhone.getSubId();\n                if (mSubId.getAndSet(subId) != subId\n                        && SubscriptionManager.isValidSubscriptionId(subId)) {\n                    if (DBG) {\n                        log(\"onSimInsertorSubIdChanged: \" + subId\n                                + \"setActivationState to UNINT\");\n                    }\n<|startfocus|>\n                    setVoiceActivationState(STATE_UNKNOWN);\n                    setDataActivationState(STATE_UNKNOWN);\n                    logDataActivationStateChange();\n                    logVoiceActivationStateChange();\n<|endfocus|>\n                }\n            }", "tokenized_code": ["<|12-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Subscriptions", "Changed", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "VDBG", ")", "<|s|>", "log", "(", "\"", "Subscription", "Listener", ".", "on", "Subscription", "Info", "Changed", "\"", ");", "<|nl|>", "<|16-s|>", "int", "<|s|>", "sub", "Id", "<|s|>", "=", "<|s|>", "m", "Phone", ".", "get", "Sub", "Id", "(", ");", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "m", "Sub", "Id", ".", "get", "And", "Set", "(", "sub", "Id", ")", "<|s|>", "!=", "<|s|>", "sub", "Id", "<|nl|>", "<|16-s|>", "<|8-s|>", "&&", "<|s|>", "Subscription", "Manager", ".", "is", "Valid", "Subscription", "Id", "(", "sub", "Id", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "DBG", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "log", "(", "\"", "on", "Sim", "Insertor", "Sub", "Id", "Changed", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "sub", "Id", "<|nl|>", "<|16-s|>", "<|16-s|>", "+", "<|s|>", "\"", "set", "Activation", "State", "<|s|>", "to", "<|s|>", "UNINT", "\"", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "set", "Voice", "Activation", "State", "(", "STATE", "_", "UNKNOWN", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "set", "Data", "Activation", "State", "(", "STATE", "_", "UNKNOWN", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "log", "Data", "Activation", "State", "Change", "(", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "log", "Voice", "Activation", "State", "Change", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}"], "base_code_line_number": 73, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4696", "comment_id": "2ddbcf69_a5a9c25a", "class_list": ["SimActivationTracker"], "func_list": ["public SimActivationTracker(Phone phone)", "public void onSubscriptionsChanged()", "private void logDataActivationStateChange()", "private void logVoiceActivationStateChange()", "public boolean setVoiceActivationState(int state)", "public boolean setDataActivationState(int state)", "private void logDataActivationStateChange()", "private void loge(String s)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {"boolean": 1, "String": 1}}, {"idx": 52328, "status": "update", "global_index": 14412, "project_name": "android_", "written_on": "2014-03-07 23:58:21", "tufano_target": "TYPE_1 METHOD_1 ( ) { TYPE_2 buffer = TYPE_2 . METHOD_2 ( INT_1 * VAR_7 / INT_2 ) ; buffer . METHOD_3 ( VAR_1 ) ; buffer . METHOD_4 ( VAR_2 ) ; buffer . METHOD_4 ( VAR_3 ) ; buffer . METHOD_4 ( VAR_4 ) ; buffer . METHOD_4 ( VAR_5 ) ; return new TYPE_1 ( VAR_6 , buffer . array ( ) ) ; }", "comment": "or allocate(4 * Integer.SIZE/8) to make it clear what that second number is", "tokenized_comment": ["or", "<|s|>", "allocate", "(", "4", "<|s|>", "*", "<|s|>", "Integer", ".", "SIZE", "/", "8", ")", "<|s|>", "to", "<|s|>", "make", "<|s|>", "it", "<|s|>", "clear", "<|s|>", "what", "<|s|>", "that", "<|s|>", "second", "<|s|>", "number", "<|s|>", "is"], "tufano_code": "TYPE_1 METHOD_1 ( ) { TYPE_2 buffer = TYPE_2 . METHOD_2 ( INT_1 * INT_1 ) ; buffer . METHOD_3 ( VAR_1 ) ; buffer . METHOD_4 ( VAR_2 ) ; buffer . METHOD_4 ( VAR_3 ) ; buffer . METHOD_4 ( VAR_4 ) ; buffer . METHOD_4 ( VAR_5 ) ; return new TYPE_1 ( VAR_6 , buffer . array ( ) ) ; }", "our_target": "        ByteBuffer buffer = ByteBuffer.allocate(4 * Integer.SIZE/8);\n", "our_code": "    Chunk getChunk() {\n<|startfocus|>\n        ByteBuffer buffer = ByteBuffer.allocate(4 * 4);\n<|endfocus|>\n        buffer.order(ByteOrder.LITTLE_ENDIAN);\n        buffer.putInt(mLeft);\n        buffer.putInt(mTop);\n        buffer.putInt(mRight);\n        buffer.putInt(mBottom);\n\n        return new Chunk(sChunkType, buffer.array());\n    }", "tokenized_code": ["<|4-s|>", "Chunk", "<|s|>", "get", "Chunk", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Byte", "Buffer", "<|s|>", "buffer", "<|s|>", "=", "<|s|>", "Byte", "Buffer", ".", "allocate", "(", "4", "<|s|>", "*", "<|s|>", "4", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "buffer", ".", "order", "(", "Byte", "Order", ".", "LITTLE", "_", "ENDIAN", ");", "<|nl|>", "<|8-s|>", "buffer", ".", "put", "Int", "(", "m", "Left", ");", "<|nl|>", "<|8-s|>", "buffer", ".", "put", "Int", "(", "m", "Top", ");", "<|nl|>", "<|8-s|>", "buffer", ".", "put", "Int", "(", "m", "Right", ");", "<|nl|>", "<|8-s|>", "buffer", ".", "put", "Int", "(", "m", "Bottom", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "Chunk", "(", "s", "Chunk", "Type", ",", "<|s|>", "buffer", ".", "array", "(", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 48, "base_patch_number": 8, "changed_patch_number": 10, "code_file_name": "android_1010", "comment_id": "fc4c9db4_d94bf447", "class_list": ["LayoutBoundChunkBuilder"], "func_list": ["Chunk getChunk()"], "prime_var_dic": {"mLeft": 1, "mTop": 1, "mRight": 1, "mBottom": 1}}, {"idx": 86997, "status": "update", "global_index": 2565, "project_name": "android_", "written_on": "2017-03-02 15:55:06", "tufano_target": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; try { VAR_2 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( VAR_3 ) . build ( ) , VAR_1 ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( ) ; assertNotNull ( STRING_3 , VAR_4 ) ; } catch ( TYPE_4 VAR_5 ) { fail ( STRING_2 ) ; } finally { VAR_2 . METHOD_5 ( VAR_1 ) ; } }", "comment": "Can you move this out of the try/catch block? I don't think it can throw.", "tokenized_comment": ["Can", "<|s|>", "you", "<|s|>", "move", "<|s|>", "this", "<|s|>", "out", "<|s|>", "of", "<|s|>", "the", "<|s|>", "try", "/", "catch", "<|s|>", "block", "?", "<|s|>", "I", "<|s|>", "don", "'", "t", "<|s|>", "think", "<|s|>", "it", "<|s|>", "can", "<|s|>", "throw", "."], "tufano_code": "public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; try { VAR_2 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( VAR_3 ) . build ( ) , VAR_1 ) ; TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( ) ; assertNotNull ( STRING_1 , VAR_4 ) ; } catch ( TYPE_4 VAR_5 ) { fail ( STRING_2 ) ; } finally { VAR_2 . METHOD_5 ( VAR_1 ) ; } }", "our_target": "            assertNotNull(\"Did not receive NetworkCallback#onAvailable for INTERNET\",\n", "our_code": "    public void testRequestNetworkCallback() {\n        final TestNetworkCallback callback = new TestNetworkCallback();\n\n        try {\n            mCm.requestNetwork(new NetworkRequest.Builder()\n                    .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)\n                    .build(), callback);\n\n            // Wait to get callback for availability of internet\n            Network internetNetwork = callback.waitForAvailable();\n<|startfocus|>\n            assertNotNull(\"Did not receive NetworkCallback.onAvailable for INTERNET\",\n<|endfocus|>\n                    internetNetwork);\n        } catch (InterruptedException e) {\n            fail(\"Broadcast receiver or NetworkCallback wait was interrupted.\");\n        } finally {\n            mCm.unregisterNetworkCallback(callback);\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Request", "Network", "Callback", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Test", "Network", "Callback", "<|s|>", "callback", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Test", "Network", "Callback", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Cm", ".", "request", "Network", "(", "new", "<|s|>", "Network", "Request", ".", "Builder", "(", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", ".", "add", "Capability", "(", "Network", "Capabilities", ".", "NET", "_", "CAPABILITY", "_", "INTERNET", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", ".", "build", "(", ")", ",", "<|s|>", "callback", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Wait", "<|s|>", "to", "<|s|>", "get", "<|s|>", "callback", "<|s|>", "for", "<|s|>", "availability", "<|s|>", "of", "<|s|>", "internet", "<|nl|>", "<|12-s|>", "Network", "<|s|>", "internet", "Network", "<|s|>", "=", "<|s|>", "callback", ".", "wait", "For", "Available", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "assert", "Not", "Null", "(", "\"", "Did", "<|s|>", "not", "<|s|>", "receive", "<|s|>", "Network", "Callback", ".", "on", "Available", "<|s|>", "for", "<|s|>", "INTERNET", "\"", ",", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "internet", "Network", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Interrupted", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "fail", "(", "\"", "Broadcast", "<|s|>", "receiver", "<|s|>", "or", "<|s|>", "Network", "Callback", "<|s|>", "wait", "<|s|>", "was", "<|s|>", "interrupted", ".", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "finally", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Cm", ".", "unregister", "Network", "Callback", "(", "callback", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 397, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5388", "comment_id": "f017f8bb_a9665abc", "class_list": ["ConnectivityManagerTest", "ConnectivityActionReceiver", "TestNetworkCallback"], "func_list": ["public void testIsNetworkTypeValid()", "public void testSetNetworkPreference()", "public void testGetActiveNetworkInfo()", "public void testGetActiveNetworkInfo()", "public void testGetNetworkInfo()", "public void testGetAllNetworkInfo()", "private void assertStartUsingNetworkFeatureUnsupported(int networkType, String feature)", "private void assertStopUsingNetworkFeatureUnsupported(int networkType, String feature)", "private void assertRequestRouteToHostUnsupported(int networkType, int hostAddress)", "public void testStartUsingNetworkFeature()", "private boolean isSupported(int networkType)", "public void testIsNetworkSupported()", "public void testRequestRouteToHost()", "public void testTest()", "private NetworkRequest makeWifiNetworkRequest()", "public void testRegisterNetworkCallback()", "public void testRegisterNetworkCallback_withPendingIntent()", "public void testRequestNetworkCallback()", "public void testRequestNetworkCallback_onUnavailable()", "public void testConnectivityChanged_manifestRequestOnly_shouldNotReceiveIntent()", "public void testConnectivityChanged_whenRegistered_shouldReceiveIntent()", "public void onReceive(Context context, Intent intent)", "private void toggleWifi()", "private Network connectToWifi()", "private void disconnectFromWifi(Network wifiNetworkToCheck)", "public void onAvailable(Network network)", "public void onLost(Network network)", "public void onUnavailable()", "private Network getWifiNetwork()", "public void testRestrictedNetworks()"], "prime_var_dic": {}}, {"idx": 28727, "status": "update", "global_index": 4170, "project_name": "android_", "written_on": "2016-09-15 22:34:17", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; VAR_9 = VAR_10 ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; VAR_17 = VAR_18 ; return ; } METHOD_4 ( VAR_3 , VAR_1 ) ; }", "comment": "same here", "tokenized_comment": ["same", "<|s|>", "here"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_3 ) ; if ( VAR_2 != null ) { synchronized ( VAR_4 ) { VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; VAR_9 = VAR_10 ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; VAR_17 = VAR_18 ; } return ; } METHOD_4 ( VAR_3 , VAR_1 ) ; }", "our_target": "            d.deviceName = device.deviceName;\n            d.primaryDeviceType = device.primaryDeviceType;\n            d.secondaryDeviceType = device.secondaryDeviceType;\n            d.wpsConfigMethodsSupported = device.wpsConfigMethodsSupported;\n            d.deviceCapability = device.deviceCapability;\n            d.groupCapability = device.groupCapability;\n            d.wfdInfo = device.wfdInfo;\n", "our_code": "    public void updateSupplicantDetails(WifiP2pDevice device) {\n        validateDevice(device);\n        WifiP2pDevice d = getKey(device.deviceAddress);\n        if (d != null) {\n<|startfocus|>\n            synchronized (mDeviceMapLock) {\n                d.deviceName = device.deviceName;\n                d.primaryDeviceType = device.primaryDeviceType;\n                d.secondaryDeviceType = device.secondaryDeviceType;\n                d.wpsConfigMethodsSupported = device.wpsConfigMethodsSupported;\n                d.deviceCapability = device.deviceCapability;\n                d.groupCapability = device.groupCapability;\n                d.wfdInfo = device.wfdInfo;\n            }\n<|endfocus|>\n            return;\n        }\n        //Not found, add a new one\n        putKey(device.deviceAddress, device);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "update", "Supplicant", "Details", "(", "Wifi", "P", "2", "p", "Device", "<|s|>", "device", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "validate", "Device", "(", "device", ");", "<|nl|>", "<|8-s|>", "Wifi", "P", "2", "p", "Device", "<|s|>", "d", "<|s|>", "=", "<|s|>", "get", "Key", "(", "device", ".", "device", "Address", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "d", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "synchronized", "<|s|>", "(", "m", "Device", "Map", "Lock", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "d", ".", "device", "Name", "<|s|>", "=", "<|s|>", "device", ".", "device", "Name", ";", "<|nl|>", "<|16-s|>", "d", ".", "primary", "Device", "Type", "<|s|>", "=", "<|s|>", "device", ".", "primary", "Device", "Type", ";", "<|nl|>", "<|16-s|>", "d", ".", "secondary", "Device", "Type", "<|s|>", "=", "<|s|>", "device", ".", "secondary", "Device", "Type", ";", "<|nl|>", "<|16-s|>", "d", ".", "wps", "Config", "Methods", "Supported", "<|s|>", "=", "<|s|>", "device", ".", "wps", "Config", "Methods", "Supported", ";", "<|nl|>", "<|16-s|>", "d", ".", "device", "Capability", "<|s|>", "=", "<|s|>", "device", ".", "device", "Capability", ";", "<|nl|>", "<|16-s|>", "d", ".", "group", "Capability", "<|s|>", "=", "<|s|>", "device", ".", "group", "Capability", ";", "<|nl|>", "<|16-s|>", "d", ".", "wfd", "Info", "<|s|>", "=", "<|s|>", "device", ".", "wfd", "Info", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "//", "Not", "<|s|>", "found", ",", "<|s|>", "add", "<|s|>", "a", "<|s|>", "new", "<|s|>", "one", "<|nl|>", "<|8-s|>", "put", "Key", "(", "device", ".", "device", "Address", ",", "<|s|>", "device", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 134, "base_patch_number": 7, "changed_patch_number": 8, "code_file_name": "android_5680", "comment_id": "cb1db24e_39a7f35c", "class_list": ["representing", "WifiP2pDeviceList"], "func_list": ["public WifiP2pDeviceList()", "private void putKey(String address, WifiP2pDevice device)", "private WifiP2pDevice getKey(String address)", "private WifiP2pDevice removeKey(String address)", "private void validateDevice(WifiP2pDevice device)", "private void validateDeviceAddress(String deviceAddress)", "public boolean clear()", "public void update(WifiP2pDevice device)", "public void updateSupplicantDetails(WifiP2pDevice device)", "public void updateGroupCapability(String deviceAddress, int groupCapab)", "public void updateStatus(String deviceAddress, int status)", "private WifiP2pDevice getKey(String address)", "public boolean remove(WifiP2pDevice device)", "private WifiP2pDevice removeKey(String address)", "public Collection<WifiP2pDevice> getDeviceList()", "public boolean isGroupOwner(String deviceAddress)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public WifiP2pDeviceList createFromParcel(Parcel in)", "public WifiP2pDeviceList[] newArray(int size)"], "prime_var_dic": {"implements": 1, "be": 1, "of": 1, "interface": 3, "Creator": 1}}, {"idx": 2577, "status": "update", "global_index": 3026, "project_name": "android_", "written_on": "2016-03-07 13:29:38", "tufano_target": "public static < TYPE_2 > void METHOD_4 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 < TYPE_2 > VAR_5 ) { TYPE_3 < TYPE_2 > VAR_6 = new TYPE_3 < TYPE_2 > ( VAR_5 . size ( ) ) ; TYPE_4 < TYPE_2 > VAR_7 = ( TYPE_2 value ) - > VAR_6 . add ( value ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }", "comment": "characteristics", "tokenized_comment": ["characteristics"], "tufano_code": "public static void METHOD_1 ( TYPE_1 < ? > VAR_1 , int [ ] VAR_2 ) { int VAR_3 = 0 ; for ( int VAR_4 : VAR_2 ) { assertTrue ( VAR_1 . METHOD_2 ( VAR_4 ) ) ; VAR_3 |= VAR_4 ; } assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }", "our_target": "    public static <T> void runBasicIterationTests(Spliterator<T> spliterator,\n            ArrayList<T> expectedElements) {\n        ArrayList<T> recorder = new ArrayList<T>(expectedElements.size());\n        Consumer<T> consumer = (T value) -> recorder.add(value);\n", "our_code": "<|startfocus|>\n    public static void testCharacteristics(Spliterator<?> spliterator,\n                                           int[] expectedCharacteristics) {\n        int charecteristicsMask = 0;\n        for (int charecteristic : expectedCharacteristics) {\n            assertTrue(spliterator.hasCharacteristics(charecteristic));\n            charecteristicsMask |= charecteristic;\n        }\n<|endfocus|>\n\n        assertEquals(charecteristicsMask, spliterator.characteristics());\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "test", "Characteristics", "(", "Spliterator", "<?>", "<|s|>", "spliterator", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|8-s|>", "<|2-s|>", "<|s|>", "int", "[", "]", "<|s|>", "expected", "Characteristics", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "charecteristics", "Mask", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "charecteristic", "<|s|>", ":", "<|s|>", "expected", "Characteristics", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "assert", "True", "(", "spliterator", ".", "has", "Characteristics", "(", "charecteristic", ")", ");", "<|nl|>", "<|12-s|>", "charecteristics", "Mask", "<|s|>", "|=", "<|s|>", "charecteristic", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "charecteristics", "Mask", ",", "<|s|>", "spliterator", ".", "characteristics", "(", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 30, "base_patch_number": 3, "changed_patch_number": 7, "code_file_name": "android_3313", "comment_id": "4227c598_c93b7521", "class_list": ["SpliteratorTester"], "func_list": ["public static void testCharacteristics(Spliterator<?> spliterator,"], "prime_var_dic": {}}, {"idx": 45473, "status": "update", "global_index": 21397, "project_name": "android_", "written_on": "2013-11-06 10:48:54", "tufano_target": "public static void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_4 { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; METHOD_6 ( STRING_1 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_3 ( ) ) ; TYPE_3 VAR_2 ; try { VAR_2 = ( TYPE_3 ) VAR_1 . METHOD_7 ( ) ; } catch ( TYPE_4 VAR_3 ) { throw new TYPE_5 ( VAR_3 ) ; } METHOD_8 ( VAR_2 ) ; }", "comment": "why not declare that this \"throws Exception\" instead of laundering an IOException into a RuntimeException ?", "tokenized_comment": ["why", "<|s|>", "not", "<|s|>", "declare", "<|s|>", "that", "<|s|>", "this", "<|s|>", "\"", "throws", "<|s|>", "Exception", "\"", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "laundering", "<|s|>", "an", "<|s|>", "IOException", "<|s|>", "into", "<|s|>", "a", "<|s|>", "Runtime", "Exception", "<|s|>", "?"], "tufano_code": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; METHOD_6 ( STRING_1 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_3 ( ) ) ; TYPE_3 VAR_2 ; try { VAR_2 = ( TYPE_3 ) VAR_1 . METHOD_7 ( ) ; } catch ( TYPE_4 VAR_3 ) { throw new TYPE_5 ( VAR_3 ) ; } METHOD_8 ( VAR_2 ) ; }", "our_target": "  public static void assertSSLSocketFactory(SSLSocketFactory sslSocketFactory) throws IOException {\n", "our_code": "<|startfocus|>\n  public static void assertSSLSocketFactory(SSLSocketFactory sslSocketFactory) {\n<|endfocus|>\n    StandardNames.assertDefaultCipherSuites(sslSocketFactory.getDefaultCipherSuites());\n    StandardNames.assertSupportedCipherSuites(sslSocketFactory.getSupportedCipherSuites());\n    assertContainsAll(\"Unsupported default cipher suites\",\n        sslSocketFactory.getSupportedCipherSuites(),\n        sslSocketFactory.getDefaultCipherSuites());\n\n    SSLSocket sslSocket;\n    try {\n      sslSocket = (SSLSocket) sslSocketFactory.createSocket();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    assertSSLSocket(sslSocket);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "assert", "SSLSocket", "Factory", "(", "SSLSocket", "Factory", "<|s|>", "ssl", "Socket", "Factory", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Standard", "Names", ".", "assert", "Default", "Cipher", "Suites", "(", "ssl", "Socket", "Factory", ".", "get", "Default", "Cipher", "Suites", "(", ")", ");", "<|nl|>", "<|4-s|>", "Standard", "Names", ".", "assert", "Supported", "Cipher", "Suites", "(", "ssl", "Socket", "Factory", ".", "get", "Supported", "Cipher", "Suites", "(", ")", ");", "<|nl|>", "<|4-s|>", "assert", "Contains", "All", "(", "\"", "Unsupported", "<|s|>", "default", "<|s|>", "cipher", "<|s|>", "suites", "\"", ",", "<|nl|>", "<|8-s|>", "ssl", "Socket", "Factory", ".", "get", "Supported", "Cipher", "Suites", "(", ")", ",", "<|nl|>", "<|8-s|>", "ssl", "Socket", "Factory", ".", "get", "Default", "Cipher", "Suites", "(", ")", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "SSLSocket", "<|s|>", "ssl", "Socket", ";", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "ssl", "Socket", "<|s|>", "=", "<|s|>", "(", "SSLSocket", ")", "<|s|>", "ssl", "Socket", "Factory", ".", "create", "Socket", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "e", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "assert", "SSLSocket", "(", "ssl", "Socket", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 57, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4837", "comment_id": "3eb9c5aa_a76ceadc", "class_list": ["SSLDefaultConfigurationAsserts"], "func_list": ["private SSLDefaultConfigurationAsserts() }", "public static void assertSSLContext(SSLContext sslContext)", "public static void assertSSLSocketFactory(SSLSocketFactory sslSocketFactory)", "public static void assertSSLServerSocketFactory(SSLServerSocketFactory sslServerSocketFactory)", "public static void assertSSLSocketFactory(SSLSocketFactory sslSocketFactory)", "public static void assertSSLServerSocketFactory(SSLServerSocketFactory sslServerSocketFactory)", "public static void assertSSLEngine(SSLEngine sslEngine)", "public static void assertDefaultSSLParametersClient(SSLParameters sslParameters)", "public static void assertSupportedSSLParametersClient(SSLParameters sslParameters)", "public static void assertSSLEngineSSLParameters(SSLParameters sslParameters)", "private static void assertContainsAll(String message, String[] container, String[] elements)"], "prime_var_dic": {"prevent": 1}}, {"idx": 10255, "status": "update", "global_index": 17076, "project_name": "android_", "written_on": "2010-04-27 16:32:55", "tufano_target": "public void METHOD_5 ( final boolean VAR_8 ) { if ( VAR_9 != VAR_8 ) { VAR_9 = VAR_8 ; if ( METHOD_6 ( ) ) { METHOD_7 ( VAR_8 ) ; } else { METHOD_8 ( new TYPE_2 ( ) { public void METHOD_9 ( ) { METHOD_7 ( VAR_8 ) ; } } ) ; } } }", "comment": "Needs a variant that takes a Drawable. Actually I would remove this variant and keep only the one with Drawable.", "tokenized_comment": ["Needs", "<|s|>", "a", "<|s|>", "variant", "<|s|>", "that", "<|s|>", "takes", "<|s|>", "a", "<|s|>", "Drawable", ".", "<|s|>", "Actually", "<|s|>", "I", "<|s|>", "would", "<|s|>", "remove", "<|s|>", "this", "<|s|>", "variant", "<|s|>", "and", "<|s|>", "keep", "<|s|>", "only", "<|s|>", "the", "<|s|>", "one", "<|s|>", "with", "<|s|>", "Drawable", "."], "tufano_code": "public void METHOD_1 ( int VAR_1 , int VAR_2 , int height ) { if ( VAR_1 != 0 ) { VAR_3 = VAR_1 ; VAR_4 = VAR_2 ; VAR_5 = height ; if ( VAR_6 != null ) { TYPE_1 VAR_7 = METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_7 , VAR_2 , height ) ; } } }", "our_target": "    public void setFastScrollEnabled(final boolean enabled) {\n        if (mFastScrollEnabled != enabled) {\n            mFastScrollEnabled = enabled;\n\n            if (isOwnerThread()) {\n                setFastScrollerEnabledUiThread(enabled);\n            } else {\n                post(new Runnable() {\n                    @Override\n                    public void run() {\n                        setFastScrollerEnabledUiThread(enabled);\n                    }\n                });\n", "our_code": "<|startfocus|>\n    public void setFastScrollThumb(int thumb, int width, int height) {\n        if (thumb != 0) {\n            mFastScrollThumb = thumb;\n            mFastScrollThumbWidth = width;\n            mFastScrollThumbHeight = height;\n            if (mFastScroller != null) {\n                Drawable d = getResources().getDrawable(mFastScrollThumb);\n                mFastScroller.setThumb(d, width, height);\n<|endfocus|>\n            }\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Fast", "Scroll", "Thumb", "(", "int", "<|s|>", "thumb", ",", "<|s|>", "int", "<|s|>", "width", ",", "<|s|>", "int", "<|s|>", "height", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "thumb", "<|s|>", "!=", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Fast", "Scroll", "Thumb", "<|s|>", "=", "<|s|>", "thumb", ";", "<|nl|>", "<|12-s|>", "m", "Fast", "Scroll", "Thumb", "Width", "<|s|>", "=", "<|s|>", "width", ";", "<|nl|>", "<|12-s|>", "m", "Fast", "Scroll", "Thumb", "Height", "<|s|>", "=", "<|s|>", "height", ";", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Fast", "Scroller", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Drawable", "<|s|>", "d", "<|s|>", "=", "<|s|>", "get", "Resources", "(", ")", ".", "get", "Drawable", "(", "m", "Fast", "Scroll", "Thumb", ");", "<|nl|>", "<|16-s|>", "m", "Fast", "Scroller", ".", "set", "Thumb", "(", "d", ",", "<|s|>", "width", ",", "<|s|>", "height", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 677, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1482", "comment_id": "AAAAx3%2F%2F%2F4o%3D", "class_list": ["that", "can", "AbsListView", "SavedState", "for", "WindowRunnnable", "PerformClick", "CheckForLongPress", "CheckForKeyLongPress", "CheckForTap", "FlingRunnable", "LayoutParams", "RecycleBin"], "func_list": ["public AbsListView(Context context)", "private void initAbsListView()", "public void setFastScrollEnabled(boolean enabled)", "public boolean isFastScrollEnabled()", "public void setFastScrollOverlay(int overlay, int size)", "public int getFastScrollOverlay()", "public void setFastScrollThumb(int thumb, int width, int height)", "public int getFastScrollThumb()", "protected boolean isVerticalScrollBarHidden()", "public void setSmoothScrollbarEnabled(boolean enabled)", "public boolean isSmoothScrollbarEnabled()", "public void setOnScrollListener(OnScrollListener l)", "void invokeOnItemScrollListener()", "public boolean isScrollingCacheEnabled()", "public void setScrollingCacheEnabled(boolean enabled)", "public void setTextFilterEnabled(boolean textFilterEnabled)", "public boolean isTextFilterEnabled()", "public void getFocusedRect(Rect r)", "private void useDefaultSelector()", "public boolean isStackFromBottom()", "public void setStackFromBottom(boolean stackFromBottom)", "void requestLayoutIfNecessary()", "private SavedState(Parcel in)", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public SavedState createFromParcel(Parcel in)", "public SavedState[] newArray(int size)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "private boolean acceptFilter()", "public void setFilterText(String filterText)", "public CharSequence getTextFilter()", "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)", "void requestLayoutIfNecessary()", "void resetList()", "protected int computeVerticalScrollExtent()", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollRange()", "protected float getTopFadingEdgeStrength()", "protected float getBottomFadingEdgeStrength()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "protected boolean setFrame(int left, int top, int right, int bottom)", "protected void layoutChildren()", "void updateScrollIndicators()", "public View getSelectedView()", "public int getListPaddingTop()", "public int getListPaddingBottom()", "public int getListPaddingLeft()", "public int getListPaddingRight()", "View obtainView(int position)", "void positionSelector(View sel)", "protected void dispatchDraw(Canvas canvas)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "boolean touchModeDrawsInPressedState()", "boolean shouldShowSelector()", "private void drawSelector(Canvas canvas)", "public void setDrawSelectorOnTop(boolean onTop)", "public void setSelector(int resID)", "public Drawable getSelector()", "void keyPressed()", "public void setScrollIndicators(View up, View down)", "protected void drawableStateChanged()", "protected int[] onCreateDrawableState(int extraSpace)", "public boolean verifyDrawable(Drawable dr)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public void onWindowFocusChanged(boolean hasWindowFocus)", "ContextMenuInfo createContextMenuInfo(View view, int position, long id)", "public void rememberWindowAttachCount()", "public boolean sameWindow()", "public void run()", "private boolean performLongPress(final View child,", "protected ContextMenuInfo getContextMenuInfo()", "public boolean showContextMenuForChild(View originalView)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "protected void dispatchSetPressed(boolean pressed)", "public int pointToPosition(int x, int y)", "public long pointToRowId(int x, int y)", "private boolean startScrollIfNeeded(int deltaY)", "public void onTouchModeChanged(boolean isInTouchMode)", "public boolean onTouchEvent(MotionEvent ev)", "private void drawSelector(Canvas canvas)", "public boolean onInterceptTouchEvent(MotionEvent ev)", "public void addTouchables(ArrayList<View> views)", "void reportScrollStateChange(int newState)", "public FlingRunnable()", "public void start(int initialVelocity)", "private void endFling()", "private void createScrollingCache()", "private void clearScrollingCache()", "void trackMotionScroll(int deltaY, int incrementalDeltaY)", "int getHeaderViewsCount()", "int getFooterViewsCount()", "void hideSelector()", "int reconcileSelectedPosition()", "public void invalidateViews()", "boolean resurrectSelection()", "protected void handleDataChanged()", "private void dismissPopup()", "private void showPopup()", "private void positionPopup()", "static int getDistance(Rect source, Rect dest, int direction)", "protected boolean isInFilterMode()", "boolean sendToTextFilter(int keyCode, int count, KeyEvent event)", "public InputConnection onCreateInputConnection(EditorInfo outAttrs)", "public boolean reportFullscreenMode(boolean enabled)", "public boolean performEditorAction(int editorAction)", "public boolean sendKeyEvent(KeyEvent event)", "public boolean checkInputConnectionProxy(View view)", "private void createTextFilter(boolean animateEntrance)", "public void clearTextFilter()", "public boolean hasTextFilter()", "public void onGlobalLayout()", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "public void onFilterComplete(int count)", "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "public void setTranscriptMode(int mode)", "public int getTranscriptMode()", "public int getSolidColor()", "public void setCacheColorHint(int color)", "public int getCacheColorHint()", "public void reclaimViews(List<View> views)", "protected boolean onConsistencyCheck(int consistency)", "private boolean checkScrap(ArrayList<View> scrap)", "public void setRecyclerListener(RecyclerListener listener)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "public void setViewTypeCount(int viewTypeCount)", "public boolean shouldRecycleViewType(int viewType)", "private void clearScrollingCache()", "void fillActiveViews(int childCount, int firstActivePosition)", "View getActiveView(int position)", "View getScrapView(int position)", "void addScrapView(View scrap)", "void scrapActiveViews()", "private void pruneScrapViews()", "void reclaimScrapViews(List<View> views)", "public AbsListView(Context context)", "private void initAbsListView()", "public void setFastScrollEnabled(boolean enabled)", "public boolean isFastScrollEnabled()", "public void setFastScrollOverlay(int overlay, int size)", "public int getFastScrollOverlay()", "public void setFastScrollThumb(int thumb, int width, int height)", "public int getFastScrollThumb()", "protected boolean isVerticalScrollBarHidden()", "public void setSmoothScrollbarEnabled(boolean enabled)", "public boolean isSmoothScrollbarEnabled()", "public void setOnScrollListener(OnScrollListener l)", "void invokeOnItemScrollListener()", "public boolean isScrollingCacheEnabled()", "public void setScrollingCacheEnabled(boolean enabled)", "public void setTextFilterEnabled(boolean textFilterEnabled)", "public boolean isTextFilterEnabled()", "public void getFocusedRect(Rect r)", "private void useDefaultSelector()", "public boolean isStackFromBottom()", "public void setStackFromBottom(boolean stackFromBottom)", "void requestLayoutIfNecessary()", "private SavedState(Parcel in)", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public SavedState createFromParcel(Parcel in)", "public SavedState[] newArray(int size)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "private boolean acceptFilter()", "public void setFilterText(String filterText)", "public CharSequence getTextFilter()", "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)", "void requestLayoutIfNecessary()", "void resetList()", "protected int computeVerticalScrollExtent()", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollRange()", "protected float getTopFadingEdgeStrength()", "protected float getBottomFadingEdgeStrength()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "protected boolean setFrame(int left, int top, int right, int bottom)", "protected void layoutChildren()", "void updateScrollIndicators()", "public View getSelectedView()", "public int getListPaddingTop()", "public int getListPaddingBottom()", "public int getListPaddingLeft()", "public int getListPaddingRight()", "View obtainView(int position)", "void positionSelector(View sel)", "protected void dispatchDraw(Canvas canvas)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "boolean touchModeDrawsInPressedState()", "boolean shouldShowSelector()", "private void drawSelector(Canvas canvas)", "public void setDrawSelectorOnTop(boolean onTop)", "public void setSelector(int resID)", "public Drawable getSelector()", "void keyPressed()", "public void setScrollIndicators(View up, View down)", "protected void drawableStateChanged()", "protected int[] onCreateDrawableState(int extraSpace)", "public boolean verifyDrawable(Drawable dr)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public void onWindowFocusChanged(boolean hasWindowFocus)", "ContextMenuInfo createContextMenuInfo(View view, int position, long id)", "public void rememberWindowAttachCount()", "public boolean sameWindow()", "public void run()", "private boolean performLongPress(final View child,", "protected ContextMenuInfo getContextMenuInfo()", "public boolean showContextMenuForChild(View originalView)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "protected void dispatchSetPressed(boolean pressed)", "public int pointToPosition(int x, int y)", "public long pointToRowId(int x, int y)", "private boolean startScrollIfNeeded(int deltaY)", "public void onTouchModeChanged(boolean isInTouchMode)", "public boolean onTouchEvent(MotionEvent ev)", "private void drawSelector(Canvas canvas)", "public boolean onInterceptTouchEvent(MotionEvent ev)", "public void addTouchables(ArrayList<View> views)", "void reportScrollStateChange(int newState)", "public FlingRunnable()", "public void start(int initialVelocity)", "private void endFling()", "private void createScrollingCache()", "private void clearScrollingCache()", "void trackMotionScroll(int deltaY, int incrementalDeltaY)", "int getHeaderViewsCount()", "int getFooterViewsCount()", "void hideSelector()", "int reconcileSelectedPosition()", "public void invalidateViews()", "boolean resurrectSelection()", "protected void handleDataChanged()", "private void dismissPopup()", "private void showPopup()", "private void positionPopup()", "static int getDistance(Rect source, Rect dest, int direction)", "protected boolean isInFilterMode()", "boolean sendToTextFilter(int keyCode, int count, KeyEvent event)", "public InputConnection onCreateInputConnection(EditorInfo outAttrs)", "public boolean reportFullscreenMode(boolean enabled)", "public boolean performEditorAction(int editorAction)", "public boolean sendKeyEvent(KeyEvent event)", "public boolean checkInputConnectionProxy(View view)", "private void createTextFilter(boolean animateEntrance)", "public void clearTextFilter()", "public boolean hasTextFilter()", "public void onGlobalLayout()", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "public void onFilterComplete(int count)", "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "public void setTranscriptMode(int mode)", "public int getTranscriptMode()", "public int getSolidColor()", "public void setCacheColorHint(int color)", "public int getCacheColorHint()", "public void reclaimViews(List<View> views)", "protected boolean onConsistencyCheck(int consistency)", "private boolean checkScrap(ArrayList<View> scrap)", "public void setRecyclerListener(RecyclerListener listener)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "public void setViewTypeCount(int viewTypeCount)", "public boolean shouldRecycleViewType(int viewType)", "private void clearScrollingCache()", "void fillActiveViews(int childCount, int firstActivePosition)", "View getActiveView(int position)", "View getScrapView(int position)", "void addScrapView(View scrap)", "void scrapActiveViews()", "private void pruneScrapViews()", "void reclaimScrapViews(List<View> views)", "public AbsListView(Context context)", "private void initAbsListView()", "public void setFastScrollEnabled(boolean enabled)", "public boolean isFastScrollEnabled()", "public void setFastScrollOverlay(int overlay, int size)", "public int getFastScrollOverlay()", "public void setFastScrollThumb(int thumb, int width, int height)", "public int getFastScrollThumb()", "protected boolean isVerticalScrollBarHidden()", "public void setSmoothScrollbarEnabled(boolean enabled)", "public boolean isSmoothScrollbarEnabled()", "public void setOnScrollListener(OnScrollListener l)", "void invokeOnItemScrollListener()", "public boolean isScrollingCacheEnabled()", "public void setScrollingCacheEnabled(boolean enabled)", "public void setTextFilterEnabled(boolean textFilterEnabled)", "public boolean isTextFilterEnabled()", "public void getFocusedRect(Rect r)", "private void useDefaultSelector()", "public boolean isStackFromBottom()", "public void setStackFromBottom(boolean stackFromBottom)", "void requestLayoutIfNecessary()", "private SavedState(Parcel in)", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public SavedState createFromParcel(Parcel in)", "public SavedState[] newArray(int size)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "private boolean acceptFilter()", "public void setFilterText(String filterText)", "public CharSequence getTextFilter()", "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)", "void requestLayoutIfNecessary()", "void resetList()", "protected int computeVerticalScrollExtent()", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollRange()", "protected float getTopFadingEdgeStrength()", "protected float getBottomFadingEdgeStrength()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "protected boolean setFrame(int left, int top, int right, int bottom)", "protected void layoutChildren()", "void updateScrollIndicators()", "public View getSelectedView()", "public int getListPaddingTop()", "public int getListPaddingBottom()", "public int getListPaddingLeft()", "public int getListPaddingRight()", "View obtainView(int position)", "void positionSelector(View sel)", "protected void dispatchDraw(Canvas canvas)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "boolean touchModeDrawsInPressedState()", "boolean shouldShowSelector()", "private void drawSelector(Canvas canvas)", "public void setDrawSelectorOnTop(boolean onTop)", "public void setSelector(int resID)", "public Drawable getSelector()", "void keyPressed()", "public void setScrollIndicators(View up, View down)", "protected void drawableStateChanged()", "protected int[] onCreateDrawableState(int extraSpace)", "public boolean verifyDrawable(Drawable dr)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public void onWindowFocusChanged(boolean hasWindowFocus)", "ContextMenuInfo createContextMenuInfo(View view, int position, long id)", "public void rememberWindowAttachCount()", "public boolean sameWindow()", "public void run()", "private boolean performLongPress(final View child,", "protected ContextMenuInfo getContextMenuInfo()", "public boolean showContextMenuForChild(View originalView)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "protected void dispatchSetPressed(boolean pressed)", "public int pointToPosition(int x, int y)", "public long pointToRowId(int x, int y)", "private boolean startScrollIfNeeded(int deltaY)", "public void onTouchModeChanged(boolean isInTouchMode)", "public boolean onTouchEvent(MotionEvent ev)", "private void drawSelector(Canvas canvas)", "public boolean onInterceptTouchEvent(MotionEvent ev)", "public void addTouchables(ArrayList<View> views)", "void reportScrollStateChange(int newState)", "public FlingRunnable()", "public void start(int initialVelocity)", "private void endFling()", "private void createScrollingCache()", "private void clearScrollingCache()", "void trackMotionScroll(int deltaY, int incrementalDeltaY)", "int getHeaderViewsCount()", "int getFooterViewsCount()", "void hideSelector()", "int reconcileSelectedPosition()", "public void invalidateViews()", "boolean resurrectSelection()", "protected void handleDataChanged()", "private void dismissPopup()", "private void showPopup()", "private void positionPopup()", "static int getDistance(Rect source, Rect dest, int direction)", "protected boolean isInFilterMode()", "boolean sendToTextFilter(int keyCode, int count, KeyEvent event)", "public InputConnection onCreateInputConnection(EditorInfo outAttrs)", "public boolean reportFullscreenMode(boolean enabled)", "public boolean performEditorAction(int editorAction)", "public boolean sendKeyEvent(KeyEvent event)", "public boolean checkInputConnectionProxy(View view)", "private void createTextFilter(boolean animateEntrance)", "public void clearTextFilter()", "public boolean hasTextFilter()", "public void onGlobalLayout()", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "public void onFilterComplete(int count)", "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "public void setTranscriptMode(int mode)", "public int getTranscriptMode()", "public int getSolidColor()", "public void setCacheColorHint(int color)", "public int getCacheColorHint()", "public void reclaimViews(List<View> views)", "protected boolean onConsistencyCheck(int consistency)", "private boolean checkScrap(ArrayList<View> scrap)", "public void setRecyclerListener(RecyclerListener listener)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "public void setViewTypeCount(int viewTypeCount)", "public boolean shouldRecycleViewType(int viewType)", "private void clearScrollingCache()", "void fillActiveViews(int childCount, int firstActivePosition)", "View getActiveView(int position)", "View getScrapView(int position)", "void addScrapView(View scrap)", "void scrapActiveViews()", "private void pruneScrapViews()", "void reclaimScrapViews(List<View> views)", "private SavedState(Parcel in)", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public SavedState createFromParcel(Parcel in)", "public SavedState[] newArray(int size)", "public AbsListView(Context context)", "private void initAbsListView()", "public void setFastScrollEnabled(boolean enabled)", "public boolean isFastScrollEnabled()", "public void setFastScrollOverlay(int overlay, int size)", "public int getFastScrollOverlay()", "public void setFastScrollThumb(int thumb, int width, int height)", "public int getFastScrollThumb()", "protected boolean isVerticalScrollBarHidden()", "public void setSmoothScrollbarEnabled(boolean enabled)", "public boolean isSmoothScrollbarEnabled()", "public void setOnScrollListener(OnScrollListener l)", "void invokeOnItemScrollListener()", "public boolean isScrollingCacheEnabled()", "public void setScrollingCacheEnabled(boolean enabled)", "public void setTextFilterEnabled(boolean textFilterEnabled)", "public boolean isTextFilterEnabled()", "public void getFocusedRect(Rect r)", "private void useDefaultSelector()", "public boolean isStackFromBottom()", "public void setStackFromBottom(boolean stackFromBottom)", "void requestLayoutIfNecessary()", "private SavedState(Parcel in)", "public void writeToParcel(Parcel out, int flags)", "public String toString()", "public SavedState createFromParcel(Parcel in)", "public SavedState[] newArray(int size)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "private boolean acceptFilter()", "public void setFilterText(String filterText)", "public CharSequence getTextFilter()", "protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)", "void requestLayoutIfNecessary()", "void resetList()", "protected int computeVerticalScrollExtent()", "protected int computeVerticalScrollOffset()", "protected int computeVerticalScrollRange()", "protected float getTopFadingEdgeStrength()", "protected float getBottomFadingEdgeStrength()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "protected boolean setFrame(int left, int top, int right, int bottom)", "protected void layoutChildren()", "void updateScrollIndicators()", "public View getSelectedView()", "public int getListPaddingTop()", "public int getListPaddingBottom()", "public int getListPaddingLeft()", "public int getListPaddingRight()", "View obtainView(int position)", "void positionSelector(View sel)", "protected void dispatchDraw(Canvas canvas)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "boolean touchModeDrawsInPressedState()", "boolean shouldShowSelector()", "private void drawSelector(Canvas canvas)", "public void setDrawSelectorOnTop(boolean onTop)", "public void setSelector(int resID)", "public Drawable getSelector()", "void keyPressed()", "public void setScrollIndicators(View up, View down)", "protected void drawableStateChanged()", "protected int[] onCreateDrawableState(int extraSpace)", "public boolean verifyDrawable(Drawable dr)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public void onWindowFocusChanged(boolean hasWindowFocus)", "ContextMenuInfo createContextMenuInfo(View view, int position, long id)", "public void rememberWindowAttachCount()", "public boolean sameWindow()", "public void run()", "private boolean performLongPress(final View child,", "protected ContextMenuInfo getContextMenuInfo()", "public boolean showContextMenuForChild(View originalView)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "protected void dispatchSetPressed(boolean pressed)", "public int pointToPosition(int x, int y)", "public long pointToRowId(int x, int y)", "private boolean startScrollIfNeeded(int deltaY)", "public void onTouchModeChanged(boolean isInTouchMode)", "public boolean onTouchEvent(MotionEvent ev)", "private void drawSelector(Canvas canvas)", "public boolean onInterceptTouchEvent(MotionEvent ev)", "public void addTouchables(ArrayList<View> views)", "void reportScrollStateChange(int newState)", "public FlingRunnable()", "public void start(int initialVelocity)", "private void endFling()", "private void createScrollingCache()", "private void clearScrollingCache()", "void trackMotionScroll(int deltaY, int incrementalDeltaY)", "int getHeaderViewsCount()", "int getFooterViewsCount()", "void hideSelector()", "int reconcileSelectedPosition()", "public void invalidateViews()", "boolean resurrectSelection()", "protected void handleDataChanged()", "private void dismissPopup()", "private void showPopup()", "private void positionPopup()", "static int getDistance(Rect source, Rect dest, int direction)", "protected boolean isInFilterMode()", "boolean sendToTextFilter(int keyCode, int count, KeyEvent event)", "public InputConnection onCreateInputConnection(EditorInfo outAttrs)", "public boolean reportFullscreenMode(boolean enabled)", "public boolean performEditorAction(int editorAction)", "public boolean sendKeyEvent(KeyEvent event)", "public boolean checkInputConnectionProxy(View view)", "private void createTextFilter(boolean animateEntrance)", "public void clearTextFilter()", "public boolean hasTextFilter()", "public void onGlobalLayout()", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "public void onFilterComplete(int count)", "protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "public void setTranscriptMode(int mode)", "public int getTranscriptMode()", "public int getSolidColor()", "public void setCacheColorHint(int color)", "public int getCacheColorHint()", "public void reclaimViews(List<View> views)", "protected boolean onConsistencyCheck(int consistency)", "private boolean checkScrap(ArrayList<View> scrap)", "public void setRecyclerListener(RecyclerListener listener)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "public void setViewTypeCount(int viewTypeCount)", "public boolean shouldRecycleViewType(int viewType)", "private void clearScrollingCache()", "void fillActiveViews(int childCount, int firstActivePosition)", "View getActiveView(int position)", "View getScrapView(int position)", "void addScrapView(View scrap)", "void scrapActiveViews()", "private void pruneScrapViews()", "void reclaimScrapViews(List<View> views)", "public void rememberWindowAttachCount()", "public boolean sameWindow()"], "prime_var_dic": {"left": 1, "top": 1, "right": 1, "bottom": 1, "padding": 1, "indicator": 2, "touch": 1, "scrolling": 1, "scroller": 1, "filter": 1, "int": 3, "boolean": 2, "mPerformClick": 1}}, {"idx": 89821, "status": "update", "global_index": 20741, "project_name": "android_", "written_on": "2013-06-09 16:26:37", "tufano_target": "public static TYPE_1 METHOD_1 ( String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( ) ) ; if ( VAR_2 == null ) { String msg = String . format ( STRING_1 , VAR_1 ) ; TYPE_5 . METHOD_3 ( VAR_3 class ) . error ( msg ) ; } return VAR_2 ; }", "comment": "If the log is only used in a single place in a class, and is unlikely to be called, perhaps remove the field and just inline it:\nLogger.getInstance(Jdks.class).error(msg) ?", "tokenized_comment": ["If", "<|s|>", "the", "<|s|>", "log", "<|s|>", "is", "<|s|>", "only", "<|s|>", "used", "<|s|>", "in", "<|s|>", "a", "<|s|>", "single", "<|s|>", "place", "<|s|>", "in", "<|s|>", "a", "<|s|>", "class", ",", "<|s|>", "and", "<|s|>", "is", "<|s|>", "unlikely", "<|s|>", "to", "<|s|>", "be", "<|s|>", "called", ",", "<|s|>", "perhaps", "<|s|>", "remove", "<|s|>", "the", "<|s|>", "field", "<|s|>", "and", "<|s|>", "just", "<|s|>", "inline", "<|s|>", "it", ":", "<|nl|>", "Logger", ".", "get", "Instance", "(", "Jdks", ".", "class", ")", ".", "error", "(", "msg", ")", "<|s|>", "?"], "tufano_code": "public static TYPE_1 METHOD_1 ( String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( ) ) ; if ( VAR_2 == null ) { String msg = String . format ( STRING_1 , VAR_1 ) ; TYPE_4 . error ( msg ) ; } return VAR_2 ; }", "our_target": "      Logger.getInstance(Jdks.class).error(msg);\n", "our_code": "  public static Sdk createJdk(@NotNull String jdkHomePath) {\n    Sdk jdk = SdkConfigurationUtil.createAndAddSDK(jdkHomePath, JavaSdk.getInstance());\n    if (jdk == null) {\n      String msg = String.format(\"Unable to create JDK from path '%1$s'\", jdkHomePath);\n<|startfocus|>\n      LOG.error(msg);\n<|endfocus|>\n    }\n    return jdk;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Sdk", "<|s|>", "create", "Jdk", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "jdk", "Home", "Path", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Sdk", "<|s|>", "jdk", "<|s|>", "=", "<|s|>", "Sdk", "Configuration", "Util", ".", "create", "And", "Add", "SDK", "(", "jdk", "Home", "Path", ",", "<|s|>", "Java", "Sdk", ".", "get", "Instance", "(", ")", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "jdk", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "msg", "<|s|>", "=", "<|s|>", "String", ".", "format", "(", "\"", "Unable", "<|s|>", "to", "<|s|>", "create", "<|s|>", "JDK", "<|s|>", "from", "<|s|>", "path", "<|s|>", "'", "%", "1", "$", "s", "'", "\"", ",", "<|s|>", "jdk", "Home", "Path", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "error", "(", "msg", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "jdk", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 145, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_557", "comment_id": "7dfb39ce_aaa88b80", "class_list": ["Jdks"], "func_list": ["public static Sdk chooseOrCreateJavaSdk()", "public static boolean isApplicableJdk(@NotNull Sdk jdk)", "private static String getJdkHomePath()", "private static List<String> getChildrenPaths(@NotNull String dirPath)", "private static String getBestJdk(@NotNull List<String> jdkRoots)", "private static String selectJdk(@NotNull String jdk1, @NotNull String jdk2)", "private static JavaSdkVersion getVersion(@NotNull String jdk)", "public static Sdk createJdk(@NotNull String jdkHomePath)"], "prime_var_dic": {}}, {"idx": 92984, "status": "update", "global_index": 17688, "project_name": "android_", "written_on": "2012-05-24 17:32:30", "tufano_target": "public TYPE_1 METHOD_4 ( TYPE_1 VAR_1 ) { if ( VAR_2 != null ) { TYPE_1 VAR_3 = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 != null ) { return VAR_3 ; } } else { VAR_2 = TYPE_2 . METHOD_2 ( ) ; } TYPE_1 VAR_3 = new TYPE_3 ( VAR_1 , false ) . METHOD_3 ( ) ; VAR_2 . put ( VAR_1 , VAR_3 ) ; return VAR_3 ; }", "comment": "nitpick: overlayErrorIcon, overlayWarningIcon might be better", "tokenized_comment": ["nitpick", ":", "<|s|>", "overlay", "Error", "Icon", ",", "<|s|>", "overlay", "Warning", "Icon", "<|s|>", "might", "<|s|>", "be", "<|s|>", "better"], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 != null ) { TYPE_1 VAR_3 = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 != null ) { return VAR_3 ; } } else { VAR_2 = TYPE_2 . METHOD_2 ( ) ; } TYPE_1 VAR_3 = new TYPE_3 ( VAR_1 , false ) . METHOD_3 ( ) ; VAR_2 . put ( VAR_1 , VAR_3 ) ; return VAR_3 ; }", "our_target": "    public Image addErrorIcon(@NonNull Image image) {\n", "our_code": "<|startfocus|>\n    public Image getErrorIcon(@NonNull Image image) {\n<|endfocus|>\n        if (mErrorIcons != null) {\n            Image combined = mErrorIcons.get(image);\n            if (combined != null) {\n                return combined;\n            }\n        } else {\n            mErrorIcons = Maps.newHashMap();\n        }\n\n        Image combined = new ErrorImageComposite(image, false).createImage();\n        mErrorIcons.put(image, combined);\n\n        return combined;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Image", "<|s|>", "get", "Error", "Icon", "(", "@", "Non", "Null", "<|s|>", "Image", "<|s|>", "image", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Error", "Icons", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Image", "<|s|>", "combined", "<|s|>", "=", "<|s|>", "m", "Error", "Icons", ".", "get", "(", "image", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "combined", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "combined", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Error", "Icons", "<|s|>", "=", "<|s|>", "Maps", ".", "new", "Hash", "Map", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "Image", "<|s|>", "combined", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Error", "Image", "Composite", "(", "image", ",", "<|s|>", "false", ")", ".", "create", "Image", "(", ");", "<|nl|>", "<|8-s|>", "m", "Error", "Icons", ".", "put", "(", "image", ",", "<|s|>", "combined", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "combined", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 286, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1792", "comment_id": "AAAFw3%2F%2F%2F%2Bk%3D", "class_list": ["IconFactory", "LetterImageDescriptor"], "func_list": ["private IconFactory()", "public void dispose()", "public Image getIcon(String osName)", "public ImageDescriptor getImageDescriptor(String osName)", "public Image getErrorIcon(@NonNull Image image)", "public Image getWarningIcon(@NonNull Image image)", "public LetterImageDescriptor(char letter, int color, int shape)", "public ImageData getImageData()", "public Image getIcon(@NonNull String osName, @Nullable String fallback)"], "prime_var_dic": {"dispose": 1, "used": 1, "exist": 1}}, {"idx": 63857, "status": "update", "global_index": 6694, "project_name": "android_", "written_on": "2016-06-13 14:21:24", "tufano_target": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_4 VAR_2 ) { if ( ! VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) || ! ( VAR_1 . METHOD_6 ( ) instanceof TYPE_3 ) ) { return false ; } assert VAR_1 . METHOD_7 ( ) == VAR_3 ; assert VAR_2 . METHOD_8 ( ) . METHOD_9 ( ) == VAR_4 ; return VAR_1 . METHOD_10 ( ) . METHOD_11 ( VAR_2 . METHOD_12 ( ) ) ; }", "comment": "JConstructor. No sense here to call that method on something else.", "tokenized_comment": ["JConstructor", ".", "<|s|>", "No", "<|s|>", "sense", "<|s|>", "here", "<|s|>", "to", "<|s|>", "call", "<|s|>", "that", "<|s|>", "method", "<|s|>", "on", "<|s|>", "something", "<|s|>", "else", "."], "tufano_code": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { assert METHOD_2 ( VAR_2 ) ; if ( VAR_2 . METHOD_3 ( ) ) { return false ; } if ( ! VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) || ! ( VAR_1 . METHOD_6 ( ) instanceof TYPE_3 ) ) { return false ; } assert VAR_1 . METHOD_7 ( ) == VAR_3 ; assert VAR_2 . METHOD_8 ( ) . METHOD_9 ( ) == VAR_4 ; return VAR_1 . METHOD_10 ( ) . METHOD_11 ( VAR_2 . METHOD_12 ( ) ) ; }", "our_target": "      @Nonnull JMethodCall call, @Nonnull JConstructor constructor) {\n", "our_code": "  public static boolean isConstructorDelegation(\n<|startfocus|>\n      @Nonnull JMethodCall call, @Nonnull JMethod constructor) {\n    assert isConstructor(constructor);\n    if (constructor.isStatic()) {\n      return false;\n    }\n\n<|endfocus|>\n    // Must be a constructor call on 'this'\n    if (!call.getMethodId().isInit() ||\n        !(call.getInstance() instanceof JThisRef)) {\n      return false;\n    }\n\n    assert call.getDispatchKind() == JMethodCall.DispatchKind.DIRECT;\n    assert constructor.getMethodIdWide().getKind() == MethodKind.INSTANCE_NON_VIRTUAL;\n\n    // Well, we assume that if the type of the receiver is not the type of the\n    // constructor we are analyzing, this must be a call to a super constructor\n    return call.getReceiverType().isSameType(constructor.getEnclosingType());\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "is", "Constructor", "Delegation", "(", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Nonnull", "<|s|>", "JMethod", "Call", "<|s|>", "call", ",", "<|s|>", "@", "Nonnull", "<|s|>", "JMethod", "<|s|>", "constructor", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "is", "Constructor", "(", "constructor", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "constructor", ".", "is", "Static", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Must", "<|s|>", "be", "<|s|>", "a", "<|s|>", "constructor", "<|s|>", "call", "<|s|>", "on", "<|s|>", "'", "this", "'", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "call", ".", "get", "Method", "Id", "(", ")", ".", "is", "Init", "(", ")", "<|s|>", "||", "<|nl|>", "<|8-s|>", "!", "(", "call", ".", "get", "Instance", "(", ")", "<|s|>", "instanceof", "<|s|>", "JThis", "Ref", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "call", ".", "get", "Dispatch", "Kind", "(", ")", "<|s|>", "==", "<|s|>", "JMethod", "Call", ".", "Dispatch", "Kind", ".", "DIRECT", ";", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "constructor", ".", "get", "Method", "Id", "Wide", "(", ")", ".", "get", "Kind", "(", ")", "<|s|>", "==", "<|s|>", "Method", "Kind", ".", "INSTANCE", "_", "NON", "_", "VIRTUAL", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Well", ",", "<|s|>", "we", "<|s|>", "assume", "<|s|>", "that", "<|s|>", "if", "<|s|>", "the", "<|s|>", "type", "<|s|>", "of", "<|s|>", "the", "<|s|>", "receiver", "<|s|>", "is", "<|s|>", "not", "<|s|>", "the", "<|s|>", "type", "<|s|>", "of", "<|s|>", "the", "<|nl|>", "<|4-s|>", "//", "<|s|>", "constructor", "<|s|>", "we", "<|s|>", "are", "<|s|>", "analyzing", ",", "<|s|>", "this", "<|s|>", "must", "<|s|>", "be", "<|s|>", "a", "<|s|>", "call", "<|s|>", "to", "<|s|>", "a", "<|s|>", "super", "<|s|>", "constructor", "<|nl|>", "<|4-s|>", "return", "<|s|>", "call", ".", "get", "Receiver", "Type", "(", ")", ".", "is", "Same", "Type", "(", "constructor", ".", "get", "Enclosing", "Type", "(", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 106, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2416", "comment_id": "af2eb88e_8b70ad59", "class_list": ["OptimizerUtils"], "func_list": ["public static boolean isConstructor(@Nonnull JMethod method)", "public static boolean isInAssignmentPosition(@Nonnull JExpression expr)", "public static boolean areSameValueLiterals(", "public static JValueLiteral cloneValueLiteral(@Nonnull JValueLiteral value)", "public static boolean isConstructorDelegation(", "private OptimizerUtils()"], "prime_var_dic": {"OptimizerUtils": 1}}, {"idx": 21829, "status": "update", "global_index": 17143, "project_name": "android_", "written_on": "2010-12-13 22:46:04", "tufano_target": "void METHOD_1 ( int VAR_1 ) { if ( ! VAR_2 ) { if ( VAR_1 == VAR_3 ) { if ( VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_5 , STRING_1 ) ; } } else { TYPE_2 msg = METHOD_4 ( VAR_8 ) ; METHOD_5 ( msg ) ; } } }", "comment": "In this case where CF is stored in SIM is the notifyCallForwardIndicator done by SIMRecords ? Because in the code that follows mCFOnBootDone will be set to true and CHECK_CALLFORWARDING_STATUS not sent.\n\nAlso comment says \"check with the network\". Where is that done?", "tokenized_comment": ["In", "<|s|>", "this", "<|s|>", "case", "<|s|>", "where", "<|s|>", "CF", "<|s|>", "is", "<|s|>", "stored", "<|s|>", "in", "<|s|>", "SIM", "<|s|>", "is", "<|s|>", "the", "<|s|>", "notify", "Call", "Forward", "Indicator", "<|s|>", "done", "<|s|>", "by", "<|s|>", "SIMRecords", "<|s|>", "?", "<|s|>", "Because", "<|s|>", "in", "<|s|>", "the", "<|s|>", "code", "<|s|>", "that", "<|s|>", "follows", "<|s|>", "m", "CFOn", "Boot", "Done", "<|s|>", "will", "<|s|>", "be", "<|s|>", "set", "<|s|>", "to", "<|s|>", "true", "<|s|>", "and", "<|s|>", "CHECK", "_", "CALLFORWARDING", "_", "STATUS", "<|s|>", "not", "<|s|>", "sent", ".", "<|nl|>", "<|nl|>", "Also", "<|s|>", "comment", "<|s|>", "says", "<|s|>", "\"", "check", "<|s|>", "with", "<|s|>", "the", "<|s|>", "network", "\"", ".", "<|s|>", "Where", "<|s|>", "is", "<|s|>", "that", "<|s|>", "done", "?"], "tufano_code": "void METHOD_1 ( int VAR_1 ) { if ( ! VAR_2 ) { if ( VAR_1 == VAR_3 ) { if ( VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_5 , STRING_1 ) ; } if ( VAR_6 != null && VAR_6 . METHOD_3 ( ) ) { if ( VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_5 , STRING_2 ) ; } VAR_2 = true ; } VAR_7 = true ; } if ( ! VAR_2 && VAR_7 ) { TYPE_2 msg = METHOD_4 ( VAR_8 ) ; METHOD_5 ( msg ) ; } } }", "our_target": "            } else {\n", "our_code": "    void onBootCallForwardStatus(int caller) {\n        if (!mCFOnBootDone) {\n            if (caller == EVENT_SIM_RECORDS_LOADED) {\n                if (LOCAL_DEBUG) {\n                    Log.d(LOG_TAG, \"onBootCallForwardStatus got sim records\");\n                }\n<|startfocus|>\n                if (mSIMRecords != null &&  mSIMRecords.isCallForwardStatusStored()) {\n                    //The Sim card has the CF info, so we dont need to check with the network\n                    if (LOCAL_DEBUG) {\n                        Log.d(LOG_TAG, \"info is present on sim\");\n                    }\n                    mCFOnBootDone = true;\n                }\n                mCFOnBootSim = true;\n            }\n\n            if (!mCFOnBootDone && mCFOnBootSim) {\n<|endfocus|>\n                Message msg = obtainMessage(CHECK_CALLFORWARDING_STATUS);\n                sendMessage(msg);\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "void", "<|s|>", "on", "Boot", "Call", "Forward", "Status", "(", "int", "<|s|>", "caller", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "m", "CFOn", "Boot", "Done", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "caller", "<|s|>", "==", "<|s|>", "EVENT", "_", "SIM", "_", "RECORDS", "_", "LOADED", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "LOCAL", "_", "DEBUG", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "Log", ".", "d", "(", "LOG", "_", "TAG", ",", "<|s|>", "\"", "on", "Boot", "Call", "Forward", "Status", "<|s|>", "got", "<|s|>", "sim", "<|s|>", "records", "\"", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "m", "SIMRecords", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|2-s|>", "m", "SIMRecords", ".", "is", "Call", "Forward", "Status", "Stored", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "//", "The", "<|s|>", "Sim", "<|s|>", "card", "<|s|>", "has", "<|s|>", "the", "<|s|>", "CF", "<|s|>", "info", ",", "<|s|>", "so", "<|s|>", "we", "<|s|>", "dont", "<|s|>", "need", "<|s|>", "to", "<|s|>", "check", "<|s|>", "with", "<|s|>", "the", "<|s|>", "network", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "LOCAL", "_", "DEBUG", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|8-s|>", "Log", ".", "d", "(", "LOG", "_", "TAG", ",", "<|s|>", "\"", "info", "<|s|>", "is", "<|s|>", "present", "<|s|>", "on", "<|s|>", "sim", "\"", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "<|4-s|>", "m", "CFOn", "Boot", "Done", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "m", "CFOn", "Boot", "Sim", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "m", "CFOn", "Boot", "Done", "<|s|>", "&&", "<|s|>", "m", "CFOn", "Boot", "Sim", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "Message", "<|s|>", "msg", "<|s|>", "=", "<|s|>", "obtain", "Message", "(", "CHECK", "_", "CALLFORWARDING", "_", "STATUS", ");", "<|nl|>", "<|16-s|>", "send", "Message", "(", "msg", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1440, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4938", "comment_id": "AAAA%2BX%2F%2F%2F6A%3D", "class_list": ["GSMPhone", "parameter", "used", "NetworkSelectMessage"], "func_list": ["new Runnable()", "public void run()", "public void dispose()", "public void removeReferences()", "protected void finalize()", "public CellLocation getCellLocation()", "public String getPhoneName()", "public int getPhoneType()", "public SignalStrength getSignalStrength()", "public boolean getMessageWaitingIndicator()", "public boolean getCallForwardingIndicator()", "public DataState getDataConnectionState()", "public DataActivityState getDataActivityState()", "void notifyUnknownConnection()", "void notifySuppServiceFailed(SuppService code)", "void notifyLocationChanged()", "public void registerForSuppServiceNotification(", "public void unregisterForSuppServiceNotification(Handler h)", "public boolean canConference()", "public boolean canDial()", "public void clearDisconnected()", "public boolean canTransfer()", "boolean isInCall()", "public boolean handlePinMmi(String dialString)", "public void sendUssdResponse(String ussdMessge)", "private void storeVoiceMailNumber(String number)", "public String getVoiceMailNumber()", "private String getVmSimImsi()", "private void setVmSimImsi(String imsi)", "public String getVoiceMailAlphaTag()", "public String getDeviceId()", "public String getDeviceSvn()", "public String getEsn()", "public String getMeid()", "public String getSubscriberId()", "public String getIccSerialNumber()", "public String getLine1Number()", "public String getLine1AlphaTag()", "public void setLine1Number(String alphaTag, String number, Message onComplete)", "public void setVoiceMailNumber(String alphaTag,", "private boolean isValidCommandInterfaceCFReason (int commandInterfaceCFReason)", "private boolean isValidCommandInterfaceCFAction (int commandInterfaceCFAction)", "protected  boolean isCfEnable(int action)", "public void getCallForwardingOption(int commandInterfaceCFReason, Message onComplete)", "public void setCallForwardingOption(int commandInterfaceCFAction,", "public void storeCFPref(boolean enabled)", "public void getOutgoingCallerIdDisplay(Message onComplete)", "public void setOutgoingCallerIdDisplay(int commandInterfaceCLIRMode,", "public void getCallWaiting(Message onComplete)", "public void setCallWaiting(boolean enable, Message onComplete)", "public IccCard getIccCard()", "public void setOnPostDialCharacter(Handler h, int what, Object obj)", "public void setMute(boolean muted)", "public boolean getMute()", "public void getDataCallList(Message response)", "public List<DataConnection> getCurrentDataConnectionList ()", "public void updateServiceLocation()", "public void enableLocationUpdates()", "public void disableLocationUpdates()", "public boolean getDataRoamingEnabled()", "public void setDataRoamingEnabled(boolean enable)", "public boolean enableDataConnectivity()", "public boolean disableDataConnectivity()", "public boolean isDataConnectivityPossible()", "private boolean retrieveCFPref()", "protected  void syncClirSetting()", "public void handleMessage (Message msg)", "boolean updateCurrentCarrierInProvider()", "void onBootCallForwardStatus(int caller)", "private void handleSetSelectNetwork(AsyncResult ar)", "public void saveClirSetting(int commandInterfaceCLIRMode)", "private void handleCfuQueryResult(CallForwardInfo[] infos)", "public PhoneSubInfo getPhoneSubInfo()", "public IccSmsInterfaceManager getIccSmsInterfaceManager()", "public IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()", "public IccFileHandler getIccFileHandler()", "public void activateCellBroadcastSms(int activate, Message response)", "public void getCellBroadcastSmsConfig(Message response)", "public void setCellBroadcastSmsConfig(int[] configValuesArray, Message response)", "public boolean isCspPlmnEnabled()", "public void setCallWaiting(boolean enable, Message onComplete)"], "prime_var_dic": {"NetworkSelectMessage": 1}}, {"idx": 36942, "status": "update", "global_index": 16232, "project_name": "android_", "written_on": "2015-03-23 11:46:27", "tufano_target": "public VAR_1 ( ) { super ( false ) ; String value = VAR_2 . getValue ( ) ; if ( ! TYPE_2 . isEmpty ( value ) ) { for ( String VAR_4 : TYPE_3 . METHOD_4 ( STRING_4 ) . split ( value ) ) { VAR_3 . add ( VAR_4 ) ; } } METHOD_3 ( STRING_3 ) ; init ( ) ; }", "comment": "I think Guava's Splitter has a nicer syntax:\nSplitter.on('|').split(value)", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "Guava", "'", "s", "<|s|>", "Splitter", "<|s|>", "has", "<|s|>", "a", "<|s|>", "nicer", "<|s|>", "syntax", ":", "<|nl|>", "Splitter", ".", "on", "(", "'", "|", "'", ")", ".", "split", "(", "value", ")"], "tufano_code": "public VAR_1 ( ) { super ( false ) ; String value = VAR_2 . getValue ( ) ; if ( value != null && value != STRING_1 ) { VAR_3 . METHOD_1 ( TYPE_1 . METHOD_2 ( value . split ( STRING_2 ) ) ) ; } METHOD_3 ( STRING_3 ) ; init ( ) ; }", "our_target": "      if (!StringUtil.isEmpty(value)) {\n       for (String flag : Splitter.on(\"|\").split(value)) {\n         mySelectedFlags.add(flag);\n       }\n", "our_code": "    public FlagDialog() {\n      super(false);\n      String value = myItem.getValue();\n<|startfocus|>\n      if (value != null && value != \"\") {\n        mySelectedFlags.addAll(Arrays.asList(value.split(\"\\\\|\")));\n<|endfocus|>\n      }\n      setTitle(\"Flag Options\");\n      init();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Flag", "Dialog", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "super", "(", "false", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "value", "<|s|>", "=", "<|s|>", "my", "Item", ".", "get", "Value", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "value", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "value", "<|s|>", "!=", "<|s|>", "\"", "\"", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "my", "Selected", "Flags", ".", "add", "All", "(", "Arrays", ".", "as", "List", "(", "value", ".", "split", "(", "\"", "\\", "\\", "|", "\"", ")", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "set", "Title", "(", "\"", "Flag", "<|s|>", "Options", "\"", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "init", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 110, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_259", "comment_id": "c61c8421_19f32fed", "class_list": ["FlagRendererEditor", "FlagDialog", "CheckBoxListener"], "func_list": ["public FlagRendererEditor(AttributeDefinitions attributeDefinitions)", "public void actionPerformed(final ActionEvent e)", "public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)", "public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)", "public Object getCellEditorValue()", "public FlagDialog()", "protected JComponent createCenterPanel()", "public String getValue()", "public void actionPerformed(ActionEvent e)"], "prime_var_dic": {"implements": 1}}, {"idx": 41621, "status": "update", "global_index": 3335, "project_name": "android_", "written_on": "2017-01-03 20:05:29", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { return new TYPE_1 ( VAR_3 , VAR_4 , METHOD_2 ( ) , VAR_5 , VAR_1 , VAR_6 , VAR_7 , VAR_8 , VAR_9 . METHOD_3 ( ) , VAR_10 , VAR_2 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_16 ) ; }", "comment": "To be consistent, can we create PasspointNetworkEvaluator the same way as SavedNetworkEvaluator and ExternalNetworkEvaluator?", "tokenized_comment": ["To", "<|s|>", "be", "<|s|>", "consistent", ",", "<|s|>", "can", "<|s|>", "we", "<|s|>", "create", "<|s|>", "Passpoint", "Network", "Evaluator", "<|s|>", "the", "<|s|>", "same", "<|s|>", "way", "<|s|>", "as", "<|s|>", "Saved", "Network", "Evaluator", "<|s|>", "and", "<|s|>", "External", "Network", "Evaluator", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { return new TYPE_1 ( VAR_3 , VAR_4 , METHOD_2 ( ) , VAR_5 , VAR_1 , VAR_6 , VAR_7 , VAR_8 , VAR_9 . METHOD_3 ( ) , VAR_10 , VAR_2 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , new TYPE_3 ( VAR_15 , VAR_5 , VAR_6 . METHOD_4 ( ) ) ) ; }", "our_target": "                mPasspointNetworkEvaluator);\n", "our_code": "    public WifiConnectivityManager makeWifiConnectivityManager(WifiInfo wifiInfo,\n                                                               boolean hasConnectionRequests) {\n        return new WifiConnectivityManager(mContext, mWifiStateMachine, getWifiScanner(),\n                mWifiConfigManager, wifiInfo, mWifiNetworkSelector, mWifiLastResortWatchdog,\n                mWifiMetrics, mWifiStateMachineHandlerThread.getLooper(), mClock,\n                hasConnectionRequests, mFrameworkFacade, mSavedNetworkEvaluator,\n                mExternalScoreEvaluator, mRecommendedNetworkEvaluator,\n<|startfocus|>\n                new PasspointNetworkEvaluator(mPasspointManager, mWifiConfigManager,\n                        mWifiNetworkSelector.getLocalLog()));\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Wifi", "Connectivity", "Manager", "<|s|>", "make", "Wifi", "Connectivity", "Manager", "(", "Wifi", "Info", "<|s|>", "wifi", "Info", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|12-s|>", "<|2-s|>", "<|s|>", "boolean", "<|s|>", "has", "Connection", "Requests", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "new", "<|s|>", "Wifi", "Connectivity", "Manager", "(", "m", "Context", ",", "<|s|>", "m", "Wifi", "State", "Machine", ",", "<|s|>", "get", "Wifi", "Scanner", "(", ")", ",", "<|nl|>", "<|16-s|>", "m", "Wifi", "Config", "Manager", ",", "<|s|>", "wifi", "Info", ",", "<|s|>", "m", "Wifi", "Network", "Selector", ",", "<|s|>", "m", "Wifi", "Last", "Resort", "Watchdog", ",", "<|nl|>", "<|16-s|>", "m", "Wifi", "Metrics", ",", "<|s|>", "m", "Wifi", "State", "Machine", "Handler", "Thread", ".", "get", "Looper", "(", ")", ",", "<|s|>", "m", "Clock", ",", "<|nl|>", "<|16-s|>", "has", "Connection", "Requests", ",", "<|s|>", "m", "Framework", "Facade", ",", "<|s|>", "m", "Saved", "Network", "Evaluator", ",", "<|nl|>", "<|16-s|>", "m", "External", "Score", "Evaluator", ",", "<|s|>", "m", "Recommended", "Network", "Evaluator", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Passpoint", "Network", "Evaluator", "(", "m", "Passpoint", "Manager", ",", "<|s|>", "m", "Wifi", "Config", "Manager", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "m", "Wifi", "Network", "Selector", ".", "get", "Local", "Log", "(", ")", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 394, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_4063", "comment_id": "d7c9e645_a9e0df0d", "class_list": ["instances", "instances", "WifiInjector"], "func_list": ["public WifiInjector(Context context)", "public static WifiInjector getInstance()", "public WifiMetrics getWifiMetrics()", "public BackupManagerProxy getBackupManagerProxy()", "public FrameworkFacade getFrameworkFacade()", "public HandlerThread getWifiServiceHandlerThread()", "public HandlerThread getWifiStateMachineHandlerThread()", "public WifiTrafficPoller getWifiTrafficPoller()", "public WifiCountryCode getWifiCountryCode()", "public WifiApConfigStore getWifiApConfigStore()", "public WifiStateMachine getWifiStateMachine()", "public WifiSettingsStore getWifiSettingsStore()", "public WifiCertManager getWifiCertManager()", "public WifiNotificationController getWifiNotificationController()", "public WifiWakeupController getWifiWakeupController()", "public WifiLockManager getWifiLockManager()", "public WifiController getWifiController()", "public WifiLastResortWatchdog getWifiLastResortWatchdog()", "public Clock getClock()", "public PropertyService getPropertyService()", "public BuildProperties getBuildProperties()", "public KeyStore getKeyStore()", "public WifiBackupRestore getWifiBackupRestore()", "public WifiMulticastLockManager getWifiMulticastLockManager()", "public WifiSupplicantControl getWifiSupplicantControl()", "public WifiConfigManager getWifiConfigManager()", "public PasspointManager getPasspointManager()", "public TelephonyManager makeTelephonyManager()", "public IWificond makeWificond()", "public SoftApManager makeSoftApManager(INetworkManagementService nmService,", "public WifiLog makeLog(String tag)", "public BaseWifiDiagnostics makeWifiDiagnostics(WifiNative wifiNative)", "public WifiNetworkSelector getWifiNetworkSelector()", "public WifiConnectivityManager makeWifiConnectivityManager(WifiInfo wifiInfo,", "public WifiPermissionsUtil getWifiPermissionsUtil()", "public WifiPermissionsWrapper getWifiPermissionsWrapper()", "public HandlerThread getmWifiAwareHandlerThread()", "public WifiInjector(Context context)", "public static WifiInjector getInstance()", "public WifiMetrics getWifiMetrics()", "public BackupManagerProxy getBackupManagerProxy()", "public FrameworkFacade getFrameworkFacade()", "public HandlerThread getWifiServiceHandlerThread()", "public HandlerThread getWifiStateMachineHandlerThread()", "public WifiTrafficPoller getWifiTrafficPoller()", "public WifiCountryCode getWifiCountryCode()", "public WifiApConfigStore getWifiApConfigStore()", "public WifiStateMachine getWifiStateMachine()", "public WifiSettingsStore getWifiSettingsStore()", "public WifiCertManager getWifiCertManager()", "public WifiNotificationController getWifiNotificationController()", "public WifiWakeupController getWifiWakeupController()", "public WifiLockManager getWifiLockManager()", "public WifiController getWifiController()", "public WifiLastResortWatchdog getWifiLastResortWatchdog()", "public Clock getClock()", "public PropertyService getPropertyService()", "public BuildProperties getBuildProperties()", "public KeyStore getKeyStore()", "public WifiBackupRestore getWifiBackupRestore()", "public WifiMulticastLockManager getWifiMulticastLockManager()", "public WifiSupplicantControl getWifiSupplicantControl()", "public WifiConfigManager getWifiConfigManager()", "public PasspointManager getPasspointManager()", "public TelephonyManager makeTelephonyManager()", "public IWificond makeWificond()", "public SoftApManager makeSoftApManager(INetworkManagementService nmService,", "public WifiLog makeLog(String tag)", "public BaseWifiDiagnostics makeWifiDiagnostics(WifiNative wifiNative)", "public WifiNetworkSelector getWifiNetworkSelector()", "public WifiConnectivityManager makeWifiConnectivityManager(WifiInfo wifiInfo,", "public WifiPermissionsUtil getWifiPermissionsUtil()", "public WifiPermissionsWrapper getWifiPermissionsWrapper()", "public HandlerThread getmWifiAwareHandlerThread()", "public WifiInjector(Context context)", "public static WifiInjector getInstance()", "public WifiMetrics getWifiMetrics()", "public BackupManagerProxy getBackupManagerProxy()", "public FrameworkFacade getFrameworkFacade()", "public HandlerThread getWifiServiceHandlerThread()", "public HandlerThread getWifiStateMachineHandlerThread()", "public WifiTrafficPoller getWifiTrafficPoller()", "public WifiCountryCode getWifiCountryCode()", "public WifiApConfigStore getWifiApConfigStore()", "public WifiStateMachine getWifiStateMachine()", "public WifiSettingsStore getWifiSettingsStore()", "public WifiCertManager getWifiCertManager()", "public WifiNotificationController getWifiNotificationController()", "public WifiWakeupController getWifiWakeupController()", "public WifiLockManager getWifiLockManager()", "public WifiController getWifiController()", "public WifiLastResortWatchdog getWifiLastResortWatchdog()", "public Clock getClock()", "public PropertyService getPropertyService()", "public BuildProperties getBuildProperties()", "public KeyStore getKeyStore()", "public WifiBackupRestore getWifiBackupRestore()", "public WifiMulticastLockManager getWifiMulticastLockManager()", "public WifiSupplicantControl getWifiSupplicantControl()", "public WifiConfigManager getWifiConfigManager()", "public PasspointManager getPasspointManager()", "public TelephonyManager makeTelephonyManager()", "public IWificond makeWificond()", "public SoftApManager makeSoftApManager(INetworkManagementService nmService,", "public WifiLog makeLog(String tag)", "public BaseWifiDiagnostics makeWifiDiagnostics(WifiNative wifiNative)", "public WifiNetworkSelector getWifiNetworkSelector()", "public WifiConnectivityManager makeWifiConnectivityManager(WifiInfo wifiInfo,", "public WifiPermissionsUtil getWifiPermissionsUtil()", "public WifiPermissionsWrapper getWifiPermissionsWrapper()", "public HandlerThread getmWifiAwareHandlerThread()"], "prime_var_dic": {"the": 1, "String": 2, "mContext": 1, "mWifiServiceHandlerThread": 1, "mWifiStateMachineHandlerThread": 1, "mTrafficPoller": 1, "mCountryCode": 1, "mWifiApConfigStore": 1, "mWifiNative": 1, "mWifiStateMachine": 1, "mSettingsStore": 1, "mCertManager": 1, "mNotificationController": 1, "mWifiWakeupController": 1, "mLockManager": 1, "mWifiController": 1, "mWifiLastResortWatchdog": 1, "mWifiMulticastLockManager": 1, "mWifiConfigStore": 1, "mWifiKeyStore": 1, "mWifiNetworkHistory": 1, "mWifiSupplicantControl": 1, "mIpConfigStore": 1, "mWifiConfigStoreLegacy": 1, "mWifiConfigManager": 1, "mWifiNetworkSelector": 1, "mSavedNetworkEvaluator": 1, "mExternalScoreEvaluator": 1, "mRecommendedNetworkEvaluator": 1, "mWifiNetworkScoreCache": 1, "mNetworkScoreManager": 1, "mWifiPermissionsWrapper": 1, "mWifiPermissionsUtil": 1, "mPasspointManager": 1, "mSimAccessor": 1, "mUseRealLogger": 1, "getInstanceWithContext": 1, "for": 1, "WifiConfiguration": 1, "instance": 1, "of": 2, "connection": 1}}, {"idx": 36348, "status": "update", "global_index": 2277, "project_name": "android_", "written_on": "2017-02-06 19:39:42", "tufano_target": "private void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; String VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 , VAR_4 , new TYPE_3 ( VAR_5 ) ) ; try { if ( VAR_2 != null || VAR_1 == VAR_3 . METHOD_4 ( ) . METHOD_5 ( VAR_2 , 0 ) ) { METHOD_6 ( ) ; } } catch ( TYPE_4 VAR_6 ) { if ( TYPE_5 . METHOD_7 ( STRING_1 , VAR_7 ) ) { METHOD_8 ( STRING_2 ) ; } METHOD_6 ( ) ; } }", "comment": "Simplify this to use the positive statement.", "tokenized_comment": ["Simplify", "<|s|>", "this", "<|s|>", "to", "<|s|>", "use", "<|s|>", "the", "<|s|>", "positive", "<|s|>", "statement", "."], "tufano_code": "private void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) ; String VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 , VAR_4 , new TYPE_3 ( VAR_5 ) ) ; try { if ( VAR_2 == null || VAR_1 != VAR_3 . METHOD_4 ( ) . METHOD_5 ( VAR_2 , 0 ) ) { METHOD_6 ( ) ; } } catch ( TYPE_4 VAR_6 ) { if ( TYPE_5 . METHOD_7 ( STRING_1 , VAR_7 ) ) { METHOD_8 ( STRING_2 ) ; } METHOD_6 ( ) ; } }", "our_target": "            if (carrierImsPackage != null\n                    || callingUid == mContext.getPackageManager().getPackageUid(\n", "our_code": "    private void enforceCarrierOrCarrierImsPrivilege() {\n        int callingUid = Binder.getCallingUid();\n        String carrierImsPackage = CarrierSmsUtils.getCarrierImsPackageForIntent(mContext, mPhone,\n                new Intent(CarrierMessagingService.SERVICE_INTERFACE));\n        try {\n<|startfocus|>\n            if (carrierImsPackage == null\n                    || callingUid != mContext.getPackageManager().getPackageUid(\n<|endfocus|>\n                            carrierImsPackage, 0)) {\n                enforceCarrierPrivilege();\n            }\n        } catch (PackageManager.NameNotFoundException e) {\n            if (Rlog.isLoggable(\"SMS\", Log.DEBUG)) {\n                log(\"Cannot find configured carrier ims package\");\n            }\n            enforceCarrierPrivilege();\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "enforce", "Carrier", "Or", "Carrier", "Ims", "Privilege", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "calling", "Uid", "<|s|>", "=", "<|s|>", "Binder", ".", "get", "Calling", "Uid", "(", ");", "<|nl|>", "<|8-s|>", "String", "<|s|>", "carrier", "Ims", "Package", "<|s|>", "=", "<|s|>", "Carrier", "Sms", "Utils", ".", "get", "Carrier", "Ims", "Package", "For", "Intent", "(", "m", "Context", ",", "<|s|>", "m", "Phone", ",", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Intent", "(", "Carrier", "Messaging", "Service", ".", "SERVICE", "_", "INTERFACE", ")", ");", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "carrier", "Ims", "Package", "<|s|>", "==", "<|s|>", "null", "<|nl|>", "<|16-s|>", "<|4-s|>", "||", "<|s|>", "calling", "Uid", "<|s|>", "!=", "<|s|>", "m", "Context", ".", "get", "Package", "Manager", "(", ")", ".", "get", "Package", "Uid", "(", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "carrier", "Ims", "Package", ",", "<|s|>", "0", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "enforce", "Carrier", "Privilege", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Package", "Manager", ".", "Name", "Not", "Found", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "Rlog", ".", "is", "Loggable", "(", "\"", "SMS", "\"", ",", "<|s|>", "Log", ".", "DEBUG", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "log", "(", "\"", "Cannot", "<|s|>", "find", "<|s|>", "configured", "<|s|>", "carrier", "<|s|>", "ims", "<|s|>", "package", "\"", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "enforce", "Carrier", "Privilege", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1126, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4679", "comment_id": "e47d48bb_683f5ac6", "class_list": ["IccSmsInterfaceManager", "CellBroadcastRangeManager", "CdmaBroadcastRangeManager"], "func_list": ["public void handleMessage(Message msg)", "protected IccSmsInterfaceManager(Phone phone)", "protected void markMessagesAsRead(ArrayList<byte[]> messages)", "protected void updatePhoneObject(Phone phone)", "protected void enforceReceiveAndSend(String message)", "public boolean copyMessageToIccEf(String callingPackage, int status, byte[] pdu, byte[] smsc)", "public List<SmsRawData> getAllMessagesFromIccEf(String callingPackage)", "public void sendDataWithSelfPermissions(String callingPackage, String destAddr, String scAddr,", "public void sendDataWithSelfPermissions(String callingPackage, String destAddr, String scAddr,", "private void sendDataInternal(String callingPackage, String destAddr, String scAddr,", "public void sendText(String callingPackage, String destAddr, String scAddr,", "public void sendTextWithSelfPermissions(String callingPackage, String destAddr, String scAddr,", "private void sendTextInternal(String callingPackage, String destAddr, String scAddr,", "public void injectSmsPdu(byte[] pdu, String format, PendingIntent receivedIntent)", "public void sendMultipartText(String callingPackage, String destAddr, String scAddr,", "public int getPremiumSmsPermission(String packageName)", "public void setPremiumSmsPermission(String packageName, int permission)", "protected ArrayList<SmsRawData> buildValidRawData(ArrayList<byte[]> messages)", "protected byte[] makeSmsRecordData(int status, byte[] pdu)", "public boolean enableCellBroadcast(int messageIdentifier, int ranType)", "public boolean disableCellBroadcast(int messageIdentifier, int ranType)", "public boolean enableCellBroadcastRange(int startMessageId, int endMessageId, int ranType)", "public boolean disableCellBroadcastRange(int startMessageId, int endMessageId, int ranType)", "synchronized public boolean enableGsmBroadcastRange(int startMessageId, int endMessageId)", "synchronized public boolean disableGsmBroadcastRange(int startMessageId, int endMessageId)", "synchronized public boolean enableCdmaBroadcastRange(int startMessageId, int endMessageId)", "synchronized public boolean disableCdmaBroadcastRange(int startMessageId, int endMessageId)", "protected void startUpdate()", "protected void addRange(int startId, int endId, boolean selected)", "protected boolean finishUpdate()", "private boolean setCellBroadcastConfig(SmsBroadcastConfigInfo[] configs)", "private boolean setCellBroadcastActivation(boolean activate)", "private boolean setCdmaBroadcastConfig(CdmaSmsBroadcastConfigInfo[] configs)", "private boolean setCdmaBroadcastActivation(boolean activate)", "protected void log(String msg)", "public boolean isImsSmsSupported()", "public String getImsSmsFormat()", "public void sendStoredText(String callingPkg, Uri messageUri, String scAddress,", "public void sendStoredMultipartText(String callingPkg, Uri messageUri, String scAddress,", "private boolean isFailedOrDraft(ContentResolver resolver, Uri messageUri)", "private String[] loadTextAndAddress(ContentResolver resolver, Uri messageUri)", "private void returnUnspecifiedFailure(PendingIntent pi)", "private void enforceCarrierPrivilege()", "private void enforceCarrierOrCarrierImsPrivilege()", "private void enforceCarrierOrPhonePrivilege()", "private String filterDestAddress(String destAddr)", "public void handleMessage(Message msg)", "public void handleMessage(Message msg)"], "prime_var_dic": {"int": 6, "mContext": 1, "mAppOps": 1, "mUserManager": 1}}, {"idx": 60567, "status": "update", "global_index": 16420, "project_name": "android_", "written_on": "2015-06-08 22:20:07", "tufano_target": "public void execute ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( ) . METHOD_2 ( VAR_2 class , new TYPE_2 < TYPE_3 > ( ) { public void execute ( TYPE_3 VAR_3 ) { for ( TYPE_4 VAR_4 : VAR_5 ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( INT_1 , VAR_6 . METHOD_6 ( ) . METHOD_8 ( VAR_4 . getName ( ) ) , STRING_1 ) ; } } } ) ; }", "comment": "break here", "tokenized_comment": ["break", "<|s|>", "here"], "tufano_code": "public void execute ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( ) . METHOD_2 ( VAR_2 class , new TYPE_2 < TYPE_3 > ( ) { public void execute ( TYPE_3 VAR_3 ) { for ( TYPE_4 VAR_4 : VAR_5 ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( INT_1 , VAR_6 . METHOD_6 ( ) . METHOD_7 ( VAR_4 . getName ( ) ) , STRING_1 ) ; } } } ) ; }", "our_target": "                        upload.getRepositories().withType(\n                                MavenDeployer.class,\n                                new Action<MavenDeployer>() {\n                                    @Override\n                                    public void execute(MavenDeployer mavenDeployer) {\n                                        for (Configuration config : flattenedConfigs) {\n                                            mavenDeployer.getPom().getScopeMappings().addMapping(\n                                                    300,\n                                                    project.getConfigurations().getByName(\n                                                            config.getName()),\n                                                    \"compile\");\n                                        }\n                                    }\n                                });\n", "our_code": "                    public void execute(Upload upload) {\n<|startfocus|>\n                        upload.getRepositories()\n                                .withType(MavenDeployer.class, new Action<MavenDeployer>() {\n                            @Override\n                            public void execute(MavenDeployer mavenDeployer) {\n                                for (Configuration config : flattenedConfigs) {\n                                    mavenDeployer.getPom().getScopeMappings().addMapping(\n                                            300,\n                                            project.getConfigurations().getAt(config.getName()),\n                                            \"compile\");\n                                }\n                            }\n                        });\n<|endfocus|>\n                    }", "tokenized_code": ["<|16-s|>", "<|4-s|>", "public", "<|s|>", "void", "<|s|>", "execute", "(", "Upload", "<|s|>", "upload", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "upload", ".", "get", "Repositories", "(", ")", "<|nl|>", "<|16-s|>", "<|16-s|>", ".", "with", "Type", "(", "Maven", "Deployer", ".", "class", ",", "<|s|>", "new", "<|s|>", "Action", "<", "Maven", "Deployer", ">", "(", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|16-s|>", "<|12-s|>", "public", "<|s|>", "void", "<|s|>", "execute", "(", "Maven", "Deployer", "<|s|>", "maven", "Deployer", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "for", "<|s|>", "(", "Configuration", "<|s|>", "config", "<|s|>", ":", "<|s|>", "flattened", "Configs", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "maven", "Deployer", ".", "get", "Pom", "(", ")", ".", "get", "Scope", "Mappings", "(", ")", ".", "add", "Mapping", "(", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|12-s|>", "300", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|12-s|>", "project", ".", "get", "Configurations", "(", ")", ".", "get", "At", "(", "config", ".", "get", "Name", "(", ")", ")", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|12-s|>", "\"", "compile", "\"", ");", "<|nl|>", "<|16-s|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "<|12-s|>", "}", "<|nl|>", "<|16-s|>", "<|8-s|>", "}", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "}"], "base_code_line_number": 58, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1077", "comment_id": "796b8031_6583fd54", "class_list": ["VariantHelper"], "func_list": ["public static void setupDefaultConfig(", "public void execute(MavenPlugin mavenPlugin)", "private static Set<Configuration> flattenConfigurations(@NonNull Configuration configuration)"], "prime_var_dic": {"configuration": 1}}, {"idx": 51174, "status": "update", "global_index": 18312, "project_name": "android_", "written_on": "2010-04-12 22:08:30", "tufano_target": "protected void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) != VAR_1 ) { VAR_2 . setEnabled ( false ) ; VAR_3 . setEnabled ( false ) ; } else { VAR_2 . setEnabled ( true ) ; if ( METHOD_4 ( ) ) { VAR_3 . setEnabled ( true ) ; } else { VAR_3 . setEnabled ( false ) ; } } super . METHOD_1 ( ) ; }", "comment": "This needs to be conditional. This should only be enabled on devices with both NV and RUIM. Otherwise the system should just default to the appropriate type.", "tokenized_comment": ["This", "<|s|>", "needs", "<|s|>", "to", "<|s|>", "be", "<|s|>", "conditional", ".", "<|s|>", "This", "<|s|>", "should", "<|s|>", "only", "<|s|>", "be", "<|s|>", "enabled", "<|s|>", "on", "<|s|>", "devices", "<|s|>", "with", "<|s|>", "both", "<|s|>", "NV", "<|s|>", "and", "<|s|>", "RUIM", ".", "<|s|>", "Otherwise", "<|s|>", "the", "<|s|>", "system", "<|s|>", "should", "<|s|>", "just", "<|s|>", "default", "<|s|>", "to", "<|s|>", "the", "<|s|>", "appropriate", "<|s|>", "type", "."], "tufano_code": "protected void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) != VAR_1 ) { VAR_2 . setEnabled ( false ) ; VAR_3 . setEnabled ( false ) ; } else { VAR_2 . setEnabled ( true ) ; VAR_3 . setEnabled ( true ) ; } super . METHOD_1 ( ) ; }", "our_target": "            if(deviceSupportsNvAndRuim()) {\n                mButtonCdmaSubscription.setEnabled(true);\n            } else {\n                mButtonCdmaSubscription.setEnabled(false);\n            }\n", "our_code": "    protected void onResume() {\n        if (PhoneFactory.getDefaultPhone().getPhoneType() != Phone.PHONE_TYPE_CDMA) {\n            mButtonCdmaRoam.setEnabled(false);\n            mButtonCdmaSubscription.setEnabled(false);\n        } else {\n            mButtonCdmaRoam.setEnabled(true);\n<|startfocus|>\n            mButtonCdmaSubscription.setEnabled(true);\n<|endfocus|>\n        }\n        super.onResume();\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "on", "Resume", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "Phone", "Factory", ".", "get", "Default", "Phone", "(", ")", ".", "get", "Phone", "Type", "(", ")", "<|s|>", "!=", "<|s|>", "Phone", ".", "PHONE", "_", "TYPE", "_", "CDMA", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Button", "Cdma", "Roam", ".", "set", "Enabled", "(", "false", ");", "<|nl|>", "<|12-s|>", "m", "Button", "Cdma", "Subscription", ".", "set", "Enabled", "(", "false", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Button", "Cdma", "Roam", ".", "set", "Enabled", "(", "true", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "m", "Button", "Cdma", "Subscription", ".", "set", "Enabled", "(", "true", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "super", ".", "on", "Resume", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 59, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4376", "comment_id": "AAAAwX%2F%2F%2FRo%3D", "class_list": ["CdmaOptions"], "func_list": ["protected void onCreate(Bundle icicle)", "protected void onResume()", "public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference)"], "prime_var_dic": {"String": 2}}, {"idx": 19824, "status": "update", "global_index": 4154, "project_name": "android_", "written_on": "2016-06-30 17:09:48", "tufano_target": "private static String METHOD_1 ( String VAR_1 ) { String VAR_2 = null ; TYPE_1 VAR_3 = TYPE_2 . getContext ( ) . METHOD_2 ( ) ; try { VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , 0 ) . VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } return VAR_6 ; }", "comment": "this does not include library path inside apk iirc - this might present a problem if/when CTS test will stop extracting libraries from apk", "tokenized_comment": ["this", "<|s|>", "does", "<|s|>", "not", "<|s|>", "include", "<|s|>", "library", "<|s|>", "path", "<|s|>", "inside", "<|s|>", "apk", "<|s|>", "iirc", "<|s|>", "-", "<|s|>", "this", "<|s|>", "might", "<|s|>", "present", "<|s|>", "a", "<|s|>", "problem", "<|s|>", "if", "/", "when", "<|s|>", "CTS", "<|s|>", "test", "<|s|>", "will", "<|s|>", "stop", "<|s|>", "extracting", "<|s|>", "libraries", "<|s|>", "from", "<|s|>", "apk"], "tufano_code": "private static String METHOD_1 ( String VAR_1 ) { String VAR_2 = null ; TYPE_1 VAR_3 = TYPE_2 . getContext ( ) . METHOD_2 ( ) ; try { VAR_2 = VAR_3 . METHOD_3 ( VAR_1 , 0 ) . VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } if ( VAR_2 == null ) { throw new TYPE_5 ( STRING_1 + VAR_1 ) ; } return VAR_2 ; }", "our_target": "        return nativePath;\n", "our_code": "    private static String getNativePath(String packageName) {\n        String apkPath = null;\n        PackageManager pm = InstrumentationRegistry.getContext().getPackageManager();\n        try {\n            apkPath = pm.getApplicationInfo(packageName, 0).nativeLibraryDir;\n        } catch (NameNotFoundException nnfe) {\n            throw new RuntimeException(nnfe);\n        }\n<|startfocus|>\n\n        if (apkPath == null) {\n            throw new IllegalStateException(\"No APK path found for \" + packageName);\n        }\n        return apkPath;\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "get", "Native", "Path", "(", "String", "<|s|>", "package", "Name", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "<|s|>", "apk", "Path", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "Package", "Manager", "<|s|>", "pm", "<|s|>", "=", "<|s|>", "Instrumentation", "Registry", ".", "get", "Context", "(", ")", ".", "get", "Package", "Manager", "(", ");", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "apk", "Path", "<|s|>", "=", "<|s|>", "pm", ".", "get", "Application", "Info", "(", "package", "Name", ",", "<|s|>", "0", ")", ".", "native", "Library", "Dir", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Name", "Not", "Found", "Exception", "<|s|>", "nnfe", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "nnfe", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "apk", "Path", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "\"", "No", "<|s|>", "APK", "<|s|>", "path", "<|s|>", "found", "<|s|>", "for", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "package", "Name", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "apk", "Path", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 115, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5361", "comment_id": "9dca1638_aea917a3", "class_list": ["LinkerNamespacesHelper", "loaders.", "loader", "should", "ClassNamespaceA", "ClassNamespaceB"], "func_list": ["private static String getTargetPath(String packageName)", "private static String getNativePath(String packageName)"], "prime_var_dic": {}}, {"idx": 615, "status": "update", "global_index": 5019, "project_name": "android_", "written_on": "2016-08-19 12:58:01", "tufano_target": "public VAR_1 ( String VAR_2 , TYPE_1 VAR_3 , String VAR_4 , TYPE_2 VAR_5 ) { super ( VAR_5 ) ; this . VAR_6 = new TYPE_3 ( this , VAR_2 , VAR_4 , VAR_3 ) ; }", "comment": "From your other change, it looks like you require this buffer to be Direct. Is that to avoid having to copy the buffer ? \n\nI wonder if we can ever avoid copying the buffer because apps can write to the underlying memory (even if if dexBuffer.isReadOnly())..\n\nFor now, maybe you'll want to throw here if !dexBuffer.isDirect() || !dexBuffer.isReadOnly()", "tokenized_comment": ["From", "<|s|>", "your", "<|s|>", "other", "<|s|>", "change", ",", "<|s|>", "it", "<|s|>", "looks", "<|s|>", "like", "<|s|>", "you", "<|s|>", "require", "<|s|>", "this", "<|s|>", "buffer", "<|s|>", "to", "<|s|>", "be", "<|s|>", "Direct", ".", "<|s|>", "Is", "<|s|>", "that", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "having", "<|s|>", "to", "<|s|>", "copy", "<|s|>", "the", "<|s|>", "buffer", "<|s|>", "?", "<|s|>", "<|nl|>", "<|nl|>", "I", "<|s|>", "wonder", "<|s|>", "if", "<|s|>", "we", "<|s|>", "can", "<|s|>", "ever", "<|s|>", "avoid", "<|s|>", "copying", "<|s|>", "the", "<|s|>", "buffer", "<|s|>", "because", "<|s|>", "apps", "<|s|>", "can", "<|s|>", "write", "<|s|>", "to", "<|s|>", "the", "<|s|>", "underlying", "<|s|>", "memory", "<|s|>", "(", "even", "<|s|>", "if", "<|s|>", "if", "<|s|>", "dex", "Buffer", ".", "is", "Read", "Only", "(", ")", ")", "..", "<|nl|>", "<|nl|>", "For", "<|s|>", "now", ",", "<|s|>", "maybe", "<|s|>", "you", "'", "ll", "<|s|>", "want", "<|s|>", "to", "<|s|>", "throw", "<|s|>", "here", "<|s|>", "if", "<|s|>", "!", "dex", "Buffer", ".", "is", "Direct", "(", ")", "<|s|>", "||", "<|s|>", "!", "dex", "Buffer", ".", "is", "Read", "Only", "(", ")"], "tufano_code": "public VAR_1 ( String VAR_2 , TYPE_1 VAR_3 , String VAR_4 , TYPE_2 VAR_5 ) { super ( VAR_5 ) ; this . VAR_6 = new TYPE_3 ( this , VAR_2 , VAR_4 , null ) ; if ( VAR_7 != null ) { VAR_7 . METHOD_1 ( this . VAR_6 . METHOD_2 ( ) ) ; } }", "our_target": "        this.pathList = new DexPathList(this, dexPath, librarySearchPath, optimizedDirectory);\n", "our_code": "    public BaseDexClassLoader(String dexPath, File optimizedDirectory,\n            String librarySearchPath, ClassLoader parent) {\n        super(parent);\n<|startfocus|>\n        this.pathList = new DexPathList(this, dexPath, librarySearchPath, null);\n\n        if (reporter != null) {\n            reporter.report(this.pathList.getDexPaths());\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Base", "Dex", "Class", "Loader", "(", "String", "<|s|>", "dex", "Path", ",", "<|s|>", "File", "<|s|>", "optimized", "Directory", ",", "<|nl|>", "<|12-s|>", "String", "<|s|>", "library", "Search", "Path", ",", "<|s|>", "Class", "Loader", "<|s|>", "parent", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", "(", "parent", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "this", ".", "path", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Dex", "Path", "List", "(", "this", ",", "<|s|>", "dex", "Path", ",", "<|s|>", "library", "Search", "Path", ",", "<|s|>", "null", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "reporter", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "reporter", ".", "report", "(", "this", ".", "path", "List", ".", "get", "Dex", "Paths", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 62, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_1595", "comment_id": "6873e7d0_59562364", "class_list": ["for", "BaseDexClassLoader", "loader", "\\\"\"", "don't", ""], "func_list": ["public BaseDexClassLoader(String dexPath, File optimizedDirectory,", "public void addDexPath(String dexPath)", "protected URL findResource(String name)", "protected Enumeration<URL> findResources(String name)", "public String findLibrary(String name)", "public String getLdLibraryPath()", "@Override public String toString()", "public static void setReporter(Reporter newReporter)", "public static Reporter getReporter()", "public BaseDexClassLoader(String dexPath, File optimizedDirectory,"], "prime_var_dic": {"License": 1}}, {"idx": 88323, "status": "update", "global_index": 8628, "project_name": "android_", "written_on": "2015-08-11 15:04:47", "tufano_target": "public static int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 <= 0 ) { return VAR_3 ; } else { if ( VAR_2 == INT_1 ) { String VAR_4 = VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ; return STRING_1 . equals ( VAR_4 ) ? VAR_7 : INT_1 ; } return VAR_2 ; } }", "comment": "This if-block doesn't seem necessary - the 'return \"M\".equals(...)' logic should cover it", "tokenized_comment": ["This", "<|s|>", "if", "-", "block", "<|s|>", "doesn", "'", "t", "<|s|>", "seem", "<|s|>", "necessary", "<|s|>", "-", "<|s|>", "the", "<|s|>", "'", "return", "<|s|>", "\"", "M", "\"", ".", "equals", "(", "...", ")", "'", "<|s|>", "logic", "<|s|>", "should", "<|s|>", "cover", "<|s|>", "it"], "tufano_code": "public static int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 <= 0 ) { return VAR_3 ; } else { if ( VAR_2 == INT_1 ) { String VAR_4 = VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ; if ( VAR_4 == null ) { return INT_1 ; } return STRING_1 . equals ( VAR_4 ) ? VAR_6 : INT_1 ; } return VAR_2 ; } }", "our_target": "        return \"M\".equals(versionString) ? MSampler.MIN_API_LEVEL : 22;\n", "our_code": "  public static int decodeApiLevel(@NotNull Client client) {\n    int apiLevel = client.getDevice().getApiLevel();\n    if (apiLevel <= 0) {\n      return J_API_LEVEL;\n    }\n    else {\n      // TODO remove this version promotion workaround after M launches\n      if (apiLevel == 22) {\n        String versionString = client.getDevice().getProperty(IDevice.PROP_BUILD_VERSION);\n<|startfocus|>\n        if (versionString == null) {\n          return 22;\n        }\n        return \"M\".equals(versionString) ? M_API_LEVEL : 22;\n<|endfocus|>\n      }\n      return apiLevel;\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "int", "<|s|>", "decode", "Api", "Level", "(", "@", "Not", "Null", "<|s|>", "Client", "<|s|>", "client", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "int", "<|s|>", "api", "Level", "<|s|>", "=", "<|s|>", "client", ".", "get", "Device", "(", ")", ".", "get", "Api", "Level", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "api", "Level", "<|s|>", "<=", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "J", "_", "API", "_", "LEVEL", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "TODO", "<|s|>", "remove", "<|s|>", "this", "<|s|>", "version", "<|s|>", "promotion", "<|s|>", "workaround", "<|s|>", "after", "<|s|>", "M", "<|s|>", "launches", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "api", "Level", "<|s|>", "==", "<|s|>", "22", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "<|s|>", "version", "String", "<|s|>", "=", "<|s|>", "client", ".", "get", "Device", "(", ")", ".", "get", "Property", "(", "IDevice", ".", "PROP", "_", "BUILD", "_", "VERSION", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "version", "String", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "22", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "\"", "M", "\"", ".", "equals", "(", "version", "String", ")", "<|s|>", "?", "<|s|>", "M", "_", "API", "_", "LEVEL", "<|s|>", ":", "<|s|>", "22", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "api", "Level", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 124, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_470", "comment_id": "67e03f3d_42f772c6", "class_list": ["GpuSampler"], "func_list": ["public GpuSampler(int sampleFrequencyMs)", "public String getName()", "public String getDescription()", "public int getApiLevel()", "protected boolean requiresSamplerRestart(@Nullable Client client)", "protected void prepareSampler(@Nullable Client client)", "public static int decodeApiLevel(@NotNull Client client)"], "prime_var_dic": {"J_API_LEVEL": 1, "L_API_LEVEL": 1, "M_API_LEVEL": 1}}, {"idx": 94138, "status": "insert", "global_index": 17760, "project_name": "android_", "written_on": "2012-06-18 17:13:05", "tufano_target": "protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 VAR_1 = VAR_2 ; VAR_1 . METHOD_2 ( false ) ; TYPE_4 < String , TYPE_5 > VAR_3 = new TYPE_6 < String , TYPE_5 > ( ) ; METHOD_3 ( VAR_3 ) ; return VAR_1 . METHOD_4 ( VAR_4 , VAR_3 ) ; }", "comment": "Maybe change the comment to explain that we don't need to create backups since this merge is happening as part of the new project flow.", "tokenized_comment": ["Maybe", "<|s|>", "change", "<|s|>", "the", "<|s|>", "comment", "<|s|>", "to", "<|s|>", "explain", "<|s|>", "that", "<|s|>", "we", "<|s|>", "don", "'", "t", "<|s|>", "need", "<|s|>", "to", "<|s|>", "create", "<|s|>", "backups", "<|s|>", "since", "<|s|>", "this", "<|s|>", "merge", "<|s|>", "is", "<|s|>", "happening", "<|s|>", "as", "<|s|>", "part", "<|s|>", "of", "<|s|>", "the", "<|s|>", "new", "<|s|>", "project", "<|s|>", "flow", "."], "tufano_code": "protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 VAR_1 = VAR_2 ; VAR_1 . METHOD_2 ( false ) ; TYPE_4 < String , TYPE_5 > VAR_3 = new TYPE_6 < String , TYPE_5 > ( ) ; METHOD_3 ( VAR_3 ) ; return VAR_1 . METHOD_4 ( VAR_4 , VAR_3 ) ; }", "our_target": "        // of the merged files (such as the manifest file) in that case.\n        // (NOTE: After the change from direct file manipulation to creating a list of Change\n        // objects, this no longer applies - but the code is kept around a little while longer\n        // in case we want to generate change objects that makes backups of merged files)\n", "our_code": "    protected List<Change> computeChanges() {\n        final TemplateHandler template = mValues.template;\n        // We'll be merging in an activity template, but don't create *~ backup files\n<|startfocus|>\n        // of the merged files (such as the manifest file) in that case.\n<|endfocus|>\n        template.setBackupMergedFiles(false);\n\n        // Generate basic output skeleton\n        Map<String, Object> paramMap = new HashMap<String, Object>();\n        addProjectInfo(paramMap);\n\n        return template.render(mProject, paramMap);\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "List", "<", "Change", ">", "<|s|>", "compute", "Changes", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Template", "Handler", "<|s|>", "template", "<|s|>", "=", "<|s|>", "m", "Values", ".", "template", ";", "<|nl|>", "<|8-s|>", "//", "<|s|>", "We", "'", "ll", "<|s|>", "be", "<|s|>", "merging", "<|s|>", "in", "<|s|>", "an", "<|s|>", "activity", "<|s|>", "template", ",", "<|s|>", "but", "<|s|>", "don", "'", "t", "<|s|>", "create", "<|s|>", "*", "~", "<|s|>", "backup", "<|s|>", "files", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "of", "<|s|>", "the", "<|s|>", "merged", "<|s|>", "files", "<|s|>", "(", "such", "<|s|>", "as", "<|s|>", "the", "<|s|>", "manifest", "<|s|>", "file", ")", "<|s|>", "in", "<|s|>", "that", "<|s|>", "case", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "template", ".", "set", "Backup", "Merged", "Files", "(", "false", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Generate", "<|s|>", "basic", "<|s|>", "output", "<|s|>", "skeleton", "<|nl|>", "<|8-s|>", "Map", "<", "String", ",", "<|s|>", "Object", ">", "<|s|>", "param", "Map", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hash", "Map", "<", "String", ",", "<|s|>", "Object", ">", "(", ");", "<|nl|>", "<|8-s|>", "add", "Project", "Info", "(", "param", "Map", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "template", ".", "render", "(", "m", "Project", ",", "<|s|>", "param", "Map", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 213, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1913", "comment_id": "AAAGon%2F%2F%2Fwc%3D", "class_list": ["NewProjectWizard"], "func_list": ["public void init(IWorkbench workbench, IStructuredSelection selection)", "public void addPages()", "public IWizardPage getNextPage(IWizardPage page)", "public boolean canFinish()", "protected IProject getProject()", "protected List<String> getFilesToOpen()", "protected List<Change> computeChanges()", "private void generateIcons(final IProject newProject)", "private void addProjectInfo(Map<String, Object> parameters)"], "prime_var_dic": {"String": 1, "ATTR_TARGET_API": 1, "ATTR_MIN_API": 1, "ATTR_MIN_API_LEVEL": 1, "ATTR_PACKAGE_NAME": 1, "ATTR_APP_TITLE": 1, "created": 1, "proguard": 1, "template": 1, "InvocationTargetException": 1}}, {"idx": 84482, "status": "update", "global_index": 12749, "project_name": "android_", "written_on": "2014-09-23 15:54:17", "tufano_target": "public void setText ( String [ ] VAR_1 , String VAR_2 ) { VAR_3 = VAR_2 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { append ( VAR_1 [ i ] ) ; if ( i < VAR_1 . length - 1 ) { METHOD_1 ( ) ; } } }", "comment": "@Nullable", "tokenized_comment": ["@", "Nullable"], "tufano_code": "public void setText ( String [ ] VAR_1 , String VAR_2 ) { VAR_3 = VAR_2 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { append ( VAR_1 [ i ] ) ; if ( i < VAR_1 . length - 1 ) { METHOD_1 ( ) ; } } }", "our_target": "  public void setText(@NotNull String[] lines, @Nullable String prefix) {\n", "our_code": "<|startfocus|>\n  public void setText(String[] lines, String prefix) {\n<|endfocus|>\n    myPrefix = prefix;\n    for (int i = 0; i < lines.length; i++) {\n      append(lines[i]);\n      if (i < lines.length - 1) {\n        appendLineBreak();\n      }\n    }\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Text", "(", "String", "[", "]", "<|s|>", "lines", ",", "<|s|>", "String", "<|s|>", "prefix", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Prefix", "<|s|>", "=", "<|s|>", "prefix", ";", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "lines", ".", "length", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "append", "(", "lines", "[", "i", "]", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "i", "<|s|>", "<", "<|s|>", "lines", ".", "length", "<|s|>", "-", "<|s|>", "1", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "append", "Line", "Break", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 98, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_606", "comment_id": "d01507f5_0398d862", "class_list": ["MultilineColoredTreeCellRenderer"], "func_list": ["protected MultilineColoredTreeCellRenderer()", "public void propertyChange(PropertyChangeEvent evt)", "protected void setMinHeight(int height)", "private void onFontChanged()", "private FontMetrics getCurrFontMetrics()", "public void setText(String[] lines, String prefix)", "protected void beforePaintText(@NotNull Graphics g, int x, int textBaseLine)", "public Dimension getMinimumSize()", "private static int getChildIndent(JTree tree)", "private static int getAvailableWidth(Object forValue, JTree tree)", "else if (tree.getUI() instanceof WideSelectionTreeUI && ((WideSelectionTreeUI)tree.getUI()).isWideSelection())", "public static JScrollPane installRenderer(final JTree tree, final MultilineColoredTreeCellRenderer renderer)", "public void setSize(Dimension d)", "public void setBounds(int x, int y, int width, int height)", "private void resetCaches()", "public void addNotify()", "public void removeNotify()", "public void componentResized(ComponentEvent e)", "public void componentShown(ComponentEvent e)", "private static void resetHeightCache(final JTree tree,", "public JTree getTree()", "protected boolean calcFocusedState()", "public void setOpaque(boolean isOpaque)", "public Font getFont()", "public void append(@NotNull @Nls String fragment, @NotNull SimpleTextAttributes attributes, boolean isMainText)"], "prime_var_dic": {"myPrefix": 1}}, {"idx": 65214, "status": "update", "global_index": 20394, "project_name": "android_", "written_on": "2013-02-22 20:23:32", "tufano_target": "private VAR_1 ( TYPE_1 < TYPE_2 > VAR_2 , int type , byte [ ] VAR_3 ) { super ( STRING_1 ) ; switch ( type ) { case VAR_4 : VAR_5 = VAR_3 ; break ; case VAR_6 : VAR_7 = VAR_3 ; break ; default : throw new TYPE_3 ( STRING_2 + type ) ; } VAR_8 = VAR_2 ; }", "comment": "All CertPath implementations are required to be thread-safe.\n\nThese two assignments (pkiPathEncoding and pkcs7Encoding) in the constructor are not guaranteed to be visible to other threads (at least in the Java Memory Model, I'm not sure about the Dalvik's one). Thus, if another thread invokes getEncoded(), it might get an array with contents different from the one in \"encodedPath\" here.", "tokenized_comment": ["All", "<|s|>", "Cert", "Path", "<|s|>", "implementations", "<|s|>", "are", "<|s|>", "required", "<|s|>", "to", "<|s|>", "be", "<|s|>", "thread", "-", "safe", ".", "<|nl|>", "<|nl|>", "These", "<|s|>", "two", "<|s|>", "assignments", "<|s|>", "(", "pki", "Path", "Encoding", "<|s|>", "and", "<|s|>", "pkcs", "7", "Encoding", ")", "<|s|>", "in", "<|s|>", "the", "<|s|>", "constructor", "<|s|>", "are", "<|s|>", "not", "<|s|>", "guaranteed", "<|s|>", "to", "<|s|>", "be", "<|s|>", "visible", "<|s|>", "to", "<|s|>", "other", "<|s|>", "threads", "<|s|>", "(", "at", "<|s|>", "least", "<|s|>", "in", "<|s|>", "the", "<|s|>", "Java", "<|s|>", "Memory", "<|s|>", "Model", ",", "<|s|>", "I", "'", "m", "<|s|>", "not", "<|s|>", "sure", "<|s|>", "about", "<|s|>", "the", "<|s|>", "Dalvik", "'", "s", "<|s|>", "one", ")", ".", "<|s|>", "Thus", ",", "<|s|>", "if", "<|s|>", "another", "<|s|>", "thread", "<|s|>", "invokes", "<|s|>", "get", "Encoded", "(", ")", ",", "<|s|>", "it", "<|s|>", "might", "<|s|>", "get", "<|s|>", "an", "<|s|>", "array", "<|s|>", "with", "<|s|>", "contents", "<|s|>", "different", "<|s|>", "from", "<|s|>", "the", "<|s|>", "one", "<|s|>", "in", "<|s|>", "\"", "encoded", "Path", "\"", "<|s|>", "here", "."], "tufano_code": "private VAR_1 ( TYPE_1 < TYPE_2 > VAR_2 , int type , byte [ ] VAR_3 ) { super ( STRING_1 ) ; if ( type == VAR_4 ) { VAR_5 = VAR_3 ; } else if ( type == VAR_6 ) { VAR_7 = VAR_3 ; } else { throw new TYPE_3 ( STRING_2 + type ) ; } VAR_8 = VAR_2 ; }", "our_target": "        switch (type) {\n            case PKI_PATH:\n                pkiPathEncoding = encodedPath;\n                break;\n            case PKCS7:\n                pkcs7Encoding = encodedPath;\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown encoding type: \" + type);\n", "our_code": "    private X509CertPathImpl(List<X509Certificate> certs, int type, byte[] encodedPath) {\n        super(\"X.509\");\n\n<|startfocus|>\n        if (type == PKI_PATH) {\n            pkiPathEncoding = encodedPath;\n        } else if (type == PKCS7) {\n            pkcs7Encoding = encodedPath;\n        } else {\n            throw new IllegalArgumentException(\"unknown encoding type: \" + type);\n<|endfocus|>\n        }\n\n        certificates = certs;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "X", "509", "Cert", "Path", "Impl", "(", "List", "<", "X", "509", "Certificate", ">", "<|s|>", "certs", ",", "<|s|>", "int", "<|s|>", "type", ",", "<|s|>", "byte", "[", "]", "<|s|>", "encoded", "Path", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", "(", "\"", "X", ".", "509", "\"", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "type", "<|s|>", "==", "<|s|>", "PKI", "_", "PATH", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "pki", "Path", "Encoding", "<|s|>", "=", "<|s|>", "encoded", "Path", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "type", "<|s|>", "==", "<|s|>", "PKCS", "7", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "pkcs", "7", "Encoding", "<|s|>", "=", "<|s|>", "encoded", "Path", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "unknown", "<|s|>", "encoding", "<|s|>", "type", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "type", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "certificates", "<|s|>", "=", "<|s|>", "certs", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 152, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_3136", "comment_id": "QOusxTRc", "class_list": ["is", "X509CertPathImpl", "of"], "func_list": ["private X509CertPathImpl(List<X509Certificate> certs, int type, byte[] encodedPath)", "private static boolean isSorted(List<X509Certificate> certs)", "private static List<X509Certificate> sortCerts(final List<X509Certificate> certs)", "public List<X509Certificate> getCertificates()", "public Iterator<String> getEncodings()", "public Collection<byte[]> getValues(Object object)", "protected void getValues(Object object, Object[] values)", "private X509CertPathImpl(List<X509Certificate> certs, int type, byte[] encodedPath)", "private static boolean isSorted(List<X509Certificate> certs)", "private static List<X509Certificate> sortCerts(final List<X509Certificate> certs)", "public List<X509Certificate> getCertificates()", "public Iterator<String> getEncodings()", "public Collection<byte[]> getValues(Object object)", "protected void getValues(Object object, Object[] values)", "private X509CertPathImpl(List<X509Certificate> certs, int type, byte[] encodedPath)", "private static boolean isSorted(List<X509Certificate> certs)", "private static List<X509Certificate> sortCerts(final List<X509Certificate> certs)", "public List<X509Certificate> getCertificates()", "public Iterator<String> getEncodings()", "public Collection<byte[]> getValues(Object object)", "protected void getValues(Object object, Object[] values)"], "prime_var_dic": {"License": 1, "in": 1, "on": 1, "String": 2, "long": 1, "int": 2, "of": 3, "match": 1, "stream": 1, "implementations": 1, "more": 3, "content": 1, "encodings": 1, "byte": 2, "DigestAlgorithms": 1, "oid": 1}}, {"idx": 9588, "status": "update", "global_index": 3058, "project_name": "android_", "written_on": "2016-07-04 10:55:54", "tufano_target": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; boolean VAR_2 = ( METHOD_2 ( ) >= 0 ) ; VAR_1 . METHOD_3 ( VAR_3 ) . METHOD_4 ( true ) ; VAR_1 . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_2 && VAR_8 ) ; return true ; }", "comment": "In line 151, there is same call. Why don't you define this as method to avoid duplication of code?\n\ne.g.\nprivate boolean isFdnDirectDialSupported()", "tokenized_comment": ["In", "<|s|>", "line", "<|s|>", "151", ",", "<|s|>", "there", "<|s|>", "is", "<|s|>", "same", "<|s|>", "call", ".", "<|s|>", "Why", "<|s|>", "don", "'", "t", "<|s|>", "you", "<|s|>", "define", "<|s|>", "this", "<|s|>", "as", "<|s|>", "method", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "duplication", "<|s|>", "of", "<|s|>", "code", "?", "<|nl|>", "<|nl|>", "e", ".", "g", ".", "<|nl|>", "private", "<|s|>", "boolean", "<|s|>", "is", "Fdn", "Direct", "Dial", "Supported", "(", ")"], "tufano_code": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; boolean VAR_2 = ( METHOD_2 ( ) >= 0 ) ; VAR_1 . METHOD_3 ( VAR_3 ) . METHOD_4 ( true ) ; VAR_1 . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_2 && VAR_7 . getBoolean ( STRING_1 ) ) ; return true ; }", "our_target": "                && mFdnDialDirectlySupported);\n", "our_code": "    public boolean onPrepareOptionsMenu(Menu menu) {\n        super.onPrepareOptionsMenu(menu);\n        boolean hasSelection = (getSelectedItemPosition() >= 0);\n\n        menu.findItem(MENU_ADD).setVisible(true);\n        menu.findItem(MENU_EDIT).setVisible(hasSelection);\n        menu.findItem(MENU_DELETE).setVisible(hasSelection);\n        menu.findItem(MENU_DIAL).setVisible(hasSelection\n<|startfocus|>\n                && carrierConfig.getBoolean(\"config_fdn_direct_dial\"));\n<|endfocus|>\n\n        return true;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "on", "Prepare", "Options", "Menu", "(", "Menu", "<|s|>", "menu", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Prepare", "Options", "Menu", "(", "menu", ");", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "has", "Selection", "<|s|>", "=", "<|s|>", "(", "get", "Selected", "Item", "Position", "(", ")", "<|s|>", ">=", "<|s|>", "0", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "menu", ".", "find", "Item", "(", "MENU", "_", "ADD", ")", ".", "set", "Visible", "(", "true", ");", "<|nl|>", "<|8-s|>", "menu", ".", "find", "Item", "(", "MENU", "_", "EDIT", ")", ".", "set", "Visible", "(", "has", "Selection", ");", "<|nl|>", "<|8-s|>", "menu", ".", "find", "Item", "(", "MENU", "_", "DELETE", ")", ".", "set", "Visible", "(", "has", "Selection", ");", "<|nl|>", "<|8-s|>", "menu", ".", "find", "Item", "(", "MENU", "_", "DIAL", ")", ".", "set", "Visible", "(", "has", "Selection", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "&&", "<|s|>", "carrier", "Config", ".", "get", "Boolean", "(", "\"", "config", "_", "fdn", "_", "direct", "_", "dial", "\"", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 112, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4391", "comment_id": "9db0560b_fb5d4f67", "class_list": ["FdnList", "SelectionPopUpMenu"], "func_list": ["public void onCreate(Bundle icicle)", "protected Uri resolveIntent()", "public boolean onCreateOptionsMenu(Menu menu)", "public boolean onPrepareOptionsMenu(Menu menu)", "public boolean onOptionsItemSelected(MenuItem item)", "public void onListItemClick(ListView l, View v, int position, long id)", "private void addContact()", "private void editSelected()", "private void deleteSelected()", "public static Uri getContentUri(SubscriptionInfoHelper subscriptionInfoHelper)", "private void dialSelected()", "public boolean onMenuItemClick(MenuItem item)", "public SelectionPopUpMenu(Context context, View anchor, int position)", "public void showPopUp()", "private void addContact()", "private void editSelected()"], "prime_var_dic": {}}, {"idx": 58185, "status": "update", "global_index": 12474, "project_name": "android_", "written_on": "2014-09-04 18:19:04", "tufano_target": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 + STRING_2 + VAR_4 + STRING_3 + VAR_5 ) ; boolean VAR_6 = VAR_7 || TYPE_3 . METHOD_3 ( TYPE_4 . get ( VAR_8 ) ) ; boolean VAR_9 = ( VAR_4 == VAR_10 ) ; if ( VAR_9 != VAR_6 ) { try { VAR_11 . METHOD_4 ( VAR_5 , VAR_12 ) ; } catch ( TYPE_5 VAR_13 ) { TYPE_2 . METHOD_5 ( VAR_3 , STRING_4 ) ; } } else { METHOD_6 ( VAR_1 ) ; } }", "comment": "I found the comment and the overall logic is quite confusing here. Do you mean you won't ignore emergency SUPL INIT when ES bit is off and UE is not in emergency?", "tokenized_comment": ["I", "<|s|>", "found", "<|s|>", "the", "<|s|>", "comment", "<|s|>", "and", "<|s|>", "the", "<|s|>", "overall", "<|s|>", "logic", "<|s|>", "is", "<|s|>", "quite", "<|s|>", "confusing", "<|s|>", "here", ".", "<|s|>", "Do", "<|s|>", "you", "<|s|>", "mean", "<|s|>", "you", "<|s|>", "won", "'", "t", "<|s|>", "ignore", "<|s|>", "emergency", "<|s|>", "SUPL", "<|s|>", "INIT", "<|s|>", "when", "<|s|>", "ES", "<|s|>", "bit", "<|s|>", "is", "<|s|>", "off", "<|s|>", "and", "<|s|>", "UE", "<|s|>", "is", "<|s|>", "not", "<|s|>", "in", "<|s|>", "emergency", "?"], "tufano_code": "private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) TYPE_2 . METHOD_2 ( VAR_3 , STRING_1 + STRING_2 + VAR_4 + STRING_3 + VAR_5 ) ; boolean VAR_6 = VAR_7 || TYPE_3 . METHOD_3 ( TYPE_4 . get ( VAR_8 ) ) ; boolean VAR_9 = ( VAR_4 == VAR_10 ) ; if ( VAR_9 != VAR_6 ) { try { VAR_11 . METHOD_4 ( VAR_5 , VAR_12 ) ; } catch ( TYPE_5 VAR_13 ) { TYPE_2 . METHOD_5 ( VAR_3 , STRING_4 ) ; } } else { METHOD_6 ( VAR_1 ) ; } }", "our_target": "        /*\n           1. When SUPL ES bit is off and UE is not in emergency mode:\n                  Call handleNi() to do legacy behaviour.\n           2. When SUPL ES bit is on and UE is in emergency mode:\n                  Call handleNi() to do acceptance behaviour.\n           3. When SUPL ES bit is off but UE is in emergency mode:\n                  Ignore the emergency SUPL INIT.\n           4. When SUPL ES bit is on but UE is not in emergency mode:\n                  Ignore the emergency SUPL INIT.\n", "our_code": "    private void handleNiInEs(GpsNiNotification notif) {\n\n        if (DEBUG) Log.d(TAG, \"in handleNiInEs () :\"\n                    + \" niType: \" + notif.niType\n                    + \" notificationId: \" + notif.notificationId);\n\n        // UE is in emergency mode when in emergency call mode or in emergency call back mode\n        boolean isUEInEmergencyMode = mIsInEmergency ||\n            Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE));\n\n<|startfocus|>\n        /* Ignore the emergency SUPL INIT when :\n               SUPL ES bit is not on but UE is in emergency mode\n           Ignore the emergency SUPL INIT when :\n               SUPL ES bit is on but UE is not in emergency mode\n<|endfocus|>\n        */\n        boolean isNiTypeES = (notif.niType == GPS_NI_TYPE_EMERGENCY_SUPL);\n        if (isNiTypeES != isUEInEmergencyMode) {\n            try {\n                mNetInitiatedListener.sendNiResponse(notif.notificationId,\n                                                     GPS_NI_RESPONSE_IGNORE);\n            } catch (RemoteException e) {\n                Log.e(TAG, \"RemoteException in sendNiResponse\");\n            }\n        } else {\n            handleNi(notif);\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "handle", "Ni", "In", "Es", "(", "Gps", "Ni", "Notification", "<|s|>", "notif", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "DEBUG", ")", "<|s|>", "Log", ".", "d", "(", "TAG", ",", "<|s|>", "\"", "in", "<|s|>", "handle", "Ni", "In", "Es", "<|s|>", "(", ")", "<|s|>", ":", "\"", "<|nl|>", "<|16-s|>", "<|4-s|>", "+", "<|s|>", "\"", "<|s|>", "ni", "Type", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "notif", ".", "ni", "Type", "<|nl|>", "<|16-s|>", "<|4-s|>", "+", "<|s|>", "\"", "<|s|>", "notification", "Id", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "notif", ".", "notification", "Id", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "UE", "<|s|>", "is", "<|s|>", "in", "<|s|>", "emergency", "<|s|>", "mode", "<|s|>", "when", "<|s|>", "in", "<|s|>", "emergency", "<|s|>", "call", "<|s|>", "mode", "<|s|>", "or", "<|s|>", "in", "<|s|>", "emergency", "<|s|>", "call", "<|s|>", "back", "<|s|>", "mode", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "is", "UEIn", "Emergency", "Mode", "<|s|>", "=", "<|s|>", "m", "Is", "In", "Emergency", "<|s|>", "||", "<|nl|>", "<|12-s|>", "Boolean", ".", "parse", "Boolean", "(", "System", "Properties", ".", "get", "(", "Telephony", "Properties", ".", "PROPERTY", "_", "INECM", "_", "MODE", ")", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "/*", "<|s|>", "Ignore", "<|s|>", "the", "<|s|>", "emergency", "<|s|>", "SUPL", "<|s|>", "INIT", "<|s|>", "when", "<|s|>", ":", "<|nl|>", "<|12-s|>", "<|2-s|>", "<|s|>", "SUPL", "<|s|>", "ES", "<|s|>", "bit", "<|s|>", "is", "<|s|>", "not", "<|s|>", "on", "<|s|>", "but", "<|s|>", "UE", "<|s|>", "is", "<|s|>", "in", "<|s|>", "emergency", "<|s|>", "mode", "<|nl|>", "<|8-s|>", "<|2-s|>", "<|s|>", "Ignore", "<|s|>", "the", "<|s|>", "emergency", "<|s|>", "SUPL", "<|s|>", "INIT", "<|s|>", "when", "<|s|>", ":", "<|nl|>", "<|12-s|>", "<|2-s|>", "<|s|>", "SUPL", "<|s|>", "ES", "<|s|>", "bit", "<|s|>", "is", "<|s|>", "on", "<|s|>", "but", "<|s|>", "UE", "<|s|>", "is", "<|s|>", "not", "<|s|>", "in", "<|s|>", "emergency", "<|s|>", "mode", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "*/", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "is", "Ni", "Type", "ES", "<|s|>", "=", "<|s|>", "(", "notif", ".", "ni", "Type", "<|s|>", "==", "<|s|>", "GPS", "_", "NI", "_", "TYPE", "_", "EMERGENCY", "_", "SUPL", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "is", "Ni", "Type", "ES", "<|s|>", "!=", "<|s|>", "is", "UEIn", "Emergency", "Mode", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "m", "Net", "Initiated", "Listener", ".", "send", "Ni", "Response", "(", "notif", ".", "notification", "Id", ",", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "<|s|>", "GPS", "_", "NI", "_", "RESPONSE", "_", "IGNORE", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Remote", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "Remote", "Exception", "<|s|>", "in", "<|s|>", "send", "Ni", "Response", "\"", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "handle", "Ni", "(", "notif", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 272, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_2944", "comment_id": "30e023af_4fbc2dc6", "class_list": ["used", "GpsNetInitiatedHandler", "GpsNiNotification", "GpsNiResponse", "GpsNetInitiatedHandler"], "func_list": ["@Override public void onReceive(Context context, Intent intent)", "public GpsNetInitiatedHandler(Context context,", "public void onCallStateChanged(int state, String incomingNumber)", "public void handleNiNotification(GpsNiNotification notif)", "private void handleNiInEs(GpsNiNotification notif)", "@Override public void onReceive(Context context, Intent intent)", "public GpsNetInitiatedHandler(Context context,", "public void onCallStateChanged(int state, String incomingNumber)", "public void handleNiNotification(GpsNiNotification notif)", "private void handleNiInEs(GpsNiNotification notif)"], "prime_var_dic": {"String": 10, "boolean": 2, "int": 16, "mContext": 1, "mTelephonyManager": 1, "mPhoneStateListener": 1, "provider": 1, "mLocationManager": 1, "behavior": 1, "form": 1, "mIsSuplEsEnabled": 1, "mIsInEmergency": 1, "mNetInitiatedListener": 1, "mIsHexInput": 1, "GpsNiNotification": 1, "GpsNiResponse": 1, "from": 1, "notification": 1, "here": 1, "user": 1, "the": 1, "be": 1}}, {"idx": 93392, "status": "update", "global_index": 1820, "project_name": "android_", "written_on": "2017-04-24 20:09:43", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . getString ( VAR_4 ) ) ; String msg = VAR_1 . getString ( VAR_5 ) ; METHOD_3 ( VAR_2 , msg ) ; if ( VAR_2 == VAR_6 ) { METHOD_4 ( ) ; } } }", "comment": "this is repeated at line 187 - 190. Can you refactor them into a method and call it from both places?", "tokenized_comment": ["this", "<|s|>", "is", "<|s|>", "repeated", "<|s|>", "at", "<|s|>", "line", "<|s|>", "187", "<|s|>", "-", "<|s|>", "190", ".", "<|s|>", "Can", "<|s|>", "you", "<|s|>", "refactor", "<|s|>", "them", "<|s|>", "into", "<|s|>", "a", "<|s|>", "method", "<|s|>", "and", "<|s|>", "call", "<|s|>", "it", "<|s|>", "from", "<|s|>", "both", "<|s|>", "places", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . getString ( VAR_4 ) ) ; String msg = VAR_1 . getString ( VAR_5 ) ; METHOD_3 ( VAR_2 , msg ) ; if ( VAR_2 == VAR_6 ) { TYPE_3 VAR_7 = new TYPE_3 ( ) ; VAR_8 = VAR_9 ; VAR_10 . METHOD_4 ( VAR_7 , VAR_11 ) ; } } }", "our_target": "                startWps();\n", "our_code": "    public void onRestoreInstanceState(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            super.onRestoreInstanceState(savedInstanceState);\n            DialogState dialogState = mDialogState.valueOf(savedInstanceState.getString(DIALOG_STATE));\n            String msg = savedInstanceState.getString(DIALOG_MSG_STRING);\n            updateDialog(dialogState, msg);\n            if (dialogState == DialogState.WPS_START) {\n<|startfocus|>\n                WpsInfo wpsConfig = new WpsInfo();\n                wpsConfig.setup = mWpsSetup;\n                mWifiManager.startWps(wpsConfig, mWpsListener);\n<|endfocus|>\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Restore", "Instance", "State", "(", "Bundle", "<|s|>", "saved", "Instance", "State", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "saved", "Instance", "State", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "super", ".", "on", "Restore", "Instance", "State", "(", "saved", "Instance", "State", ");", "<|nl|>", "<|12-s|>", "Dialog", "State", "<|s|>", "dialog", "State", "<|s|>", "=", "<|s|>", "m", "Dialog", "State", ".", "value", "Of", "(", "saved", "Instance", "State", ".", "get", "String", "(", "DIALOG", "_", "STATE", ")", ");", "<|nl|>", "<|12-s|>", "String", "<|s|>", "msg", "<|s|>", "=", "<|s|>", "saved", "Instance", "State", ".", "get", "String", "(", "DIALOG", "_", "MSG", "_", "STRING", ");", "<|nl|>", "<|12-s|>", "update", "Dialog", "(", "dialog", "State", ",", "<|s|>", "msg", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "dialog", "State", "<|s|>", "==", "<|s|>", "Dialog", "State", ".", "WPS", "_", "START", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "Wps", "Info", "<|s|>", "wps", "Config", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Wps", "Info", "(", ");", "<|nl|>", "<|16-s|>", "wps", "Config", ".", "setup", "<|s|>", "=", "<|s|>", "m", "Wps", "Setup", ";", "<|nl|>", "<|16-s|>", "m", "Wifi", "Manager", ".", "start", "Wps", "(", "wps", "Config", ",", "<|s|>", "m", "Wps", "Listener", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 157, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4494", "comment_id": "47b69ced_a3e33d05", "class_list": ["WpsDialog", "WpsListener"], "func_list": ["public WpsDialog(Context context, int wpsSetup)", "public void onStarted(String pin)", "public void onSucceeded()", "public void onFailed(int reason)", "public void onReceive(Context context, Intent intent)", "public Bundle onSaveInstanceState ()", "public void onRestoreInstanceState(Bundle savedInstanceState)", "protected void onCreate(Bundle savedInstanceState)", "public void onClick(View v)", "public void onStarted(String pin)", "public void run()", "protected void onStop()", "private void updateDialog(final DialogState state, final String msg)", "private void handleEvent(Context context, Intent intent)"], "prime_var_dic": {"mWpsListener": 1, "mFilter": 1, "done": 1}}, {"idx": 28847, "status": "update", "global_index": 15313, "project_name": "android_", "written_on": "2014-06-18 23:59:27", "tufano_target": "public void METHOD_1 ( int VAR_1 ) { final int VAR_2 = VAR_3 ; long [ ] src = new long [ VAR_2 ] ; long [ ] VAR_4 = new long [ VAR_2 ] ; for ( int VAR_5 = 0 ; VAR_5 < VAR_1 ; ++ VAR_5 ) { TYPE_1 . METHOD_2 ( src , 0 , VAR_4 , 0 , VAR_2 ) ; } }", "comment": "long[]?", "tokenized_comment": ["long", "[", "]", "?"], "tufano_code": "public void METHOD_1 ( int VAR_1 ) { final int VAR_2 = VAR_3 ; char [ ] src = new char [ VAR_2 ] ; char [ ] VAR_4 = new char [ VAR_2 ] ; for ( int VAR_5 = 0 ; VAR_5 < VAR_1 ; ++ VAR_5 ) { TYPE_1 . METHOD_2 ( src , 0 , VAR_4 , 0 , VAR_2 ) ; } }", "our_target": "    long[] src = new long[len];\n    long[] dst = new long[len];\n", "our_code": "  public void timeSystemLongArrayCopy(int reps) {\n    final int len = arrayLength;\n<|startfocus|>\n    char[] src = new char[len];\n    char[] dst = new char[len];\n<|endfocus|>\n    for (int rep = 0; rep < reps; ++rep) {\n      System.arraycopy(src, 0, dst, 0, len);\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "time", "System", "Long", "Array", "Copy", "(", "int", "<|s|>", "reps", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "final", "<|s|>", "int", "<|s|>", "len", "<|s|>", "=", "<|s|>", "array", "Length", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "char", "[", "]", "<|s|>", "src", "<|s|>", "=", "<|s|>", "new", "<|s|>", "char", "[", "len", "];", "<|nl|>", "<|4-s|>", "char", "[", "]", "<|s|>", "dst", "<|s|>", "=", "<|s|>", "new", "<|s|>", "char", "[", "len", "];", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "rep", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "rep", "<|s|>", "<", "<|s|>", "reps", ";", "<|s|>", "++", "rep", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "System", ".", "arraycopy", "(", "src", ",", "<|s|>", "0", ",", "<|s|>", "dst", ",", "<|s|>", "0", ",", "<|s|>", "len", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 68, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_970", "comment_id": "44b4f5af_281e8bf4", "class_list": ["SystemArrayCopyBenchmark"], "func_list": ["public void timeSystemCharArrayCopy(int reps)", "public void timeSystemByteArrayCopy(int reps)", "public void timeSystemShortArrayCopy(int reps)", "public void timeSystemIntArrayCopy(int reps)", "public void timeSystemLongArrayCopy(int reps)", "public void timeSystemFloatArrayCopy(int reps)", "public void timeSystemDoubleArrayCopy(int reps)", "public void timeSystemBooleanArrayCopy(int reps)"], "prime_var_dic": {}}, {"idx": 89365, "status": "update", "global_index": 4827, "project_name": "android_", "written_on": "2016-12-16 15:09:43", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < String > VAR_2 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_2 ( STRING_3 ) ; METHOD_5 ( VAR_2 ) ; VAR_2 . METHOD_2 ( STRING_4 ) ; }", "comment": "once...", "tokenized_comment": ["once", "..."], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < String > VAR_2 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_2 ( STRING_3 ) ; METHOD_5 ( VAR_2 ) ; VAR_2 . METHOD_2 ( STRING_4 ) ; }", "our_target": "    // TODO This doCall function is a very temporary fix until we get either deoptimization near\n    // runtime frames working, forcing current method to be always read from the stack or both\n    // working.\n", "our_code": "  public void sayHi(Runnable r, Consumer<String> reporter) {\n    reporter.accept(\"Pre Start private method call\");\n    Start(reporter);\n    reporter.accept(\"Post Start private method call\");\n    // TODO Revist with b/33616143\n    // TODO Uncomment this\n    // r.run();\n<|startfocus|>\n    // TODO This is a very temporary fix until we get either deoptimization near runtime frames\n    // working, forcing current method to be always read from the stack or both working.\n<|endfocus|>\n    Main.doCall(r);\n    reporter.accept(\"Pre Finish private method call\");\n    Finish(reporter);\n    reporter.accept(\"Post Finish private method call\");\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "say", "Hi", "(", "Runnable", "<|s|>", "r", ",", "<|s|>", "Consumer", "<", "String", ">", "<|s|>", "reporter", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "reporter", ".", "accept", "(", "\"", "Pre", "<|s|>", "Start", "<|s|>", "private", "<|s|>", "method", "<|s|>", "call", "\"", ");", "<|nl|>", "<|4-s|>", "Start", "(", "reporter", ");", "<|nl|>", "<|4-s|>", "reporter", ".", "accept", "(", "\"", "Post", "<|s|>", "Start", "<|s|>", "private", "<|s|>", "method", "<|s|>", "call", "\"", ");", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", "<|s|>", "Revist", "<|s|>", "with", "<|s|>", "b", "/", "3361614", "3", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", "<|s|>", "Uncomment", "<|s|>", "this", "<|nl|>", "<|4-s|>", "//", "<|s|>", "r", ".", "run", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", "<|s|>", "This", "<|s|>", "is", "<|s|>", "a", "<|s|>", "very", "<|s|>", "temporary", "<|s|>", "fix", "<|s|>", "until", "<|s|>", "we", "<|s|>", "get", "<|s|>", "either", "<|s|>", "deoptimization", "<|s|>", "near", "<|s|>", "runtime", "<|s|>", "frames", "<|nl|>", "<|4-s|>", "//", "<|s|>", "working", ",", "<|s|>", "forcing", "<|s|>", "current", "<|s|>", "method", "<|s|>", "to", "<|s|>", "be", "<|s|>", "always", "<|s|>", "read", "<|s|>", "from", "<|s|>", "the", "<|s|>", "stack", "<|s|>", "or", "<|s|>", "both", "<|s|>", "working", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Main", ".", "do", "Call", "(", "r", ");", "<|nl|>", "<|4-s|>", "reporter", ".", "accept", "(", "\"", "Pre", "<|s|>", "Finish", "<|s|>", "private", "<|s|>", "method", "<|s|>", "call", "\"", ");", "<|nl|>", "<|4-s|>", "Finish", "(", "reporter", ");", "<|nl|>", "<|4-s|>", "reporter", ".", "accept", "(", "\"", "Post", "<|s|>", "Finish", "<|s|>", "private", "<|s|>", "method", "<|s|>", "call", "\"", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 33, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_5196", "comment_id": "faa88ff5_2cb5137e", "class_list": ["Transform"], "func_list": ["private void Start(Consumer<String> reporter)", "private void Finish(Consumer<String> reporter)", "public void sayHi(Runnable r, Consumer<String> reporter)"], "prime_var_dic": {}}, {"idx": 12944, "status": "update", "global_index": 15144, "project_name": "android_", "written_on": "2014-05-23 17:13:55", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_10 ) { super ( new TYPE_2 ( ) ) ; VAR_4 = new TYPE_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; add ( VAR_5 , VAR_6 ) ; VAR_7 = VAR_2 ; VAR_8 = TYPE_5 . METHOD_1 ( VAR_7 , VAR_3 ) ; VAR_9 = VAR_8 != null ? TYPE_6 . get ( VAR_8 ) : null ; if ( VAR_9 == null ) { TYPE_7 . METHOD_2 ( STRING_1 + VAR_3 ) ; } }", "comment": "\"moduleName\" is been used everywhere in classes in this package, when in reality this is the \"Gradle path\" (2 very different things.) Please change the name here and the rest needs to be fixed in future CLs.)", "tokenized_comment": ["\"", "module", "Name", "\"", "<|s|>", "is", "<|s|>", "been", "<|s|>", "used", "<|s|>", "everywhere", "<|s|>", "in", "<|s|>", "classes", "<|s|>", "in", "<|s|>", "this", "<|s|>", "package", ",", "<|s|>", "when", "<|s|>", "in", "<|s|>", "reality", "<|s|>", "this", "<|s|>", "is", "<|s|>", "the", "<|s|>", "\"", "Gradle", "<|s|>", "path", "\"", "<|s|>", "(", "2", "<|s|>", "very", "<|s|>", "different", "<|s|>", "things", ".", ")", "<|s|>", "Please", "<|s|>", "change", "<|s|>", "the", "<|s|>", "name", "<|s|>", "here", "<|s|>", "and", "<|s|>", "the", "<|s|>", "rest", "<|s|>", "needs", "<|s|>", "to", "<|s|>", "be", "<|s|>", "fixed", "<|s|>", "in", "<|s|>", "future", "<|s|>", "CLs", ".", ")"], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 ) { super ( new TYPE_2 ( ) ) ; VAR_4 = new TYPE_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; add ( VAR_5 , VAR_6 ) ; VAR_7 = VAR_2 ; VAR_8 = TYPE_5 . METHOD_1 ( VAR_7 , VAR_3 ) ; VAR_9 = VAR_8 != null ? TYPE_6 . get ( VAR_8 ) : null ; if ( VAR_9 == null ) { TYPE_7 . METHOD_2 ( STRING_1 + VAR_3 ) ; } }", "our_target": "  public BuildFilePanel(@NotNull Project project, @NotNull String moduleGradlePath) {\n", "our_code": "<|startfocus|>\n  public BuildFilePanel(@NotNull Project project, @NotNull String moduleName) {\n<|endfocus|>\n    super(new BorderLayout());\n    myPanel = new JPanel();\n    JBScrollPane scrollPane = new JBScrollPane(myPanel);\n    add(scrollPane, BorderLayout.CENTER);\n\n    myProject = project;\n\n    myModule = GradleUtil.findModuleByGradlePath(myProject, moduleName);\n    myGradleBuildFile = myModule != null ? GradleBuildFile.get(myModule) : null;\n    if (myGradleBuildFile == null) {\n      LOG.warn(\"Unable to find Gradle build file for module \" + moduleName);\n    }\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Build", "File", "Panel", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "module", "Name", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "super", "(", "new", "<|s|>", "Border", "Layout", "(", ")", ");", "<|nl|>", "<|4-s|>", "my", "Panel", "<|s|>", "=", "<|s|>", "new", "<|s|>", "JPanel", "(", ");", "<|nl|>", "<|4-s|>", "JBScroll", "Pane", "<|s|>", "scroll", "Pane", "<|s|>", "=", "<|s|>", "new", "<|s|>", "JBScroll", "Pane", "(", "my", "Panel", ");", "<|nl|>", "<|4-s|>", "add", "(", "scroll", "Pane", ",", "<|s|>", "Border", "Layout", ".", "CENTER", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "my", "Project", "<|s|>", "=", "<|s|>", "project", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "my", "Module", "<|s|>", "=", "<|s|>", "Gradle", "Util", ".", "find", "Module", "By", "Gradle", "Path", "(", "my", "Project", ",", "<|s|>", "module", "Name", ");", "<|nl|>", "<|4-s|>", "my", "Gradle", "Build", "File", "<|s|>", "=", "<|s|>", "my", "Module", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "?", "<|s|>", "Gradle", "Build", "File", ".", "get", "(", "my", "Module", ")", "<|s|>", ":", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Gradle", "Build", "File", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "warn", "(", "\"", "Unable", "<|s|>", "to", "<|s|>", "find", "<|s|>", "Gradle", "<|s|>", "build", "<|s|>", "file", "<|s|>", "for", "<|s|>", "module", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "module", "Name", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 42, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_585", "comment_id": "1fe088ae_6f76d1b3", "class_list": ["for", "BuildFilePanel"], "func_list": ["public BuildFilePanel(@NotNull Project project, @NotNull String moduleName)", "public void init()", "public boolean isModified()", "public BuildFilePanel(@NotNull Project project, @NotNull String moduleName)", "public void init()", "public boolean isModified()"], "prime_var_dic": {"myProject": 1, "GradleBuildFile": 1, "myPanel": 1, "Module": 1}}, {"idx": 86959, "status": "update", "global_index": 8573, "project_name": "android_", "written_on": "2015-08-18 17:30:22", "tufano_target": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertTrue ( STRING_1 , VAR_5 != 0 ) ; TYPE_2 VAR_6 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( STRING_1 , 0 , VAR_8 ) ; METHOD_4 ( VAR_1 ) ; }", "comment": "assertEquals (same as line 65).", "tokenized_comment": ["assert", "Equals", "<|s|>", "(", "same", "<|s|>", "as", "<|s|>", "line", "<|s|>", "65", ")", "."], "tufano_code": "protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; METHOD_3 ( STRING_1 , VAR_5 == 0 ) ; TYPE_2 VAR_6 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( STRING_1 , 0 , VAR_8 ) ; METHOD_4 ( VAR_1 ) ; }", "our_target": "        assertTrue(\"Invalid exception object id\", invokeNewObject.objectID != 0);\n", "our_code": "    protected void checkInvokeReply(ReplyPacket reply) {\n        // Check result is an object.\n        TaggedObject invokeNewObject = reply.getNextValueAsTaggedObject();\n        assertEquals(JDWPConstants.Tag.OBJECT_TAG, invokeNewObject.tag);\n<|startfocus|>\n        assertFalse(\"Invalid exception object id\", invokeNewObject.objectID == 0);\n<|endfocus|>\n\n        // Check exception is null.\n        TaggedObject invokeException = reply.getNextValueAsTaggedObject();\n        assertEquals(JDWPConstants.Tag.OBJECT_TAG, invokeException.tag);\n        assertEquals(\"Invalid exception object id\", 0, invokeException.objectID);\n\n        assertAllDataRead(reply);\n\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "check", "Invoke", "Reply", "(", "Reply", "Packet", "<|s|>", "reply", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "result", "<|s|>", "is", "<|s|>", "an", "<|s|>", "object", ".", "<|nl|>", "<|8-s|>", "Tagged", "Object", "<|s|>", "invoke", "New", "Object", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Tagged", "Object", "(", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "JDWPConstants", ".", "Tag", ".", "OBJECT", "_", "TAG", ",", "<|s|>", "invoke", "New", "Object", ".", "tag", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "assert", "False", "(", "\"", "Invalid", "<|s|>", "exception", "<|s|>", "object", "<|s|>", "id", "\"", ",", "<|s|>", "invoke", "New", "Object", ".", "object", "ID", "<|s|>", "==", "<|s|>", "0", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "exception", "<|s|>", "is", "<|s|>", "null", ".", "<|nl|>", "<|8-s|>", "Tagged", "Object", "<|s|>", "invoke", "Exception", "<|s|>", "=", "<|s|>", "reply", ".", "get", "Next", "Value", "As", "Tagged", "Object", "(", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "JDWPConstants", ".", "Tag", ".", "OBJECT", "_", "TAG", ",", "<|s|>", "invoke", "Exception", ".", "tag", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "\"", "Invalid", "<|s|>", "exception", "<|s|>", "object", "<|s|>", "id", "\"", ",", "<|s|>", "0", ",", "<|s|>", "invoke", "Exception", ".", "object", "ID", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "assert", "All", "Data", "Read", "(", "reply", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 60, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2741", "comment_id": "04a781c0_ef25215f", "class_list": ["NewInstanceWithSuspensionTest"], "func_list": ["public void testInvokeWithMultipleEvents001()", "protected CommandPacket buildInvokeCommand(long threadId, long classID,", "protected String getInvokeCommandName()", "protected void checkInvokeReply(ReplyPacket reply)"], "prime_var_dic": {}}, {"idx": 13887, "status": "update", "global_index": 4085, "project_name": "android_", "written_on": "2016-07-07 17:16:54", "tufano_target": "private VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_1 target ) { this . VAR_2 = VAR_2 ; TYPE_3 VAR_4 = VAR_2 . METHOD_1 ( ) ; assert VAR_4 != null ; this . VAR_4 = ( TYPE_4 ) VAR_4 ; if ( VAR_3 . METHOD_2 ( ) instanceof TYPE_5 ) { VAR_5 = ( TYPE_6 ) VAR_3 . METHOD_2 ( ) ; } else { VAR_5 = ( TYPE_6 ) VAR_3 . METHOD_2 ( ) . METHOD_2 ( ) ; } this . VAR_3 = VAR_3 ; this . target = target ; }", "comment": "@Nonnull?", "tokenized_comment": ["@", "Nonnull", "?"], "tufano_code": "private VAR_1 ( TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_1 target ) { this . VAR_2 = VAR_2 ; TYPE_3 VAR_4 = VAR_2 . METHOD_1 ( ) ; assert VAR_4 != null ; this . VAR_4 = ( TYPE_4 ) VAR_4 ; if ( VAR_3 . METHOD_2 ( ) instanceof TYPE_5 ) { VAR_5 = ( TYPE_6 ) VAR_3 . METHOD_2 ( ) ; } else { VAR_5 = ( TYPE_6 ) VAR_3 . METHOD_2 ( ) . METHOD_2 ( ) ; } this . VAR_3 = VAR_3 ; this . target = target ; }", "our_target": "    private CandidateInfo(\n        @Nonnull JMethod callSiteMethod, @Nonnull JMethodCall callSite, @Nonnull JMethod target) {\n", "our_code": "<|startfocus|>\n    private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target) {\n<|endfocus|>\n      this.callSiteMethod = callSiteMethod;\n      JAbstractMethodBody callSiteMethodBody = callSiteMethod.getBody();\n      assert callSiteMethodBody != null;\n      this.callSiteMethodBody = (JMethodBody) callSiteMethodBody;\n      if (callSite.getParent() instanceof JExpressionStatement) {\n        callSiteStmt = (JStatement) callSite.getParent();\n      } else {\n        callSiteStmt = (JStatement) callSite.getParent().getParent();\n      }\n      this.callSite = callSite;\n      this.target = target;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "Candidate", "Info", "(", "JMethod", "<|s|>", "call", "Site", "Method", ",", "<|s|>", "JMethod", "Call", "<|s|>", "call", "Site", ",", "<|s|>", "JMethod", "<|s|>", "target", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "call", "Site", "Method", "<|s|>", "=", "<|s|>", "call", "Site", "Method", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "JAbstract", "Method", "Body", "<|s|>", "call", "Site", "Method", "Body", "<|s|>", "=", "<|s|>", "call", "Site", "Method", ".", "get", "Body", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "assert", "<|s|>", "call", "Site", "Method", "Body", "<|s|>", "!=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "call", "Site", "Method", "Body", "<|s|>", "=", "<|s|>", "(", "JMethod", "Body", ")", "<|s|>", "call", "Site", "Method", "Body", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "call", "Site", ".", "get", "Parent", "(", ")", "<|s|>", "instanceof", "<|s|>", "JExpression", "Statement", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "call", "Site", "Stmt", "<|s|>", "=", "<|s|>", "(", "JStatement", ")", "<|s|>", "call", "Site", ".", "get", "Parent", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|8-s|>", "call", "Site", "Stmt", "<|s|>", "=", "<|s|>", "(", "JStatement", ")", "<|s|>", "call", "Site", ".", "get", "Parent", "(", ")", ".", "get", "Parent", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "call", "Site", "<|s|>", "=", "<|s|>", "call", "Site", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "this", ".", "target", "<|s|>", "=", "<|s|>", "target", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 92, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2424", "comment_id": "5db89ed4_d37d6c97", "class_list": ["makes", "JMethodInliner", "contains", "should", "CandidateInfo", "contains", "PrologueInfo", "contains", "EpilogueInfo", "Visitor"], "func_list": ["private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private PrologueInfo(CandidateInfo candidate)", "private EpilogueInfo(CandidateInfo candidate)", "private static void inline(", "private static void preparePrologue(", "private static void prepareBody(", "private static void prepareEpilogue(", "private Visitor(TransformationRequest tr)", "public boolean visit(JMethod jm)", "public void endVisit(@Nonnull JMethodCall jmc)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private PrologueInfo(CandidateInfo candidate)", "private CandidateInfo(JMethod callSiteMethod, JMethodCall callSite, JMethod target)", "private EpilogueInfo(CandidateInfo candidate)"], "prime_var_dic": {}}, {"idx": 94968, "status": "update", "global_index": 19948, "project_name": "android_", "written_on": "2012-09-19 01:51:06", "tufano_target": "public void METHOD_1 ( String path ) { if ( VAR_1 == null || path == null ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . data = new TYPE_2 [ ] { VAR_1 . METHOD_2 ( ) } ; try { VAR_2 . METHOD_3 ( file . METHOD_6 ( ) , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { TYPE_4 . METHOD_4 ( METHOD_5 ( ) , STRING_1 , STRING_2 , new TYPE_5 ( VAR_5 , VAR_6 , VAR_4 . toString ( ) ) ) ; } }", "comment": "I haven't seen this API before, but a different possibility (which we use elsewhere) is ImageIO. See for example ExportScreenShotAction in ADT.", "tokenized_comment": ["I", "<|s|>", "haven", "'", "t", "<|s|>", "seen", "<|s|>", "this", "<|s|>", "API", "<|s|>", "before", ",", "<|s|>", "but", "<|s|>", "a", "<|s|>", "different", "<|s|>", "possibility", "<|s|>", "(", "which", "<|s|>", "we", "<|s|>", "use", "<|s|>", "elsewhere", ")", "<|s|>", "is", "<|s|>", "Image", "IO", ".", "<|s|>", "See", "<|s|>", "for", "<|s|>", "example", "<|s|>", "Export", "Screen", "Shot", "Action", "<|s|>", "in", "<|s|>", "ADT", "."], "tufano_code": "public void METHOD_1 ( String path ) { if ( VAR_1 == null || path == null ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . data = new TYPE_2 [ ] { VAR_1 . METHOD_2 ( ) } ; try { VAR_2 . METHOD_3 ( path , VAR_3 ) ; } catch ( TYPE_3 VAR_4 ) { TYPE_4 . METHOD_4 ( METHOD_5 ( ) , STRING_1 , STRING_2 , new TYPE_5 ( VAR_5 , VAR_6 , VAR_4 . toString ( ) ) ) ; } }", "our_target": "            imageLoader.save(file.getAbsolutePath(), SWT.IMAGE_PNG);\n", "our_code": "    public void exportImageTo(String path) {\n        if (mImage == null || path == null) {\n            return;\n        }\n\n        ImageLoader imageLoader = new ImageLoader();\n        imageLoader.data = new ImageData[] { mImage.getImageData() };\n\n        try {\n<|startfocus|>\n            imageLoader.save(path, SWT.IMAGE_PNG);\n<|endfocus|>\n        } catch (Exception e) {\n            ErrorDialog.openError(getShell(), \"Save Image\", \"Error saving image\",\n                    new Status(Status.ERROR, GlTracePlugin.PLUGIN_ID, e.toString()));\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "export", "Image", "To", "(", "String", "<|s|>", "path", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Image", "<|s|>", "==", "<|s|>", "null", "<|s|>", "||", "<|s|>", "path", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "Image", "Loader", "<|s|>", "image", "Loader", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Image", "Loader", "(", ");", "<|nl|>", "<|8-s|>", "image", "Loader", ".", "data", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Image", "Data", "[", "]", "<|s|>", "{", "<|s|>", "m", "Image", ".", "get", "Image", "Data", "(", ")", "<|s|>", "};", "<|nl|>", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "image", "Loader", ".", "save", "(", "path", ",", "<|s|>", "SWT", ".", "IMAGE", "_", "PNG", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Error", "Dialog", ".", "open", "Error", "(", "get", "Shell", "(", ")", ",", "<|s|>", "\"", "Save", "<|s|>", "Image", "\"", ",", "<|s|>", "\"", "Error", "<|s|>", "saving", "<|s|>", "image", "\"", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "new", "<|s|>", "Status", "(", "Status", ".", "ERROR", ",", "<|s|>", "Gl", "Trace", "Plugin", ".", "PLUGIN", "_", "ID", ",", "<|s|>", "e", ".", "to", "String", "(", ")", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 242, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1942", "comment_id": "AAAJP3%2F%2F%2Fj0%3D", "class_list": ["ImageCanvas"], "func_list": ["public ImageCanvas(Composite parent)", "public void widgetSelected(SelectionEvent e)", "addListener(SWT.Resize,  new Listener()", "public void handleEvent(Event e)", "public void setFitToCanvas(boolean en)", "public void setImage(Image image)", "private void updateScrollBars()", "private void setScrollBarPageIncrements(Rectangle clientArea)", "private void setScrollBarIncrements()", "private void scrollHorizontally()", "private void scrollVertically()", "private void paintCanvas(GC gc)", "private void drawBorder(GC gc, int x, int y, int width, int height)", "public void dispose()", "public void exportImageTo(String path)"], "prime_var_dic": {"int": 1}}, {"idx": 95456, "status": "update", "global_index": 17911, "project_name": "android_", "written_on": "2008-12-05 22:59:40", "tufano_target": "public String METHOD_1 ( ) { String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 ) ; switch ( VAR_2 . METHOD_2 ( ) ) { case VAR_4 : VAR_1 = STRING_2 ; break ; case VAR_5 : VAR_1 = STRING_3 ; break ; case VAR_6 : VAR_1 = STRING_4 ; break ; case VAR_7 : VAR_1 = STRING_5 ; break ; case VAR_8 : VAR_1 = STRING_6 ; break ; case VAR_9 : VAR_1 = STRING_6 ; break ; } return STRING_7 + VAR_1 ; }", "comment": "Fix indentation of }", "tokenized_comment": ["Fix", "<|s|>", "indentation", "<|s|>", "of", "<|s|>", "}"], "tufano_code": "public String METHOD_1 ( ) { String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 ) ; switch ( VAR_2 . METHOD_2 ( ) ) { case VAR_4 : VAR_1 = STRING_2 ; break ; case VAR_5 : VAR_1 = STRING_3 ; break ; case VAR_6 : VAR_1 = STRING_4 ; break ; case VAR_7 : VAR_1 = STRING_5 ; break ; case VAR_8 : VAR_1 = STRING_6 ; break ; case VAR_9 : VAR_1 = STRING_6 ; break ; } return STRING_7 + VAR_1 ; }", "our_target": "        }\n", "our_code": "    public String getTcpBufferSizesPropName() {\n      String networkTypeStr = \"unknown\";\n        TelephonyManager tm = new TelephonyManager(mContext);\n        //TODO We have to edit the parameter for getNetworkType regarding CDMA\n        switch(tm.getNetworkType()) {\n          case TelephonyManager.NETWORK_TYPE_GPRS:\n            networkTypeStr = \"gprs\";\n            break;\n          case TelephonyManager.NETWORK_TYPE_EDGE:\n            networkTypeStr = \"edge\";\n            break;\n          case TelephonyManager.NETWORK_TYPE_UMTS:\n            networkTypeStr = \"umts\";\n            break;\n          case TelephonyManager.NETWORK_TYPE_CDMA:\n            networkTypeStr = \"cdma\";\n            break;\n          case TelephonyManager.NETWORK_TYPE_EVDO_0:\n            networkTypeStr = \"evdo\";\n            break;\n          case TelephonyManager.NETWORK_TYPE_EVDO_A:\n            networkTypeStr = \"evdo\";\n            break;\n<|startfocus|>\n          }\n<|endfocus|>\n        return \"net.tcp.buffersize.\" + networkTypeStr;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Tcp", "Buffer", "Sizes", "Prop", "Name", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "network", "Type", "Str", "<|s|>", "=", "<|s|>", "\"", "unknown", "\"", ";", "<|nl|>", "<|8-s|>", "Telephony", "Manager", "<|s|>", "tm", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Telephony", "Manager", "(", "m", "Context", ");", "<|nl|>", "<|8-s|>", "//", "TODO", "<|s|>", "We", "<|s|>", "have", "<|s|>", "to", "<|s|>", "edit", "<|s|>", "the", "<|s|>", "parameter", "<|s|>", "for", "<|s|>", "get", "Network", "Type", "<|s|>", "regarding", "<|s|>", "CDMA", "<|nl|>", "<|8-s|>", "switch", "(", "tm", ".", "get", "Network", "Type", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "case", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "GPRS", ":", "<|nl|>", "<|12-s|>", "network", "Type", "Str", "<|s|>", "=", "<|s|>", "\"", "gprs", "\"", ";", "<|nl|>", "<|12-s|>", "break", ";", "<|nl|>", "<|8-s|>", "<|2-s|>", "case", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "EDGE", ":", "<|nl|>", "<|12-s|>", "network", "Type", "Str", "<|s|>", "=", "<|s|>", "\"", "edge", "\"", ";", "<|nl|>", "<|12-s|>", "break", ";", "<|nl|>", "<|8-s|>", "<|2-s|>", "case", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "UMTS", ":", "<|nl|>", "<|12-s|>", "network", "Type", "Str", "<|s|>", "=", "<|s|>", "\"", "umts", "\"", ";", "<|nl|>", "<|12-s|>", "break", ";", "<|nl|>", "<|8-s|>", "<|2-s|>", "case", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "CDMA", ":", "<|nl|>", "<|12-s|>", "network", "Type", "Str", "<|s|>", "=", "<|s|>", "\"", "cdma", "\"", ";", "<|nl|>", "<|12-s|>", "break", ";", "<|nl|>", "<|8-s|>", "<|2-s|>", "case", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "EVDO", "_", "0", ":", "<|nl|>", "<|12-s|>", "network", "Type", "Str", "<|s|>", "=", "<|s|>", "\"", "evdo", "\"", ";", "<|nl|>", "<|12-s|>", "break", ";", "<|nl|>", "<|8-s|>", "<|2-s|>", "case", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "EVDO", "_", "A", ":", "<|nl|>", "<|12-s|>", "network", "Type", "Str", "<|s|>", "=", "<|s|>", "\"", "evdo", "\"", ";", "<|nl|>", "<|12-s|>", "break", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "\"", "net", ".", "tcp", ".", "buffersize", ".", "\"", "<|s|>", "+", "<|s|>", "network", "Type", "Str", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 252, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1369", "comment_id": "zd959942b79c4eda2af6a9c322896c90b", "class_list": ["MobileDataStateTracker", "MobileDataStateReceiver"], "func_list": ["public MobileDataStateTracker(Context context, Handler target)", "public void startMonitoring()", "public void onReceive(Context context, Intent intent)", "public void addPrivateRoutes()", "public void removePrivateRoutes()", "public void removeDefaultRoute()", "public void restoreDefaultRoute()", "private void getPhoneService(boolean forceRefresh)", "public boolean isAvailable()", "public String[] getNameServers()", "public String getTcpBufferSizesPropName()", "public boolean teardown()", "public boolean reconnect()", "public boolean setRadio(boolean turnOn)", "public int startUsingNetworkFeature(String feature, int callingPid, int callingUid)", "public int stopUsingNetworkFeature(String feature, int callingPid, int callingUid)", "public boolean requestRouteToHost(int hostAddress)", "public String toString()", "private void setupDnsProperties()", "private int setEnableApn(String apnType, boolean enable)"], "prime_var_dic": {}}, {"idx": 88284, "status": "update", "global_index": 2590, "project_name": "android_", "written_on": "2017-03-26 19:34:27", "tufano_target": "public void METHOD_1 ( ) { if ( METHOD_5 ( ) ) { TYPE_3 . METHOD_4 ( VAR_3 , STRING_3 ) ; } else { METHOD_3 ( ) ; } }", "comment": "Don't need this.", "tokenized_comment": ["Don", "'", "t", "<|s|>", "need", "<|s|>", "this", "."], "tufano_code": "public void METHOD_1 ( ) { if ( VAR_1 ) { final long start = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; final long VAR_2 = TYPE_1 . METHOD_2 ( ) - start ; TYPE_2 . METHOD_4 ( VAR_3 , STRING_1 + VAR_2 + STRING_2 ) ; return ; } else { METHOD_3 ( ) ; } }", "our_target": "        if (isNetdAlive()) {\n            Slog.d(TAG, \"IpSecService is ready\");\n", "our_code": "    public void systemReady() {\n<|startfocus|>\n        if (DBG) {\n            final long start = System.currentTimeMillis();\n            prepareNativeDaemon();\n            final long delta = System.currentTimeMillis() - start;\n            Log.d(TAG, \"Prepared in \" + delta + \"ms\");\n            return;\n<|endfocus|>\n        } else {\n            prepareNativeDaemon();\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "system", "Ready", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "DBG", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "final", "<|s|>", "long", "<|s|>", "start", "<|s|>", "=", "<|s|>", "System", ".", "current", "Time", "Millis", "(", ");", "<|nl|>", "<|12-s|>", "prepare", "Native", "Daemon", "(", ");", "<|nl|>", "<|12-s|>", "final", "<|s|>", "long", "<|s|>", "delta", "<|s|>", "=", "<|s|>", "System", ".", "current", "Time", "Millis", "(", ")", "<|s|>", "-", "<|s|>", "start", ";", "<|nl|>", "<|12-s|>", "Log", ".", "d", "(", "TAG", ",", "<|s|>", "\"", "Prepared", "<|s|>", "in", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "delta", "<|s|>", "+", "<|s|>", "\"", "ms", "\"", ");", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "prepare", "Native", "Daemon", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 99, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4107", "comment_id": "6a2d95b4_fb20393f", "class_list": ["IpSecService", "NetdCallbackReceiver"], "func_list": ["private IpSecService(Context context, String socket)", "public void systemReady()", "private void connectNativeNetdService()", "private void prepareNativeDaemon() }", "public void onDaemonConnected()", "new Runnable()", "public void run()", "public boolean onCheckHoldWakeLock(int code)", "public boolean onEvent(int code, String raw, String[] cooked)", "public void monitor()", "private static void enforceSystemUid()", "boolean isNetdAlive()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)"], "prime_var_dic": {}}, {"idx": 95311, "status": "update", "global_index": 11705, "project_name": "android_", "written_on": "2014-07-15 16:56:55", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 , VAR_4 * VAR_3 * INT_4 / INT_3 ) ; METHOD_3 ( VAR_2 , VAR_3 * INT_3 , VAR_4 * VAR_3 * INT_3 ) ; METHOD_3 ( VAR_2 , VAR_3 * INT_4 , VAR_4 * VAR_3 * INT_4 ) ; }", "comment": "Nit: \"Less than\" and \"More than\" below.", "tokenized_comment": ["Nit", ":", "<|s|>", "\"", "Less", "<|s|>", "than", "\"", "<|s|>", "and", "<|s|>", "\"", "More", "<|s|>", "than", "\"", "<|s|>", "below", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 , VAR_4 * VAR_3 * INT_1 / INT_2 ) ; METHOD_3 ( VAR_2 , VAR_3 * INT_3 , VAR_4 * VAR_3 * INT_3 ) ; METHOD_3 ( VAR_2 , VAR_3 * INT_4 , VAR_4 * VAR_3 * INT_4 ) ; }", "our_target": "    // Less than 2x elements - expand to fill the whole width\n    assertColumnCountForWidth(gallery, COLUMNS, actualCellSize.width * COLUMNS * 3 / 2);\n", "our_code": "  public void testGetColumnCount() {\n    Dimension actualCellSize = gallery.computeCellSize();\n<|startfocus|>\n    // Less the 2x elements - expand to fill the whole width\n    assertColumnCountForWidth(gallery, COLUMNS, actualCellSize.width * COLUMNS * 15 / 10);\n<|endfocus|>\n    // 2x - collapse\n    assertColumnCountForWidth(gallery, COLUMNS * 2, actualCellSize.width * COLUMNS * 2);\n    // More then 2x - collapse still\n    assertColumnCountForWidth(gallery, COLUMNS * 3, actualCellSize.width * COLUMNS * 3);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Get", "Column", "Count", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Dimension", "<|s|>", "actual", "Cell", "Size", "<|s|>", "=", "<|s|>", "gallery", ".", "compute", "Cell", "Size", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Less", "<|s|>", "the", "<|s|>", "2", "x", "<|s|>", "elements", "<|s|>", "-", "<|s|>", "expand", "<|s|>", "to", "<|s|>", "fill", "<|s|>", "the", "<|s|>", "whole", "<|s|>", "width", "<|nl|>", "<|4-s|>", "assert", "Column", "Count", "For", "Width", "(", "gallery", ",", "<|s|>", "COLUMNS", ",", "<|s|>", "actual", "Cell", "Size", ".", "width", "<|s|>", "*", "<|s|>", "COLUMNS", "<|s|>", "*", "<|s|>", "15", "<|s|>", "/", "<|s|>", "10", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "2", "x", "<|s|>", "-", "<|s|>", "collapse", "<|nl|>", "<|4-s|>", "assert", "Column", "Count", "For", "Width", "(", "gallery", ",", "<|s|>", "COLUMNS", "<|s|>", "*", "<|s|>", "2", ",", "<|s|>", "actual", "Cell", "Size", ".", "width", "<|s|>", "*", "<|s|>", "COLUMNS", "<|s|>", "*", "<|s|>", "2", ");", "<|nl|>", "<|4-s|>", "//", "<|s|>", "More", "<|s|>", "then", "<|s|>", "2", "x", "<|s|>", "-", "<|s|>", "collapse", "<|s|>", "still", "<|nl|>", "<|4-s|>", "assert", "Column", "Count", "For", "Width", "(", "gallery", ",", "<|s|>", "COLUMNS", "<|s|>", "*", "<|s|>", "3", ",", "<|s|>", "actual", "Cell", "Size", ".", "width", "<|s|>", "*", "<|s|>", "COLUMNS", "<|s|>", "*", "<|s|>", "3", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 157, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_817", "comment_id": "d9e8d0cd_b03b80e4", "class_list": ["ASGalleryTest", "ModelObject"], "func_list": ["private static Dimension adjustByInsetsValue(int width, int height, Insets cellMargin)", "private static int computeCellWidth(ASGallery<ModelObject> gallery)", "private static int getColumnOffset(ASGallery<ModelObject> gallery, int column)", "private static void assertColumnWidthForGallerySize(ASGallery<ModelObject> gallery, int galleryWidth, int expectedCellSize)", "private static void assertColumnCountForWidth(ASGallery<ModelObject> gallery, int columns, int width)", "public void testColumnSize()", "public void testCellAtForOneColumnFiveRows()", "public void testCellAtFor3Columns2Rows()", "public void testCellAtOneRowSpanning()", "public void testCellAtOneRowNonSpanning()", "public void testComputeCellSize()", "public void testGetColumnCount()", "public void testPreferredSize()", "public ModelObject(int number)", "public String toString()", "private static Dimension adjustByInsetsValue(int width, int height, Insets cellMargin)"], "prime_var_dic": {}}, {"idx": 78523, "status": "update", "global_index": 6870, "project_name": "android_", "written_on": "2015-07-30 21:37:16", "tufano_target": "private void METHOD_1 ( String [ ] VAR_1 ) { assertTrue ( VAR_1 . length >= INT_1 ) ; assertNotNull ( VAR_1 [ INT_2 ] ) ; METHOD_2 ( VAR_1 [ VAR_1 . length - INT_3 ] ) ; METHOD_2 ( VAR_1 [ VAR_1 . length - 1 ] ) ; }", "comment": "Nit: Would be great if you spaced out \"i = 4\" and \"parts.length - 2\" throughout the file for java style.", "tokenized_comment": ["Nit", ":", "<|s|>", "Would", "<|s|>", "be", "<|s|>", "great", "<|s|>", "if", "<|s|>", "you", "<|s|>", "spaced", "<|s|>", "out", "<|s|>", "\"", "i", "<|s|>", "=", "<|s|>", "4", "\"", "<|s|>", "and", "<|s|>", "\"", "parts", ".", "length", "<|s|>", "-", "<|s|>", "2", "\"", "<|s|>", "throughout", "<|s|>", "the", "<|s|>", "file", "<|s|>", "for", "<|s|>", "java", "<|s|>", "style", "."], "tufano_code": "private void METHOD_1 ( String [ ] VAR_1 ) { assertTrue ( VAR_1 . length >= INT_1 ) ; for ( int i = INT_2 ; i < VAR_1 . length - INT_3 ; i ++ ) { assertNotNull ( VAR_1 [ i ] ) ; } METHOD_2 ( VAR_1 [ VAR_1 . length - INT_3 ] ) ; METHOD_2 ( VAR_1 [ VAR_1 . length - 1 ] ) ; }", "our_target": "        assertTrue(parts.length >= 7);\n\tassertNotNull(parts[4]); // Kernel wakelock\n", "our_code": "    private void checkKernelWakelock(String[] parts) {\n<|startfocus|>\n        assertTrue(parts.length >=7);\n\tfor (int i=4; i < parts.length-2; i++){\n\t    assertNotNull(parts[i]); // Kernel wakelock\n\t}\n<|endfocus|>\n\tassertInteger(parts[parts.length-2]); // totalTime\n        assertInteger(parts[parts.length-1]); // count\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "check", "Kernel", "Wakelock", "(", "String", "[", "]", "<|s|>", "parts", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "assert", "True", "(", "parts", ".", "length", "<|s|>", ">=", "7", ");", "<|nl|>", "<|t|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "=", "4", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "parts", ".", "length", "-", "2", ";", "<|s|>", "i", "++", ")", "{", "<|nl|>", "<|t|>", "<|4-s|>", "assert", "Not", "Null", "(", "parts", "[", "i", "]", ");", "<|s|>", "//", "<|s|>", "Kernel", "<|s|>", "wakelock", "<|nl|>", "<|t|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|t|>", "assert", "Integer", "(", "parts", "[", "parts", ".", "length", "-", "2", "]", ");", "<|s|>", "//", "<|s|>", "total", "Time", "<|nl|>", "<|8-s|>", "assert", "Integer", "(", "parts", "[", "parts", ".", "length", "-", "1", "]", ");", "<|s|>", "//", "<|s|>", "count", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 590, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2116", "comment_id": "0a5ce834_4ae07309", "class_list": ["DumpsysHostTest"], "func_list": ["private void checkPeriod(String[] parts)", "private void checkPkgProc(String[] parts, int version)", "private void checkTag(String tag, boolean hasProcess)", "private void checkPkgPss(String[] parts, int version)", "private void checkPkgSvc(String[] parts, int version)", "private void checkPkgKills(String[] parts, int version)", "private void checkProc(String[] parts)", "private void checkPss(String[] parts)", "private void checkKills(String[] parts)", "private void checkTotal(String[] parts)", "private void checkVersion(String[] parts)", "private void checkUid(String[] parts)", "private void checkApk(String[] parts)", "private void checkProcess(String[] parts)", "private void checkSensor(String[] parts)", "private void checkVibrator(String[] parts)", "private void checkForeground(String[] parts)", "private void checkStateTime(String[] parts)", "private void checkWakelock(String[] parts)", "private void checkSync(String[] parts)", "private void checkJob(String[] parts)", "private void checkKernelWakelock(String[] parts)", "private void checkWakeupReason(String[] parts)", "private void checkNetwork(String[] parts)", "private void checkUserActivity(String[] parts)", "private void checkBattery(String[] parts)", "private void checkBatteryDischarge(String[] parts)", "private void checkBatteryLevel(String[] parts)", "private void checkWifi(String[] parts)", "private void checkMisc(String[] parts)", "private void checkGlobalNetwork(String[] parts)", "private void checkScreenBrightness(String[] parts)", "private void checkSignalStrength(String[] parts)", "private void checkSignalScanningTime(String[] parts)", "private void checkDataConnection(String[] parts)", "private void checkWifiState(String[] parts)", "private void checkWifiSupplState(String[] parts)", "private void checkWifiSignalStrength(String[] parts)", "private void checkBluetoothState(String[] parts)", "private void checkPowerUseSummary(String[] parts)", "private void checkPowerUseItem(String[] parts)", "private void checkChargeDischargeStep(String[] parts)", "private void checkDischargeTimeRemain(String[] parts)", "private void checkChargeTimeRemain(String[] parts)", "private static void assertInteger(String input)", "private static void assertDouble(String input)", "private static void assertSeenTag(Set<String> seenTags, String tag)"], "prime_var_dic": {"String": 1, "few": 2}}, {"idx": 94881, "status": "update", "global_index": 11654, "project_name": "android_", "written_on": "2014-06-20 14:17:22", "tufano_target": "int METHOD_1 ( ) { int size = 0 ; if ( VAR_3 != null ) { size += TYPE_1 . METHOD_3 ( VAR_1 ) ; size += METHOD_2 ( ) . length ; } else { size = VAR_2 . METHOD_1 ( value ) ; } return size ; }", "comment": "bytes; for the whole of this file.", "tokenized_comment": ["bytes", ";", "<|s|>", "for", "<|s|>", "the", "<|s|>", "whole", "<|s|>", "of", "<|s|>", "this", "<|s|>", "file", "."], "tufano_code": "int METHOD_1 ( ) { int size = 0 ; if ( METHOD_2 ( ) != null ) { size += TYPE_1 . METHOD_3 ( VAR_1 ) ; size += METHOD_2 ( ) . length ; } else { size = VAR_2 . METHOD_1 ( value ) ; } return size ; }", "our_target": "        if (bytes != null) {\n", "our_code": "    int computeSerializedSize() {\n        int size = 0;\n<|startfocus|>\n        if (getBytes() != null) {\n<|endfocus|>\n            size += CodedOutputByteBufferNano.computeRawVarint32Size(tag);\n            size += getBytes().length;\n        } else {\n            size = extension.computeSerializedSize(value);\n        }\n        return size;\n    }", "tokenized_code": ["<|4-s|>", "int", "<|s|>", "compute", "Serialized", "Size", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "size", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "get", "Bytes", "(", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "size", "<|s|>", "+=", "<|s|>", "Coded", "Output", "Byte", "Buffer", "Nano", ".", "compute", "Raw", "Varint", "32", "Size", "(", "tag", ");", "<|nl|>", "<|12-s|>", "size", "<|s|>", "+=", "<|s|>", "get", "Bytes", "(", ")", ".", "length", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "size", "<|s|>", "=", "<|s|>", "extension", ".", "compute", "Serialized", "Size", "(", "value", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "size", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 71, "base_patch_number": 4, "changed_patch_number": 6, "code_file_name": "android_2707", "comment_id": "c413859f_4499ce61", "class_list": ["UnknownFieldData"], "func_list": ["void setValue(Extension<?, ?> extension, Object value)", "int computeSerializedSize()", "byte[] getBytes()", "boolean hasValue(Extension<?, ?> extension)", "Object getValue()", "public boolean equals(Object o)", "public int hashCode()"], "prime_var_dic": {}}, {"idx": 17368, "status": "update", "global_index": 16197, "project_name": "android_", "written_on": "2015-03-23 15:09:00", "tufano_target": "protected TYPE_1 METHOD_1 ( ) { String VAR_1 = VAR_2 . getText ( ) ; if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return new TYPE_1 ( VAR_3 , VAR_2 ) ; } if ( ! VAR_4 . METHOD_3 ( VAR_1 ) ) { return new TYPE_1 ( VAR_4 . METHOD_4 ( VAR_1 ) , VAR_2 ) ; } return super . METHOD_1 ( ) ; }", "comment": "Seems a bit redundant since checking that validationText is not null is precisely what the condition in the if statement is doing", "tokenized_comment": ["Seems", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "redundant", "<|s|>", "since", "<|s|>", "checking", "<|s|>", "that", "<|s|>", "validation", "Text", "<|s|>", "is", "<|s|>", "not", "<|s|>", "null", "<|s|>", "is", "<|s|>", "precisely", "<|s|>", "what", "<|s|>", "the", "<|s|>", "condition", "<|s|>", "in", "<|s|>", "the", "<|s|>", "if", "<|s|>", "statement", "<|s|>", "is", "<|s|>", "doing"], "tufano_code": "protected TYPE_1 METHOD_1 ( ) { String VAR_1 = VAR_2 . getText ( ) ; if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return new TYPE_1 ( VAR_3 , VAR_2 ) ; } if ( ! VAR_4 . METHOD_3 ( VAR_1 ) ) { String VAR_5 = VAR_4 . METHOD_4 ( VAR_1 ) ; return new TYPE_1 ( VAR_5 != null ? VAR_5 : VAR_3 , VAR_2 ) ; } return super . METHOD_1 ( ) ; }", "our_target": "      // If checkInput is false, getErrorText will be not null.\n      //noinspection ConstantConditions\n      return new ValidationInfo(myResourceNameValidator.getErrorText(newStyleName), myStyleNameTextField);\n", "our_code": "  protected ValidationInfo doValidate() {\n    String newStyleName = myStyleNameTextField.getText();\n    if (Strings.isNullOrEmpty(newStyleName)) {\n      return new ValidationInfo(myEmptyStyleValidationText, myStyleNameTextField);\n    }\n\n    if (!myResourceNameValidator.checkInput(newStyleName)) {\n<|startfocus|>\n      String validationText = myResourceNameValidator.getErrorText(newStyleName);\n      return new ValidationInfo(validationText != null ? validationText : myEmptyStyleValidationText, myStyleNameTextField);\n<|endfocus|>\n    }\n\n    return super.doValidate();\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "Validation", "Info", "<|s|>", "do", "Validate", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "new", "Style", "Name", "<|s|>", "=", "<|s|>", "my", "Style", "Name", "Text", "Field", ".", "get", "Text", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "Strings", ".", "is", "Null", "Or", "Empty", "(", "new", "Style", "Name", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Validation", "Info", "(", "my", "Empty", "Style", "Validation", "Text", ",", "<|s|>", "my", "Style", "Name", "Text", "Field", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "my", "Resource", "Name", "Validator", ".", "check", "Input", "(", "new", "Style", "Name", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "validation", "Text", "<|s|>", "=", "<|s|>", "my", "Resource", "Name", "Validator", ".", "get", "Error", "Text", "(", "new", "Style", "Name", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Validation", "Info", "(", "validation", "Text", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "?", "<|s|>", "validation", "Text", "<|s|>", ":", "<|s|>", "my", "Empty", "Style", "Validation", "Text", ",", "<|s|>", "my", "Style", "Name", "Text", "Field", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "super", ".", "do", "Validate", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 115, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_292", "comment_id": "c61c8421_597f678e", "class_list": ["NewStyleDialog"], "func_list": ["public NewStyleDialog(boolean isTheme,", "public void actionPerformed(ActionEvent e)", "protected JComponent createCenterPanel()", "public JComponent getPreferredFocusedComponent()", "protected ValidationInfo doValidate()", "public String getStyleName()", "public String getStyleParentName()", "static String getNewStyleNameSuggestion(@Nullable String parentStyleUri, @Nullable String currentThemeName)"], "prime_var_dic": {"myResourceNameValidator": 1, "myEmptyStyleValidationText": 1}}, {"idx": 49753, "status": "update", "global_index": 10479, "project_name": "android_", "written_on": "2015-05-13 16:40:20", "tufano_target": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_1 f : VAR_6 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) { if ( f . METHOD_4 ( ) . startsWith ( VAR_7 ) ) { VAR_2 = f ; } } assertNotNull ( VAR_2 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_5 ( VAR_5 ) ; assertNotNull ( VAR_4 ) ; return VAR_4 ; }", "comment": "Replace with SdkConstants.EXT_JAR", "tokenized_comment": ["Replace", "<|s|>", "with", "<|s|>", "Sdk", "Constants", ".", "EXT", "_", "JAR"], "tufano_code": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_1 f : VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) { if ( f . METHOD_4 ( ) . startsWith ( STRING_1 ) ) { VAR_2 = f ; } } assertNotNull ( VAR_2 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_5 ( VAR_5 ) ; assertNotNull ( VAR_4 ) ; return VAR_4 ; }", "our_target": "    for (VirtualFile f : mySdk.getRootProvider().getFiles(OrderRootType.CLASSES)) {\n      if (f.getUrl().startsWith(SdkConstants.EXT_JAR)) {\n", "our_code": "  private static VirtualFile findActivityClassFile(@NotNull Sdk sdk) {\n    VirtualFile jarRoot = null;\n<|startfocus|>\n    for (VirtualFile f : sdk.getRootProvider().getFiles(OrderRootType.CLASSES)) {\n      if (f.getUrl().startsWith(\"jar\")) {\n<|endfocus|>\n        jarRoot = f;\n      }\n    }\n    assertNotNull(jarRoot);\n    VirtualFile classFile = jarRoot.findFileByRelativePath(ACTIVITY_CLASS_FILE_PATH);\n    assertNotNull(classFile);\n    return classFile;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "Virtual", "File", "<|s|>", "find", "Activity", "Class", "File", "(", "@", "Not", "Null", "<|s|>", "Sdk", "<|s|>", "sdk", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Virtual", "File", "<|s|>", "jar", "Root", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Virtual", "File", "<|s|>", "f", "<|s|>", ":", "<|s|>", "sdk", ".", "get", "Root", "Provider", "(", ")", ".", "get", "Files", "(", "Order", "Root", "Type", ".", "CLASSES", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "f", ".", "get", "Url", "(", ")", ".", "starts", "With", "(", "\"", "jar", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "jar", "Root", "<|s|>", "=", "<|s|>", "f", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "assert", "Not", "Null", "(", "jar", "Root", ");", "<|nl|>", "<|4-s|>", "Virtual", "File", "<|s|>", "class", "File", "<|s|>", "=", "<|s|>", "jar", "Root", ".", "find", "File", "By", "Relative", "Path", "(", "ACTIVITY", "_", "CLASS", "_", "FILE", "_", "PATH", ");", "<|nl|>", "<|4-s|>", "assert", "Not", "Null", "(", "class", "File", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "class", "File", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 162, "base_patch_number": 15, "changed_patch_number": 16, "code_file_name": "android_75", "comment_id": "cd1ae5b3_afb7b936", "class_list": ["AndroidSdkSourceAttachTest"], "func_list": ["public void skipSourceGenerationOnSync()", "public boolean test()", "private void acceptLegalNoticeIfNeeded()", "private static EditorNotificationPanelFixture findNotificationPanel(@NotNull IdeFrameFixture projectFrame, @NotNull Sdk sdk)", "private static VirtualFile findActivityClassFile(@NotNull Sdk sdk)"], "prime_var_dic": {"String": 2}}, {"idx": 42430, "status": "update", "global_index": 12321, "project_name": "android_", "written_on": "2014-08-21 23:26:58", "tufano_target": "public TYPE_1 < TYPE_5 > METHOD_1 ( ) { TYPE_3 < TYPE_5 > VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_1 ( ) ) ; } VAR_1 . add ( new TYPE_4 ( METHOD_4 ( ) ) ) ; return VAR_1 . build ( ) ; }", "comment": "I think it's create to return a immutable list. I think for the internal API it's not super useful, but we should do this on the API class (in the api package).", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "it", "'", "s", "<|s|>", "create", "<|s|>", "to", "<|s|>", "return", "<|s|>", "a", "<|s|>", "immutable", "<|s|>", "list", ".", "<|s|>", "I", "<|s|>", "think", "<|s|>", "for", "<|s|>", "the", "<|s|>", "internal", "<|s|>", "API", "<|s|>", "it", "'", "s", "<|s|>", "not", "<|s|>", "super", "<|s|>", "useful", ",", "<|s|>", "but", "<|s|>", "we", "<|s|>", "should", "<|s|>", "do", "<|s|>", "this", "<|s|>", "on", "<|s|>", "the", "<|s|>", "API", "<|s|>", "class", "<|s|>", "(", "in", "<|s|>", "the", "<|s|>", "api", "<|s|>", "package", ")", "."], "tufano_code": "public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 < TYPE_2 > VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_1 . METHOD_3 ( VAR_2 . METHOD_1 ( ) ) ; } VAR_1 . add ( new TYPE_4 ( METHOD_4 ( ) ) ) ; return VAR_1 . build ( ) ; }", "our_target": "    public ImmutableList<APKOutput> getOutputFiles() {\n        ImmutableList.Builder<APKOutput> outputs = ImmutableList.builder();\n", "our_code": "<|startfocus|>\n    public ImmutableList<VariantOutput> getOutputFiles() {\n        ImmutableList.Builder<VariantOutput> outputs = ImmutableList.builder();\n<|endfocus|>\n        if (packageSplitResourcesTask != null) {\n            outputs.addAll(packageSplitResourcesTask.getOutputFiles());\n        }\n        outputs.add(new VariantOutput.MainVariantOutput(getOutputFile()));\n        return outputs.build();\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "Immutable", "List", "<", "Variant", "Output", ">", "<|s|>", "get", "Output", "Files", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Immutable", "List", ".", "Builder", "<", "Variant", "Output", ">", "<|s|>", "outputs", "<|s|>", "=", "<|s|>", "Immutable", "List", ".", "builder", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "package", "Split", "Resources", "Task", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "outputs", ".", "add", "All", "(", "package", "Split", "Resources", "Task", ".", "get", "Output", "Files", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "outputs", ".", "add", "(", "new", "<|s|>", "Variant", "Output", ".", "Main", "Variant", "Output", "(", "get", "Output", "File", "(", ")", ")", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "outputs", ".", "build", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 72, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_1133", "comment_id": "b3a41d88_a6bb88a7", "class_list": ["ApkVariantOutputData"], "func_list": ["public ApkVariantOutputData(", "public void setOutputFile(@NonNull File file)", "public File getOutputFile()", "public ImmutableList<VariantOutput> getOutputFiles()", "public ZipAlign createZipAlignTask(@NonNull String taskName, @NonNull File inputFile,", "public int getVersionCode()", "public void setVersionCodeOverride(int versionCodeOverride)", "public int getVersionCodeOverride()"], "prime_var_dic": {}}, {"idx": 12899, "status": "update", "global_index": 2104, "project_name": "android_", "written_on": "2017-02-21 20:14:16", "tufano_target": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! VAR_1 ) { TYPE_1 intent = new TYPE_1 ( VAR_2 ) ; if ( VAR_3 != null && VAR_4 != null ) { intent . METHOD_2 ( VAR_3 , VAR_4 ) ; } getActivity ( ) . METHOD_3 ( intent ) ; } }", "comment": "nit: '", "tokenized_comment": ["nit", ":", "<|s|>", "'"], "tufano_code": "public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! VAR_1 ) { TYPE_1 intent = new TYPE_1 ( VAR_2 ) ; if ( VAR_3 != null && VAR_4 != null ) { intent . METHOD_2 ( VAR_3 , VAR_4 ) ; } getActivity ( ) . METHOD_3 ( intent ) ; } }", "our_target": "         * don't do anything */\n", "our_code": "    public void onPause() {\n        super.onPause();\n        /* Check if any device was selected, if no device selected\n         * send  ACTION_DEVICE_NOT_SELECTED intent, otherwise\n<|startfocus|>\n         * don;t do anything */\n<|endfocus|>\n        if (!mDeviceSelected) {\n            Intent intent = new Intent(BluetoothDevicePicker.ACTION_DEVICE_NOT_SELECTED);\n            if (mLaunchPackage != null && mLaunchClass != null) {\n                intent.setClassName(mLaunchPackage, mLaunchClass);\n            }\n            getActivity().sendBroadcast(intent);\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Pause", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "super", ".", "on", "Pause", "(", ");", "<|nl|>", "<|8-s|>", "/*", "<|s|>", "Check", "<|s|>", "if", "<|s|>", "any", "<|s|>", "device", "<|s|>", "was", "<|s|>", "selected", ",", "<|s|>", "if", "<|s|>", "no", "<|s|>", "device", "<|s|>", "selected", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "send", "<|2-s|>", "ACTION", "_", "DEVICE", "_", "NOT", "_", "SELECTED", "<|s|>", "intent", ",", "<|s|>", "otherwise", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "<|s|>", "*", "<|s|>", "don", ";", "t", "<|s|>", "do", "<|s|>", "anything", "<|s|>", "*/", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "m", "Device", "Selected", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Intent", "<|s|>", "intent", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Intent", "(", "Bluetooth", "Device", "Picker", ".", "ACTION", "_", "DEVICE", "_", "NOT", "_", "SELECTED", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Launch", "Package", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "m", "Launch", "Class", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "intent", ".", "set", "Class", "Name", "(", "m", "Launch", "Package", ",", "<|s|>", "m", "Launch", "Class", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "get", "Activity", "(", ")", ".", "send", "Broadcast", "(", "intent", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 119, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4449", "comment_id": "19087f38_70c1c515", "class_list": ["DevicePickerFragment"], "func_list": ["public DevicePickerFragment()", "void addPreferencesForActivity()", "void initDevicePreference(BluetoothDevicePreference preference)", "public void onCreateOptionsMenu(Menu menu, MenuInflater inflater)", "public boolean onOptionsItemSelected(MenuItem item)", "protected int getMetricsCategory()", "public void onCreateOptionsMenu(Menu menu, MenuInflater inflater)", "public void onResume()", "public void onPause()", "void onDevicePreferenceClick(BluetoothDevicePreference btPreference)", "public void onDeviceBondStateChanged(CachedBluetoothDevice cachedDevice,", "public void onBluetoothStateChanged(int bluetoothState)", "private void sendDevicePickedIntent(BluetoothDevice device)"], "prime_var_dic": {"int": 1}}, {"idx": 18352, "status": "update", "global_index": 18160, "project_name": "android_", "written_on": "2009-02-02 13:49:12", "tufano_target": "static boolean METHOD_1 ( TYPE_1 context , String VAR_1 , boolean VAR_2 ) { if ( VAR_1 . equals ( VAR_3 ) ) { int VAR_4 = ( ( TYPE_2 ) context . METHOD_2 ( VAR_5 ) ) . METHOD_3 ( ) ; if ( VAR_4 == VAR_7 || VAR_4 == VAR_8 || VAR_4 == VAR_9 ) { METHOD_5 ( context , VAR_2 ) ; return true ; } } return false ; }", "comment": "not valid anymore, see above", "tokenized_comment": ["not", "<|s|>", "valid", "<|s|>", "anymore", ",", "<|s|>", "see", "<|s|>", "above"], "tufano_code": "static boolean METHOD_1 ( TYPE_1 context , String VAR_1 , boolean VAR_2 ) { if ( VAR_1 . equals ( VAR_3 ) ) { int VAR_4 = ( ( TYPE_2 ) context . METHOD_2 ( VAR_5 ) ) . METHOD_3 ( ) ; if ( VAR_4 == VAR_6 ) { METHOD_4 ( context , VAR_2 ) ; return false ; } else { METHOD_5 ( context , VAR_2 ) ; return true ; } } return false ; }", "our_target": "            // check for GSM\n            if(networkType == TelephonyManager.NETWORK_TYPE_GPRS || \n                    networkType == TelephonyManager.NETWORK_TYPE_EDGE || \n                    networkType == TelephonyManager.NETWORK_TYPE_UMTS ) { \n\n                showIMEIPanel(context, useSystemWindow); \n", "our_code": "    static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow) {\n        if (input.equals(MMI_IMEI_DISPLAY)) {\n            int networkType = ((TelephonyManager)context.getSystemService(\n                    Context.TELEPHONY_SERVICE)).getNetworkType();\n<|startfocus|>\n            // check for CDMA\n            if (networkType == TelephonyManager.NETWORK_TYPE_CDMA) {\n                showNotSupportedPanel(context, useSystemWindow);\n                return false;\n            }\n            else {\n                showIMEIPanel(context, useSystemWindow);\n<|endfocus|>\n                return true;\n            }\n        }\n\n        return false;\n    }", "tokenized_code": ["<|4-s|>", "static", "<|s|>", "boolean", "<|s|>", "handle", "IMEIDisplay", "(", "Context", "<|s|>", "context", ",", "<|s|>", "String", "<|s|>", "input", ",", "<|s|>", "boolean", "<|s|>", "use", "System", "Window", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "input", ".", "equals", "(", "MMI", "_", "IMEI", "_", "DISPLAY", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "int", "<|s|>", "network", "Type", "<|s|>", "=", "<|s|>", "(", "(", "Telephony", "Manager", ")", "context", ".", "get", "System", "Service", "(", "<|nl|>", "<|16-s|>", "<|4-s|>", "Context", ".", "TELEPHONY", "_", "SERVICE", ")", ")", ".", "get", "Network", "Type", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "check", "<|s|>", "for", "<|s|>", "CDMA", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "network", "Type", "<|s|>", "==", "<|s|>", "Telephony", "Manager", ".", "NETWORK", "_", "TYPE", "_", "CDMA", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "show", "Not", "Supported", "Panel", "(", "context", ",", "<|s|>", "use", "System", "Window", ");", "<|nl|>", "<|16-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "show", "IMEIPanel", "(", "context", ",", "<|s|>", "use", "System", "Window", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 189, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4302", "comment_id": "AAAACH%2F%2F%2F90%3D", "class_list": ["to", "SpecialCharSequenceMgr", "is", "SimContactQueryCookie", "QueryHandler"], "func_list": ["private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)", "private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)", "private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)", "private SpecialCharSequenceMgr()", "static boolean handleChars(Context context, String input, EditText textField)", "static boolean handleSecretCode(Context context, String input)", "static boolean handleAdnEntry(Context context, String input, EditText textField)", "static boolean handlePinEntry(Context context, String input)", "static boolean handleIMEIDisplay(Context context, String input, boolean useSystemWindow)", "static void showNotSupportedPanel(Context context, boolean useSystemWindow)", "static void showIMEIPanel(Context context, boolean useSystemWindow)", "public SimContactQueryCookie(int number, QueryHandler handler, int token)", "public QueryHandler(ContentResolver cr)", "protected void onQueryComplete(int token, Object cookie, Cursor c)"], "prime_var_dic": {"String": 4, "never": 1, "int": 1, "the": 2, "dialog": 1, "if": 1, "handleAdnEntry": 1, "ADN": 1}}, {"idx": 91877, "status": "update", "global_index": 14986, "project_name": "android_", "written_on": "2014-05-14 00:24:28", "tufano_target": "private void METHOD_1 ( TYPE_1 field ) { field . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) { protected void METHOD_4 ( TYPE_3 VAR_1 ) { if ( VAR_2 ) { return ; } VAR_2 = true ; try { METHOD_5 ( ) ; VAR_3 . update ( ) ; } finally { VAR_2 = false ; } } } ) ; }", "comment": "style - use curly braces even for 1-line if statements.", "tokenized_comment": ["style", "<|s|>", "-", "<|s|>", "use", "<|s|>", "curly", "<|s|>", "braces", "<|s|>", "even", "<|s|>", "for", "<|s|>", "1", "-", "line", "<|s|>", "if", "<|s|>", "statements", "."], "tufano_code": "private void METHOD_1 ( TYPE_1 field ) { field . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) { protected void METHOD_4 ( TYPE_3 VAR_1 ) { if ( VAR_2 ) return ; VAR_2 = true ; try { METHOD_5 ( ) ; VAR_3 . update ( ) ; } finally { VAR_2 = false ; } } } ) ; }", "our_target": "        if (myUpdating) {\n          return;\n        }\n", "our_code": "  private void setupListener(JTextField field) {\n    field.getDocument().addDocumentListener(new DocumentAdapter() {\n      @Override\n      protected void textChanged(DocumentEvent e) {\n<|startfocus|>\n        if (myUpdating) return;\n<|endfocus|>\n        myUpdating = true;\n        try {\n          updateDataModel();\n          myUpdateListener.update();\n        }\n        finally {\n          myUpdating = false;\n        }\n      }\n    });\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "setup", "Listener", "(", "JText", "Field", "<|s|>", "field", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "field", ".", "get", "Document", "(", ")", ".", "add", "Document", "Listener", "(", "new", "<|s|>", "Document", "Adapter", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Override", "<|nl|>", "<|4-s|>", "<|2-s|>", "protected", "<|s|>", "void", "<|s|>", "text", "Changed", "(", "Document", "Event", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "my", "Updating", ")", "<|s|>", "return", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "my", "Updating", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "update", "Data", "Model", "(", ");", "<|nl|>", "<|8-s|>", "<|2-s|>", "my", "Update", "Listener", ".", "update", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "finally", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "my", "Updating", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 83, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4544", "comment_id": "ca154cf5_944b843d", "class_list": ["BackendModuleWizardStep", "AndroidModuleListCellRenderer"], "func_list": ["public BackendModuleWizardStep(Project project, NewModuleWizardState wizardState, TemplateWizardStep.UpdateListener updateListener)", "private void setupListener(JTextField field)", "protected void textChanged(DocumentEvent e)", "public JComponent getComponent()", "public void loadDataFromTemplate()", "public void updateDataModel()", "public boolean validate()", "public JComponent getPreferredFocusedComponent()", "public boolean isValid()", "protected void customizeCellRenderer(JList list, Module value, int index, boolean selected, boolean hasFocus)", "private void setupListener(JTextField field)"], "prime_var_dic": {}}, {"idx": 47113, "status": "update", "global_index": 10442, "project_name": "android_", "written_on": "2015-04-29 14:57:55", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { TYPE_2 . error ( STRING_1 ) ; return ; } TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; assert VAR_2 != null ; if ( METHOD_5 ( ) ) { VAR_6 = VAR_2 . METHOD_8 ( ) ; METHOD_6 ( ) ; } else { VAR_5 . METHOD_7 ( VAR_2 ) ; } }", "comment": "also you already have a ThemeEditorStyle, maybe you can just use that", "tokenized_comment": ["also", "<|s|>", "you", "<|s|>", "already", "<|s|>", "have", "<|s|>", "a", "<|s|>", "Theme", "Editor", "Style", ",", "<|s|>", "maybe", "<|s|>", "you", "<|s|>", "can", "<|s|>", "just", "<|s|>", "use", "<|s|>", "that"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { TYPE_2 . error ( STRING_1 ) ; return ; } TYPE_3 VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; assert VAR_2 != null ; if ( METHOD_5 ( ) ) { VAR_3 = new TYPE_1 ( VAR_2 , VAR_4 ) ; METHOD_6 ( ) ; } else { VAR_5 . METHOD_7 ( VAR_2 ) ; } }", "our_target": "      mySubStyleName = parent.getQualifiedName();\n", "our_code": "  public void goToParent() {\n    ThemeEditorStyle selectedStyle = getSelectedStyle();\n    if (selectedStyle == null) {\n      LOG.error(\"No style selected.\");\n      return;\n    }\n\n    StyleResourceValue parent = selectedStyle.getParent().getStyleResourceValue();\n    assert parent != null;\n\n    // TODO: This seems like it could be confusing for users, we might want to differentiate parent navigation depending if it's\n    // substyle or theme navigation.\n    if (isSubStyleSelected()) {\n<|startfocus|>\n      myCurrentSubStyle = new ThemeEditorStyle(parent, myConfiguration);\n<|endfocus|>\n      loadStyleAttributes();\n    }\n    else {\n      myPanel.setSelectedTheme(parent);\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "go", "To", "Parent", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Theme", "Editor", "Style", "<|s|>", "selected", "Style", "<|s|>", "=", "<|s|>", "get", "Selected", "Style", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "selected", "Style", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "error", "(", "\"", "No", "<|s|>", "style", "<|s|>", "selected", ".", "\"", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "Style", "Resource", "Value", "<|s|>", "parent", "<|s|>", "=", "<|s|>", "selected", "Style", ".", "get", "Parent", "(", ")", ".", "get", "Style", "Resource", "Value", "(", ");", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "parent", "<|s|>", "!=", "<|s|>", "null", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "This", "<|s|>", "seems", "<|s|>", "like", "<|s|>", "it", "<|s|>", "could", "<|s|>", "be", "<|s|>", "confusing", "<|s|>", "for", "<|s|>", "users", ",", "<|s|>", "we", "<|s|>", "might", "<|s|>", "want", "<|s|>", "to", "<|s|>", "differentiate", "<|s|>", "parent", "<|s|>", "navigation", "<|s|>", "depending", "<|s|>", "if", "<|s|>", "it", "'", "s", "<|nl|>", "<|4-s|>", "//", "<|s|>", "substyle", "<|s|>", "or", "<|s|>", "theme", "<|s|>", "navigation", ".", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "is", "Sub", "Style", "Selected", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Current", "Sub", "Style", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Theme", "Editor", "Style", "(", "parent", ",", "<|s|>", "my", "Configuration", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "load", "Style", "Attributes", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Panel", ".", "set", "Selected", "Theme", "(", "parent", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 400, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_307", "comment_id": "705392ca_03ad2e96", "class_list": ["ThemeEditorComponent", "SimpleModeFilter", "AttributesFilter", "StyleAttributesFilter"], "func_list": ["public boolean changed(int flags)", "public ThemeEditorComponent(final Configuration configuration, final Module module)", "public void clicked(@NotNull EditedStyleItem value)", "public Component getTableCellRendererComponent(JTable table,", "public void actionPerformed(ActionEvent e)", "public void buildFinished(@NotNull Project project, @Nullable BuildMode mode)", "private void configureFilter()", "private boolean createNewTheme()", "private boolean selectNewTheme()", "private boolean renameTheme()", "public void goToParent()", "private String createNewStyle(@Nullable String defaultParentStyleName,", "public boolean process(ResourceElement element)", "private void saveCurrentSelectedTheme()", "public String getPreviousSelectedTheme()", "ThemeEditorStyle getSelectedTheme()", "private ThemeEditorStyle getSelectedStyle()", "ThemeEditorStyle getCurrentSubStyle()", "private boolean isSubStyleSelected()", "private void createNewThemeWithAttributeValue(@NotNull EditedStyleItem rv, @NotNull String strValue)", "public void reload(@Nullable final String defaultThemeName)", "public void run()", "private void loadStyleAttributes()", "public void attributeChangedOnReadOnlyTheme(final EditedStyleItem attribute, final String newValue)", "public void tableChanged(TableModelEvent e)", "public void itemStateChanged(ItemEvent e)", "public void dispose()", "public SimpleModeFilter()", "private void configureFilter()", "public boolean include(Entry<? extends AttributesTableModel, ? extends Integer> entry)", "public StyleAttributesFilter()", "public void setFilterEnabled(boolean enabled)", "public void setAttributesFilter(@NotNull Set<String> attributeNames)", "public void setUI(PanelUI ui)", "private void updateUiParameters()", "public boolean changed(int flags)", "public boolean changed(int flags)", "public boolean changed(int flags)"], "prime_var_dic": {"myAttributesFilter": 1, "mySimpleModeFilter": 1, "myStyleEditor": 1, "myClickListener": 1}}, {"idx": 66976, "status": "update", "global_index": 10686, "project_name": "android_", "written_on": "2015-05-22 19:06:21", "tufano_target": "public String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( VAR_2 . size ( ) > 0 ) { VAR_1 . append ( STRING_1 + VAR_3 + STRING_2 ) ; } for ( String VAR_4 : VAR_2 ) { VAR_1 . append ( VAR_4 ) ; } return VAR_1 . toString ( ) ; }", "comment": "space before :", "tokenized_comment": ["space", "<|s|>", "before", "<|s|>", ":"], "tufano_code": "public String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( VAR_2 . size ( ) > 0 ) { VAR_1 . append ( STRING_1 + VAR_3 + STRING_2 ) ; } for ( String VAR_4 : VAR_2 ) { VAR_1 . append ( VAR_4 ) ; } return VAR_1 . toString ( ) ; }", "our_target": "        for (String log : mErrorLines) {\n", "our_code": "    public String getErrorLog() {\n        StringBuilder errorBuilder = new StringBuilder();\n        if (mErrorLines.size() > 0) {\n            errorBuilder.append(\"In \" + mFileName + \":\\n\");\n        }\n<|startfocus|>\n        for (String log: mErrorLines) {\n<|endfocus|>\n            errorBuilder.append(log);\n        }\n        return errorBuilder.toString();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Error", "Log", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "Builder", "<|s|>", "error", "Builder", "<|s|>", "=", "<|s|>", "new", "<|s|>", "String", "Builder", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Error", "Lines", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "error", "Builder", ".", "append", "(", "\"", "In", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "m", "File", "Name", "<|s|>", "+", "<|s|>", "\"", ":\\", "n", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "String", "<|s|>", "log", ":", "<|s|>", "m", "Error", "Lines", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "error", "Builder", ".", "append", "(", "log", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "error", "Builder", ".", "to", "String", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 115, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_919", "comment_id": "0d031dc0_9e3a6b92", "class_list": ["SvgTree"], "func_list": ["public void normalize()", "private void transform(float a, float b, float c, float d, float e, float f)", "public void setScaleFactor(float scaleFactor)", "public void dump(SvgGroupNode root)", "public void setRoot(SvgGroupNode root)", "public SvgGroupNode getRoot()", "public void logErrorLine(String s, Node node, SvgLogLevel level)", "public String getErrorLog()", "private SourcePosition getPosition(Node node)"], "prime_var_dic": {"int": 1}}, {"idx": 4953, "status": "update", "global_index": 9053, "project_name": "android_", "written_on": "2015-08-26 17:08:32", "tufano_target": "private void METHOD_1 ( long VAR_1 , long result ) { long VAR_2 = VAR_1 - result ; long VAR_3 = ( long ) ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_1 * VAR_5 ) ) ; VAR_6 . METHOD_4 ( STRING_1 + VAR_1 + STRING_2 + result , VAR_2 < VAR_3 ) ; }", "comment": "This is unacceptable, API spec only allows for rounding down.\nAllowing round up will be too unpredictable for app developers", "tokenized_comment": ["This", "<|s|>", "is", "<|s|>", "unacceptable", ",", "<|s|>", "API", "<|s|>", "spec", "<|s|>", "only", "<|s|>", "allows", "<|s|>", "for", "<|s|>", "rounding", "<|s|>", "down", ".", "<|nl|>", "Allowing", "<|s|>", "round", "<|s|>", "up", "<|s|>", "will", "<|s|>", "be", "<|s|>", "too", "<|s|>", "unpredictable", "<|s|>", "for", "<|s|>", "app", "<|s|>", "developers"], "tufano_code": "private void METHOD_1 ( long VAR_1 , long result ) { long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 - result ) ; long VAR_3 = ( long ) ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_1 * VAR_5 ) ) ; VAR_6 . METHOD_4 ( STRING_1 + VAR_1 + STRING_2 + result , VAR_2 < VAR_3 ) ; }", "our_target": "        long expTimeDelta = request - result;\n", "our_code": "    private void validateExposureTime(long request, long result) {\n<|startfocus|>\n        long expTimeDelta = Math.abs(request - result);\n<|endfocus|>\n        long expTimeErrorMargin = (long)(Math.max(EXPOSURE_TIME_ERROR_MARGIN_NS, request\n                * EXPOSURE_TIME_ERROR_MARGIN_RATE));\n        // First, round down not up, second, need close enough.\n        mCollector.expectTrue(\"Exposture time is invalid for AE manaul control test, request: \"\n                + request + \" result: \" + result,\n                expTimeDelta < expTimeErrorMargin);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "validate", "Exposure", "Time", "(", "long", "<|s|>", "request", ",", "<|s|>", "long", "<|s|>", "result", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "long", "<|s|>", "exp", "Time", "Delta", "<|s|>", "=", "<|s|>", "Math", ".", "abs", "(", "request", "<|s|>", "-", "<|s|>", "result", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "long", "<|s|>", "exp", "Time", "Error", "Margin", "<|s|>", "=", "<|s|>", "(", "long", ")", "(", "Math", ".", "max", "(", "EXPOSURE", "_", "TIME", "_", "ERROR", "_", "MARGIN", "_", "NS", ",", "<|s|>", "request", "<|nl|>", "<|16-s|>", "*", "<|s|>", "EXPOSURE", "_", "TIME", "_", "ERROR", "_", "MARGIN", "_", "RATE", ")", ");", "<|nl|>", "<|8-s|>", "//", "<|s|>", "First", ",", "<|s|>", "round", "<|s|>", "down", "<|s|>", "not", "<|s|>", "up", ",", "<|s|>", "second", ",", "<|s|>", "need", "<|s|>", "close", "<|s|>", "enough", ".", "<|nl|>", "<|8-s|>", "m", "Collector", ".", "expect", "True", "(", "\"", "Exposture", "<|s|>", "time", "<|s|>", "is", "<|s|>", "invalid", "<|s|>", "for", "<|s|>", "AE", "<|s|>", "manaul", "<|s|>", "control", "<|s|>", "test", ",", "<|s|>", "request", ":", "<|s|>", "\"", "<|nl|>", "<|16-s|>", "+", "<|s|>", "request", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "result", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "result", ",", "<|nl|>", "<|16-s|>", "exp", "Time", "Delta", "<|s|>", "<", "<|s|>", "exp", "Time", "Error", "Margin", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1988, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5343", "comment_id": "048f817d_ca75d93e", "class_list": ["CaptureRequestTest"], "func_list": ["private float verifyFocusDistanceControl(float distance, CaptureRequest request,", "private void validateColorCorrectionResult(CaptureResult result, int colorCorrectionMode)", "private void verifyFaceDetectionResults(SimpleCaptureCallback listener, int numFramesVerified,", "private void verifyToneMapModeResults(SimpleCaptureCallback listener, int numFramesVerified,", "private void verifyAwbCaptureResultUnchanged(SimpleCaptureCallback listener,", "private static boolean isAspectRatioContained(List<Double> aspectRatioList,", "private void changeExposure(CaptureRequest.Builder requestBuilder,", "private long[] getExposureTimeTestValues()", "private float[] getFocusDistanceTestValuesInOrder()", "private int[] getSensitivityTestValues()", "private void validateExposureTime(long request, long result)", "private void validateSensitivity(int request, int result)", "private void validateFrameDurationForCapture(CaptureResult result)", "private void validatePipelineDepth(CaptureResult result)", "private long getAntiFlickeringExposureTime(int flickeringMode, long exposureTime)"], "prime_var_dic": {"String": 1, "int": 14, "long": 5, "float": 9, "curve": 1, "INDEX_ALGORITHM_AE": 1, "INDEX_ALGORITHM_AWB": 1, "INDEX_ALGORITHM_AF": 1, "maps": 3, "and": 1, "lock": 2, "control": 8, "modes": 2, "optical": 1, "controls": 3, "test": 1, "optionally": 1, "accurate": 1, "mode": 2, "exposure": 4, "frame": 1, "Exception": 3, "not": 1, "unchanged": 1, "regions": 3, "MeteringRectangle": 1, "w": 1, "range": 1, "sensitivity": 2, "numFramesVerified": 1, "value": 1, "slow": 1, "depth": 1, "flickering": 1, "algoIdx": 2}}, {"idx": 89260, "status": "update", "global_index": 4821, "project_name": "android_", "written_on": "2016-12-15 02:24:47", "tufano_target": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; METHOD_2 ( ) ; try { VAR_6 . METHOD_4 ( 1 , VAR_7 ) ; } catch ( TYPE_2 VAR_8 ) { fail ( STRING_2 ) ; } assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) ; assertEquals ( VAR_5 , VAR_4 . get ( 0 ) ) ; }", "comment": "Better to use a CountDownLatch for this with a timeout because you don't know how responsive the host device will be. This test could fail on some devices and pass on others.", "tokenized_comment": ["Better", "<|s|>", "to", "<|s|>", "use", "<|s|>", "a", "<|s|>", "Count", "Down", "Latch", "<|s|>", "for", "<|s|>", "this", "<|s|>", "with", "<|s|>", "a", "<|s|>", "timeout", "<|s|>", "because", "<|s|>", "you", "<|s|>", "don", "'", "t", "<|s|>", "know", "<|s|>", "how", "<|s|>", "responsive", "<|s|>", "the", "<|s|>", "host", "<|s|>", "device", "<|s|>", "will", "<|s|>", "be", ".", "<|s|>", "This", "<|s|>", "test", "<|s|>", "could", "<|s|>", "fail", "<|s|>", "on", "<|s|>", "some", "<|s|>", "devices", "<|s|>", "and", "<|s|>", "pass", "<|s|>", "on", "<|s|>", "others", "."], "tufano_code": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; METHOD_2 ( ) ; METHOD_3 ( INT_1 ) ; assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) ; assertEquals ( VAR_5 , VAR_4 . get ( 0 ) ) ; }", "our_target": "        try {\n            mLatch.await(1, TimeUnit.SECONDS); // wait for listener to be executed\n        } catch (InterruptedException e) {\n            fail(\"Interrupted Exception while waiting for listener to be invoked.\");\n        }\n", "our_code": "    public void updateScoresShouldInvokeCacheListener_networkCacheUpdated() {\n        mScoreCache = new WifiNetworkScoreCache(mockContext, mockCacheListener);\n        initializeCacheWithValidScoredNetwork();\n\n<|startfocus|>\n        timeout(100 /* timeoutMillis */); // wait for listener thread to be invoked\n<|endfocus|>\n        assertEquals(\"One network should be updated\", 1, mUpdatedNetworksCaptor.size());\n        assertEquals(mValidScoredNetwork, mUpdatedNetworksCaptor.get(0));\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "update", "Scores", "Should", "Invoke", "Cache", "Listener", "_", "network", "Cache", "Updated", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "m", "Score", "Cache", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Wifi", "Network", "Score", "Cache", "(", "mock", "Context", ",", "<|s|>", "mock", "Cache", "Listener", ");", "<|nl|>", "<|8-s|>", "initialize", "Cache", "With", "Valid", "Scored", "Network", "(", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "timeout", "(", "100", "<|s|>", "/*", "<|s|>", "timeout", "Millis", "<|s|>", "*/", ");", "<|s|>", "//", "<|s|>", "wait", "<|s|>", "for", "<|s|>", "listener", "<|s|>", "thread", "<|s|>", "to", "<|s|>", "be", "<|s|>", "invoked", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "\"", "One", "<|s|>", "network", "<|s|>", "should", "<|s|>", "be", "<|s|>", "updated", "\"", ",", "<|s|>", "1", ",", "<|s|>", "m", "Updated", "Networks", "Captor", ".", "size", "(", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "m", "Valid", "Scored", "Network", ",", "<|s|>", "m", "Updated", "Networks", "Captor", ".", "get", "(", "0", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 186, "base_patch_number": 3, "changed_patch_number": 7, "code_file_name": "android_5699", "comment_id": "da6aeb2c_bec256ec", "class_list": ["WifiNetworkScoreCacheTest"], "func_list": ["private static ScanResult buildScanResult(String ssid, String bssid)", "private static ScoredNetwork buildScoredNetwork(WifiKey key, RssiCurve curve)", "private void initializeCacheWithValidScoredNetwork()", "public void setUp()", "public void networkCacheUpdated(List<ScoredNetwork> updatedNetworks)", "public void isScoredNetworkShouldReturnTrueAfterUpdateScoresIsCalled()", "public void isScoredNetworkShouldReturnFalseAfterClearScoresIsCalled()", "public void updateScoresShouldAddNewNetwork()", "public void hasScoreCurveShouldReturnTrue()", "public void hasScoreCurveShouldReturnFalseWhenNoCachedNetwork()", "public void hasScoreCurveShouldReturnFalseWhenScoredNetworkHasNoCurve()", "public void getNetworkScoreShouldReturnScore()", "public void getMeteredHintShouldReturnFalse()", "public void getMeteredHintShouldReturnTrue()", "public void updateScoresShouldInvokeCacheListener_networkCacheUpdated()"], "prime_var_dic": {"String": 3, "mockRssiCurve": 1}}, {"idx": 39937, "status": "update", "global_index": 6395, "project_name": "android_", "written_on": "2016-05-13 20:35:08", "tufano_target": "protected void METHOD_1 ( TYPE_1 type ) { TYPE_7 < String > VAR_1 = new TYPE_7 < String > ( VAR_2 . METHOD_2 ( ) ) ; for ( TYPE_4 field : type . METHOD_3 ( ) ) { String name = field . getId ( ) ; TYPE_5 < TYPE_4 > VAR_3 = VAR_2 . get ( name ) ; if ( VAR_3 != null ) { VAR_1 . remove ( name ) ; VAR_3 . METHOD_4 ( field ) ; } } for ( String field : VAR_1 ) { TYPE_6 . fail ( STRING_1 + field ) ; } }", "comment": "Should we sort the fields (an other validation targets)?\n\nThe reason is that you might have two assertion failure and being deterministic might help. (as we might not need to be deterministic in compiled output order)", "tokenized_comment": ["Should", "<|s|>", "we", "<|s|>", "sort", "<|s|>", "the", "<|s|>", "fields", "<|s|>", "(", "an", "<|s|>", "other", "<|s|>", "validation", "<|s|>", "targets", ")", "?", "<|nl|>", "<|nl|>", "The", "<|s|>", "reason", "<|s|>", "is", "<|s|>", "that", "<|s|>", "you", "<|s|>", "might", "<|s|>", "have", "<|s|>", "two", "<|s|>", "assertion", "<|s|>", "failure", "<|s|>", "and", "<|s|>", "being", "<|s|>", "deterministic", "<|s|>", "might", "<|s|>", "help", ".", "<|s|>", "(", "as", "<|s|>", "we", "<|s|>", "might", "<|s|>", "not", "<|s|>", "need", "<|s|>", "to", "<|s|>", "be", "<|s|>", "deterministic", "<|s|>", "in", "<|s|>", "compiled", "<|s|>", "output", "<|s|>", "order", ")"], "tufano_code": "protected void METHOD_1 ( TYPE_1 type ) { TYPE_2 < String > VAR_1 = new TYPE_3 < String > ( VAR_2 . METHOD_2 ( ) ) ; for ( TYPE_4 field : type . METHOD_3 ( ) ) { String name = field . getId ( ) ; TYPE_5 < TYPE_4 > VAR_3 = VAR_2 . get ( name ) ; if ( VAR_3 != null ) { VAR_1 . remove ( name ) ; VAR_3 . METHOD_4 ( field ) ; } } for ( String field : VAR_1 ) { TYPE_6 . fail ( STRING_1 + field ) ; } }", "our_target": "    TreeSet<String> notProcessedFields = new TreeSet<String>(validators.keySet());\n", "our_code": "  protected void validateImpl(@Nonnull DexType type) {\n<|startfocus|>\n    Set<String> notProcessedFields = new HashSet<String>(validators.keySet());\n<|endfocus|>\n    for (DexField field : type.getFields()) {\n      String name = field.getId();\n      DexValidator<DexField> validator = validators.get(name);\n      if (validator != null) {\n        notProcessedFields.remove(name);\n        validator.validate(field);\n      }\n    }\n\n    for (String field : notProcessedFields) {\n      Assert.fail(\"Not processed field: \" + field);\n    }\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "void", "<|s|>", "validate", "Impl", "(", "@", "Nonnull", "<|s|>", "Dex", "Type", "<|s|>", "type", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Set", "<", "String", ">", "<|s|>", "not", "Processed", "Fields", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hash", "Set", "<", "String", ">", "(", "validators", ".", "key", "Set", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Dex", "Field", "<|s|>", "field", "<|s|>", ":", "<|s|>", "type", ".", "get", "Fields", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "name", "<|s|>", "=", "<|s|>", "field", ".", "get", "Id", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "Dex", "Validator", "<", "Dex", "Field", ">", "<|s|>", "validator", "<|s|>", "=", "<|s|>", "validators", ".", "get", "(", "name", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "validator", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "not", "Processed", "Fields", ".", "remove", "(", "name", ");", "<|nl|>", "<|8-s|>", "validator", ".", "validate", "(", "field", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "String", "<|s|>", "field", "<|s|>", ":", "<|s|>", "not", "Processed", "Fields", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Assert", ".", "fail", "(", "\"", "Not", "<|s|>", "processed", "<|s|>", "field", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "field", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 31, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_2579", "comment_id": "7254a4e4_2138912b", "class_list": ["DexTypeFieldsValidator"], "func_list": ["protected void validateImpl(@Nonnull DexType type)"], "prime_var_dic": {}}, {"idx": 96157, "status": "update", "global_index": 5694, "project_name": "android_", "written_on": "2016-05-31 22:26:07", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 intent = new TYPE_1 ( ) ; intent . METHOD_2 ( STRING_1 ) ; intent . METHOD_3 ( STRING_2 , STRING_3 ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_4 ( STRING_4 ) ; intent . METHOD_5 ( VAR_1 ) ; try { VAR_2 . METHOD_6 ( intent ) ; fail ( STRING_5 + STRING_6 ) ; } catch ( TYPE_3 VAR_3 ) { } }", "comment": "same here.", "tokenized_comment": ["same", "<|s|>", "here", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 intent = new TYPE_1 ( ) ; intent . METHOD_2 ( STRING_1 ) ; intent . METHOD_3 ( STRING_2 , STRING_3 ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_4 ( STRING_4 ) ; intent . METHOD_5 ( VAR_1 ) ; try { VAR_2 . METHOD_6 ( intent ) ; fail ( STRING_5 + STRING_6 ) ; } catch ( TYPE_3 VAR_3 ) { } }", "our_target": "            /* Pass the Test case: App should not be able to send broadcast using action\n             * 'android.intent.action.stk.command' as it is protected by permission in\n             * patched devices\n", "our_code": "    public void testInterceptedSIMCommandsToTelephony() {\n        Intent intent = new Intent();\n        intent.setAction(\"android.intent.action.stk.command\");\n        intent.putExtra(\"STK CMD\", \"test\");\n        ComponentName cn =\n                ComponentName.unflattenFromString(\"com.android.stk/com.android.stk.StkCmdReceiver\");\n        intent.setComponent(cn);\n        try {\n            mContext.sendBroadcast(intent);\n            fail(\"Able to receive broadcast sent by CAT Telephony with action \" +\n                    \"android.intent.action.stk.command. Device is vulnerable to CVE-2015-3843\");\n        } catch (SecurityException e) {\n<|startfocus|>\n            /* Pass the Test case: App should not be able to receive broadcast sent by\n             * CAT Telephony with action android.intent.action.stk.command\n<|endfocus|>\n             */\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Intercepted", "SIMCommands", "To", "Telephony", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Intent", "<|s|>", "intent", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Intent", "(", ");", "<|nl|>", "<|8-s|>", "intent", ".", "set", "Action", "(", "\"", "android", ".", "intent", ".", "action", ".", "stk", ".", "command", "\"", ");", "<|nl|>", "<|8-s|>", "intent", ".", "put", "Extra", "(", "\"", "STK", "<|s|>", "CMD", "\"", ",", "<|s|>", "\"", "test", "\"", ");", "<|nl|>", "<|8-s|>", "Component", "Name", "<|s|>", "cn", "<|s|>", "=", "<|nl|>", "<|16-s|>", "Component", "Name", ".", "unflatten", "From", "String", "(", "\"", "com", ".", "android", ".", "stk", "/", "com", ".", "android", ".", "stk", ".", "Stk", "Cmd", "Receiver", "\"", ");", "<|nl|>", "<|8-s|>", "intent", ".", "set", "Component", "(", "cn", ");", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Context", ".", "send", "Broadcast", "(", "intent", ");", "<|nl|>", "<|12-s|>", "fail", "(", "\"", "Able", "<|s|>", "to", "<|s|>", "receive", "<|s|>", "broadcast", "<|s|>", "sent", "<|s|>", "by", "<|s|>", "CAT", "<|s|>", "Telephony", "<|s|>", "with", "<|s|>", "action", "<|s|>", "\"", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "android", ".", "intent", ".", "action", ".", "stk", ".", "command", ".", "<|s|>", "Device", "<|s|>", "is", "<|s|>", "vulnerable", "<|s|>", "to", "<|s|>", "CVE", "-", "2015", "-", "3843", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Security", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "/*", "<|s|>", "Pass", "<|s|>", "the", "<|s|>", "Test", "<|s|>", "case", ":", "<|s|>", "App", "<|s|>", "should", "<|s|>", "not", "<|s|>", "be", "<|s|>", "able", "<|s|>", "to", "<|s|>", "receive", "<|s|>", "broadcast", "<|s|>", "sent", "<|s|>", "by", "<|nl|>", "<|12-s|>", "<|s|>", "*", "<|s|>", "CAT", "<|s|>", "Telephony", "<|s|>", "with", "<|s|>", "action", "<|s|>", "android", ".", "intent", ".", "action", ".", "stk", ".", "command", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "<|s|>", "*/", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 49, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5451", "comment_id": "79700dc4_42e5c816", "class_list": ["STKFrameworkTest"], "func_list": ["public void testInterceptedSIMCommandsToTelephony()"], "prime_var_dic": {}}, {"idx": 93732, "status": "update", "global_index": 8936, "project_name": "android_", "written_on": "2015-08-03 16:01:05", "tufano_target": "private static String METHOD_1 ( TYPE_1 t ) { boolean VAR_1 = false ; for ( TYPE_2 VAR_2 : t . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( ) . contains ( STRING_1 ) ) { VAR_1 = true ; break ; } } String VAR_3 = VAR_1 ? STRING_2 : STRING_3 ; String VAR_4 = VAR_3 + t . getClass ( ) . METHOD_4 ( ) + VAR_5 ; if ( VAR_4 . length ( ) > INT_1 ) { VAR_4 = VAR_4 . substring ( 0 , INT_1 ) ; } return VAR_4 ; }", "comment": "t.getClass().getSimpleName(); + filename + line number", "tokenized_comment": ["t", ".", "get", "Class", "(", ")", ".", "get", "Simple", "Name", "(", ");", "<|s|>", "+", "<|s|>", "filename", "<|s|>", "+", "<|s|>", "line", "<|s|>", "number"], "tufano_code": "private static String METHOD_1 ( TYPE_1 t ) { boolean VAR_1 = false ; for ( TYPE_2 VAR_2 : t . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( ) . contains ( STRING_1 ) ) { VAR_1 = true ; break ; } } String VAR_3 = VAR_1 ? STRING_2 : STRING_3 ; String VAR_4 = VAR_3 + t . toString ( ) ; if ( VAR_4 . length ( ) > INT_1 ) { VAR_4 = VAR_4 . substring ( 0 , INT_1 ) ; } return VAR_4 ; }", "our_target": "    String desc = prefix + t.getClass().getSimpleName() + sourceLocation;\n", "our_code": "  private static String getDescription(@NotNull Throwable t) {\n    boolean isAndroid = false;\n    for (StackTraceElement el : t.getStackTrace()) {\n      if (el.getClassName().contains(\"android\")) {\n        isAndroid = true;\n        break;\n      }\n    }\n\n    String prefix = isAndroid ? \"android:\" : \"\";\n<|startfocus|>\n    String desc = prefix + t.toString();\n<|endfocus|>\n\n    if (desc.length() > 150) {\n      desc = desc.substring(0, 150); // quick hack: lets assume this is mostly ASCII\n    }\n\n    return desc;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "get", "Description", "(", "@", "Not", "Null", "<|s|>", "Throwable", "<|s|>", "t", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "is", "Android", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Stack", "Trace", "Element", "<|s|>", "el", "<|s|>", ":", "<|s|>", "t", ".", "get", "Stack", "Trace", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "el", ".", "get", "Class", "Name", "(", ")", ".", "contains", "(", "\"", "android", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "is", "Android", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "String", "<|s|>", "prefix", "<|s|>", "=", "<|s|>", "is", "Android", "<|s|>", "?", "<|s|>", "\"", "android", ":", "\"", "<|s|>", ":", "<|s|>", "\"", "\"", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "String", "<|s|>", "desc", "<|s|>", "=", "<|s|>", "prefix", "<|s|>", "+", "<|s|>", "t", ".", "to", "String", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "desc", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "150", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "desc", "<|s|>", "=", "<|s|>", "desc", ".", "substring", "(", "0", ",", "<|s|>", "150", ");", "<|s|>", "//", "<|s|>", "quick", "<|s|>", "hack", ":", "<|s|>", "lets", "<|s|>", "assume", "<|s|>", "this", "<|s|>", "is", "<|s|>", "mostly", "<|s|>", "ASCII", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "desc", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 125, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3643", "comment_id": "ea6cf416_1971ef87", "class_list": ["mirrors", "PlatformUsageTracker"], "func_list": ["public static boolean trackingEnabled()", "public static void trackException(@NotNull Throwable t, boolean fatal)", "private static void post(@NotNull final List<BasicNameValuePair> parameters)", "public void run()", "private static String getDescription(@NotNull Throwable t)", "private static Throwable getRootCause(Throwable e)", "public static boolean trackingEnabled()", "public static void trackException(@NotNull Throwable t, boolean fatal)", "private static void post(@NotNull final List<BasicNameValuePair> parameters)", "public void run()", "private static String getDescription(@NotNull Throwable t)", "private static Throwable getRootCause(Throwable e)"], "prime_var_dic": {}}, {"idx": 89691, "status": "update", "global_index": 7842, "project_name": "android_", "written_on": "2015-11-30 22:16:29", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_4 ) { METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return VAR_2 . METHOD_3 ( ) ; } return VAR_2 . METHOD_3 ( ) ; }", "comment": "Wrap ensureInitialized and obtaining the reference to TrustedCertificateIndex into synchronized (mLock) to ensure visibility of latest value of mIndex.\n\nI'd suggest doing the same for consistency in getCertificates, although that's not strictly required there.", "tokenized_comment": ["Wrap", "<|s|>", "ensure", "Initialized", "<|s|>", "and", "<|s|>", "obtaining", "<|s|>", "the", "<|s|>", "reference", "<|s|>", "to", "<|s|>", "Trusted", "Certificate", "Index", "<|s|>", "into", "<|s|>", "synchronized", "<|s|>", "(", "m", "Lock", ")", "<|s|>", "to", "<|s|>", "ensure", "<|s|>", "visibility", "<|s|>", "of", "<|s|>", "latest", "<|s|>", "value", "<|s|>", "of", "<|s|>", "m", "Index", ".", "<|nl|>", "<|nl|>", "I", "'", "d", "<|s|>", "suggest", "<|s|>", "doing", "<|s|>", "the", "<|s|>", "same", "<|s|>", "for", "<|s|>", "consistency", "<|s|>", "in", "<|s|>", "get", "Certificates", ",", "<|s|>", "although", "<|s|>", "that", "'", "s", "<|s|>", "not", "<|s|>", "strictly", "<|s|>", "required", "<|s|>", "there", "."], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } return VAR_2 . METHOD_3 ( ) ; }", "our_target": "        synchronized (mLock) {\n            ensureInitialized();\n            java.security.cert.TrustAnchor anchor = mIndex.findBySubjectAndPublicKey(cert);\n            if (anchor == null) {\n                return null;\n            }\n            return anchor.getTrustedCert();\n", "our_code": "    public X509Certificate findBySubjectAndPublicKey(X509Certificate cert) {\n<|startfocus|>\n        ensureInitialized();\n        java.security.cert.TrustAnchor anchor = mIndex.findBySubjectAndPublicKey(cert);\n        if (anchor == null) {\n            return null;\n<|endfocus|>\n        }\n        return anchor.getTrustedCert();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "X", "509", "Certificate", "<|s|>", "find", "By", "Subject", "And", "Public", "Key", "(", "X", "509", "Certificate", "<|s|>", "cert", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "ensure", "Initialized", "(", ");", "<|nl|>", "<|8-s|>", "java", ".", "security", ".", "cert", ".", "Trust", "Anchor", "<|s|>", "anchor", "<|s|>", "=", "<|s|>", "m", "Index", ".", "find", "By", "Subject", "And", "Public", "Key", "(", "cert", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "anchor", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "anchor", ".", "get", "Trusted", "Cert", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 84, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1429", "comment_id": "9b0923b2_2b5385ed", "class_list": ["ResourceCertificateSource"], "func_list": ["public ResourceCertificateSource(int resourceId, Context context)", "private void ensureInitialized()", "public Set<X509Certificate> getCertificates()", "public X509Certificate findBySubjectAndPublicKey(X509Certificate cert)"], "prime_var_dic": {"implements": 1, "mResourceId": 1}}, {"idx": 90563, "status": "update", "global_index": 2644, "project_name": "android_", "written_on": "2017-03-08 18:50:55", "tufano_target": "private int METHOD_2 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; case VAR_20 : return VAR_21 ; default : return VAR_22 ; } }", "comment": "If the HalRegState is really constrained to Hal it should get translated before it leaves Ril.java.  If it's not it should probably be just convertRegStateToServiceState\n\nLooking at this furtuer this appear to not be regState -> ServiceState but Hal -> AOSP.  Does anybody above RIL.java need the RegState version?", "tokenized_comment": ["If", "<|s|>", "the", "<|s|>", "Hal", "Reg", "State", "<|s|>", "is", "<|s|>", "really", "<|s|>", "constrained", "<|s|>", "to", "<|s|>", "Hal", "<|s|>", "it", "<|s|>", "should", "<|s|>", "get", "<|s|>", "translated", "<|s|>", "before", "<|s|>", "it", "<|s|>", "leaves", "<|s|>", "Ril", ".", "java", ".", "<|2-s|>", "If", "<|s|>", "it", "'", "s", "<|s|>", "not", "<|s|>", "it", "<|s|>", "should", "<|s|>", "probably", "<|s|>", "be", "<|s|>", "just", "<|s|>", "convert", "Reg", "State", "To", "Service", "State", "<|nl|>", "<|nl|>", "Looking", "<|s|>", "at", "<|s|>", "this", "<|s|>", "furtuer", "<|s|>", "this", "<|s|>", "appear", "<|s|>", "to", "<|s|>", "not", "<|s|>", "be", "<|s|>", "reg", "State", "<|s|>", "->", "<|s|>", "Service", "State", "<|s|>", "but", "<|s|>", "Hal", "<|s|>", "->", "<|s|>", "AOSP", ".", "<|2-s|>", "Does", "<|s|>", "anybody", "<|s|>", "above", "<|s|>", "RIL", ".", "java", "<|s|>", "need", "<|s|>", "the", "<|s|>", "Reg", "State", "<|s|>", "version", "?"], "tufano_code": "private int METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; case VAR_20 : return VAR_21 ; default : return VAR_22 ; } }", "our_target": "    private int getRegStateFromHalRegState(int regState) {\n", "our_code": "<|startfocus|>\n    private int convertHalRegStateToServiceState(int regState) {\n<|endfocus|>\n        switch (regState) {\n            case RegState.NOT_REG_MT_NOT_SEARCHING_OP:\n                return ServiceState.RIL_REG_STATE_NOT_REG;\n            case RegState.REG_HOME:\n                return ServiceState.RIL_REG_STATE_HOME;\n            case RegState.NOT_REG_MT_SEARCHING_OP:\n                return ServiceState.RIL_REG_STATE_SEARCHING;\n            case RegState.REG_DENIED:\n                return ServiceState.RIL_REG_STATE_DENIED;\n            case RegState.UNKNOWN:\n                return ServiceState.RIL_REG_STATE_UNKNOWN;\n            case RegState.REG_ROAMING:\n                return ServiceState.RIL_REG_STATE_ROAMING;\n            case RegState.NOT_REG_MT_NOT_SEARCHING_OP_EM:\n                return ServiceState.RIL_REG_STATE_NOT_REG_EMERGENCY_CALL_ENABLED;\n            case RegState.NOT_REG_MT_SEARCHING_OP_EM:\n                return ServiceState.RIL_REG_STATE_SEARCHING_EMERGENCY_CALL_ENABLED;\n            case RegState.REG_DENIED_EM:\n                return ServiceState.RIL_REG_STATE_DENIED_EMERGENCY_CALL_ENABLED;\n            case RegState.UNKNOWN_EM:\n                return ServiceState.RIL_REG_STATE_UNKNOWN_EMERGENCY_CALL_ENABLED;\n            default:\n                return ServiceState.REGISTRATION_STATE_NOT_REGISTERED_AND_NOT_SEARCHING;\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "convert", "Hal", "Reg", "State", "To", "Service", "State", "(", "int", "<|s|>", "reg", "State", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "switch", "<|s|>", "(", "reg", "State", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "NOT", "_", "REG", "_", "MT", "_", "NOT", "_", "SEARCHING", "_", "OP", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "NOT", "_", "REG", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "REG", "_", "HOME", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "HOME", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "NOT", "_", "REG", "_", "MT", "_", "SEARCHING", "_", "OP", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "SEARCHING", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "REG", "_", "DENIED", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "DENIED", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "UNKNOWN", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "UNKNOWN", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "REG", "_", "ROAMING", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "ROAMING", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "NOT", "_", "REG", "_", "MT", "_", "NOT", "_", "SEARCHING", "_", "OP", "_", "EM", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "NOT", "_", "REG", "_", "EMERGENCY", "_", "CALL", "_", "ENABLED", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "NOT", "_", "REG", "_", "MT", "_", "SEARCHING", "_", "OP", "_", "EM", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "SEARCHING", "_", "EMERGENCY", "_", "CALL", "_", "ENABLED", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "REG", "_", "DENIED", "_", "EM", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "DENIED", "_", "EMERGENCY", "_", "CALL", "_", "ENABLED", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Reg", "State", ".", "UNKNOWN", "_", "EM", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "RIL", "_", "REG", "_", "STATE", "_", "UNKNOWN", "_", "EMERGENCY", "_", "CALL", "_", "ENABLED", ";", "<|nl|>", "<|12-s|>", "default", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Service", "State", ".", "REGISTRATION", "_", "STATE", "_", "NOT", "_", "REGISTERED", "_", "AND", "_", "NOT", "_", "SEARCHING", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1665, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4695", "comment_id": "fac42878_d118508f", "class_list": ["ServiceStateTracker", "CellInfoResult", "SstSubscriptionsChangedListener"], "func_list": ["public void onSubscriptionsChanged()", "public void onChange(boolean selfChange)", "public void onReceive(Context context, Intent intent)", "public ServiceStateTracker(GsmCdmaPhone phone, CommandsInterface ci)", "public void updatePhoneType()", "public void requestShutdown()", "public void dispose()", "public boolean getDesiredPowerState()", "public boolean getPowerStateFromCarrier()  return !mRadioDisabledByCarrier; }", "protected boolean notifySignalStrength()", "protected void notifyDataRegStateRilRadioTechnologyChanged()", "protected void useDataRegStateForDataOnlyDevices()", "protected void updatePhoneObject()", "public void registerForVoiceRoamingOn(Handler h, int what, Object obj)", "public void unregisterForVoiceRoamingOn(Handler h)", "public void registerForVoiceRoamingOff(Handler h, int what, Object obj)", "public void unregisterForVoiceRoamingOff(Handler h)", "public void registerForDataRoamingOn(Handler h, int what, Object obj)", "public void unregisterForDataRoamingOn(Handler h)", "public void registerForDataRoamingOff(Handler h, int what, Object obj)", "public void unregisterForDataRoamingOff(Handler h)", "public void reRegisterNetwork(Message onComplete)", "public void setRadioPowerFromCarrier(boolean enable)", "public void enableSingleLocationUpdate()", "public void enableLocationUpdates()", "protected void disableSingleLocationUpdate()", "public void disableLocationUpdates()", "private void processCellLocationInfo(CellLocation cellLocation,", "public void handleMessage(Message msg)", "protected boolean isSidsAllZeros()", "private boolean isHomeSid(int sid)", "public String getMdnNumber()", "public String getCdmaMin()", "public String getPrlVersion()", "public String getImsi()", "public boolean isMinInfoReady()", "public int getOtasp()", "protected void parseSidNid (String sidStr, String nidStr)", "protected void updateOtaspState()", "protected Phone getPhone()", "protected void handlePollStateResult(int what, AsyncResult ar)", "private boolean isRoamingBetweenOperators(boolean cdmaRoaming, ServiceState s)", "private int convertHalRegStateToServiceState(int regState)", "void handlePollStateResultMessage(int what, AsyncResult ar)", "private boolean isRoamIndForHomeSystem(String roamInd)", "protected void updateRoamingState()", "private void setRoamingOn()", "private void setRoamingOff()", "protected void updateSpnDisplay()", "protected void setPowerStateToDesired()", "protected void onUpdateIccAvailability()", "private void logRoamingChange()", "private void logAttachChange()", "private void logPhoneTypeChange()", "private void logRatChange()", "private void logRoamingChange()", "protected void loge(String s)", "public int getCurrentDataConnectionState()", "public boolean isConcurrentVoiceAndDataAllowed()", "public void setImsRegistrationState(boolean registered)", "public void onImsCapabilityChanged()", "public boolean isRadioOn()", "public void pollState()", "private void modemTriggeredPollState()", "private void pollStateDone()", "private void updateOperatorNameFromEri()", "private boolean isInHomeSidNid(int sid, int nid)", "protected void setOperatorIdd(String operatorNumeric)", "protected boolean isInvalidOperatorNumeric(String operatorNumeric)", "protected String fixUnknownMcc(String operatorNumeric, int sid)", "protected void fixTimeZone(String isoCountryCode)", "private boolean isGprsConsistent(int dataRegState, int voiceRegState)", "private TimeZone getNitzTimeZone(int offset, boolean dst, long when)", "private TimeZone findTimeZone(int offset, boolean dst, long when)", "private int regCodeToServiceState(int code)", "private boolean regCodeIsRoaming (int code)", "private boolean isSameOperatorNameFromSimAndSS(ServiceState s)", "private boolean isSameNamedOperators(ServiceState s)", "private boolean currentMccEqualsSimMcc(ServiceState s)", "private boolean isOperatorConsideredNonRoaming(ServiceState s)", "private boolean isOperatorConsideredRoaming(ServiceState s)", "private void onRestrictedStateChanged(AsyncResult ar)", "public CellLocation getCellLocation(WorkSource workSource)", "private void setTimeFromNITZString (String nitz, long nitzReceiveTime)", "private boolean getAutoTime()", "private boolean getAutoTimeZone()", "private void saveNitzTimeZone(String zoneId)", "private void saveNitzTimeZone(String zoneId)", "private void setAndBroadcastNetworkSetTimeZone(String zoneId)", "private void setAndBroadcastNetworkSetTimeZone(String zoneId)", "private void revertToNitzTime()", "private void revertToNitzTimeZone()", "public void setNotification(int notifyType)", "private UiccCardApplication getUiccCardApplication()", "private void queueNextSignalStrengthPoll()", "private void notifyCdmaSubscriptionInfoReady()", "public void registerForDataConnectionAttached(Handler h, int what, Object obj)", "public void unregisterForDataConnectionAttached(Handler h)", "public void registerForDataConnectionDetached(Handler h, int what, Object obj)", "public void unregisterForDataConnectionDetached(Handler h)", "public void registerForDataRegStateOrRatChanged(Handler h, int what, Object obj)", "public void unregisterForDataRegStateOrRatChanged(Handler h)", "public void registerForNetworkAttached(Handler h, int what, Object obj)", "public void unregisterForNetworkAttached(Handler h)", "public void registerForPsRestrictedEnabled(Handler h, int what, Object obj)", "public void unregisterForPsRestrictedEnabled(Handler h)", "public void registerForPsRestrictedDisabled(Handler h, int what, Object obj)", "public void unregisterForPsRestrictedDisabled(Handler h)", "public void powerOffRadioSafely(DcTracker dcTracker)", "public boolean processPendingRadioPowerOffAfterDataOff()", "protected boolean onSignalStrengthResult(AsyncResult ar)", "protected void hangupAndPowerOff()", "protected void cancelPollState()", "protected boolean shouldFixTimeZoneNow(Phone phone, String operatorNumeric,", "public String getSystemProperty(String property, String defValue)", "public List<CellInfo> getAllCellInfo(WorkSource workSource)", "public SignalStrength getSignalStrength()", "public void registerForSubscriptionInfoReady(Handler h, int what, Object obj)", "public void unregisterForSubscriptionInfoReady(Handler h)", "private void saveCdmaSubscriptionSource(int source)", "private void getSubscriptionInfoAndStartPollingThreads()", "private void handleCdmaSubscriptionSource(int newSubscriptionSource)", "private void dumpCellInfoList(PrintWriter pw)", "private void dumpCellInfoList(PrintWriter pw)", "public boolean isImsRegistered()", "protected void checkCorrectThread()", "protected boolean isCallerOnDifferentThread()", "protected void updateCarrierMccMncConfiguration(String newOp, String oldOp, Context context)", "protected boolean inSameCountry(String operatorNumeric)", "protected void setRoamingType(ServiceState currentServiceState)", "private void setSignalStrengthDefaultValues()", "protected String getHomeOperatorNumeric()", "protected int getPhoneId()", "protected void resetServiceStateInIwlanMode()", "private boolean isInNetwork(BaseBundle b, String network, String key)", "public boolean isDeviceShuttingDown()", "protected int getCombinedRegState()", "public void onSubscriptionsChanged()"], "prime_var_dic": {"mOnSubscriptionsChangedListener": 1, "mRatRatcheter": 1, "mPreviousSubId": 1}}, {"idx": 78390, "status": "update", "global_index": 6869, "project_name": "android_", "written_on": "2015-07-30 21:37:16", "tufano_target": "private void METHOD_1 ( String [ ] VAR_1 ) { assertTrue ( VAR_1 . length >= INT_1 ) ; assertNotNull ( VAR_1 [ INT_2 ] ) ; METHOD_2 ( VAR_1 [ VAR_1 . length - INT_3 ] ) ; METHOD_2 ( VAR_1 [ VAR_1 . length - 1 ] ) ; }", "comment": "Add missing space please.", "tokenized_comment": ["Add", "<|s|>", "missing", "<|s|>", "space", "<|s|>", "please", "."], "tufano_code": "private void METHOD_1 ( String [ ] VAR_1 ) { assertTrue ( VAR_1 . length >= INT_1 ) ; for ( int i = INT_2 ; i < VAR_1 . length - INT_3 ; i ++ ) { assertNotNull ( VAR_1 [ i ] ) ; } METHOD_2 ( VAR_1 [ VAR_1 . length - INT_3 ] ) ; METHOD_2 ( VAR_1 [ VAR_1 . length - 1 ] ) ; }", "our_target": "        assertTrue(parts.length >= 7);\n\tassertNotNull(parts[4]); // Kernel wakelock\n", "our_code": "    private void checkKernelWakelock(String[] parts) {\n<|startfocus|>\n        assertTrue(parts.length >=7);\n\tfor (int i=4; i < parts.length-2; i++){\n\t    assertNotNull(parts[i]); // Kernel wakelock\n\t}\n<|endfocus|>\n\tassertInteger(parts[parts.length-2]); // totalTime\n        assertInteger(parts[parts.length-1]); // count\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "check", "Kernel", "Wakelock", "(", "String", "[", "]", "<|s|>", "parts", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "assert", "True", "(", "parts", ".", "length", "<|s|>", ">=", "7", ");", "<|nl|>", "<|t|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "=", "4", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "parts", ".", "length", "-", "2", ";", "<|s|>", "i", "++", ")", "{", "<|nl|>", "<|t|>", "<|4-s|>", "assert", "Not", "Null", "(", "parts", "[", "i", "]", ");", "<|s|>", "//", "<|s|>", "Kernel", "<|s|>", "wakelock", "<|nl|>", "<|t|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|t|>", "assert", "Integer", "(", "parts", "[", "parts", ".", "length", "-", "2", "]", ");", "<|s|>", "//", "<|s|>", "total", "Time", "<|nl|>", "<|8-s|>", "assert", "Integer", "(", "parts", "[", "parts", ".", "length", "-", "1", "]", ");", "<|s|>", "//", "<|s|>", "count", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 589, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2116", "comment_id": "4a6260ef_cf947152", "class_list": ["DumpsysHostTest"], "func_list": ["private void checkPeriod(String[] parts)", "private void checkPkgProc(String[] parts, int version)", "private void checkTag(String tag, boolean hasProcess)", "private void checkPkgPss(String[] parts, int version)", "private void checkPkgSvc(String[] parts, int version)", "private void checkPkgKills(String[] parts, int version)", "private void checkProc(String[] parts)", "private void checkPss(String[] parts)", "private void checkKills(String[] parts)", "private void checkTotal(String[] parts)", "private void checkVersion(String[] parts)", "private void checkUid(String[] parts)", "private void checkApk(String[] parts)", "private void checkProcess(String[] parts)", "private void checkSensor(String[] parts)", "private void checkVibrator(String[] parts)", "private void checkForeground(String[] parts)", "private void checkStateTime(String[] parts)", "private void checkWakelock(String[] parts)", "private void checkSync(String[] parts)", "private void checkJob(String[] parts)", "private void checkKernelWakelock(String[] parts)", "private void checkWakeupReason(String[] parts)", "private void checkNetwork(String[] parts)", "private void checkUserActivity(String[] parts)", "private void checkBattery(String[] parts)", "private void checkBatteryDischarge(String[] parts)", "private void checkBatteryLevel(String[] parts)", "private void checkWifi(String[] parts)", "private void checkMisc(String[] parts)", "private void checkGlobalNetwork(String[] parts)", "private void checkScreenBrightness(String[] parts)", "private void checkSignalStrength(String[] parts)", "private void checkSignalScanningTime(String[] parts)", "private void checkDataConnection(String[] parts)", "private void checkWifiState(String[] parts)", "private void checkWifiSupplState(String[] parts)", "private void checkWifiSignalStrength(String[] parts)", "private void checkBluetoothState(String[] parts)", "private void checkPowerUseSummary(String[] parts)", "private void checkPowerUseItem(String[] parts)", "private void checkChargeDischargeStep(String[] parts)", "private void checkDischargeTimeRemain(String[] parts)", "private void checkChargeTimeRemain(String[] parts)", "private static void assertInteger(String input)", "private static void assertDouble(String input)", "private static void assertSeenTag(Set<String> seenTags, String tag)"], "prime_var_dic": {"String": 1, "few": 2}}, {"idx": 56945, "status": "update", "global_index": 14451, "project_name": "android_", "written_on": "2014-03-20 15:26:01", "tufano_target": "public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_2 VAR_6 ) { TYPE_1 < TYPE_2 > VAR_3 = TYPE_5 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_6 VAR_4 = TYPE_7 . METHOD_3 ( VAR_2 ) ; for ( TYPE_2 VAR_5 : METHOD_4 ( VAR_1 ) ) { if ( METHOD_5 ( VAR_5 , VAR_4 ) || METHOD_6 ( VAR_5 , VAR_4 ) ) { VAR_3 . add ( VAR_5 ) ; } } } if ( VAR_3 . isEmpty ( ) ) { VAR_3 . add ( VAR_1 . METHOD_7 ( ) ) ; } return VAR_3 ; }", "comment": "@NotNull on return value and facet parameter", "tokenized_comment": ["@", "Not", "Null", "<|s|>", "on", "<|s|>", "return", "<|s|>", "value", "<|s|>", "and", "<|s|>", "facet", "<|s|>", "parameter"], "tufano_code": "public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { TYPE_1 < TYPE_2 > VAR_3 = TYPE_5 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_6 VAR_4 = TYPE_7 . METHOD_3 ( VAR_2 ) ; for ( TYPE_2 VAR_5 : METHOD_4 ( VAR_1 ) ) { if ( METHOD_5 ( VAR_5 , VAR_4 ) || METHOD_6 ( VAR_5 , VAR_4 ) ) { VAR_3 . add ( VAR_5 ) ; } } } if ( VAR_3 . isEmpty ( ) ) { VAR_3 . add ( VAR_1 . METHOD_7 ( ) ) ; } return VAR_3 ; }", "our_target": "  @NotNull\n  public static List<SourceProvider> getSourceProvidersForFile(@NotNull AndroidFacet facet, @Nullable VirtualFile targetFolder,\n                                                               @Nullable SourceProvider defaultSourceProvider) {\n", "our_code": "<|startfocus|>\n  public static List<SourceProvider> getSourceProvidersForFile(AndroidFacet facet, @Nullable VirtualFile targetFolder) {\n<|endfocus|>\n    List<SourceProvider> sourceProviderList = Lists.newArrayList();\n\n\n    if (targetFolder != null) {\n      File targetIoFolder = VfsUtilCore.virtualToIoFile(targetFolder);\n      // Add source providers that contain the file (if any) and any that have files under the given folder\n      for (SourceProvider provider : getAllSourceProviders(facet)) {\n        if (containsFile(provider, targetIoFolder) || isContainedBy(provider, targetIoFolder)) {\n          sourceProviderList.add(provider);\n        }\n      }\n    }\n\n    if (sourceProviderList.isEmpty()) {\n      sourceProviderList.add(facet.getMainSourceSet());\n    }\n    return sourceProviderList;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "List", "<", "Source", "Provider", ">", "<|s|>", "get", "Source", "Providers", "For", "File", "(", "Android", "Facet", "<|s|>", "facet", ",", "<|s|>", "@", "Nullable", "<|s|>", "Virtual", "File", "<|s|>", "target", "Folder", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "List", "<", "Source", "Provider", ">", "<|s|>", "source", "Provider", "List", "<|s|>", "=", "<|s|>", "Lists", ".", "new", "Array", "List", "(", ");", "<|nl|>", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "target", "Folder", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "File", "<|s|>", "target", "Io", "Folder", "<|s|>", "=", "<|s|>", "Vfs", "Util", "Core", ".", "virtual", "To", "Io", "File", "(", "target", "Folder", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Add", "<|s|>", "source", "<|s|>", "providers", "<|s|>", "that", "<|s|>", "contain", "<|s|>", "the", "<|s|>", "file", "<|s|>", "(", "if", "<|s|>", "any", ")", "<|s|>", "and", "<|s|>", "any", "<|s|>", "that", "<|s|>", "have", "<|s|>", "files", "<|s|>", "under", "<|s|>", "the", "<|s|>", "given", "<|s|>", "folder", "<|nl|>", "<|4-s|>", "<|2-s|>", "for", "<|s|>", "(", "Source", "Provider", "<|s|>", "provider", "<|s|>", ":", "<|s|>", "get", "All", "Source", "Providers", "(", "facet", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "contains", "File", "(", "provider", ",", "<|s|>", "target", "Io", "Folder", ")", "<|s|>", "||", "<|s|>", "is", "Contained", "By", "(", "provider", ",", "<|s|>", "target", "Io", "Folder", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "source", "Provider", "List", ".", "add", "(", "provider", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "source", "Provider", "List", ".", "is", "Empty", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "source", "Provider", "List", ".", "add", "(", "facet", ".", "get", "Main", "Source", "Set", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "source", "Provider", "List", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 485, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_735", "comment_id": "dc4d1911_caddfb54", "class_list": ["IdeaSourceProvider", "Gradle", "Legacy"], "func_list": ["private IdeaSourceProvider()", "public static IdeaSourceProvider create(@NotNull SourceProvider provider)", "private Gradle(@NotNull SourceProvider provider)", "public abstract VirtualFile getManifestFile();", "private static Set<VirtualFile> convertFileSet(@NotNull Collection<File> fileSet)", "public abstract Set<VirtualFile> getJavaDirectories();", "public abstract Set<VirtualFile> getResourcesDirectories();", "public abstract Set<VirtualFile> getAidlDirectories();", "public abstract Set<VirtualFile> getRenderscriptDirectories();", "public abstract Set<VirtualFile> getJniDirectories();", "public abstract Set<VirtualFile> getResDirectories();", "public abstract Set<VirtualFile> getAssetsDirectories();", "private Legacy(@NotNull AndroidFacet facet)", "public static Iterable<IdeaSourceProvider> getCurrentSourceProviders(@NotNull AndroidFacet facet)", "private Collection<VirtualFile> getAllSourceFolders()", "private static Collection<File> getAllSourceFolders(SourceProvider provider)", "public boolean containsFile(@NotNull VirtualFile file)", "public static boolean isContainedBy(@NotNull SourceProvider provider, File targetFolder)", "public static List<SourceProvider> getAllSourceProviders(@NotNull AndroidFacet facet)", "public static List<IdeaSourceProvider> getAllIdeaSourceProviders(@NotNull AndroidFacet facet)", "public static List<IdeaSourceProvider> getIdeaSourceProvidersForFile(@NotNull AndroidFacet facet,", "public static List<SourceProvider> getSourceProvidersForFile(AndroidFacet facet, @Nullable VirtualFile targetFolder)", "public static boolean isManifestFile(@NotNull AndroidFacet facet, @Nullable VirtualFile candidate)", "public static List<VirtualFile> getManifestFiles(@NotNull AndroidFacet facet)", "public static IdeaSourceProvider create(@NotNull final AndroidFacet facet)"], "prime_var_dic": {}}, {"idx": 1370, "status": "update", "global_index": 17012, "project_name": "android_", "written_on": "2015-07-20 23:46:05", "tufano_target": "public TYPE_1 METHOD_1 ( ) { if ( VAR_1 == null ) { return null ; } for ( int index = 0 ; index < VAR_1 . METHOD_2 ( ) ; index ++ ) { if ( VAR_1 . METHOD_3 ( index ) == this ) { return VAR_1 . METHOD_3 ( index + 1 ) ; } } return null ; }", "comment": "nit - spaces around =", "tokenized_comment": ["nit", "<|s|>", "-", "<|s|>", "spaces", "<|s|>", "around", "<|s|>", "="], "tufano_code": "public TYPE_1 METHOD_1 ( ) { if ( VAR_1 == null ) { return null ; } for ( int index = 0 ; index < VAR_1 . METHOD_2 ( ) ; index ++ ) { if ( VAR_1 . METHOD_3 ( index ) == this ) { return VAR_1 . METHOD_3 ( index + 1 ) ; } } return null ; }", "our_target": "    for (int index = 0; index < myParent.getChildCount(); index++) {\n", "our_code": "  public NlComponent getNextSibling() {\n    if (myParent == null) {\n      return null;\n    }\n<|startfocus|>\n    for (int index=0; index < myParent.getChildCount(); index++) {\n<|endfocus|>\n      if (myParent.getChild(index) == this) {\n        return myParent.getChild(index + 1);\n      }\n    }\n    return null;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Nl", "Component", "<|s|>", "get", "Next", "Sibling", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "my", "Parent", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "index", "=", "0", ";", "<|s|>", "index", "<|s|>", "<", "<|s|>", "my", "Parent", ".", "get", "Child", "Count", "(", ");", "<|s|>", "index", "++", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "my", "Parent", ".", "get", "Child", "(", "index", ")", "<|s|>", "==", "<|s|>", "this", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "my", "Parent", ".", "get", "Child", "(", "index", "<|s|>", "+", "<|s|>", "1", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 152, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_1664", "comment_id": "0d0ec228_f761607a", "class_list": ["NlComponent", "", "name", "name", "name,", "to", "name"], "func_list": ["public NlComponent(@NonNull NlModel model, @NonNull XmlTag tag)", "public XmlTag getTag()", "public NlModel getModel()", "public void setTag(@NonNull XmlTag tag)", "public void setSnapshot(@Nullable TagSnapshot snapshot)", "public void setBounds(@AndroidCoordinate int x, @AndroidCoordinate int y, @AndroidCoordinate int w, @AndroidCoordinate int h)", "public void addChild(@NonNull NlComponent component)", "public void delete()", "public void removeChild(@NonNull NlComponent component)", "public Iterable<NlComponent> getChildren()", "public int getChildCount()", "public NlComponent getChild(int index)", "public NlComponent getNextSibling()", "public NlComponent findViewByTag(@NonNull XmlTag tag)", "public List<NlComponent> findViewsByTag(@NonNull XmlTag tag)", "public NlComponent findLeafAt(@AndroidCoordinate int px, @AndroidCoordinate int py)", "public boolean isRoot()", "public NlComponent getRoot()", "public static String toTree(@NonNull List<NlComponent> roots)", "private static void describe(@NonNull StringBuilder sb, @NonNull NlComponent component, int depth)", "private static String describe(@NonNull NlComponent root)", "public String getId()", "public boolean needsDefaultId()", "public String ensureId()", "public String assignId()", "private static Collection<String> getIds(@NonNull AndroidFacet facet)", "public int getBaseline()", "private static int fixDefault(int value)", "public Insets getMargins()", "public Insets getPadding()", "public NlComponent getParent()", "public void setParent(@Nullable NlComponent parent)", "public String getTagName()", "public String toString()", "public void setAttribute(@Nullable String namespace, @NonNull String attribute, @Nullable String value)", "public String getAttribute(@Nullable String namespace, @NonNull String attribute)", "public List<AttributeSnapshot> getAttributes()", "public List<AttributeSnapshot> compute()", "public String ensureNamespace(@NonNull String prefix, @NonNull String namespace)", "public boolean isShowing()", "public ViewHandler getViewHandler()", "public NlComponent createChild(@NonNull ViewEditor editor,", "private static boolean viewNeedsPackage(String fqcn)", "public static String viewClassToTag(@NonNull String fqcn)", "public NlComponent(@NonNull NlModel model, @NonNull XmlTag tag)", "public XmlTag getTag()", "public NlModel getModel()", "public void setTag(@NonNull XmlTag tag)", "public void setSnapshot(@Nullable TagSnapshot snapshot)", "public void setBounds(@AndroidCoordinate int x, @AndroidCoordinate int y, @AndroidCoordinate int w, @AndroidCoordinate int h)", "public void addChild(@NonNull NlComponent component)", "public void delete()", "public void removeChild(@NonNull NlComponent component)", "public Iterable<NlComponent> getChildren()", "public int getChildCount()", "public NlComponent getChild(int index)", "public NlComponent getNextSibling()", "public NlComponent findViewByTag(@NonNull XmlTag tag)", "public List<NlComponent> findViewsByTag(@NonNull XmlTag tag)", "public NlComponent findLeafAt(@AndroidCoordinate int px, @AndroidCoordinate int py)", "public boolean isRoot()", "public NlComponent getRoot()", "public static String toTree(@NonNull List<NlComponent> roots)", "private static void describe(@NonNull StringBuilder sb, @NonNull NlComponent component, int depth)", "private static String describe(@NonNull NlComponent root)", "public String getId()", "public boolean needsDefaultId()", "public String ensureId()", "public String assignId()", "private static Collection<String> getIds(@NonNull AndroidFacet facet)", "public int getBaseline()", "private static int fixDefault(int value)", "public Insets getMargins()", "public Insets getPadding()", "public NlComponent getParent()", "public void setParent(@Nullable NlComponent parent)", "public String getTagName()", "public String toString()", "public void setAttribute(@Nullable String namespace, @NonNull String attribute, @Nullable String value)", "public String getAttribute(@Nullable String namespace, @NonNull String attribute)", "public List<AttributeSnapshot> getAttributes()", "public List<AttributeSnapshot> compute()", "public String ensureNamespace(@NonNull String prefix, @NonNull String namespace)", "public boolean isShowing()", "public ViewHandler getViewHandler()", "public NlComponent createChild(@NonNull ViewEditor editor,", "private static boolean viewNeedsPackage(String fqcn)", "public static String viewClassToTag(@NonNull String fqcn)", "public void setAttribute(@Nullable String namespace, @NonNull String attribute, @Nullable String value)", "public void setAttribute(@Nullable String namespace, @NonNull String attribute, @Nullable String value)", "private static boolean viewNeedsPackage(String fqcn)", "public NlComponent(@NonNull NlModel model, @NonNull XmlTag tag)", "public XmlTag getTag()", "public NlModel getModel()", "public void setTag(@NonNull XmlTag tag)", "public void setSnapshot(@Nullable TagSnapshot snapshot)", "public void setBounds(@AndroidCoordinate int x, @AndroidCoordinate int y, @AndroidCoordinate int w, @AndroidCoordinate int h)", "public void addChild(@NonNull NlComponent component)", "public void delete()", "public void removeChild(@NonNull NlComponent component)", "public Iterable<NlComponent> getChildren()", "public int getChildCount()", "public NlComponent getChild(int index)", "public NlComponent getNextSibling()", "public NlComponent findViewByTag(@NonNull XmlTag tag)", "public List<NlComponent> findViewsByTag(@NonNull XmlTag tag)", "public NlComponent findLeafAt(@AndroidCoordinate int px, @AndroidCoordinate int py)", "public boolean isRoot()", "public NlComponent getRoot()", "public static String toTree(@NonNull List<NlComponent> roots)", "private static void describe(@NonNull StringBuilder sb, @NonNull NlComponent component, int depth)", "private static String describe(@NonNull NlComponent root)", "public String getId()", "public boolean needsDefaultId()", "public String ensureId()", "public String assignId()", "private static Collection<String> getIds(@NonNull AndroidFacet facet)", "public int getBaseline()", "private static int fixDefault(int value)", "public Insets getMargins()", "public Insets getPadding()", "public NlComponent getParent()", "public void setParent(@Nullable NlComponent parent)", "public String getTagName()", "public String toString()", "public void setAttribute(@Nullable String namespace, @NonNull String attribute, @Nullable String value)", "public String getAttribute(@Nullable String namespace, @NonNull String attribute)", "public List<AttributeSnapshot> getAttributes()", "public List<AttributeSnapshot> compute()", "public String ensureNamespace(@NonNull String prefix, @NonNull String namespace)", "public boolean isShowing()", "public ViewHandler getViewHandler()", "public NlComponent createChild(@NonNull ViewEditor editor,", "private static boolean viewNeedsPackage(String fqcn)", "public static String viewClassToTag(@NonNull String fqcn)", "public void setAttribute(@Nullable String namespace, @NonNull String attribute, @Nullable String value)"], "prime_var_dic": {}}, {"idx": 53609, "status": "update", "global_index": 18331, "project_name": "android_", "written_on": "2010-04-13 19:06:07", "tufano_target": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( this , VAR_3 ) ; if ( VAR_2 == null ) { return ; } VAR_4 . METHOD_3 ( ) ; VAR_4 = VAR_2 ; VAR_4 . METHOD_4 ( VAR_5 ) ; METHOD_5 ( ) ; VAR_7 . update ( VAR_4 ) ; METHOD_6 ( ) ; }", "comment": "This change is already in the froyo code base and I've made the equivalent change for mMsgListMenuCreateListener as well. If this change is getting merged into the master branch, it'd probably be better not to include this file because it will cause unnecessary conflicts.", "tokenized_comment": ["This", "<|s|>", "change", "<|s|>", "is", "<|s|>", "already", "<|s|>", "in", "<|s|>", "the", "<|s|>", "froyo", "<|s|>", "code", "<|s|>", "base", "<|s|>", "and", "<|s|>", "I", "'", "ve", "<|s|>", "made", "<|s|>", "the", "<|s|>", "equivalent", "<|s|>", "change", "<|s|>", "for", "<|s|>", "m", "Msg", "List", "Menu", "Create", "Listener", "<|s|>", "as", "<|s|>", "well", ".", "<|s|>", "If", "<|s|>", "this", "<|s|>", "change", "<|s|>", "is", "<|s|>", "getting", "<|s|>", "merged", "<|s|>", "into", "<|s|>", "the", "<|s|>", "master", "<|s|>", "branch", ",", "<|s|>", "it", "'", "d", "<|s|>", "probably", "<|s|>", "be", "<|s|>", "better", "<|s|>", "not", "<|s|>", "to", "<|s|>", "include", "<|s|>", "this", "<|s|>", "file", "<|s|>", "because", "<|s|>", "it", "<|s|>", "will", "<|s|>", "cause", "<|s|>", "unnecessary", "<|s|>", "conflicts", "."], "tufano_code": "private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( this , VAR_3 ) ; if ( VAR_2 == null ) { return ; } VAR_4 . METHOD_3 ( ) ; VAR_4 = VAR_2 ; VAR_4 . METHOD_4 ( VAR_5 ) ; METHOD_5 ( ) ; METHOD_6 ( false ) ; VAR_4 . METHOD_7 ( VAR_6 , false ) ; if ( VAR_4 . METHOD_8 ( ) ) { METHOD_9 ( true ) ; } }", "our_target": "        mAttachmentEditor.update(mWorkingMessage);\n        drawTopPanel();\n", "our_code": "    private void editMmsMessageItem(MessageItem msgItem) {\n        // Load the selected message in as the working message.\n        WorkingMessage newWorkingMessage = WorkingMessage.load(this, msgItem.mMessageUri);\n        if (newWorkingMessage == null) {\n            return;\n        }\n\n        // Discard the current message in progress.\n        mWorkingMessage.discard();\n\n        mWorkingMessage = newWorkingMessage;\n        mWorkingMessage.setConversation(mConversation);\n        invalidateOptionsMenu();\n\n<|startfocus|>\n        drawTopPanel(false);\n\n        // WorkingMessage.load() above only loads the slideshow. Set the\n        // subject here because we already know what it is and avoid doing\n        // another DB lookup in load() just to get it.\n        mWorkingMessage.setSubject(msgItem.mSubject, false);\n\n        if (mWorkingMessage.hasSubject()) {\n            showSubjectEditor(true);\n        }\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "edit", "Mms", "Message", "Item", "(", "Message", "Item", "<|s|>", "msg", "Item", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Load", "<|s|>", "the", "<|s|>", "selected", "<|s|>", "message", "<|s|>", "in", "<|s|>", "as", "<|s|>", "the", "<|s|>", "working", "<|s|>", "message", ".", "<|nl|>", "<|8-s|>", "Working", "Message", "<|s|>", "new", "Working", "Message", "<|s|>", "=", "<|s|>", "Working", "Message", ".", "load", "(", "this", ",", "<|s|>", "msg", "Item", ".", "m", "Message", "Uri", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "new", "Working", "Message", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Discard", "<|s|>", "the", "<|s|>", "current", "<|s|>", "message", "<|s|>", "in", "<|s|>", "progress", ".", "<|nl|>", "<|8-s|>", "m", "Working", "Message", ".", "discard", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "m", "Working", "Message", "<|s|>", "=", "<|s|>", "new", "Working", "Message", ";", "<|nl|>", "<|8-s|>", "m", "Working", "Message", ".", "set", "Conversation", "(", "m", "Conversation", ");", "<|nl|>", "<|8-s|>", "invalidate", "Options", "Menu", "(", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "draw", "Top", "Panel", "(", "false", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Working", "Message", ".", "load", "(", ")", "<|s|>", "above", "<|s|>", "only", "<|s|>", "loads", "<|s|>", "the", "<|s|>", "slideshow", ".", "<|s|>", "Set", "<|s|>", "the", "<|nl|>", "<|8-s|>", "//", "<|s|>", "subject", "<|s|>", "here", "<|s|>", "because", "<|s|>", "we", "<|s|>", "already", "<|s|>", "know", "<|s|>", "what", "<|s|>", "it", "<|s|>", "is", "<|s|>", "and", "<|s|>", "avoid", "<|s|>", "doing", "<|nl|>", "<|8-s|>", "//", "<|s|>", "another", "<|s|>", "DB", "<|s|>", "lookup", "<|s|>", "in", "<|s|>", "load", "(", ")", "<|s|>", "just", "<|s|>", "to", "<|s|>", "get", "<|s|>", "it", ".", "<|nl|>", "<|8-s|>", "m", "Working", "Message", ".", "set", "Subject", "(", "msg", "Item", ".", "m", "Subject", ",", "<|s|>", "false", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Working", "Message", ".", "has", "Subject", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "show", "Subject", "Editor", "(", "true", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 1029, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_4337", "comment_id": "AAAAwn%2F%2F%2F90%3D", "class_list": ["ComposeMessageActivity", "DeleteMessageListener", "DiscardDraftListener", "SendIgnoreInvalidRecipientListener", "CancelSendingListener", "RecipientsMenuClickListener", "MsgListMenuClickListener", "SystemProperties", "to", "ModalDialogAsyncTask", "BackgroundQueryHandler"], "func_list": ["public static void log(String logMsg)", "private void editSlideshow()", "public void handleMessage(Message msg)", "public boolean onKey(View v, int keyCode, KeyEvent event)", "public void run()", "private MessageItem getMessageItem(String type, long msgId,", "private boolean isCursorValid()", "private void resetCounter()", "private void updateCounter(CharSequence text, int start, int before, int count)", "private void toastConvertInfo(boolean toMms)", "public DeleteMessageListener(Uri uri, boolean deleteLocked)", "public void onClick(DialogInterface dialog, int whichButton)", "private void confirmSendMessageIfNeeded()", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "private void checkForTooManyRecipients()", "new OnCreateContextMenuListener()", "public void onCreateContextMenu(ContextMenu menu, View v,", "public boolean onMenuItemClick(MenuItem item)", "private boolean canAddToContacts(Contact contact)", "private boolean isSpecialChar(char c)", "private void addPositionBasedMenuItems(ContextMenu menu, View v, ContextMenuInfo menuInfo)", "private Uri getSelectedUriFromMessageList(ListView listView, int position)", "private void addUriSpecificMenuItems(ContextMenu menu, View v, int position)", "private Uri getContactUriForEmail(String emailAddress)", "private Uri getContactUriForPhoneNumber(String phoneNumber)", "private void editMessageItem(MessageItem msgItem)", "private void editSmsMessageItem(MessageItem msgItem)", "private void editMmsMessageItem(MessageItem msgItem)", "private void copyToClipboard(String str)", "private void forwardMessage(MessageItem msgItem)", "private void lockMessage(MessageItem msgItem, boolean locked)", "new Thread(new Runnable()", "private boolean haveSomethingToCopyToSDCard(long msgId)", "private boolean haveSomethingToCopyToDrmProvider(long msgId)", "private boolean copyToDrmProvider(long msgId)", "private String mimeTypeOfDrmPart(PduPart part)", "private String getDrmMimeType(long msgId)", "private int getDrmMimeMenuStringRsrc(long msgId)", "private int getDrmMimeSavedStringRsrc(long msgId, boolean success)", "private boolean isAudioMimeType(String mimeType)", "private boolean isImageMimeType(String mimeType)", "private boolean copyPartToDrmProvider(PduPart part)", "private boolean copyMedia(long msgId)", "private boolean copyPartToDrmProvider(PduPart part)", "private File getUniqueDestination(String base, String extension)", "private void showDeliveryReport(long messageId, String type)", "public void onReceive(Context context, Intent intent)", "private ContactList getRecipients()", "private void updateTitle(ContactList list)", "private void initRecipientsEditor()", "public void onItemClick(AdapterView<?> parent, View view, int position, long id)", "public void onFocusChange(View v, boolean hasFocus)", "public static boolean cancelFailedToDeliverNotification(Intent intent, Context context)", "public static boolean cancelFailedDownloadNotification(Intent intent, Context context)", "public void onCreateContextMenu(ContextMenu menu, View v,", "private void showSubjectEditor(boolean show)", "private void hideOrShowTopPanel()", "public void initialize(Bundle savedInstanceState, long originalThreadId)", "protected void onNewIntent(Intent intent)", "private void sanityCheckConversation()", "protected void onRestart()", "protected void onStart()", "public void loadMessageContent()", "private void updateSendFailedNotification()", "public void onSaveInstanceState(Bundle outState)", "protected void onResume()", "protected void onPause()", "protected void onStop()", "protected void onDestroy()", "public void onConfigurationChanged(Configuration newConfig)", "private boolean resetConfiguration(Configuration config)", "private void onKeyboardStateChanged(boolean isKeyboardOpen)", "public void onUserInteraction()", "public void onWindowFocusChanged(boolean hasFocus)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "private void exitComposeMessageActivity(final Runnable exit)", "private void goToConversationList()", "private void hideRecipientEditor()", "private boolean isRecipientsEditorVisible()", "private boolean isSubjectEditorVisible()", "public void onAttachmentChanged()", "public void onProtocolChanged(final boolean mms)", "private View showSmsOrMmsSendButton(boolean isMms)", "public void onPreMessageSent()", "public void onMessageSent()", "public void onMaxPendingMessagesReached()", "public void onAttachmentError(final int error)", "private boolean isRecipientCallable()", "private void dialRecipient()", "public boolean onPrepareOptionsMenu(Menu menu)", "private void buildAddAddressToContactMenuItem(Menu menu)", "public boolean onOptionsItemSelected(MenuItem item)", "private void confirmDeleteThread(long threadId)", "//        static int getInt(String s, int value)", "private void addAttachment(int type, boolean replace)", "public static long computeAttachmentSizeLimit(SlideshowModel slideShow, int currentSlideSize)", "private void showAddAttachmentDialog(final boolean replace)", "protected void onActivityResult(int requestCode, int resultCode, Intent data)", "private void processPickResult(final Intent data)", "public void onResizeResult(PduPart part, boolean append)", "private void handleAddAttachmentError(final int error, final int mediaTypeStringId)", "private void addImageAsync(final Uri uri, final boolean append)", "private void addImageAsync(final Uri uri, final boolean append)", "private void addVideoAsync(final Uri uri, final boolean append)", "private void addVideoAsync(final Uri uri, final boolean append)", "private void addAudio(Uri uri)", "private void runAsyncWithDialog(final Runnable task, final int dialogStringId)", "public ModalDialogAsyncTask(int dialogStringId)", "private ProgressDialog createProgressDialog()", "protected void onPreExecute()", "protected Void doInBackground(Runnable... params)", "protected void onPostExecute(Void result)", "private boolean handleForwardedMessage()", "private boolean handleSendIntent()", "private String getResourcesString(int id, String mediaName)", "private void drawBottomPanel()", "private void drawTopPanel(boolean showSubjectEditor)", "private void launchMultiplePhonePicker()", "public boolean onEditorAction(TextView v, int actionId, KeyEvent event)", "private void ensureCorrectButtonHeight()", "private void initResourceRefs()", "private void confirmDeleteDialog(OnClickListener listener, boolean locked)", "void undeliveredMessageDialog(long date)", "private void startMsgListQuery()", "private void initMessageList()", "private void loadDraft()", "private void saveDraft(boolean isStopping)", "private boolean isPreparedForSending()", "final int recipientCount = recipientCount();", "private void sendMessage(boolean bCheckEcmMode)", "private void resetMessage()", "private void updateSendButtonState()", "private long getMessageDate(Uri uri)", "private void initActivityState(Bundle bundle)", "private void initFocus()", "public void onDataSetChanged(MessageListAdapter adapter)", "public void onContentChanged(MessageListAdapter adapter)", "private void checkPendingNotification()", "public BackgroundQueryHandler(ContentResolver contentResolver)", "protected void onQueryComplete(int token, Object cookie, Cursor cursor)", "protected void onDeleteComplete(int token, Object cookie, int result)", "private void showSmileyDialog()", "public boolean setViewValue(View view, Object data, String textRepresentation)", "public void onUpdate(final Contact updated)", "private void addRecipientsListeners()", "private void removeRecipientsListeners()", "private void clearPendingProgressDialog()", "public static Intent createIntent(Context context, long threadId)", "private String getBody(Uri uri)", "public DeleteMessageListener(Uri uri, boolean deleteLocked)", "public void onClick(DialogInterface dialog, int whichButton)", "public void onClick(DialogInterface dialog, int whichButton)", "public void onClick(DialogInterface dialog, int whichButton)", "public void onClick(DialogInterface dialog, int whichButton)", "public static void log(String logMsg)", "private void editSlideshow()", "public void handleMessage(Message msg)", "public boolean onKey(View v, int keyCode, KeyEvent event)", "public void run()", "private MessageItem getMessageItem(String type, long msgId,", "private boolean isCursorValid()", "private void resetCounter()", "private void updateCounter(CharSequence text, int start, int before, int count)", "private void toastConvertInfo(boolean toMms)", "public DeleteMessageListener(Uri uri, boolean deleteLocked)", "public void onClick(DialogInterface dialog, int whichButton)", "private void confirmSendMessageIfNeeded()", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "private void checkForTooManyRecipients()", "new OnCreateContextMenuListener()", "public void onCreateContextMenu(ContextMenu menu, View v,", "public boolean onMenuItemClick(MenuItem item)", "private boolean canAddToContacts(Contact contact)", "private boolean isSpecialChar(char c)", "private void addPositionBasedMenuItems(ContextMenu menu, View v, ContextMenuInfo menuInfo)", "private Uri getSelectedUriFromMessageList(ListView listView, int position)", "private void addUriSpecificMenuItems(ContextMenu menu, View v, int position)", "private Uri getContactUriForEmail(String emailAddress)", "private Uri getContactUriForPhoneNumber(String phoneNumber)", "private void editMessageItem(MessageItem msgItem)", "private void editSmsMessageItem(MessageItem msgItem)", "private void editMmsMessageItem(MessageItem msgItem)", "private void copyToClipboard(String str)", "private void forwardMessage(MessageItem msgItem)", "private void lockMessage(MessageItem msgItem, boolean locked)", "new Thread(new Runnable()", "private boolean haveSomethingToCopyToSDCard(long msgId)", "private boolean haveSomethingToCopyToDrmProvider(long msgId)", "private boolean copyToDrmProvider(long msgId)", "private String mimeTypeOfDrmPart(PduPart part)", "private String getDrmMimeType(long msgId)", "private int getDrmMimeMenuStringRsrc(long msgId)", "private int getDrmMimeSavedStringRsrc(long msgId, boolean success)", "private boolean isAudioMimeType(String mimeType)", "private boolean isImageMimeType(String mimeType)", "private boolean copyPartToDrmProvider(PduPart part)", "private boolean copyMedia(long msgId)", "private boolean copyPartToDrmProvider(PduPart part)", "private File getUniqueDestination(String base, String extension)", "private void showDeliveryReport(long messageId, String type)", "public void onReceive(Context context, Intent intent)", "private ContactList getRecipients()", "private void updateTitle(ContactList list)", "private void initRecipientsEditor()", "public void onItemClick(AdapterView<?> parent, View view, int position, long id)", "public void onFocusChange(View v, boolean hasFocus)", "public static boolean cancelFailedToDeliverNotification(Intent intent, Context context)", "public static boolean cancelFailedDownloadNotification(Intent intent, Context context)", "public void onCreateContextMenu(ContextMenu menu, View v,", "private void showSubjectEditor(boolean show)", "private void hideOrShowTopPanel()", "public void initialize(Bundle savedInstanceState, long originalThreadId)", "protected void onNewIntent(Intent intent)", "private void sanityCheckConversation()", "protected void onRestart()", "protected void onStart()", "public void loadMessageContent()", "private void updateSendFailedNotification()", "public void onSaveInstanceState(Bundle outState)", "protected void onResume()", "protected void onPause()", "protected void onStop()", "protected void onDestroy()", "public void onConfigurationChanged(Configuration newConfig)", "private boolean resetConfiguration(Configuration config)", "private void onKeyboardStateChanged(boolean isKeyboardOpen)", "public void onUserInteraction()", "public void onWindowFocusChanged(boolean hasFocus)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "private void exitComposeMessageActivity(final Runnable exit)", "private void goToConversationList()", "private void hideRecipientEditor()", "private boolean isRecipientsEditorVisible()", "private boolean isSubjectEditorVisible()", "public void onAttachmentChanged()", "public void onProtocolChanged(final boolean mms)", "private View showSmsOrMmsSendButton(boolean isMms)", "public void onPreMessageSent()", "public void onMessageSent()", "public void onMaxPendingMessagesReached()", "public void onAttachmentError(final int error)", "private boolean isRecipientCallable()", "private void dialRecipient()", "public boolean onPrepareOptionsMenu(Menu menu)", "private void buildAddAddressToContactMenuItem(Menu menu)", "public boolean onOptionsItemSelected(MenuItem item)", "private void confirmDeleteThread(long threadId)", "//        static int getInt(String s, int value)", "private void addAttachment(int type, boolean replace)", "public static long computeAttachmentSizeLimit(SlideshowModel slideShow, int currentSlideSize)", "private void showAddAttachmentDialog(final boolean replace)", "protected void onActivityResult(int requestCode, int resultCode, Intent data)", "private void processPickResult(final Intent data)", "public void onResizeResult(PduPart part, boolean append)", "private void handleAddAttachmentError(final int error, final int mediaTypeStringId)", "private void addImageAsync(final Uri uri, final boolean append)", "private void addImageAsync(final Uri uri, final boolean append)", "private void addVideoAsync(final Uri uri, final boolean append)", "private void addVideoAsync(final Uri uri, final boolean append)", "private void addAudio(Uri uri)", "private void runAsyncWithDialog(final Runnable task, final int dialogStringId)", "public ModalDialogAsyncTask(int dialogStringId)", "private ProgressDialog createProgressDialog()", "protected void onPreExecute()", "protected Void doInBackground(Runnable... params)", "protected void onPostExecute(Void result)", "private boolean handleForwardedMessage()", "private boolean handleSendIntent()", "private String getResourcesString(int id, String mediaName)", "private void drawBottomPanel()", "private void drawTopPanel(boolean showSubjectEditor)", "private void launchMultiplePhonePicker()", "public boolean onEditorAction(TextView v, int actionId, KeyEvent event)", "private void ensureCorrectButtonHeight()", "private void initResourceRefs()", "private void confirmDeleteDialog(OnClickListener listener, boolean locked)", "void undeliveredMessageDialog(long date)", "private void startMsgListQuery()", "private void initMessageList()", "private void loadDraft()", "private void saveDraft(boolean isStopping)", "private boolean isPreparedForSending()", "final int recipientCount = recipientCount();", "private void sendMessage(boolean bCheckEcmMode)", "private void resetMessage()", "private void updateSendButtonState()", "private long getMessageDate(Uri uri)", "private void initActivityState(Bundle bundle)", "private void initFocus()", "public void onDataSetChanged(MessageListAdapter adapter)", "public void onContentChanged(MessageListAdapter adapter)", "private void checkPendingNotification()", "public BackgroundQueryHandler(ContentResolver contentResolver)", "protected void onQueryComplete(int token, Object cookie, Cursor cursor)", "protected void onDeleteComplete(int token, Object cookie, int result)", "private void showSmileyDialog()", "public boolean setViewValue(View view, Object data, String textRepresentation)", "public void onUpdate(final Contact updated)", "private void addRecipientsListeners()", "private void removeRecipientsListeners()", "private void clearPendingProgressDialog()", "public static Intent createIntent(Context context, long threadId)", "private String getBody(Uri uri)", "public static void log(String logMsg)", "private void editSlideshow()", "public void handleMessage(Message msg)", "public boolean onKey(View v, int keyCode, KeyEvent event)", "public void run()", "private MessageItem getMessageItem(String type, long msgId,", "private boolean isCursorValid()", "private void resetCounter()", "private void updateCounter(CharSequence text, int start, int before, int count)", "private void toastConvertInfo(boolean toMms)", "public DeleteMessageListener(Uri uri, boolean deleteLocked)", "public void onClick(DialogInterface dialog, int whichButton)", "private void confirmSendMessageIfNeeded()", "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)", "private void checkForTooManyRecipients()", "new OnCreateContextMenuListener()", "public void onCreateContextMenu(ContextMenu menu, View v,", "public boolean onMenuItemClick(MenuItem item)", "private boolean canAddToContacts(Contact contact)", "private boolean isSpecialChar(char c)", "private void addPositionBasedMenuItems(ContextMenu menu, View v, ContextMenuInfo menuInfo)", "private Uri getSelectedUriFromMessageList(ListView listView, int position)", "private void addUriSpecificMenuItems(ContextMenu menu, View v, int position)", "private Uri getContactUriForEmail(String emailAddress)", "private Uri getContactUriForPhoneNumber(String phoneNumber)", "private void editMessageItem(MessageItem msgItem)", "private void editSmsMessageItem(MessageItem msgItem)", "private void editMmsMessageItem(MessageItem msgItem)", "private void copyToClipboard(String str)", "private void forwardMessage(MessageItem msgItem)", "private void lockMessage(MessageItem msgItem, boolean locked)", "new Thread(new Runnable()", "private boolean haveSomethingToCopyToSDCard(long msgId)", "private boolean haveSomethingToCopyToDrmProvider(long msgId)", "private boolean copyToDrmProvider(long msgId)", "private String mimeTypeOfDrmPart(PduPart part)", "private String getDrmMimeType(long msgId)", "private int getDrmMimeMenuStringRsrc(long msgId)", "private int getDrmMimeSavedStringRsrc(long msgId, boolean success)", "private boolean isAudioMimeType(String mimeType)", "private boolean isImageMimeType(String mimeType)", "private boolean copyPartToDrmProvider(PduPart part)", "private boolean copyMedia(long msgId)", "private boolean copyPartToDrmProvider(PduPart part)", "private File getUniqueDestination(String base, String extension)", "private void showDeliveryReport(long messageId, String type)", "public void onReceive(Context context, Intent intent)", "private ContactList getRecipients()", "private void updateTitle(ContactList list)", "private void initRecipientsEditor()", "public void onItemClick(AdapterView<?> parent, View view, int position, long id)", "public void onFocusChange(View v, boolean hasFocus)", "public static boolean cancelFailedToDeliverNotification(Intent intent, Context context)", "public static boolean cancelFailedDownloadNotification(Intent intent, Context context)", "public void onCreateContextMenu(ContextMenu menu, View v,", "private void showSubjectEditor(boolean show)", "private void hideOrShowTopPanel()", "public void initialize(Bundle savedInstanceState, long originalThreadId)", "protected void onNewIntent(Intent intent)", "private void sanityCheckConversation()", "protected void onRestart()", "protected void onStart()", "public void loadMessageContent()", "private void updateSendFailedNotification()", "public void onSaveInstanceState(Bundle outState)", "protected void onResume()", "protected void onPause()", "protected void onStop()", "protected void onDestroy()", "public void onConfigurationChanged(Configuration newConfig)", "private boolean resetConfiguration(Configuration config)", "private void onKeyboardStateChanged(boolean isKeyboardOpen)", "public void onUserInteraction()", "public void onWindowFocusChanged(boolean hasFocus)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "private void exitComposeMessageActivity(final Runnable exit)", "private void goToConversationList()", "private void hideRecipientEditor()", "private boolean isRecipientsEditorVisible()", "private boolean isSubjectEditorVisible()", "public void onAttachmentChanged()", "public void onProtocolChanged(final boolean mms)", "private View showSmsOrMmsSendButton(boolean isMms)", "public void onPreMessageSent()", "public void onMessageSent()", "public void onMaxPendingMessagesReached()", "public void onAttachmentError(final int error)", "private boolean isRecipientCallable()", "private void dialRecipient()", "public boolean onPrepareOptionsMenu(Menu menu)", "private void buildAddAddressToContactMenuItem(Menu menu)", "public boolean onOptionsItemSelected(MenuItem item)", "private void confirmDeleteThread(long threadId)", "//        static int getInt(String s, int value)", "private void addAttachment(int type, boolean replace)", "public static long computeAttachmentSizeLimit(SlideshowModel slideShow, int currentSlideSize)", "private void showAddAttachmentDialog(final boolean replace)", "protected void onActivityResult(int requestCode, int resultCode, Intent data)", "private void processPickResult(final Intent data)", "public void onResizeResult(PduPart part, boolean append)", "private void handleAddAttachmentError(final int error, final int mediaTypeStringId)", "private void addImageAsync(final Uri uri, final boolean append)", "private void addImageAsync(final Uri uri, final boolean append)", "private void addVideoAsync(final Uri uri, final boolean append)", "private void addVideoAsync(final Uri uri, final boolean append)", "private void addAudio(Uri uri)", "private void runAsyncWithDialog(final Runnable task, final int dialogStringId)", "public ModalDialogAsyncTask(int dialogStringId)", "private ProgressDialog createProgressDialog()", "protected void onPreExecute()", "protected Void doInBackground(Runnable... params)", "protected void onPostExecute(Void result)", "private boolean handleForwardedMessage()", "private boolean handleSendIntent()", "private String getResourcesString(int id, String mediaName)", "private void drawBottomPanel()", "private void drawTopPanel(boolean showSubjectEditor)", "private void launchMultiplePhonePicker()", "public boolean onEditorAction(TextView v, int actionId, KeyEvent event)", "private void ensureCorrectButtonHeight()", "private void initResourceRefs()", "private void confirmDeleteDialog(OnClickListener listener, boolean locked)", "void undeliveredMessageDialog(long date)", "private void startMsgListQuery()", "private void initMessageList()", "private void loadDraft()", "private void saveDraft(boolean isStopping)", "private boolean isPreparedForSending()", "final int recipientCount = recipientCount();", "private void sendMessage(boolean bCheckEcmMode)", "private void resetMessage()", "private void updateSendButtonState()", "private long getMessageDate(Uri uri)", "private void initActivityState(Bundle bundle)", "private void initFocus()", "public void onDataSetChanged(MessageListAdapter adapter)", "public void onContentChanged(MessageListAdapter adapter)", "private void checkPendingNotification()", "public BackgroundQueryHandler(ContentResolver contentResolver)", "protected void onQueryComplete(int token, Object cookie, Cursor cursor)", "protected void onDeleteComplete(int token, Object cookie, int result)", "private void showSmileyDialog()", "public boolean setViewValue(View view, Object data, String textRepresentation)", "public void onUpdate(final Contact updated)", "private void addRecipientsListeners()", "private void removeRecipientsListeners()", "private void clearPendingProgressDialog()", "public static Intent createIntent(Context context, long threadId)", "private String getBody(Uri uri)", "public static void log(String logMsg)"], "prime_var_dic": {"situation": 1}}, {"idx": 70526, "status": "update", "global_index": 6779, "project_name": "android_", "written_on": "2016-06-06 17:33:01", "tufano_target": "private static byte [ ] METHOD_1 ( byte [ ] data , TYPE_1 key , boolean VAR_1 ) { try { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . init ( VAR_1 ? VAR_3 : VAR_4 , key , new TYPE_3 ( VAR_6 ) ) ; return VAR_2 . METHOD_3 ( data ) ; } catch ( TYPE_4 VAR_5 ) { throw new TYPE_5 ( STRING_2 , VAR_5 ) ; } }", "comment": "People will copy this exactly, so you need to do this correctly as well. If it's an encryption, you should use SecureRandom#nextBytes(byte[]) as above.", "tokenized_comment": ["People", "<|s|>", "will", "<|s|>", "copy", "<|s|>", "this", "<|s|>", "exactly", ",", "<|s|>", "so", "<|s|>", "you", "<|s|>", "need", "<|s|>", "to", "<|s|>", "do", "<|s|>", "this", "<|s|>", "correctly", "<|s|>", "as", "<|s|>", "well", ".", "<|s|>", "If", "<|s|>", "it", "'", "s", "<|s|>", "an", "<|s|>", "encryption", ",", "<|s|>", "you", "<|s|>", "should", "<|s|>", "use", "<|s|>", "Secure", "Random", "#", "next", "Bytes", "(", "byte", "[", "]", ")", "<|s|>", "as", "<|s|>", "above", "."], "tufano_code": "private static byte [ ] METHOD_1 ( byte [ ] data , TYPE_1 key , boolean VAR_1 ) { try { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . init ( VAR_1 ? VAR_3 : VAR_4 , key , new TYPE_3 ( new byte [ INT_1 ] ) ) ; return VAR_2 . METHOD_3 ( data ) ; } catch ( TYPE_4 VAR_5 ) { throw new TYPE_5 ( STRING_2 , VAR_5 ) ; } }", "our_target": "                    new IvParameterSpec(iv));\n", "our_code": "    private static byte[] encryptOrDecrypt(byte[] data, SecretKey key, boolean isEncrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n            cipher.init(isEncrypt ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE, key,\n<|startfocus|>\n                    // We don't care about the Iv as it's irrelevant to the example.\n                    new IvParameterSpec(new byte[16]));\n<|endfocus|>\n            return cipher.doFinal(data);\n        } catch (Exception e) {\n            throw new RuntimeException(\"This is unconceivable!\", e);\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "byte", "[", "]", "<|s|>", "encrypt", "Or", "Decrypt", "(", "byte", "[", "]", "<|s|>", "data", ",", "<|s|>", "Secret", "Key", "<|s|>", "key", ",", "<|s|>", "boolean", "<|s|>", "is", "Encrypt", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Cipher", "<|s|>", "cipher", "<|s|>", "=", "<|s|>", "Cipher", ".", "get", "Instance", "(", "\"", "AES", "/", "CBC", "/", "PKCS", "7", "PADDING", "\"", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "cipher", ".", "init", "(", "is", "Encrypt", "<|s|>", "?", "<|s|>", "Cipher", ".", "ENCRYPT", "_", "MODE", "<|s|>", ":", "<|s|>", "Cipher", ".", "DECRYPT", "_", "MODE", ",", "<|s|>", "key", ",", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "//", "<|s|>", "We", "<|s|>", "don", "'", "t", "<|s|>", "care", "<|s|>", "about", "<|s|>", "the", "<|s|>", "Iv", "<|s|>", "as", "<|s|>", "it", "'", "s", "<|s|>", "irrelevant", "<|s|>", "to", "<|s|>", "the", "<|s|>", "example", ".", "<|nl|>", "<|16-s|>", "<|4-s|>", "new", "<|s|>", "Iv", "Parameter", "Spec", "(", "new", "<|s|>", "byte", "[", "16", "]", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "cipher", ".", "do", "Final", "(", "data", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "\"", "This", "<|s|>", "is", "<|s|>", "unconceivable", "!", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 140, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3704", "comment_id": "265f52cd_37f3b7e2", "class_list": ["({@link", "BrokenKeyDerivationActivity"], "func_list": ["private static SecretKey deriveKeyInsecurely(String password, int keySizeInBytes)", "private SecretKey deriveKeySecurely(String password, int keySizeInBytes)", "private String retrieveData(String password)", "public void onCreate(Bundle savedInstanceState)", "private static byte[] encryptOrDecrypt(byte[] data, SecretKey key, boolean isEncrypt)", "private static byte[] encryptData(byte[] data, SecretKey key)", "private static byte[] decryptData(byte[] data, SecretKey key)", "private boolean isDataStoredWithInsecureKey = true;", "private void storeSalt(byte[] salt)", "private byte[] retrieveSalt()", "private byte[] retrieveEncryptedData()", "private void storeDataEncryptedWithSecureKey(byte[] encryptedData)"], "prime_var_dic": {"byte": 1}}, {"idx": 59717, "status": "update", "global_index": 13637, "project_name": "android_", "written_on": "2015-01-09 19:46:49", "tufano_target": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , VAR_1 . height , VAR_4 ) ; TYPE_4 VAR_5 = VAR_2 . METHOD_3 ( ) ; TYPE_5 VAR_6 = ( TYPE_5 ) VAR_5 . METHOD_4 ( ) ; METHOD_6 ( VAR_6 . getData ( ) ) ; return new TYPE_1 ( VAR_2 ) ; }", "comment": "set instead of get?", "tokenized_comment": ["set", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "get", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , VAR_1 . height , VAR_4 ) ; TYPE_4 VAR_5 = VAR_2 . METHOD_3 ( ) ; TYPE_5 VAR_6 = ( TYPE_5 ) VAR_5 . METHOD_4 ( ) ; METHOD_5 ( VAR_6 . getData ( ) ) ; return new TYPE_1 ( VAR_2 ) ; }", "our_target": "    setImageBytes(dataBuffer.getData());\n", "our_code": "  public ImageIcon createImageIcon() {\n    Dimension imageDimensions = getImageDimesions();\n    BufferedImage image = new BufferedImage(imageDimensions.width, imageDimensions.height, BufferedImage.TYPE_4BYTE_ABGR_PRE);\n    WritableRaster raster = image.getRaster();\n    DataBufferByte dataBuffer = (DataBufferByte)raster.getDataBuffer();\n<|startfocus|>\n    getImageBytes(dataBuffer.getData());\n<|endfocus|>\n    return new ImageIcon(image);\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Image", "Icon", "<|s|>", "create", "Image", "Icon", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Dimension", "<|s|>", "image", "Dimensions", "<|s|>", "=", "<|s|>", "get", "Image", "Dimesions", "(", ");", "<|nl|>", "<|4-s|>", "Buffered", "Image", "<|s|>", "image", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Buffered", "Image", "(", "image", "Dimensions", ".", "width", ",", "<|s|>", "image", "Dimensions", ".", "height", ",", "<|s|>", "Buffered", "Image", ".", "TYPE", "_", "4", "BYTE", "_", "ABGR", "_", "PRE", ");", "<|nl|>", "<|4-s|>", "Writable", "Raster", "<|s|>", "raster", "<|s|>", "=", "<|s|>", "image", ".", "get", "Raster", "(", ");", "<|nl|>", "<|4-s|>", "Data", "Buffer", "Byte", "<|s|>", "data", "Buffer", "<|s|>", "=", "<|s|>", "(", "Data", "Buffer", "Byte", ")", "raster", ".", "get", "Data", "Buffer", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "get", "Image", "Bytes", "(", "data", "Buffer", ".", "get", "Data", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "new", "<|s|>", "Image", "Icon", "(", "image", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 54, "base_patch_number": 9, "changed_patch_number": 11, "code_file_name": "android_178", "comment_id": "2efc49c4_a4b8c269", "class_list": ["FetchedImage"], "func_list": ["public FetchedImage(@NotNull ImageInfo imageInfo, @NotNull Binary binary)", "public ImageIcon createImageIcon()", "private Dimension getImageDimesions()", "private void getImageBytes(@NotNull byte[] destination)"], "prime_var_dic": {}}, {"idx": 18693, "status": "update", "global_index": 12173, "project_name": "android_", "written_on": "2014-08-14 23:06:59", "tufano_target": "protected void METHOD_1 ( TYPE_1 < String , TYPE_2 > VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) { public String execute ( ) throws TYPE_3 { return METHOD_2 ( ) ; } } ; VAR_1 . put ( getClass ( ) . getName ( ) , VAR_2 ) ; }", "comment": "here the return type of an execute method is a string, so the test can return details about the execution that it want to be logged along with the success result, you our case this should be a string concatenating the measurements (baseline, avg, stddev, etc) of each sensor", "tokenized_comment": ["here", "<|s|>", "the", "<|s|>", "return", "<|s|>", "type", "<|s|>", "of", "<|s|>", "an", "<|s|>", "execute", "<|s|>", "method", "<|s|>", "is", "<|s|>", "a", "<|s|>", "string", ",", "<|s|>", "so", "<|s|>", "the", "<|s|>", "test", "<|s|>", "can", "<|s|>", "return", "<|s|>", "details", "<|s|>", "about", "<|s|>", "the", "<|s|>", "execution", "<|s|>", "that", "<|s|>", "it", "<|s|>", "want", "<|s|>", "to", "<|s|>", "be", "<|s|>", "logged", "<|s|>", "along", "<|s|>", "with", "<|s|>", "the", "<|s|>", "success", "<|s|>", "result", ",", "<|s|>", "you", "<|s|>", "our", "<|s|>", "case", "<|s|>", "this", "<|s|>", "should", "<|s|>", "be", "<|s|>", "a", "<|s|>", "string", "<|s|>", "concatenating", "<|s|>", "the", "<|s|>", "measurements", "<|s|>", "(", "baseline", ",", "<|s|>", "avg", ",", "<|s|>", "stddev", ",", "<|s|>", "etc", ")", "<|s|>", "of", "<|s|>", "each", "<|s|>", "sensor"], "tufano_code": "protected void METHOD_1 ( TYPE_1 < String , TYPE_2 > VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) { public String execute ( ) throws TYPE_3 { METHOD_2 ( ) ; return STRING_1 ; } } ; VAR_1 . put ( getClass ( ) . getName ( ) , VAR_2 ) ; }", "our_target": "                return onRun();\n", "our_code": "    protected void getTestCases(Map<String, TestCase> testCaseMap) {\n        TestCase testCase = new TestCase() {\n            @Override\n            public String execute() throws Throwable {\n<|startfocus|>\n                onRun();\n                return \"\";\n<|endfocus|>\n            }\n        };\n        testCaseMap.put(getClass().getName(), testCase);\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "void", "<|s|>", "get", "Test", "Cases", "(", "Map", "<", "String", ",", "<|s|>", "Test", "Case", ">", "<|s|>", "test", "Case", "Map", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Test", "Case", "<|s|>", "test", "Case", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Test", "Case", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "@", "Override", "<|nl|>", "<|12-s|>", "public", "<|s|>", "String", "<|s|>", "execute", "(", ")", "<|s|>", "throws", "<|s|>", "Throwable", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "on", "Run", "(", ");", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "\"", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "};", "<|nl|>", "<|8-s|>", "test", "Case", "Map", ".", "put", "(", "get", "Class", "(", ")", ".", "get", "Name", "(", ")", ",", "<|s|>", "test", "Case", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 70, "base_patch_number": 18, "changed_patch_number": 19, "code_file_name": "android_890", "comment_id": "96df077f_483dd3d6", "class_list": ["SensorPowerTestActivity", "TestExecutionException"], "func_list": ["public TestExecutionException(final String message)", "public void waitForUserAcknowledgement(final String message)", "protected void getTestCases(Map<String, TestCase> testCaseMap)", "public TestExecutionException(final String message)"], "prime_var_dic": {}}, {"idx": 53709, "status": "update", "global_index": 10516, "project_name": "android_", "written_on": "2015-04-30 23:30:19", "tufano_target": "public void METHOD_7 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 source : VAR_2 . METHOD_3 ( ) ) { TYPE_5 VAR_3 = VAR_4 . get ( source . METHOD_4 ( ) ) ; if ( VAR_3 == null ) { VAR_3 = source . METHOD_5 ( ) ; VAR_4 . put ( source . METHOD_4 ( ) , VAR_3 ) ; } VAR_1 . add ( new TYPE_2 ( source , VAR_3 ) ) ; } METHOD_6 ( VAR_1 ) ; }", "comment": "Nit: Maybe call this \"refreshSources\" now? As a public name, it might be better to say what this method does rather than dictate when it should be called.", "tokenized_comment": ["Nit", ":", "<|s|>", "Maybe", "<|s|>", "call", "<|s|>", "this", "<|s|>", "\"", "refresh", "Sources", "\"", "<|s|>", "now", "?", "<|s|>", "As", "<|s|>", "a", "<|s|>", "public", "<|s|>", "name", ",", "<|s|>", "it", "<|s|>", "might", "<|s|>", "be", "<|s|>", "better", "<|s|>", "to", "<|s|>", "say", "<|s|>", "what", "<|s|>", "this", "<|s|>", "method", "<|s|>", "does", "<|s|>", "rather", "<|s|>", "than", "<|s|>", "dictate", "<|s|>", "when", "<|s|>", "it", "<|s|>", "should", "<|s|>", "be", "<|s|>", "called", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 source : VAR_2 . METHOD_3 ( ) ) { TYPE_5 VAR_3 = VAR_4 . get ( source . METHOD_4 ( ) ) ; if ( VAR_3 == null ) { VAR_3 = source . METHOD_5 ( ) ; VAR_4 . put ( source . METHOD_4 ( ) , VAR_3 ) ; } VAR_1 . add ( new TYPE_2 ( source , VAR_3 ) ) ; } METHOD_6 ( VAR_1 ) ; }", "our_target": "  public void refreshSources() {\n", "our_code": "<|startfocus|>\n  public void sourcesUpdated() {\n<|endfocus|>\n    ArrayList<Row> items = Lists.newArrayList();\n    for (SdkSource source : mySources.getAllSources()) {\n      Boolean enabled = myUrlEnabledMap.get(source.getUrl());\n      if (enabled == null) {\n        enabled = source.isEnabled();\n        myUrlEnabledMap.put(source.getUrl(), enabled);\n      }\n      items.add(new Row(source, enabled));\n    }\n    setItems(items);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "sources", "Updated", "(", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Array", "List", "<", "Row", ">", "<|s|>", "items", "<|s|>", "=", "<|s|>", "Lists", ".", "new", "Array", "List", "(", ");", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Sdk", "Source", "<|s|>", "source", "<|s|>", ":", "<|s|>", "my", "Sources", ".", "get", "All", "Sources", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Boolean", "<|s|>", "enabled", "<|s|>", "=", "<|s|>", "my", "Url", "Enabled", "Map", ".", "get", "(", "source", ".", "get", "Url", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "enabled", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "enabled", "<|s|>", "=", "<|s|>", "source", ".", "is", "Enabled", "(", ");", "<|nl|>", "<|8-s|>", "my", "Url", "Enabled", "Map", ".", "put", "(", "source", ".", "get", "Url", "(", ")", ",", "<|s|>", "enabled", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "items", ".", "add", "(", "new", "<|s|>", "Row", "(", "source", ",", "<|s|>", "enabled", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "set", "Items", "(", "items", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 145, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3870", "comment_id": "70f8f2fa_2731881b", "class_list": ["SourcesTableModel", "Row"], "func_list": ["public Boolean valueOf(Row row)", "public int getWidth(JTable table)", "public Class getColumnClass()", "public boolean isCellEditable(Row row)", "public void setValue(Row row, Boolean value)", "public TableCellRenderer getRenderer(final Row row)", "protected Icon getIcon(@NotNull Boolean value, JTable table, int row)", "public String getText()", "public String getToolTipText()", "public int getHorizontalAlignment()", "public String valueOf(Row r)", "public void setSourceEnabled(int i, boolean enabled)", "public void setSdkState(SdkState state)", "public void sourcesUpdated()", "public void editRow(int index)", "public void addRow()", "private EditSourceDialog showEditDialog(SdkSource source)", "private void createSource(String url, String uiName)", "public void removeRow(int idx)", "public void exchangeRows(int oldIndex, int newIndex) }", "public boolean canExchangeRows(int oldIndex, int newIndex)", "public boolean isEditable(int row)", "public void reset()", "public boolean isSourcesModified()", "public void save()", "public Row(SdkSource source, boolean enabled)", "public Boolean valueOf(Row row)", "public int getWidth(JTable table)", "public Class getColumnClass()", "public boolean isCellEditable(Row row)", "public void setValue(Row row, Boolean value)", "public TableCellRenderer getRenderer(final Row row)", "protected Icon getIcon(@NotNull Boolean value, JTable table, int row)", "public String getText()", "public String getToolTipText()", "public int getHorizontalAlignment()", "public String valueOf(Row r)", "public void setSourceEnabled(int i, boolean enabled)", "public void setSdkState(SdkState state)", "public void sourcesUpdated()", "public void editRow(int index)", "public void addRow()", "private EditSourceDialog showEditDialog(SdkSource source)", "private void createSource(String url, String uiName)", "public void removeRow(int idx)", "public void exchangeRows(int oldIndex, int newIndex) }", "public boolean canExchangeRows(int oldIndex, int newIndex)", "public boolean isEditable(int row)", "public void reset()", "public boolean isSourcesModified()", "public void save()", "public Row(SdkSource source, boolean enabled)"], "prime_var_dic": {"Row": 1}}, {"idx": 7861, "status": "update", "global_index": 5115, "project_name": "android_", "written_on": "2016-09-06 23:12:28", "tufano_target": "boolean METHOD_1 ( String key , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_6 ( key ) ; TYPE_3 item = VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ; if ( METHOD_1 ( item ) && VAR_1 . METHOD_3 ( ) ) { VAR_1 = TYPE_1 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; item = VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ; } return METHOD_1 ( item ) ; }", "comment": "Move this to StringResource?", "tokenized_comment": ["Move", "<|s|>", "this", "<|s|>", "to", "<|s|>", "String", "Resource", "?"], "tufano_code": "boolean METHOD_1 ( String key , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( key ) ; assert VAR_2 != null ; TYPE_3 item = VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ; if ( METHOD_1 ( item ) && VAR_1 . METHOD_3 ( ) ) { VAR_1 = TYPE_1 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; item = VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ; } return METHOD_1 ( item ) ; }", "our_target": "    StringResource stringResource = getStringResource(key);\n", "our_code": "  boolean isTranslationMissing(@NotNull String key, @NotNull Locale locale) {\n<|startfocus|>\n    StringResource stringResource = myKeyToResourceMap.get(key);\n    assert stringResource != null;\n<|endfocus|>\n    ResourceItem item = stringResource.getLocaleToTranslationMap().get(locale);\n\n    if (isTranslationMissing(item) && locale.hasRegion()) {\n      locale = Locale.create(locale.qualifier.getLanguage());\n      item = stringResource.getLocaleToTranslationMap().get(locale);\n    }\n\n    return isTranslationMissing(item);\n  }", "tokenized_code": ["<|2-s|>", "boolean", "<|s|>", "is", "Translation", "Missing", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "key", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Locale", "<|s|>", "locale", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "String", "Resource", "<|s|>", "string", "Resource", "<|s|>", "=", "<|s|>", "my", "Key", "To", "Resource", "Map", ".", "get", "(", "key", ");", "<|nl|>", "<|4-s|>", "assert", "<|s|>", "string", "Resource", "<|s|>", "!=", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Resource", "Item", "<|s|>", "item", "<|s|>", "=", "<|s|>", "string", "Resource", ".", "get", "Locale", "To", "Translation", "Map", "(", ")", ".", "get", "(", "locale", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "is", "Translation", "Missing", "(", "item", ")", "<|s|>", "&&", "<|s|>", "locale", ".", "has", "Region", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "locale", "<|s|>", "=", "<|s|>", "Locale", ".", "create", "(", "locale", ".", "qualifier", ".", "get", "Language", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "item", "<|s|>", "=", "<|s|>", "string", "Resource", ".", "get", "Locale", "To", "Translation", "Map", "(", ")", ".", "get", "(", "locale", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "is", "Translation", "Missing", "(", "item", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 260, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_224", "comment_id": "f6efbfc0_93c944a3", "class_list": ["StringResourceData"], "func_list": ["public StringResourceData(@NotNull AndroidFacet facet,", "public List<String> getKeys()", "public List<Locale> getLocales()", "public String resourceToString(@NotNull String key)", "public void changeKeyName(int index, String name)", "public boolean setDoNotTranslate(String key, boolean doNotTranslate)", "public boolean setTranslation(@NotNull String key, @Nullable Locale locale, @NotNull String value)", "public String validateKey(@NotNull String key)", "public String validateTranslation(@NotNull String key, @Nullable Locale locale)", "else if (doNotTranslate && !translationMissing)", "Collection<Locale> getMissingTranslations(@NotNull String key)", "boolean isTranslationMissing(@NotNull String key, @NotNull Locale locale)", "static String summarizeLocales(@NotNull Collection<Locale> locales)", "private static List<Locale> getLowest(Collection<Locale> locales, int n)", "public int compare(Locale l1, Locale l2)", "private static String getLabels(Iterable<Locale> locales)", "public String apply(Locale locale)", "private static String getLabels(Iterable<Locale> locales)", "public StringResource getResource(@NotNull String key)", "public List<StringResource> getResources()"], "prime_var_dic": {"myFacet": 1}}, {"idx": 78674, "status": "update", "global_index": 15713, "project_name": "android_", "written_on": "2015-02-20 19:25:03", "tufano_target": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! VAR_2 ) { return ; } try { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 . METHOD_3 ( ) ) { delete ( VAR_3 ) ; } } catch ( TYPE_4 VAR_4 ) { TYPE_5 . METHOD_4 ( String . format ( STRING_1 , VAR_1 . getName ( ) ) ) ; } }", "comment": "nit: static import", "tokenized_comment": ["nit", ":", "<|s|>", "static", "<|s|>", "import"], "tufano_code": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! VAR_2 ) { return ; } try { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 . METHOD_3 ( ) ) { TYPE_3 . delete ( VAR_3 ) ; } } catch ( TYPE_4 VAR_4 ) { TYPE_5 . METHOD_4 ( String . format ( STRING_1 , VAR_1 . getName ( ) ) ) ; } }", "our_target": "        delete(stateFile);\n", "our_code": "  public static void removeFrom(@NotNull Project project) {\n    if (!ENABLED) {\n      return;\n    }\n    try {\n      File stateFile = getProjectStateFile(project);\n      if (stateFile.isFile()) {\n<|startfocus|>\n        FileUtil.delete(stateFile);\n<|endfocus|>\n      }\n    }\n    catch (IOException e) {\n      LOG.warn(String.format(\"Failed to remove state for project %1$s'\", project.getName()));\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "remove", "From", "(", "@", "Not", "Null", "<|s|>", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "ENABLED", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "File", "<|s|>", "state", "File", "<|s|>", "=", "<|s|>", "get", "Project", "State", "File", "(", "project", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "state", "File", ".", "is", "File", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "File", "Util", ".", "delete", "(", "state", "File", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "warn", "(", "String", ".", "format", "(", "\"", "Failed", "<|s|>", "to", "<|s|>", "remove", "<|s|>", "state", "<|s|>", "for", "<|s|>", "project", "<|s|>", "%", "1", "$", "s", "'", "\"", ",", "<|s|>", "project", ".", "get", "Name", "(", ")", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 280, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_391", "comment_id": "a8c5967a_5ff2e3a1", "class_list": ["GradleProjectSyncData"], "func_list": ["private GradleProjectSyncData()", "public static GradleProjectSyncData getInstance(@NotNull final Project project)", "private static boolean needsAndroidSdkSync(@NotNull final Project project)", "public static void save(@NotNull Project project)", "public static void removeFrom(@NotNull Project project)", "public boolean canUseCachedProjectData()", "public long getLastGradleSyncTimestamp()"], "prime_var_dic": {"implements": 1, "myRootDirPath": 1}}, {"idx": 6833, "status": "update", "global_index": 6075, "project_name": "android_", "written_on": "2016-08-31 14:45:56", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) == VAR_2 ) { return VAR_3 ; } int VAR_4 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return ( new TYPE_1 ( new TYPE_3 ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) , - 1 , VAR_4 == VAR_5 ? - 1 : VAR_4 ) ) ; }", "comment": "nit UNKOWN_LINE_NUMBER, because, by definition, UNKOWN_LINE_NUMBER as not to be known by the user.", "tokenized_comment": ["nit", "<|s|>", "UNKOWN", "_", "LINE", "_", "NUMBER", ",", "<|s|>", "because", ",", "<|s|>", "by", "<|s|>", "definition", ",", "<|s|>", "UNKOWN", "_", "LINE", "_", "NUMBER", "<|s|>", "as", "<|s|>", "not", "<|s|>", "to", "<|s|>", "be", "<|s|>", "known", "<|s|>", "by", "<|s|>", "the", "<|s|>", "user", "."], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) == VAR_2 ) { return VAR_3 ; } int VAR_4 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; return ( new TYPE_1 ( new TYPE_3 ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) , - 1 , VAR_4 == VAR_5 ? - 1 : VAR_4 ) ) ; }", "our_target": "    // Jack defines unknown line by UNKNOWN_LINE_NUMBER, but dx requires to use -1.\n", "our_code": "  public static SourcePosition getSourcePosition(@Nonnull JNode stmt) {\n    if (stmt.getSourceInfo() == SourceInfo.UNKNOWN) {\n      return SourcePosition.NO_INFO;\n    }\n    int startLine = stmt.getSourceInfo().getStartLine();\n<|startfocus|>\n    // Jack defines unknown line by using 0, but dx requires to use -1.\n<|endfocus|>\n    return (new SourcePosition(new CstString(stmt.getSourceInfo().getFileName()), -1,\n        startLine == SourceInfo.UNKNOWN_LINE_NUMBER ? -1 : startLine));\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Source", "Position", "<|s|>", "get", "Source", "Position", "(", "@", "Nonnull", "<|s|>", "JNode", "<|s|>", "stmt", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "stmt", ".", "get", "Source", "Info", "(", ")", "<|s|>", "==", "<|s|>", "Source", "Info", ".", "UNKNOWN", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Source", "Position", ".", "NO", "_", "INFO", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "int", "<|s|>", "start", "Line", "<|s|>", "=", "<|s|>", "stmt", ".", "get", "Source", "Info", "(", ")", ".", "get", "Start", "Line", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Jack", "<|s|>", "defines", "<|s|>", "unknown", "<|s|>", "line", "<|s|>", "by", "<|s|>", "using", "<|s|>", "0", ",", "<|s|>", "but", "<|s|>", "dx", "<|s|>", "requires", "<|s|>", "to", "<|s|>", "use", "<|s|>", "-", "1", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "(", "new", "<|s|>", "Source", "Position", "(", "new", "<|s|>", "Cst", "String", "(", "stmt", ".", "get", "Source", "Info", "(", ")", ".", "get", "File", "Name", "(", ")", ")", ",", "<|s|>", "-", "1", ",", "<|nl|>", "<|8-s|>", "start", "Line", "<|s|>", "==", "<|s|>", "Source", "Info", ".", "UNKNOWN", "_", "LINE", "_", "NUMBER", "<|s|>", "?", "<|s|>", "-", "1", "<|s|>", ":", "<|s|>", "start", "Line", ")", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 173, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2239", "comment_id": "d163a525_b441e03b", "class_list": ["RopHelper", "in", "RopFormatter"], "func_list": ["public static CstMethodRef createMethodRef(@Nonnull JMethod method)", "public static CstFieldRef createFieldRef(@Nonnull JField field,", "public static CstString createString(@Nonnull JAbstractStringLiteral string)", "public static String getMethodSignatureWithoutName(@Nonnull JMethodCall call)", "public static SourcePosition getSourcePosition(@Nonnull JNode stmt)", "public static Type convertTypeToDx(@Nonnull JType type)", "private static CstNat createSignature(@Nonnull JMethod method)", "public static boolean areTypeCompatible(@Nonnull Type type1, @Nonnull Type type2)", "public static TypeList createTypeList(@Nonnull List<? extends JType> types)", "public static CstType getCstType(@Nonnull JType type)", "public String getName(@Nonnull JMethod method)", "public static CstMethodRef createMethodRef(@Nonnull JMethod method)", "public static CstFieldRef createFieldRef(@Nonnull JField field,", "public static CstString createString(@Nonnull JAbstractStringLiteral string)", "public static String getMethodSignatureWithoutName(@Nonnull JMethodCall call)", "public static SourcePosition getSourcePosition(@Nonnull JNode stmt)", "public static Type convertTypeToDx(@Nonnull JType type)", "private static CstNat createSignature(@Nonnull JMethod method)", "public static boolean areTypeCompatible(@Nonnull Type type1, @Nonnull Type type2)", "public static TypeList createTypeList(@Nonnull List<? extends JType> types)", "public static CstType getCstType(@Nonnull JType type)", "public String getName(@Nonnull JMethod method)"], "prime_var_dic": {}}, {"idx": 61603, "status": "update", "global_index": 15603, "project_name": "android_", "written_on": "2015-02-17 18:07:33", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_2 != null ) { VAR_2 = VAR_1 . METHOD_3 ( VAR_2 ) ; } if ( VAR_2 == null ) { return null ; } final TYPE_5 < String > iterator = new TYPE_6 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , false ) . iterator ( ) ; if ( iterator . METHOD_4 ( ) ) { return METHOD_5 ( iterator . METHOD_6 ( ) ) ; } else { return null ; } }", "comment": "It seems a bit unfortunate to perform a much more expensive full result and then throwing everything but the first result away. The code to perform the actual resolution is pretty small, so perhaps it would be better to simply have two separate implementations of the same logic: (1) pick a color, (2) pick all colors? (The pick-a-color code is called from the source editor (the color glyph gutter when your code for example contains R.color.foo anywhere on a source line) so it's ideal to avoid unnecessary computation there.)", "tokenized_comment": ["It", "<|s|>", "seems", "<|s|>", "a", "<|s|>", "bit", "<|s|>", "unfortunate", "<|s|>", "to", "<|s|>", "perform", "<|s|>", "a", "<|s|>", "much", "<|s|>", "more", "<|s|>", "expensive", "<|s|>", "full", "<|s|>", "result", "<|s|>", "and", "<|s|>", "then", "<|s|>", "throwing", "<|s|>", "everything", "<|s|>", "but", "<|s|>", "the", "<|s|>", "first", "<|s|>", "result", "<|s|>", "away", ".", "<|s|>", "The", "<|s|>", "code", "<|s|>", "to", "<|s|>", "perform", "<|s|>", "the", "<|s|>", "actual", "<|s|>", "resolution", "<|s|>", "is", "<|s|>", "pretty", "<|s|>", "small", ",", "<|s|>", "so", "<|s|>", "perhaps", "<|s|>", "it", "<|s|>", "would", "<|s|>", "be", "<|s|>", "better", "<|s|>", "to", "<|s|>", "simply", "<|s|>", "have", "<|s|>", "two", "<|s|>", "separate", "<|s|>", "implementations", "<|s|>", "of", "<|s|>", "the", "<|s|>", "same", "<|s|>", "logic", ":", "<|s|>", "(", "1", ")", "<|s|>", "pick", "<|s|>", "a", "<|s|>", "color", ",", "<|s|>", "(", "2", ")", "<|s|>", "pick", "<|s|>", "all", "<|s|>", "colors", "?", "<|s|>", "(", "The", "<|s|>", "pick", "-", "a", "-", "color", "<|s|>", "code", "<|s|>", "is", "<|s|>", "called", "<|s|>", "from", "<|s|>", "the", "<|s|>", "source", "<|s|>", "editor", "<|s|>", "(", "the", "<|s|>", "color", "<|s|>", "glyph", "<|s|>", "gutter", "<|s|>", "when", "<|s|>", "your", "<|s|>", "code", "<|s|>", "for", "<|s|>", "example", "<|s|>", "contains", "<|s|>", "R", ".", "color", ".", "foo", "<|s|>", "anywhere", "<|s|>", "on", "<|s|>", "a", "<|s|>", "source", "<|s|>", "line", ")", "<|s|>", "so", "<|s|>", "it", "'", "s", "<|s|>", "ideal", "<|s|>", "to", "<|s|>", "avoid", "<|s|>", "unnecessary", "<|s|>", "computation", "<|s|>", "there", ".", ")"], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { final TYPE_4 < TYPE_1 > VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; return VAR_3 . isEmpty ( ) ? null : VAR_3 . get ( 0 ) ; }", "our_target": "    if (color != null) {\n      color = resources.resolveResValue(color);\n    }\n    if (color == null) {\n      return null;\n    }\n\n    final Iterator<String> iterator = new StateListIterable(resources, color, MAX_RESOURCE_INDIRECTION, ATTR_COLOR, false).iterator();\n    if (iterator.hasNext()) {\n      return parseColor(iterator.next());\n    } else {\n      return null;\n    }\n", "our_code": "  public static Color resolveColor(@NotNull RenderResources resources, @Nullable ResourceValue color) {\n<|startfocus|>\n    final List<Color> colors = resolveMultipleColors(resources, color);\n    return colors.isEmpty() ? null : colors.get(0);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Color", "<|s|>", "resolve", "Color", "(", "@", "Not", "Null", "<|s|>", "Render", "Resources", "<|s|>", "resources", ",", "<|s|>", "@", "Nullable", "<|s|>", "Resource", "Value", "<|s|>", "color", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "final", "<|s|>", "List", "<", "Color", ">", "<|s|>", "colors", "<|s|>", "=", "<|s|>", "resolve", "Multiple", "Colors", "(", "resources", ",", "<|s|>", "color", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "colors", ".", "is", "Empty", "(", ")", "<|s|>", "?", "<|s|>", "null", "<|s|>", ":", "<|s|>", "colors", ".", "get", "(", "0", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 347, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_537", "comment_id": "2b736025_85bc8246", "class_list": ["ResourceHelper", "name", "name,"], "func_list": ["public static boolean isProjectStyle(@NotNull String style)", "public static String styleToTheme(@NotNull String style)", "public static boolean isValueBasedResourceType(@NotNull ResourceType type)", "public static String getResourceName(@NotNull VirtualFile file)", "public static String getResourceUrl(@NotNull VirtualFile file)", "public static boolean isFileBasedResourceType(@NotNull ResourceType type)", "public static ResourceFolderType getFolderType(@Nullable final PsiFile file)", "public ResourceFolderType compute()", "public static FolderConfiguration getFolderConfiguration(@Nullable final PsiFile file)", "public FolderConfiguration compute()", "public static List<VirtualFile> getResourceVariations(@Nullable VirtualFile file, boolean includeSelf)", "public static boolean viewNeedsPackage(String fqcn)", "public static Color resolveColor(@NotNull RenderResources resources, @Nullable ResourceValue color)", "public static List<Color> resolveMultipleColors(@NotNull RenderResources resources, @Nullable ResourceValue color)", "private static List<String> getAllFromStateList(@NotNull NodeList items, final String attributeName)", "public static Color parseColor(String s)", "private static long extend(long nibble)", "public static File resolveDrawable(@NotNull RenderResources resources, @Nullable ResourceValue drawable)", "public static List<File> resolveMultipleDrawables(@NotNull RenderResources resources, @Nullable ResourceValue drawable)", "public static File resolveLayout(@NotNull RenderResources resources, @Nullable ResourceValue layout)", "public static String prependResourcePrefix(@Nullable Module module, @Nullable String name)", "public static String styleToTheme(@NotNull String style)", "public static boolean viewNeedsPackage(String fqcn)"], "prime_var_dic": {}}, {"idx": 90267, "status": "update", "global_index": 21981, "project_name": "android_", "written_on": "2014-01-30 23:36:41", "tufano_target": "private TYPE_1 [ ] VAR_1 ; TYPE_2 < ? > [ ] VAR_2 ; private String [ ] VAR_3 ; private long VAR_4 ; private long VAR_5 ; private long VAR_6 ; private long VAR_7 ; private long VAR_8 ; private long VAR_9 ; private long VAR_10 ; private int VAR_11 ; private int VAR_12 ; private int VAR_13 ; private int VAR_14 ; private int VAR_15 ; private int VAR_16 ; private int VAR_17 ; private TYPE_1 ( ) { }", "comment": "WS", "tokenized_comment": ["WS"], "tufano_code": "private TYPE_1 [ ] VAR_1 ; TYPE_2 < ? > [ ] VAR_2 ; private String [ ] VAR_3 ; private long VAR_4 ; private long VAR_5 ; private long VAR_6 ; private long VAR_7 ; private long VAR_8 ; private long VAR_9 ; private long VAR_10 ; private int VAR_11 ; private int VAR_12 ; private int VAR_13 ; private int VAR_14 ; private int VAR_15 ; private int VAR_16 ; private int VAR_17 ; private TYPE_1 ( ) { }", "our_target": "     * determine which registers hold live references to objects within the heap.\n", "our_code": "    private ArtMethod[] dexCacheResolvedMethods;\n\n    /** Short-cut to declaringClass.dexCache.resolvedTypes */\n    /* package */ Class<?>[] dexCacheResolvedTypes;\n\n    /** Short-cut to declaringClass.dexCache.strings */\n    private String[] dexCacheStrings;\n\n    /**\n     * Method dispatch from the interpreter invokes this pointer which may cause a bridge into\n     * compiled code.\n     */\n    private long entryPointFromInterpreter;\n\n    /**\n     * Pointer to JNI function registered to this method, or a function to resolve the JNI function.\n     */\n    private long entryPointFromJni;\n\n    /**\n     * Method dispatch from portable compiled code invokes this pointer which may cause bridging\n     * into quick compiled code or the interpreter.\n     */\n    private long entryPointFromPortableCompiledCode;\n\n    /**\n     * Method dispatch from quick compiled code invokes this pointer which may cause bridging\n     * into portable compiled code or the interpreter.\n     */\n    private long entryPointFromQuickCompiledCode;\n\n    /**\n     * Pointer to a data structure created by the compiler and used by the garbage collector to\n<|startfocus|>\n     * determine which registers hold live references to objects within the heap. \n<|endfocus|>\n     */\n    private long gcMap;\n\n    /* Quick compiler meta-data. TODO: merge and place in native heap. */\n\n    /**\n     * Pointer to a data structure created by the quick compiler to map between dex PCs and\n     * native PCs, and vice-versa.\n     */\n    private long quickMappingTable;\n\n    /**\n     * Pointer to a data structure used by the quick compiler to map between dalvik and machine\n     * registers.\n     */\n    private long quickVmapTable;\n\n    /* End of quick compiler meta-data. */\n\n    /** Bits encoding access (e.g. public, private) as well as other runtime specific flags */\n    private int accessFlags;\n\n    /* Dex file fields. The defining dex file is available via declaringClass.dexCache */\n\n    /** The offset of the code item associated with this method within its defining dex file */\n    private int dexCodeItemOffset;\n\n    /** The method index of this method within its defining dex file */\n    private int dexMethodIndex;\n\n    /* End of dex file fields. */\n\n    /**\n     * Entry within a dispatch table for this method. For static/direct methods the index is\n     * into the declaringClass.directMethods, for virtual methods the vtable and for\n     * interface methods the ifTable.\n     */\n    private int methodIndex;\n\n    /* Quick compiler meta-data. TODO: merge and place in native heap. */\n\n    /** Bit map of spilled machine registers. */\n    private int quickCoreSpillMask;\n\n    /** Bit map of spilled floating point machine registers. */\n    private int quickFpSpillMask;\n\n    /** Fixed frame size for this method when executed. */\n    private int quickFrameSizeInBytes;\n\n    /* End of quick compiler meta-data. */\n\n    /** Only created by ART directly. */\n    private ArtMethod() {}", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Art", "Method", "[", "]", "<|s|>", "dex", "Cache", "Resolved", "Methods", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "Short", "-", "cut", "<|s|>", "to", "<|s|>", "declaring", "Class", ".", "dex", "Cache", ".", "resolved", "Types", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "/*", "<|s|>", "package", "<|s|>", "*/", "<|s|>", "Class", "<?>", "[", "]", "<|s|>", "dex", "Cache", "Resolved", "Types", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "Short", "-", "cut", "<|s|>", "to", "<|s|>", "declaring", "Class", ".", "dex", "Cache", ".", "strings", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "String", "[", "]", "<|s|>", "dex", "Cache", "Strings", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Method", "<|s|>", "dispatch", "<|s|>", "from", "<|s|>", "the", "<|s|>", "interpreter", "<|s|>", "invokes", "<|s|>", "this", "<|s|>", "pointer", "<|s|>", "which", "<|s|>", "may", "<|s|>", "cause", "<|s|>", "a", "<|s|>", "bridge", "<|s|>", "into", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "compiled", "<|s|>", "code", ".", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "long", "<|s|>", "entry", "Point", "From", "Interpreter", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Pointer", "<|s|>", "to", "<|s|>", "JNI", "<|s|>", "function", "<|s|>", "registered", "<|s|>", "to", "<|s|>", "this", "<|s|>", "method", ",", "<|s|>", "or", "<|s|>", "a", "<|s|>", "function", "<|s|>", "to", "<|s|>", "resolve", "<|s|>", "the", "<|s|>", "JNI", "<|s|>", "function", ".", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "long", "<|s|>", "entry", "Point", "From", "Jni", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Method", "<|s|>", "dispatch", "<|s|>", "from", "<|s|>", "portable", "<|s|>", "compiled", "<|s|>", "code", "<|s|>", "invokes", "<|s|>", "this", "<|s|>", "pointer", "<|s|>", "which", "<|s|>", "may", "<|s|>", "cause", "<|s|>", "bridging", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "into", "<|s|>", "quick", "<|s|>", "compiled", "<|s|>", "code", "<|s|>", "or", "<|s|>", "the", "<|s|>", "interpreter", ".", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "long", "<|s|>", "entry", "Point", "From", "Portable", "Compiled", "Code", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Method", "<|s|>", "dispatch", "<|s|>", "from", "<|s|>", "quick", "<|s|>", "compiled", "<|s|>", "code", "<|s|>", "invokes", "<|s|>", "this", "<|s|>", "pointer", "<|s|>", "which", "<|s|>", "may", "<|s|>", "cause", "<|s|>", "bridging", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "into", "<|s|>", "portable", "<|s|>", "compiled", "<|s|>", "code", "<|s|>", "or", "<|s|>", "the", "<|s|>", "interpreter", ".", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "long", "<|s|>", "entry", "Point", "From", "Quick", "Compiled", "Code", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Pointer", "<|s|>", "to", "<|s|>", "a", "<|s|>", "data", "<|s|>", "structure", "<|s|>", "created", "<|s|>", "by", "<|s|>", "the", "<|s|>", "compiler", "<|s|>", "and", "<|s|>", "used", "<|s|>", "by", "<|s|>", "the", "<|s|>", "garbage", "<|s|>", "collector", "<|s|>", "to", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "determine", "<|s|>", "which", "<|s|>", "registers", "<|s|>", "hold", "<|s|>", "live", "<|s|>", "references", "<|s|>", "to", "<|s|>", "objects", "<|s|>", "within", "<|s|>", "the", "<|s|>", "heap", ".", "<|s|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "long", "<|s|>", "gc", "Map", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "<|s|>", "Quick", "<|s|>", "compiler", "<|s|>", "meta", "-", "data", ".", "<|s|>", "TODO", ":", "<|s|>", "merge", "<|s|>", "and", "<|s|>", "place", "<|s|>", "in", "<|s|>", "native", "<|s|>", "heap", ".", "<|s|>", "*/", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Pointer", "<|s|>", "to", "<|s|>", "a", "<|s|>", "data", "<|s|>", "structure", "<|s|>", "created", "<|s|>", "by", "<|s|>", "the", "<|s|>", "quick", "<|s|>", "compiler", "<|s|>", "to", "<|s|>", "map", "<|s|>", "between", "<|s|>", "dex", "<|s|>", "PCs", "<|s|>", "and", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "native", "<|s|>", "PCs", ",", "<|s|>", "and", "<|s|>", "vice", "-", "versa", ".", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "long", "<|s|>", "quick", "Mapping", "Table", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Pointer", "<|s|>", "to", "<|s|>", "a", "<|s|>", "data", "<|s|>", "structure", "<|s|>", "used", "<|s|>", "by", "<|s|>", "the", "<|s|>", "quick", "<|s|>", "compiler", "<|s|>", "to", "<|s|>", "map", "<|s|>", "between", "<|s|>", "dalvik", "<|s|>", "and", "<|s|>", "machine", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "registers", ".", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "long", "<|s|>", "quick", "Vmap", "Table", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "<|s|>", "End", "<|s|>", "of", "<|s|>", "quick", "<|s|>", "compiler", "<|s|>", "meta", "-", "data", ".", "<|s|>", "*/", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "Bits", "<|s|>", "encoding", "<|s|>", "access", "<|s|>", "(", "e", ".", "g", ".", "<|s|>", "public", ",", "<|s|>", "private", ")", "<|s|>", "as", "<|s|>", "well", "<|s|>", "as", "<|s|>", "other", "<|s|>", "runtime", "<|s|>", "specific", "<|s|>", "flags", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "access", "Flags", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "<|s|>", "Dex", "<|s|>", "file", "<|s|>", "fields", ".", "<|s|>", "The", "<|s|>", "defining", "<|s|>", "dex", "<|s|>", "file", "<|s|>", "is", "<|s|>", "available", "<|s|>", "via", "<|s|>", "declaring", "Class", ".", "dex", "Cache", "<|s|>", "*/", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "The", "<|s|>", "offset", "<|s|>", "of", "<|s|>", "the", "<|s|>", "code", "<|s|>", "item", "<|s|>", "associated", "<|s|>", "with", "<|s|>", "this", "<|s|>", "method", "<|s|>", "within", "<|s|>", "its", "<|s|>", "defining", "<|s|>", "dex", "<|s|>", "file", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "dex", "Code", "Item", "Offset", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "The", "<|s|>", "method", "<|s|>", "index", "<|s|>", "of", "<|s|>", "this", "<|s|>", "method", "<|s|>", "within", "<|s|>", "its", "<|s|>", "defining", "<|s|>", "dex", "<|s|>", "file", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "dex", "Method", "Index", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "<|s|>", "End", "<|s|>", "of", "<|s|>", "dex", "<|s|>", "file", "<|s|>", "fields", ".", "<|s|>", "*/", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "Entry", "<|s|>", "within", "<|s|>", "a", "<|s|>", "dispatch", "<|s|>", "table", "<|s|>", "for", "<|s|>", "this", "<|s|>", "method", ".", "<|s|>", "For", "<|s|>", "static", "/", "direct", "<|s|>", "methods", "<|s|>", "the", "<|s|>", "index", "<|s|>", "is", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "into", "<|s|>", "the", "<|s|>", "declaring", "Class", ".", "direct", "Methods", ",", "<|s|>", "for", "<|s|>", "virtual", "<|s|>", "methods", "<|s|>", "the", "<|s|>", "vtable", "<|s|>", "and", "<|s|>", "for", "<|nl|>", "<|4-s|>", "<|s|>", "*", "<|s|>", "interface", "<|s|>", "methods", "<|s|>", "the", "<|s|>", "if", "Table", ".", "<|nl|>", "<|4-s|>", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "method", "Index", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "<|s|>", "Quick", "<|s|>", "compiler", "<|s|>", "meta", "-", "data", ".", "<|s|>", "TODO", ":", "<|s|>", "merge", "<|s|>", "and", "<|s|>", "place", "<|s|>", "in", "<|s|>", "native", "<|s|>", "heap", ".", "<|s|>", "*/", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "Bit", "<|s|>", "map", "<|s|>", "of", "<|s|>", "spilled", "<|s|>", "machine", "<|s|>", "registers", ".", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "quick", "Core", "Spill", "Mask", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "Bit", "<|s|>", "map", "<|s|>", "of", "<|s|>", "spilled", "<|s|>", "floating", "<|s|>", "point", "<|s|>", "machine", "<|s|>", "registers", ".", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "quick", "Fp", "Spill", "Mask", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "Fixed", "<|s|>", "frame", "<|s|>", "size", "<|s|>", "for", "<|s|>", "this", "<|s|>", "method", "<|s|>", "when", "<|s|>", "executed", ".", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "int", "<|s|>", "quick", "Frame", "Size", "In", "Bytes", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "<|s|>", "End", "<|s|>", "of", "<|s|>", "quick", "<|s|>", "compiler", "<|s|>", "meta", "-", "data", ".", "<|s|>", "*/", "<|nl|>", "<|nl|>", "<|4-s|>", "/*", "*", "<|s|>", "Only", "<|s|>", "created", "<|s|>", "by", "<|s|>", "ART", "<|s|>", "directly", ".", "<|s|>", "*/", "<|nl|>", "<|4-s|>", "private", "<|s|>", "Art", "Method", "(", ")", "<|s|>", "{", "}"], "base_code_line_number": 84, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2850", "comment_id": "727c56f1_3c55a917", "class_list": ["represents", "ArtMethod", "*/"], "func_list": ["private ArtMethod[] dexCacheResolvedMethods;", "Class getDeclaringClass()", "public int getAccessFlags()", "int getDexMethodIndex()", "public static String getMethodName(ArtMethod artMethod)", "public static boolean equalConstructorParameters(ArtMethod artMethod, Class<?>[] params)", "public static boolean equalMethodParameters(ArtMethod artMethod, Class<?>[] params)", "int compareParameters(Class<?>[] params)", "Annotation[][] getParameterAnnotations()", "private String getDexCacheString(Dex dex, int dexStringIndex)", "ArtMethod findOverriddenMethodIfProxy()", "private ArtMethod[] dexCacheResolvedMethods;", "Class getDeclaringClass()", "public int getAccessFlags()", "int getDexMethodIndex()", "public static String getMethodName(ArtMethod artMethod)", "public static boolean equalConstructorParameters(ArtMethod artMethod, Class<?>[] params)", "public static boolean equalMethodParameters(ArtMethod artMethod, Class<?>[] params)", "int compareParameters(Class<?>[] params)", "Annotation[][] getParameterAnnotations()", "private String getDexCacheString(Dex dex, int dexStringIndex)", "ArtMethod findOverriddenMethodIfProxy()", "private ArtMethod[] dexCacheResolvedMethods;", "Class getDeclaringClass()", "public int getAccessFlags()", "int getDexMethodIndex()", "public static String getMethodName(ArtMethod artMethod)", "public static boolean equalConstructorParameters(ArtMethod artMethod, Class<?>[] params)", "public static boolean equalMethodParameters(ArtMethod artMethod, Class<?>[] params)", "int compareParameters(Class<?>[] params)", "Annotation[][] getParameterAnnotations()", "private String getDexCacheString(Dex dex, int dexStringIndex)", "ArtMethod findOverriddenMethodIfProxy()"], "prime_var_dic": {"License": 1, "ArtMethod": 1}}, {"idx": 36652, "status": "update", "global_index": 7259, "project_name": "android_", "written_on": "2016-03-23 11:06:46", "tufano_target": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_3 ) { } TYPE_2 < TYPE_4 , TYPE_5 > VAR_2 = new TYPE_2 ( ) ; VAR_2 . put ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_1 ) { } }", "comment": "expected (here and below)", "tokenized_comment": ["expected", "<|s|>", "(", "here", "<|s|>", "and", "<|s|>", "below", ")"], "tufano_code": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_1 ) { } TYPE_2 < TYPE_4 , TYPE_5 > VAR_2 = new TYPE_2 ( ) ; VAR_2 . put ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_1 ) { } }", "our_target": "        } catch (UnsupportedOperationException expected) {\n", "our_code": "    public void test_unmodifiableMap_putIfAbsent() {\n        try {\n            Collections.unmodifiableMap(new HashMap<>()).putIfAbsent(1, 5.0);\n            fail();\n<|startfocus|>\n        } catch (UnsupportedOperationException e) {\n            // expected\n<|endfocus|>\n        }\n\n        // For existing key\n        HashMap<Integer, Double> m = new HashMap();\n        m.put(1, 5.0);\n        try {\n            Collections.unmodifiableMap(m).putIfAbsent(1, 5.0);\n            fail();\n        } catch (UnsupportedOperationException e) {\n            // expected\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "unmodifiable", "Map", "_", "put", "If", "Absent", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Collections", ".", "unmodifiable", "Map", "(", "new", "<|s|>", "Hash", "Map", "<", ">", "(", ")", ")", ".", "put", "If", "Absent", "(", "1", ",", "<|s|>", "5", ".", "0", ");", "<|nl|>", "<|12-s|>", "fail", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Unsupported", "Operation", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "expected", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "For", "<|s|>", "existing", "<|s|>", "key", "<|nl|>", "<|8-s|>", "Hash", "Map", "<", "Integer", ",", "<|s|>", "Double", ">", "<|s|>", "m", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hash", "Map", "(", ");", "<|nl|>", "<|8-s|>", "m", ".", "put", "(", "1", ",", "<|s|>", "5", ".", "0", ");", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Collections", ".", "unmodifiable", "Map", "(", "m", ")", ".", "put", "If", "Absent", "(", "1", ",", "<|s|>", "5", ".", "0", ");", "<|nl|>", "<|12-s|>", "fail", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Unsupported", "Operation", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "expected", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 235, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_3286", "comment_id": "bcb50adc_aed96f3b", "class_list": ["CollectionsTest", "ArrayListInheritor<T>", "IntegerWithExtremeComparator"], "func_list": ["public void testEmptyEnumeration()", "public void testEmptyIterator()", "public void testEmptyListIterator()", "public ArrayListInheritor(int capacity)", "public void testSort_leavesModcountUnmodified()", "public IntegerWithExtremeComparator(int value)", "public int compareTo(IntegerWithExtremeComparator another)", "public void testBinarySearch_comparatorThatReturnsMinAndMaxValue()", "public int compareTo(IntegerWithExtremeComparator another)", "public void testBinarySearch_emptyCollection()", "public void testSingletonSpliterator()", "public void test_unmodifiableMap_getOrDefault()", "public void test_unmodifiableMap_forEach()", "public void test_unmodifiableMap_putIfAbsent()", "public void test_unmodifiableMap_remove()", "public void test_unmodifiableMap_computeIfAbsent()", "public void test_unmodifiableMap_computeIfPresent()", "public void test_unmodifiableMap_computeIfAbsent()", "public void test_unmodifiableMap_merge()", "public void test_EmptyMap_getOrDefault()", "public void test_EmptyMap_forEach()", "public void test_EmptyMap_putIfAbsent()", "public void test_EmptyMap_remove()", "public void test_EmptyMap_computeIfAbsent()", "public void test_EmptyMap_computeIfPresent()", "public void test_EmptyMap_computeIfAbsent()", "public void test_EmptyMap_merge()", "public void test_SingletonMap_getOrDefault()", "public void test_SingletonMap_forEach()", "public void test_SingletonMap_putIfAbsent()", "public void test_SingletonMap_remove()", "public void test_SingletonMap_computeIfAbsent()", "public void test_SingletonMap_computeIfPresent()", "public void test_SingletonMap_computeIfAbsent()", "public void test_SingletonMap_merge()", "public ArrayListInheritor(int capacity)", "public IntegerWithExtremeComparator(int value)", "public int compareTo(IntegerWithExtremeComparator another)"], "prime_var_dic": {"IntegerWithExtremeComparator": 1, "value": 1}}, {"idx": 82088, "status": "update", "global_index": 8503, "project_name": "android_", "written_on": "2015-06-29 14:41:38", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 , TYPE_1 VAR_5 , TYPE_1 VAR_6 ) { this . VAR_8 = VAR_2 ; TYPE_3 < TYPE_1 > VAR_9 = TYPE_4 . METHOD_1 ( ) ; VAR_9 . add ( VAR_3 ) ; VAR_9 . add ( VAR_4 ) ; VAR_9 . add ( VAR_5 ) ; VAR_9 . add ( VAR_6 ) ; this . VAR_10 = VAR_9 . build ( ) ; }", "comment": "Add @NotNull to the parameters since we do not want or expect them to be null.", "tokenized_comment": ["Add", "<|s|>", "@", "Not", "Null", "<|s|>", "to", "<|s|>", "the", "<|s|>", "parameters", "<|s|>", "since", "<|s|>", "we", "<|s|>", "do", "<|s|>", "not", "<|s|>", "want", "<|s|>", "or", "<|s|>", "expect", "<|s|>", "them", "<|s|>", "to", "<|s|>", "be", "<|s|>", "null", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 , TYPE_1 VAR_5 , TYPE_1 VAR_6 ) { this . VAR_2 = VAR_2 ; this . VAR_7 = new TYPE_2 < TYPE_1 > ( ) ; VAR_7 . add ( VAR_3 ) ; VAR_7 . add ( VAR_4 ) ; VAR_7 . add ( VAR_5 ) ; VAR_7 . add ( VAR_6 ) ; }", "our_target": "  public PrimaryAccentPair(@NotNull Color primaryColor,\n                           @NotNull Color accent1,\n                           @NotNull Color accent2,\n                           @NotNull Color accent3,\n                           @NotNull Color accent4) {\n    this.myPrimaryColor = primaryColor;\n    ImmutableList.Builder<Color> builder = ImmutableList.builder();\n    builder.add(accent1);\n    builder.add(accent2);\n    builder.add(accent3);\n    builder.add(accent4);\n    this.myAccentColorsList = builder.build();\n", "our_code": "<|startfocus|>\n  public PrimaryAccentPair(Color primaryColor, Color accent1, Color accent2, Color accent3, Color accent4) {\n    this.primaryColor = primaryColor;\n    this.accentColorsList = new ArrayList<Color>();\n    accentColorsList.add(accent1);\n    accentColorsList.add(accent2);\n    accentColorsList.add(accent3);\n    accentColorsList.add(accent4);\n<|endfocus|>\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "Primary", "Accent", "Pair", "(", "Color", "<|s|>", "primary", "Color", ",", "<|s|>", "Color", "<|s|>", "accent", "1", ",", "<|s|>", "Color", "<|s|>", "accent", "2", ",", "<|s|>", "Color", "<|s|>", "accent", "3", ",", "<|s|>", "Color", "<|s|>", "accent", "4", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "this", ".", "primary", "Color", "<|s|>", "=", "<|s|>", "primary", "Color", ";", "<|nl|>", "<|4-s|>", "this", ".", "accent", "Colors", "List", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "List", "<", "Color", ">", "(", ");", "<|nl|>", "<|4-s|>", "accent", "Colors", "List", ".", "add", "(", "accent", "1", ");", "<|nl|>", "<|4-s|>", "accent", "Colors", "List", ".", "add", "(", "accent", "2", ");", "<|nl|>", "<|4-s|>", "accent", "Colors", "List", ".", "add", "(", "accent", "3", ");", "<|nl|>", "<|4-s|>", "accent", "Colors", "List", ".", "add", "(", "accent", "4", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 28, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_283", "comment_id": "13b505ac_eb0dcd40", "class_list": ["PrimaryAccentPair"], "func_list": ["public PrimaryAccentPair(Color primaryColor, Color accent1, Color accent2, Color accent3, Color accent4)", "public Color getPrimaryColor()", "public List<Color> getAccentColorsList()"], "prime_var_dic": {"primaryColor": 1}}, {"idx": 89794, "status": "update", "global_index": 7850, "project_name": "android_", "written_on": "2015-11-30 22:16:29", "tufano_target": "private TYPE_1 METHOD_1 ( String file ) { TYPE_2 VAR_2 = null ; try { VAR_2 = new TYPE_3 ( new TYPE_4 ( new TYPE_5 ( VAR_3 , VAR_1 ) ) ) ; return ( TYPE_1 ) VAR_4 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_6 | TYPE_7 VAR_5 ) { return null ; } finally { TYPE_8 . METHOD_3 ( VAR_2 ) ; } }", "comment": "caFile -> certFile or, better yet, file", "tokenized_comment": ["ca", "File", "<|s|>", "->", "<|s|>", "cert", "File", "<|s|>", "or", ",", "<|s|>", "better", "<|s|>", "yet", ",", "<|s|>", "file"], "tufano_code": "private TYPE_1 METHOD_1 ( String VAR_1 ) { TYPE_2 VAR_2 = null ; try { VAR_2 = new TYPE_3 ( new TYPE_4 ( new TYPE_5 ( VAR_3 , VAR_1 ) ) ) ; return ( TYPE_1 ) VAR_4 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_6 | TYPE_7 VAR_5 ) { return null ; } finally { TYPE_8 . METHOD_3 ( VAR_2 ) ; } }", "our_target": "    private X509Certificate readCertificate(String file) {\n", "our_code": "<|startfocus|>\n    private X509Certificate readCertificate(String caFile) {\n<|endfocus|>\n        InputStream is = null;\n        try {\n            is = new BufferedInputStream(new FileInputStream(new File(mCaDir, caFile)));\n            return (X509Certificate) mCertFactory.generateCertificate(is);\n        } catch (CertificateException | IOException e) {\n            return null;\n        } finally {\n            IoUtils.closeQuietly(is);\n        }\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "X", "509", "Certificate", "<|s|>", "read", "Certificate", "(", "String", "<|s|>", "ca", "File", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Input", "Stream", "<|s|>", "is", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "is", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Buffered", "Input", "Stream", "(", "new", "<|s|>", "File", "Input", "Stream", "(", "new", "<|s|>", "File", "(", "m", "Ca", "Dir", ",", "<|s|>", "ca", "File", ")", ")", ");", "<|nl|>", "<|12-s|>", "return", "<|s|>", "(", "X", "509", "Certificate", ")", "<|s|>", "m", "Cert", "Factory", ".", "generate", "Certificate", "(", "is", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Certificate", "Exception", "<|s|>", "|", "<|s|>", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|s|>", "finally", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Io", "Utils", ".", "close", "Quietly", "(", "is", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 122, "base_patch_number": 1, "changed_patch_number": 3, "code_file_name": "android_1420", "comment_id": "fbde9f59_0e09eb06", "class_list": ["DirectoryCertificateSource"], "func_list": ["protected DirectoryCertificateSource(File caDir)", "public Set<X509Certificate> getCertificates()", "public X509Certificate findBySubjectAndPublicKey(final X509Certificate cert)", "public boolean match(X509Certificate ca)", "private X509Certificate findCert(X500Principal subj, CertSelector selector)", "private String getHash(X500Principal name)", "private X509Certificate readCertificate(String caFile)"], "prime_var_dic": {"implements": 1, "mCaDir": 1, "mCertFactory": 1, "CertSelector": 1}}, {"idx": 79347, "status": "update", "global_index": 15727, "project_name": "android_", "written_on": "2015-02-23 19:22:05", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 value , boolean VAR_2 , boolean VAR_3 , int VAR_4 , int VAR_5 ) { if ( ! ( value instanceof TYPE_4 ) ) { return null ; } VAR_6 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_6 . setText ( ( ( TYPE_4 ) value ) . getValue ( ) ) ; VAR_6 . METHOD_5 ( true ) ; return VAR_6 ; }", "comment": "why is this code here?\n-firstly its always gray\n-secondly the editor is never open for something that is read only, so we will never actually come here", "tokenized_comment": ["why", "<|s|>", "is", "<|s|>", "this", "<|s|>", "code", "<|s|>", "here", "?", "<|nl|>", "-", "firstly", "<|s|>", "its", "<|s|>", "always", "<|s|>", "gray", "<|nl|>", "-", "secondly", "<|s|>", "the", "<|s|>", "editor", "<|s|>", "is", "<|s|>", "never", "<|s|>", "open", "<|s|>", "for", "<|s|>", "something", "<|s|>", "that", "<|s|>", "is", "<|s|>", "read", "<|s|>", "only", ",", "<|s|>", "so", "<|s|>", "we", "<|s|>", "will", "<|s|>", "never", "<|s|>", "actually", "<|s|>", "come", "<|s|>", "here"], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 value , boolean VAR_2 , boolean VAR_3 , int VAR_4 , int VAR_5 ) { if ( ! ( value instanceof TYPE_4 ) ) { return null ; } VAR_6 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_6 . setText ( ( ( TYPE_4 ) value ) . getValue ( ) ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; VAR_6 . METHOD_5 ( true ) ; return VAR_6 ; }", "our_target": "    // Allows for colored background\n", "our_code": "  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n    if (!(value instanceof EditedStyleItem)) {\n      return null;\n    }\n\n    myLabel.setFont(table.getFont());\n    myLabel.setText(((EditedStyleItem)value).getValue());\n\n<|startfocus|>\n    // Gray background for un-editable attributes\n    myLabel.setBackground(JBColor.LIGHT_GRAY);\n<|endfocus|>\n    myLabel.setOpaque(true);\n    return myLabel;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Component", "<|s|>", "get", "Table", "Cell", "Renderer", "Component", "(", "JTable", "<|s|>", "table", ",", "<|s|>", "Object", "<|s|>", "value", ",", "<|s|>", "boolean", "<|s|>", "is", "Selected", ",", "<|s|>", "boolean", "<|s|>", "has", "Focus", ",", "<|s|>", "int", "<|s|>", "row", ",", "<|s|>", "int", "<|s|>", "column", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "(", "value", "<|s|>", "instanceof", "<|s|>", "Edited", "Style", "Item", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "my", "Label", ".", "set", "Font", "(", "table", ".", "get", "Font", "(", ")", ");", "<|nl|>", "<|4-s|>", "my", "Label", ".", "set", "Text", "(", "(", "(", "Edited", "Style", "Item", ")", "value", ")", ".", "get", "Value", "(", ")", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Gray", "<|s|>", "background", "<|s|>", "for", "<|s|>", "un", "-", "editable", "<|s|>", "attributes", "<|nl|>", "<|4-s|>", "my", "Label", ".", "set", "Background", "(", "JBColor", ".", "LIGHT", "_", "GRAY", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "my", "Label", ".", "set", "Opaque", "(", "true", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "my", "Label", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 77, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_245", "comment_id": "885e12fc_9832b5ec", "class_list": ["ClickableTableCellEditor"], "func_list": ["public ClickableTableCellEditor(@NotNull final ClickListener listener)", "public void actionPerformed(ActionEvent actionEvent)", "public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)", "public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)", "public Object getCellEditorValue()", "public void setDetailsActive(boolean detailsActive)"], "prime_var_dic": {}}, {"idx": 90690, "status": "update", "global_index": 8719, "project_name": "android_", "written_on": "2015-07-20 19:51:15", "tufano_target": "protected TYPE_1 METHOD_1 ( ) { String VAR_1 = TYPE_3 . METHOD_3 ( STRING_2 ) ; if ( VAR_1 != null ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , TYPE_2 . replace ( CHAR_1 , VAR_4 ) ) ; if ( VAR_3 . METHOD_2 ( ) ) { return VAR_3 ; } } } return null ; }", "comment": "debug code", "tokenized_comment": ["debug", "<|s|>", "code"], "tufano_code": "protected TYPE_1 METHOD_1 ( ) { String VAR_1 = STRING_1 ; if ( VAR_1 != null ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , TYPE_2 . replace ( CHAR_1 , VAR_4 ) ) ; if ( VAR_3 . METHOD_2 ( ) ) { return VAR_3 ; } } } return null ; }", "our_target": "        String sdk = System.getenv(\"ANDROID_SRC\");\n", "our_code": "    protected File getTargetDir() {\n        // Set $ANDROID_SRC to point to your git AOSP working tree\n<|startfocus|>\n        String sdk = \"/usr/local/ssd/src/aosp-studio-1.4-dev/\"; //System.getenv(\"ANDROID_SRC\");\n<|endfocus|>\n        if (sdk != null) {\n            File root = new File(sdk);\n            if (root.exists()) {\n                File testData = new File(root, TEST_DATA_REL_PATH.replace('/',\n                        File.separatorChar));\n                if (testData.exists()) {\n                    return testData;\n                }\n            }\n        }\n\n        return null;\n    }", "tokenized_code": ["<|4-s|>", "protected", "<|s|>", "File", "<|s|>", "get", "Target", "Dir", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Set", "<|s|>", "$", "ANDROID", "_", "SRC", "<|s|>", "to", "<|s|>", "point", "<|s|>", "to", "<|s|>", "your", "<|s|>", "git", "<|s|>", "AOSP", "<|s|>", "working", "<|s|>", "tree", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "String", "<|s|>", "sdk", "<|s|>", "=", "<|s|>", "\"", "/", "usr", "/", "local", "/", "ssd", "/", "src", "/", "aosp", "-", "studio", "-", "1", ".", "4", "-", "dev", "/", "\"", ";", "<|s|>", "//", "System", ".", "getenv", "(", "\"", "ANDROID", "_", "SRC", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "sdk", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "File", "<|s|>", "root", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "sdk", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "root", ".", "exists", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "File", "<|s|>", "test", "Data", "<|s|>", "=", "<|s|>", "new", "<|s|>", "File", "(", "root", ",", "<|s|>", "TEST", "_", "DATA", "_", "REL", "_", "PATH", ".", "replace", "(", "'", "/", "'", ",", "<|nl|>", "<|16-s|>", "<|8-s|>", "File", ".", "separator", "Char", ")", ");", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "test", "Data", ".", "exists", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "return", "<|s|>", "test", "Data", ";", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 221, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_924", "comment_id": "9847523e_8c5fc7c1", "class_list": ["GeneratorTest"], "func_list": ["protected static File getTempDir()", "public BufferedImage loadImageResource(String path)", "protected File getTargetDir()"], "prime_var_dic": {"String": 1, "options": 1, "IOException": 1, "color": 1, "left": 1, "right": 1}}, {"idx": 91758, "status": "update", "global_index": 3630, "project_name": "android_", "written_on": "2017-01-26 16:43:13", "tufano_target": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = handle . type ( ) ; boolean VAR_2 = false ; if ( VAR_3 instanceof TYPE_2 ) { VAR_1 = VAR_1 . METHOD_2 ( void . class ) ; VAR_2 = true ; } switch ( handle . METHOD_3 ( ) ) { case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : VAR_2 = true ; } return VAR_2 ? VAR_1 . METHOD_4 ( 0 , 1 ) : VAR_1 ; }", "comment": ". ?", "tokenized_comment": [".", "<|s|>", "?"], "tufano_code": "public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = handle . type ( ) ; boolean VAR_2 = false ; if ( VAR_3 instanceof TYPE_2 ) { VAR_1 = VAR_1 . METHOD_2 ( void . class ) ; VAR_2 = true ; } switch ( handle . METHOD_3 ( ) ) { case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : VAR_2 = true ; } return VAR_2 ? VAR_1 . METHOD_4 ( 0 , 1 ) : VAR_1 ; }", "our_target": "            // of the handle itself, except in the cases enumerated below.\n", "our_code": "        public MethodType getMethodType() {\n            // The \"nominal\" type of a cracked method handle is the same as the type\n<|startfocus|>\n            // of the handle itself, except in the cases enumerated below :\n<|endfocus|>\n            MethodType handleType = handle.type();\n\n            boolean omitLeadingParam = false;\n\n            // For constructs, the return type is always void.class, and not the type of\n            // the object returned.\n            if (member instanceof Constructor) {\n                handleType = handleType.changeReturnType(void.class);\n                omitLeadingParam = true;\n            }\n\n            // For instance field gets/puts and instance method gets/puts, we omit the\n            // leading reference parameter to |this|.\n            switch (handle.getHandleKind()) {\n                case IGET:\n                case IPUT:\n                case INVOKE_INTERFACE:\n                case INVOKE_DIRECT:\n                case INVOKE_VIRTUAL:\n                case INVOKE_SUPER:\n                    omitLeadingParam = true;\n            }\n\n            return omitLeadingParam ? handleType.dropParameterTypes(0, 1) : handleType;\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "Method", "Type", "<|s|>", "get", "Method", "Type", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "The", "<|s|>", "\"", "nominal", "\"", "<|s|>", "type", "<|s|>", "of", "<|s|>", "a", "<|s|>", "cracked", "<|s|>", "method", "<|s|>", "handle", "<|s|>", "is", "<|s|>", "the", "<|s|>", "same", "<|s|>", "as", "<|s|>", "the", "<|s|>", "type", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "of", "<|s|>", "the", "<|s|>", "handle", "<|s|>", "itself", ",", "<|s|>", "except", "<|s|>", "in", "<|s|>", "the", "<|s|>", "cases", "<|s|>", "enumerated", "<|s|>", "below", "<|s|>", ":", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "Method", "Type", "<|s|>", "handle", "Type", "<|s|>", "=", "<|s|>", "handle", ".", "type", "(", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "boolean", "<|s|>", "omit", "Leading", "Param", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "For", "<|s|>", "constructs", ",", "<|s|>", "the", "<|s|>", "return", "<|s|>", "type", "<|s|>", "is", "<|s|>", "always", "<|s|>", "void", ".", "class", ",", "<|s|>", "and", "<|s|>", "not", "<|s|>", "the", "<|s|>", "type", "<|s|>", "of", "<|nl|>", "<|12-s|>", "//", "<|s|>", "the", "<|s|>", "object", "<|s|>", "returned", ".", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "member", "<|s|>", "instanceof", "<|s|>", "Constructor", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "handle", "Type", "<|s|>", "=", "<|s|>", "handle", "Type", ".", "change", "Return", "Type", "(", "void", ".", "class", ");", "<|nl|>", "<|16-s|>", "omit", "Leading", "Param", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "For", "<|s|>", "instance", "<|s|>", "field", "<|s|>", "gets", "/", "puts", "<|s|>", "and", "<|s|>", "instance", "<|s|>", "method", "<|s|>", "gets", "/", "puts", ",", "<|s|>", "we", "<|s|>", "omit", "<|s|>", "the", "<|nl|>", "<|12-s|>", "//", "<|s|>", "leading", "<|s|>", "reference", "<|s|>", "parameter", "<|s|>", "to", "<|s|>", "|", "this", "|", ".", "<|nl|>", "<|12-s|>", "switch", "<|s|>", "(", "handle", ".", "get", "Handle", "Kind", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "case", "<|s|>", "IGET", ":", "<|nl|>", "<|16-s|>", "case", "<|s|>", "IPUT", ":", "<|nl|>", "<|16-s|>", "case", "<|s|>", "INVOKE", "_", "INTERFACE", ":", "<|nl|>", "<|16-s|>", "case", "<|s|>", "INVOKE", "_", "DIRECT", ":", "<|nl|>", "<|16-s|>", "case", "<|s|>", "INVOKE", "_", "VIRTUAL", ":", "<|nl|>", "<|16-s|>", "case", "<|s|>", "INVOKE", "_", "SUPER", ":", "<|nl|>", "<|16-s|>", "<|4-s|>", "omit", "Leading", "Param", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "omit", "Leading", "Param", "<|s|>", "?", "<|s|>", "handle", "Type", ".", "drop", "Parameter", "Types", "(", "0", ",", "<|s|>", "1", ")", "<|s|>", ":", "<|s|>", "handle", "Type", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 126, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_3426", "comment_id": "38313e15_76d06be9", "class_list": ["MethodHandleImpl", "HandleInfo"], "func_list": ["MethodHandleInfo reveal()", "public int getReferenceKind()", "public String getName()", "public MethodType getMethodType()", "public int getModifiers()"], "prime_var_dic": {}}, {"idx": 91849, "status": "update", "global_index": 18817, "project_name": "android_", "written_on": "2010-09-07 19:12:19", "tufano_target": "public static String METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; String VAR_3 = VAR_1 . getString ( VAR_4 ) ; if ( VAR_3 . length ( ) == 0 ) { VAR_3 = TYPE_2 . METHOD_3 ( STRING_1 ) ; } if ( VAR_3 != null && VAR_3 . length ( ) > 0 ) { return VAR_3 + STRING_2 + METHOD_4 ( ) + STRING_3 ; } return null ; }", "comment": "I'm a little confused.\n\nIn what situations will getPreferenceStore() return null? Its javadoc seems to indicate a non null value will always be returned, thus the 'devTree = System.getenv(\"ANDROID_BUILD_TOP\")' value will always be overridden.", "tokenized_comment": ["I", "'", "m", "<|s|>", "a", "<|s|>", "little", "<|s|>", "confused", ".", "<|nl|>", "<|nl|>", "In", "<|s|>", "what", "<|s|>", "situations", "<|s|>", "will", "<|s|>", "get", "Preference", "Store", "(", ")", "<|s|>", "return", "<|s|>", "null", "?", "<|s|>", "Its", "<|s|>", "javadoc", "<|s|>", "seems", "<|s|>", "to", "<|s|>", "indicate", "<|s|>", "a", "<|s|>", "non", "<|s|>", "null", "<|s|>", "value", "<|s|>", "will", "<|s|>", "always", "<|s|>", "be", "<|s|>", "returned", ",", "<|s|>", "thus", "<|s|>", "the", "<|s|>", "'", "dev", "Tree", "<|s|>", "=", "<|s|>", "System", ".", "getenv", "(", "\"", "ANDROID", "_", "BUILD", "_", "TOP", "\"", ")", "'", "<|s|>", "value", "<|s|>", "will", "<|s|>", "always", "<|s|>", "be", "<|s|>", "overridden", "."], "tufano_code": "public static String METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; String VAR_3 = TYPE_2 . METHOD_3 ( STRING_1 ) ; if ( VAR_1 != null ) { VAR_3 = VAR_1 . getString ( VAR_4 ) ; } if ( VAR_3 != null && VAR_3 . length ( ) > 0 ) { return VAR_3 + STRING_2 + METHOD_4 ( ) + STRING_3 ; } return null ; }", "our_target": "\n        // returns an empty, non-null, string if the preference is not found.\n        String devTree = store.getString(PrefPage.PREFS_DEVTREE_DIR);\n\n        if (devTree.length() == 0) {\n            devTree = System.getenv(\"ANDROID_BUILD_TOP\"); //$NON-NLS-1$\n", "our_code": "    public static String getAdbLocation() {\n        IPreferenceStore store = sPlugin.getPreferenceStore();\n<|startfocus|>\n        String devTree = System.getenv(\"ANDROID_BUILD_TOP\"); //$NON-NLS-1$\n        if (store != null) {\n            devTree = store.getString(PrefPage.PREFS_DEVTREE_DIR);\n<|endfocus|>\n        }\n\n        if (devTree != null && devTree.length() > 0) {\n            return devTree + \"/out/host/\" + currentPlatform() + \"/bin/adb\"; //$NON-NLS-1$ //$NON-NLS-2$\n        }\n\n        return null;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "String", "<|s|>", "get", "Adb", "Location", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "IPreference", "Store", "<|s|>", "store", "<|s|>", "=", "<|s|>", "s", "Plugin", ".", "get", "Preference", "Store", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "String", "<|s|>", "dev", "Tree", "<|s|>", "=", "<|s|>", "System", ".", "getenv", "(", "\"", "ANDROID", "_", "BUILD", "_", "TOP", "\"", ");", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "1", "$", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "store", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "dev", "Tree", "<|s|>", "=", "<|s|>", "store", ".", "get", "String", "(", "Pref", "Page", ".", "PREFS", "_", "DEVTREE", "_", "DIR", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "dev", "Tree", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "dev", "Tree", ".", "length", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "dev", "Tree", "<|s|>", "+", "<|s|>", "\"", "/", "out", "/", "host", "/", "\"", "<|s|>", "+", "<|s|>", "current", "Platform", "(", ")", "<|s|>", "+", "<|s|>", "\"", "/", "bin", "/", "adb", "\"", ";", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "1", "$", "<|s|>", "//", "$", "NON", "-", "NLS", "-", "2", "$", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 65, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_1949", "comment_id": "AAAA7X%2F%2F%2F7k%3D", "class_list": ["PdtPlugin"], "func_list": ["public PdtPlugin()", "public void propertyChange(PropertyChangeEvent event)", "public static String getAdbLocation()", "private static String currentPlatform()"], "prime_var_dic": {"String": 1, "sPlugin": 1, "instance": 1}}, {"idx": 95553, "status": "update", "global_index": 11749, "project_name": "android_", "written_on": "2014-07-14 18:06:05", "tufano_target": "public void METHOD_1 ( TYPE_1 event ) { int VAR_1 = ( int ) event . values [ 0 ] - VAR_2 ; if ( VAR_2 == 0 ) { VAR_2 = VAR_1 ; } else if ( VAR_1 > 0 ) { VAR_3 . add ( METHOD_2 ( VAR_4 ) ) ; TYPE_2 . assertTrue ( STRING_1 , VAR_1 >= VAR_5 ) ; VAR_5 = VAR_1 ; } }", "comment": "remove?", "tokenized_comment": ["remove", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 event ) { int VAR_1 = ( int ) event . values [ 0 ] - VAR_2 ; if ( VAR_2 == 0 ) { VAR_2 = VAR_1 ; } else if ( VAR_1 > 0 ) { VAR_3 . add ( METHOD_2 ( VAR_4 ) ) ; TYPE_2 . assertTrue ( STRING_1 , VAR_1 >= VAR_5 ) ; VAR_5 = VAR_1 ; } }", "our_target": "            mInitialStepCount = steps;\n", "our_code": "    public void onStepCounterChanged(SensorEvent event) {\n        int steps = (int) event.values[0] - mInitialStepCount;\n\n        if (mInitialStepCount == 0) { // set the initial number of steps\n<|startfocus|>\n            mInitialStepCount = steps;// - 1; steps = 1;\n<|endfocus|>\n        } else if (steps > 0) {\n            mTimestampsStepCounter.add(checkTimestamp(event.timestamp));\n            Assert.assertTrue(\"Step counter not increased monotonically\", steps >= mStepsDetected);\n            mStepsDetected = steps;\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Step", "Counter", "Changed", "(", "Sensor", "Event", "<|s|>", "event", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "steps", "<|s|>", "=", "<|s|>", "(", "int", ")", "<|s|>", "event", ".", "values", "[", "0", "]", "<|s|>", "-", "<|s|>", "m", "Initial", "Step", "Count", ";", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "m", "Initial", "Step", "Count", "<|s|>", "==", "<|s|>", "0", ")", "<|s|>", "{", "<|s|>", "//", "<|s|>", "set", "<|s|>", "the", "<|s|>", "initial", "<|s|>", "number", "<|s|>", "of", "<|s|>", "steps", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "m", "Initial", "Step", "Count", "<|s|>", "=", "<|s|>", "steps", ";/", "/", "<|s|>", "-", "<|s|>", "1", ";", "<|s|>", "steps", "<|s|>", "=", "<|s|>", "1", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "steps", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Timestamps", "Step", "Counter", ".", "add", "(", "check", "Timestamp", "(", "event", ".", "timestamp", ")", ");", "<|nl|>", "<|12-s|>", "Assert", ".", "assert", "True", "(", "\"", "Step", "<|s|>", "counter", "<|s|>", "not", "<|s|>", "increased", "<|s|>", "monotonically", "\"", ",", "<|s|>", "steps", "<|s|>", ">=", "<|s|>", "m", "Steps", "Detected", ");", "<|nl|>", "<|12-s|>", "m", "Steps", "Detected", "<|s|>", "=", "<|s|>", "steps", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 260, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_893", "comment_id": "d965302b_749f4810", "class_list": ["StepCounterTestActivity"], "func_list": ["public void onClick(View v)", "public long checkTimestamp(long event_timestamp)", "public void onStepCounterChanged(SensorEvent event)", "public void onStepDetectorChanged(SensorEvent event)", "public void beep(int tone)", "public void vibrate()", "protected boolean compareTimestamps()", "public void onAccelerometerChanged(SensorEvent event)", "protected void onResume()", "protected void onPause()"], "prime_var_dic": {"sec": 1, "mAccelerationThresholdForMoveDetection": 1, "numPassedTests": 1, "count": 1, "expected": 2, "detection": 1}}, {"idx": 2894, "status": "update", "global_index": 5048, "project_name": "android_", "written_on": "2016-08-30 12:21:36", "tufano_target": "private void METHOD_1 ( int VAR_1 ) { boolean VAR_2 = VAR_1 == 1 ; for ( int i = 0 ; i < count ; i ++ ) { TYPE_1 VAR_4 = VAR_3 . get ( i ) . get ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_2 ( VAR_2 ) ; } } }", "comment": "What about to use foreach and change it this way?\n\nfor (WeakReference<KeyguardUpdateMonitorCallback> cbRef : mCallbacks) {\n\nKeyguardUpdateMonitorCallback cb = cbRef.get();\n\nif (cb != null) {\n    cb.onDreamingStateChanged(showingDream);\n}\n\n}", "tokenized_comment": ["What", "<|s|>", "about", "<|s|>", "to", "<|s|>", "use", "<|s|>", "foreach", "<|s|>", "and", "<|s|>", "change", "<|s|>", "it", "<|s|>", "this", "<|s|>", "way", "?", "<|nl|>", "<|nl|>", "for", "<|s|>", "(", "Weak", "Reference", "<", "Keyguard", "Update", "Monitor", "Callback", ">", "<|s|>", "cb", "Ref", "<|s|>", ":", "<|s|>", "m", "Callbacks", ")", "<|s|>", "{", "<|nl|>", "<|nl|>", "Keyguard", "Update", "Monitor", "Callback", "<|s|>", "cb", "<|s|>", "=", "<|s|>", "cb", "Ref", ".", "get", "(", ");", "<|nl|>", "<|nl|>", "if", "<|s|>", "(", "cb", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "cb", ".", "on", "Dreaming", "State", "Changed", "(", "showing", "Dream", ");", "<|nl|>", "}", "<|nl|>", "<|nl|>", "}"], "tufano_code": "private void METHOD_1 ( int VAR_1 ) { boolean VAR_2 = VAR_1 == 1 ; for ( int i = 0 ; i < VAR_3 . size ( ) ; i ++ ) { TYPE_1 VAR_4 = VAR_3 . get ( i ) . get ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_2 ( VAR_2 ) ; } } }", "our_target": "        for (int i = 0; i < count; i++) {\n", "our_code": "    private void handleDreamingStateChanged(int dreamStart) {\n        boolean showingDream = dreamStart == 1;\n<|startfocus|>\n        for (int i = 0; i < mCallbacks.size(); i++) {\n<|endfocus|>\n            KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();\n            if (cb != null) {\n                cb.onDreamingStateChanged(showingDream);\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "handle", "Dreaming", "State", "Changed", "(", "int", "<|s|>", "dream", "Start", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "showing", "Dream", "<|s|>", "=", "<|s|>", "dream", "Start", "<|s|>", "==", "<|s|>", "1", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "m", "Callbacks", ".", "size", "(", ");", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "Keyguard", "Update", "Monitor", "Callback", "<|s|>", "cb", "<|s|>", "=", "<|s|>", "m", "Callbacks", ".", "get", "(", "i", ")", ".", "get", "(", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "cb", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "cb", ".", "on", "Dreaming", "State", "Changed", "(", "showing", "Dream", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 965, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3563", "comment_id": "c5967ec8_36c0c89c", "class_list": ["KeyguardUpdateMonitor", "DisplayClientState", "helps", "SimData", "BatteryStatus", "StrongAuthTracker", "will"], "func_list": ["public void handleMessage(Message msg)", "new OnSubscriptionsChangedListener()", "public void onSubscriptionsChanged()", "public synchronized static void setCurrentUser(int currentUser)", "public synchronized static int getCurrentUser()", "public void onTrustChanged(boolean enabled, int userId, int flags)", "protected void handleSimSubscriptionInfoChanged()", "private void handleAirplaneModeChanged()", "List<SubscriptionInfo> getSubscriptionInfo(boolean forceReload)", "public void onTrustManagedChanged(boolean managed, int userId)", "private void onFingerprintAuthenticated(int userId)", "private void handleFingerprintAuthFailed()", "private void handleFingerprintAcquired(int acquireInfo)", "private void handleFingerprintAuthenticated()", "private void handleFingerprintHelp(int msgId, String helpString)", "private void handleFingerprintError(int msgId, String errString)", "private void handleFingerprintLockoutReset()", "private void setFingerprintRunningState(int fingerprintRunningState)", "private void notifyFingerprintRunningStateChanged()", "private void handleFaceUnlockStateChanged(boolean running, int userId)", "public boolean isFaceUnlockRunning(int userId)", "public boolean isFingerprintDetectionRunning()", "private boolean isTrustDisabled(int userId)", "private boolean isFingerprintDisabled(int userId)", "public boolean getUserCanSkipBouncer(int userId)", "public boolean getUserHasTrust(int userId)", "public boolean getUserTrustIsManaged(int userId)", "public boolean isUnlockingWithFingerprintAllowed()", "public StrongAuthTracker getStrongAuthTracker()", "public boolean hasFingerprintUnlockTimedOut(int userId)", "public void reportSuccessfulStrongAuthUnlockAttempt()", "private void scheduleStrongAuthTimeout()", "private void notifyStrongAuthStateChanged(int userId)", "public void onReceive(Context context, Intent intent)", "public void onLockoutReset()", "public void onAuthenticationFailed()", "public void onAuthenticationSucceeded(AuthenticationResult result)", "public void onAuthenticationHelp(int helpMsgId, CharSequence helpString)", "public void onAuthenticationError(int errMsgId, CharSequence errString)", "public void onAuthenticationAcquired(int acquireInfo)", "static SimData fromIntent(Intent intent)", "public String toString()", "public BatteryStatus(int status, int level, int plugged, int health,", "public boolean isPluggedIn()", "public boolean isCharged()", "public boolean isBatteryLow()", "public StrongAuthTracker getStrongAuthTracker()", "public boolean hasUserAuthenticatedSinceBoot()", "public void onStrongAuthRequiredChanged(int userId)", "public static KeyguardUpdateMonitor getInstance(Context context)", "protected void handleStartedWakingUp()", "protected void handleStartedGoingToSleep(int arg1)", "protected void handleFinishedGoingToSleep(int arg1)", "private void handleScreenTurnedOn()", "private void handleScreenTurnedOff()", "private void handleDreamingStateChanged(int dreamStart)", "public void dispatchSetBackground(Bitmap bmp)", "private void handleUserInfoChanged(int userId)", "private KeyguardUpdateMonitor(Context context)", "public void onUserSwitching(int newUserId, IRemoteCallback reply)", "public void onForegroundProfileSwitch(int newProfileId)", "private void updateFingerprintListeningState()", "boolean shouldListenForFingerprint = shouldListenForFingerprint();", "private void startListeningForFingerprint()", "public boolean isUnlockWithFingerprintPossible(int userId)", "private void stopListeningForFingerprint()", "private boolean isDeviceProvisionedInSettingsDb()", "private void watchForDeviceProvisioning()", "public void onChange(boolean selfChange)", "protected void handleDevicePolicyManagerStateChanged()", "protected void handleUserSwitching(int userId, IRemoteCallback reply)", "protected void handleUserSwitchComplete(int userId)", "public void dispatchBootCompleted()", "protected void handleBootCompleted()", "public boolean hasBootCompleted()", "protected void handleDeviceProvisioned()", "protected void handlePhoneStateChanged(String newState)", "protected void handleRingerModeChange(int mode)", "private void handleTimeUpdate()", "private void handleBatteryUpdate(BatteryStatus status)", "private void handleSimStateChange(int subId, int slotId, State state)", "private void handleServiceStateChange(int subId, ServiceState serviceState)", "public void onKeyguardVisibilityChanged(boolean showing)", "private void handleKeyguardReset()", "private void handleKeyguardBouncerChanged(int bouncer)", "private void handleReportEmergencyCallAction()", "private static boolean isBatteryUpdateInteresting(BatteryStatus old, BatteryStatus current)", "public void removeCallback(KeyguardUpdateMonitorCallback callback)", "public void registerCallback(KeyguardUpdateMonitorCallback callback)", "private void sendUpdates(KeyguardUpdateMonitorCallback callback)", "public void sendKeyguardReset()", "public void sendKeyguardBouncerChanged(boolean showingBouncer)", "public void reportSimUnlocked(int subId)", "public void reportEmergencyCallAction(boolean bypassHandler)", "private boolean isDeviceProvisionedInSettingsDb()", "public void clearFailedUnlockAttempts()", "public int getFailedUnlockAttempts(int userId)", "public void reportFailedStrongAuthUnlockAttempt(int userId)", "public void clearFingerprintRecognized()", "public boolean isSimPinVoiceSecure()", "public boolean isSimPinSecure()", "public State getSimState(int subId)", "private boolean refreshSimState(int subId, int slotId)", "public DisplayClientState getCachedDisplayClientState()", "public void dispatchStartedWakingUp()", "public void dispatchStartedGoingToSleep(int why)", "public void dispatchFinishedGoingToSleep(int why)", "public void dispatchScreenTurnedOn()", "public void dispatchScreenTurnedOff()", "public void dispatchDreamingStarted()", "public void dispatchDreamingStopped()", "public boolean isDeviceInteractive()", "public boolean isGoingToSleep()", "public int getNextSubIdForState(State state)", "public SubscriptionInfo getSubscriptionInfoForSubId(int subId)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void handleMessage(Message msg)", "public void handleMessage(Message msg)", "public void handleMessage(Message msg)"], "prime_var_dic": {}}, {"idx": 96075, "status": "update", "global_index": 3985, "project_name": "android_", "written_on": "2017-02-15 18:24:05", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_3 < > ( TYPE_2 . METHOD_2 ( ) ) ; VAR_1 . add ( new TYPE_4 ( STRING_1 , STRING_3 ) ) ; VAR_1 . add ( new TYPE_4 ( STRING_2 , STRING_4 ) ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { for ( TYPE_2 VAR_3 : VAR_1 ) { METHOD_3 ( VAR_2 , VAR_3 ) ; } } }", "comment": "why not also pass a calendarType into the DummyChronology constructor? Currently your test doesn't actually prove that calendarType is not considered before considering id, when comparing.", "tokenized_comment": ["why", "<|s|>", "not", "<|s|>", "also", "<|s|>", "pass", "<|s|>", "a", "<|s|>", "calendar", "Type", "<|s|>", "into", "<|s|>", "the", "<|s|>", "Dummy", "Chronology", "<|s|>", "constructor", "?", "<|s|>", "Currently", "<|s|>", "your", "<|s|>", "test", "<|s|>", "doesn", "'", "t", "<|s|>", "actually", "<|s|>", "prove", "<|s|>", "that", "<|s|>", "calendar", "Type", "<|s|>", "is", "<|s|>", "not", "<|s|>", "considered", "<|s|>", "before", "<|s|>", "considering", "<|s|>", "id", ",", "<|s|>", "when", "<|s|>", "comparing", "."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_3 < > ( TYPE_2 . METHOD_2 ( ) ) ; VAR_1 . add ( new TYPE_4 ( STRING_1 ) ) ; VAR_1 . add ( new TYPE_4 ( STRING_2 ) ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { for ( TYPE_2 VAR_3 : VAR_1 ) { METHOD_3 ( VAR_2 , VAR_3 ) ; } } }", "our_target": "        chronologies.add(new DummyChronology(\"aaa\", \"z aaa\"));\n        chronologies.add(new DummyChronology(\"zzz\", \"a zzz\"));\n", "our_code": "    public void test_compareTo() {\n        Set<Chronology> chronologies = new LinkedHashSet<>(Chronology.getAvailableChronologies());\n<|startfocus|>\n        chronologies.add(new DummyChronology(\"aaa\"));\n        chronologies.add(new DummyChronology(\"zzz\"));\n<|endfocus|>\n\n        // Check for comparison of each chronology with each other (including itself).\n        for (Chronology c1 : chronologies) {\n            for (Chronology c2 : chronologies) {\n                assertComparesAccordingToId(c1, c2);\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "compare", "To", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Set", "<", "Chronology", ">", "<|s|>", "chronologies", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Linked", "Hash", "Set", "<", ">", "(", "Chronology", ".", "get", "Available", "Chronologies", "(", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "chronologies", ".", "add", "(", "new", "<|s|>", "Dummy", "Chronology", "(", "\"", "aaa", "\"", ")", ");", "<|nl|>", "<|8-s|>", "chronologies", ".", "add", "(", "new", "<|s|>", "Dummy", "Chronology", "(", "\"", "zzz", "\"", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Check", "<|s|>", "for", "<|s|>", "comparison", "<|s|>", "of", "<|s|>", "each", "<|s|>", "chronology", "<|s|>", "with", "<|s|>", "each", "<|s|>", "other", "<|s|>", "(", "including", "<|s|>", "itself", ")", ".", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "Chronology", "<|s|>", "c", "1", "<|s|>", ":", "<|s|>", "chronologies", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "for", "<|s|>", "(", "Chronology", "<|s|>", "c", "2", "<|s|>", ":", "<|s|>", "chronologies", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "assert", "Compares", "According", "To", "Id", "(", "c", "1", ",", "<|s|>", "c", "2", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 42, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_3273", "comment_id": "e34d77e6_4d378e68", "class_list": ["ChronologyTest", "DummyChronology"], "func_list": ["public void test_compareTo()", "public void assertComparesAccordingToId(Chronology c1, Chronology c2)", "public void test_compareTo_null()", "public DummyChronology(String id)", "public String getId()", "public String getCalendarType()", "public ChronoLocalDate date(int prolepticYear, int month, int dayOfMonth)", "public ChronoLocalDate dateYearDay(int prolepticYear, int dayOfYear)", "public ChronoLocalDate dateEpochDay(long epochDay)", "public boolean isLeapYear(long prolepticYear)", "public ChronoLocalDate date(int prolepticYear, int month, int dayOfMonth)", "public Era eraOf(int eraValue)", "public List<Era> eras()", "public ValueRange range(ChronoField field)"], "prime_var_dic": {}}, {"idx": 30213, "status": "update", "global_index": 9347, "project_name": "android_", "written_on": "2015-09-16 15:11:25", "tufano_target": "public TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = VAR_3 ; } for ( TYPE_1 VAR_4 : VAR_2 ) { if ( TYPE_4 . equals ( VAR_1 , VAR_4 . METHOD_3 ( ) ) ) { return VAR_4 ; } } return null ; }", "comment": "Could you hide this in a subclass so it doesn't get loaded unless someone calls getKnownLog", "tokenized_comment": ["Could", "<|s|>", "you", "<|s|>", "hide", "<|s|>", "this", "<|s|>", "in", "<|s|>", "a", "<|s|>", "subclass", "<|s|>", "so", "<|s|>", "it", "<|s|>", "doesn", "'", "t", "<|s|>", "get", "<|s|>", "loaded", "<|s|>", "unless", "<|s|>", "someone", "<|s|>", "calls", "<|s|>", "get", "Known", "Log"], "tufano_code": "public TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { return TYPE_2 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; }", "our_target": "        if (knownLogs == null) {\n            knownLogs = KnownLogs.DEFAULT_KNOWN_LOGS;\n        }\n        for (CTLogInfo log: knownLogs) {\n            if (Arrays.equals(logId, log.getID())) {\n                return log;\n            }\n        }\n        return null;\n", "our_code": "    public CTLogInfo getKnownLog(byte[] logId) {\n<|startfocus|>\n        return KNOWN_LOGS.get(ByteBuffer.wrap(logId));\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "CTLog", "Info", "<|s|>", "get", "Known", "Log", "(", "byte", "[", "]", "<|s|>", "log", "Id", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "KNOWN", "_", "LOGS", ".", "get", "(", "Byte", "Buffer", ".", "wrap", "(", "log", "Id", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 84, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4742", "comment_id": "a9f4cf41_e2888816", "class_list": ["CTLogStoreImpl"], "func_list": ["public CTLogInfo getKnownLog(byte[] logId)"], "prime_var_dic": {"implements": 1, "String": 7, "Log": 1, "log": 3}}, {"idx": 47420, "status": "update", "global_index": 13521, "project_name": "android_", "written_on": "2014-12-10 14:20:51", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( METHOD_2 ( ) ) { if ( VAR_1 . METHOD_3 ( this ) ) { return VAR_2 ; } else if ( VAR_1 . METHOD_4 ( ) ) { return VAR_5 ; } return VAR_5 ; } return VAR_6 ; }", "comment": "I probably should have read the last change.\n\nI get from the surrounding context that if we expect success but we don't get it, that's a failure now if (matters())\n\nI don't get the comment about \"created from a file\". Something is missing to help the reader make the connection between the code and the comment.", "tokenized_comment": ["I", "<|s|>", "probably", "<|s|>", "should", "<|s|>", "have", "<|s|>", "read", "<|s|>", "the", "<|s|>", "last", "<|s|>", "change", ".", "<|nl|>", "<|nl|>", "I", "<|s|>", "get", "<|s|>", "from", "<|s|>", "the", "<|s|>", "surrounding", "<|s|>", "context", "<|s|>", "that", "<|s|>", "if", "<|s|>", "we", "<|s|>", "expect", "<|s|>", "success", "<|s|>", "but", "<|s|>", "we", "<|s|>", "don", "'", "t", "<|s|>", "get", "<|s|>", "it", ",", "<|s|>", "that", "'", "s", "<|s|>", "a", "<|s|>", "failure", "<|s|>", "now", "<|s|>", "if", "<|s|>", "(", "matters", "(", ")", ")", "<|nl|>", "<|nl|>", "I", "<|s|>", "don", "'", "t", "<|s|>", "get", "<|s|>", "the", "<|s|>", "comment", "<|s|>", "about", "<|s|>", "\"", "created", "<|s|>", "from", "<|s|>", "a", "<|s|>", "file", "\"", ".", "<|s|>", "Something", "<|s|>", "is", "<|s|>", "missing", "<|s|>", "to", "<|s|>", "help", "<|s|>", "the", "<|s|>", "reader", "<|s|>", "make", "<|s|>", "the", "<|s|>", "connection", "<|s|>", "between", "<|s|>", "the", "<|s|>", "code", "<|s|>", "and", "<|s|>", "the", "<|s|>", "comment", "."], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( METHOD_2 ( ) ) { if ( VAR_1 . METHOD_3 ( this ) ) { return VAR_2 ; } else if ( VAR_1 == VAR_3 ) { return VAR_4 ; } return VAR_5 ; } return VAR_6 ; }", "our_target": "            } else if (expectation.getIsFromExpectationFile()) {\n                // If the expectation is created from a file, make this a warning, to\n                // mimic CTS's behavior.\n                return ResultValue.WARNING;\n", "our_code": "    public ResultValue getResultValue(Expectation expectation) {\n        if (matters()) {\n            if (expectation.matches(this)) {\n                return ResultValue.OK;\n<|startfocus|>\n            } else if (expectation == Expectation.SUCCESS) {\n                return ResultValue.FAIL;\n<|endfocus|>\n            }\n            // If the expectation is created from a file, make this a warning, to\n            // mimic CTS's behavior.\n            return ResultValue.WARNING;\n        }\n        return ResultValue.IGNORE;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Result", "Value", "<|s|>", "get", "Result", "Value", "(", "Expectation", "<|s|>", "expectation", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "matters", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "expectation", ".", "matches", "(", "this", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Result", "Value", ".", "OK", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "expectation", "<|s|>", "==", "<|s|>", "Expectation", ".", "SUCCESS", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "Result", "Value", ".", "FAIL", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "//", "<|s|>", "If", "<|s|>", "the", "<|s|>", "expectation", "<|s|>", "is", "<|s|>", "created", "<|s|>", "from", "<|s|>", "a", "<|s|>", "file", ",", "<|s|>", "make", "<|s|>", "this", "<|s|>", "a", "<|s|>", "warning", ",", "<|s|>", "to", "<|nl|>", "<|12-s|>", "//", "<|s|>", "mimic", "<|s|>", "CTS", "'", "s", "<|s|>", "behavior", ".", "<|nl|>", "<|12-s|>", "return", "<|s|>", "Result", "Value", ".", "WARNING", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "Result", "Value", ".", "IGNORE", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 138, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4802", "comment_id": "e4fdf273_d21aa409", "class_list": ["Outcome"], "func_list": ["public Outcome(String outcomeName, Result result, List<String> outputLines)", "private String sanitizeOutputLines(List<String> outputLines)", "private String sanitizeOutputLines(List<String> outputLines)", "public Date getDate()", "public String getName()", "public Result getResult()", "public String getOutput()", "public List<String> getOutputLines()", "private static List<String> throwableToLines(Throwable t)", "public String getSuiteName()", "public String getTestName()", "int split = split(outcomeName);", "private boolean matters()", "public ResultValue getResultValue(Expectation expectation)", "public String getPath()", "@Override public boolean equals(Object o)", "@Override public int hashCode()", "@Override public String toString()"], "prime_var_dic": {"Outcome": 1, "outcomeName": 1, "result": 1, "output": 1, "date": 1}}, {"idx": 439, "status": "update", "global_index": 20011, "project_name": "android_", "written_on": "2012-10-12 03:30:56", "tufano_target": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } if ( METHOD_2 ( ) <= VAR_1 . x || VAR_1 . METHOD_2 ( ) <= x || METHOD_3 ( ) <= VAR_1 . y || VAR_1 . METHOD_3 ( ) <= y ) { return false ; } return true ; }", "comment": "for symmetry with contains(), you might want to check for null.", "tokenized_comment": ["for", "<|s|>", "symmetry", "<|s|>", "with", "<|s|>", "contains", "(", ")", ",", "<|s|>", "you", "<|s|>", "might", "<|s|>", "want", "<|s|>", "to", "<|s|>", "check", "<|s|>", "for", "<|s|>", "null", "."], "tufano_code": "public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) <= VAR_1 . x || VAR_1 . METHOD_2 ( ) <= x || METHOD_3 ( ) <= VAR_1 . y || VAR_1 . METHOD_3 ( ) <= y ) { return false ; } return true ; }", "our_target": "    public boolean intersects(@Nullable Rect other) {\n        if (other == null) {\n            return false;\n        }\n", "our_code": "<|startfocus|>\n    public boolean intersects(Rect other) {\n<|endfocus|>\n        if (x2() <= other.x\n                || other.x2() <= x\n                || y2() <= other.y\n                || other.y2() <= y) {\n            return false;\n        }\n\n        return true;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "intersects", "(", "Rect", "<|s|>", "other", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "x", "2", "(", ")", "<|s|>", "<=", "<|s|>", "other", ".", "x", "<|nl|>", "<|16-s|>", "||", "<|s|>", "other", ".", "x", "2", "(", ")", "<|s|>", "<=", "<|s|>", "x", "<|nl|>", "<|16-s|>", "||", "<|s|>", "y", "2", "(", ")", "<|s|>", "<=", "<|s|>", "other", ".", "y", "<|nl|>", "<|16-s|>", "||", "<|s|>", "other", ".", "y", "2", "(", ")", "<|s|>", "<=", "<|s|>", "y", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 97, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3682", "comment_id": "AAAKFn%2F%2F%2FKg%3D", "class_list": ["Rect"], "func_list": ["public Rect()", "public Rect set(int x, int y, int w, int h)", "public Rect copy()", "public boolean isValid()", "public boolean contains(int x, int y)", "public boolean intersects(Rect other)", "public Rect moveTo(int x, int y)", "public Rect offsetBy(int x, int y)", "public Point getCenter()", "public Point getTopLeft()", "public Point getBottomLeft()", "public Point getTopRight()", "public Point getBottomRight()", "public int x2()", "public int y2()", "public int centerX()", "public int centerY()", "public String toString()", "public boolean equals(Object obj)", "public int hashCode()", "public Point center()"], "prime_var_dic": {"rectangle": 1}}, {"idx": 86685, "status": "update", "global_index": 13934, "project_name": "android_", "written_on": "2015-01-21 00:28:48", "tufano_target": "private static void METHOD_1 ( int VAR_1 , TYPE_1 context , TYPE_2 node ) { if ( ( VAR_1 & VAR_2 ) != 0 ) { context . METHOD_2 ( VAR_3 , node , context . METHOD_3 ( node . METHOD_4 ( ) . METHOD_5 ( ) ) , STRING_2 + STRING_3 + STRING_4 ) ; } }", "comment": "pass in \"node\" as a parameter before the context.getLocation call here. That node is used by lint to look for @SuppressLint annotations etc.\n\nAlso, instead of passing in \"node\" as the location node, you may want to use context.getLocation(node.astArguments().last()) \ninstead, since it's the second parameter (where the flags are being passed) that we want to call the user's attention to.", "tokenized_comment": ["pass", "<|s|>", "in", "<|s|>", "\"", "node", "\"", "<|s|>", "as", "<|s|>", "a", "<|s|>", "parameter", "<|s|>", "before", "<|s|>", "the", "<|s|>", "context", ".", "get", "Location", "<|s|>", "call", "<|s|>", "here", ".", "<|s|>", "That", "<|s|>", "node", "<|s|>", "is", "<|s|>", "used", "<|s|>", "by", "<|s|>", "lint", "<|s|>", "to", "<|s|>", "look", "<|s|>", "for", "<|s|>", "@", "Suppress", "Lint", "<|s|>", "annotations", "<|s|>", "etc", ".", "<|nl|>", "<|nl|>", "Also", ",", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "passing", "<|s|>", "in", "<|s|>", "\"", "node", "\"", "<|s|>", "as", "<|s|>", "the", "<|s|>", "location", "<|s|>", "node", ",", "<|s|>", "you", "<|s|>", "may", "<|s|>", "want", "<|s|>", "to", "<|s|>", "use", "<|s|>", "context", ".", "get", "Location", "(", "node", ".", "ast", "Arguments", "(", ")", ".", "last", "(", ")", ")", "<|s|>", "<|nl|>", "instead", ",", "<|s|>", "since", "<|s|>", "it", "'", "s", "<|s|>", "the", "<|s|>", "second", "<|s|>", "parameter", "<|s|>", "(", "where", "<|s|>", "the", "<|s|>", "flags", "<|s|>", "are", "<|s|>", "being", "<|s|>", "passed", ")", "<|s|>", "that", "<|s|>", "we", "<|s|>", "want", "<|s|>", "to", "<|s|>", "call", "<|s|>", "the", "<|s|>", "user", "'", "s", "<|s|>", "attention", "<|s|>", "to", "."], "tufano_code": "private static void METHOD_1 ( int VAR_1 , TYPE_1 context , TYPE_2 node ) { if ( ( VAR_1 & VAR_2 ) != 0 ) { context . METHOD_2 ( VAR_3 , context . METHOD_3 ( node ) , STRING_1 ) ; } }", "our_target": "            context.report(ISSUE, node, context.getLocation(node.astArguments().last()),\n                \"Reading app signatures from getPackageInfo: The app signatures \"\n                    + \"could be exploited if not validated properly; \"\n                    + \"see issue explanation for details.\");\n", "our_code": "    private static void maybeReportIssue(\n            int flagValue, JavaContext context, MethodInvocation node) {\n        if ((flagValue & GET_SIGNATURES_FLAG) != 0) {\n<|startfocus|>\n            context.report(ISSUE, context.getLocation(node),\n                    \"App signatures could potentially be exploited.\");\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "void", "<|s|>", "maybe", "Report", "Issue", "(", "<|nl|>", "<|12-s|>", "int", "<|s|>", "flag", "Value", ",", "<|s|>", "Java", "Context", "<|s|>", "context", ",", "<|s|>", "Method", "Invocation", "<|s|>", "node", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "(", "flag", "Value", "<|s|>", "&", "<|s|>", "GET", "_", "SIGNATURES", "_", "FLAG", ")", "<|s|>", "!=", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "context", ".", "report", "(", "ISSUE", ",", "<|s|>", "context", ".", "get", "Location", "(", "node", ")", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "\"", "App", "<|s|>", "signatures", "<|s|>", "could", "<|s|>", "potentially", "<|s|>", "be", "<|s|>", "exploited", ".", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 94, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2896", "comment_id": "ab074b51_647b32ac", "class_list": ["GetSignaturesDetector"], "func_list": ["public List<String> getApplicableMethodNames()", "public void visitMethod(@NonNull JavaContext context, @Nullable AstVisitor visitor,", "private static void maybeReportIssue(", "private static int calculateValue(JavaContext context, Expression expression)", "private static boolean isStringParameter("], "prime_var_dic": {"Exploit": 1, "String": 2, "int": 1}}, {"idx": 80899, "status": "update", "global_index": 13809, "project_name": "android_", "written_on": "2015-01-19 12:59:17", "tufano_target": "private static boolean METHOD_1 ( TYPE_1 < String > VAR_1 , TYPE_1 < String > VAR_2 ) { if ( VAR_1 . size ( ) != VAR_2 . size ( ) ) { return false ; } TYPE_2 < String > VAR_3 = VAR_1 . iterator ( ) ; for ( String VAR_4 : VAR_2 ) { String VAR_5 = VAR_3 . METHOD_2 ( ) ; if ( VAR_4 . equals ( STRING_1 ) || VAR_5 . equals ( STRING_1 ) || ! VAR_4 . equals ( VAR_5 ) ) { return false ; } } return true ; }", "comment": "digest.equals(\"\") || digestToCompare.equals(\"\")\n\nIf at least one lib digest is unknown, return false to be able to recompile, no?", "tokenized_comment": ["digest", ".", "equals", "(", "\"", "\"", ")", "<|s|>", "||", "<|s|>", "digest", "To", "Compare", ".", "equals", "(", "\"", "\"", ")", "<|nl|>", "<|nl|>", "If", "<|s|>", "at", "<|s|>", "least", "<|s|>", "one", "<|s|>", "lib", "<|s|>", "digest", "<|s|>", "is", "<|s|>", "unknown", ",", "<|s|>", "return", "<|s|>", "false", "<|s|>", "to", "<|s|>", "be", "<|s|>", "able", "<|s|>", "to", "<|s|>", "recompile", ",", "<|s|>", "no", "?"], "tufano_code": "private static boolean METHOD_1 ( TYPE_1 < String > VAR_1 , TYPE_1 < String > VAR_2 ) { if ( VAR_1 . size ( ) != VAR_2 . size ( ) ) { return false ; } TYPE_2 < String > VAR_3 = VAR_1 . iterator ( ) ; for ( String VAR_4 : VAR_2 ) { String VAR_5 = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_4 . equals ( STRING_1 ) && VAR_5 . equals ( STRING_1 ) ) || ! VAR_4 . equals ( VAR_5 ) ) { return false ; } } return true ; }", "our_target": "      if (digest.equals(\"\") || digestToCompare.equals(\"\") || !digest.equals(digestToCompare)) {\n", "our_code": "  private static boolean compare(@Nonnull List<String> digests1, @Nonnull List<String> digests2) {\n    if (digests1.size() != digests2.size()) {\n      return false;\n    }\n\n    Iterator<String> digestToCompareIt = digests1.iterator();\n\n    for (String digest : digests2) {\n      String digestToCompare = digestToCompareIt.next();\n<|startfocus|>\n      if ((digest.equals(\"\") && digestToCompare.equals(\"\")) || !digest.equals(digestToCompare)) {\n<|endfocus|>\n        return false;\n      }\n    }\n    return true;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "compare", "(", "@", "Nonnull", "<|s|>", "List", "<", "String", ">", "<|s|>", "digests", "1", ",", "<|s|>", "@", "Nonnull", "<|s|>", "List", "<", "String", ">", "<|s|>", "digests", "2", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "digests", "1", ".", "size", "(", ")", "<|s|>", "!=", "<|s|>", "digests", "2", ".", "size", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "Iterator", "<", "String", ">", "<|s|>", "digest", "To", "Compare", "It", "<|s|>", "=", "<|s|>", "digests", "1", ".", "iterator", "(", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "String", "<|s|>", "digest", "<|s|>", ":", "<|s|>", "digests", "2", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "digest", "To", "Compare", "<|s|>", "=", "<|s|>", "digest", "To", "Compare", "It", ".", "next", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "(", "digest", ".", "equals", "(", "\"", "\"", ")", "<|s|>", "&&", "<|s|>", "digest", "To", "Compare", ".", "equals", "(", "\"", "\"", ")", ")", "<|s|>", "||", "<|s|>", "!", "digest", ".", "equals", "(", "digest", "To", "Compare", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 95, "base_patch_number": 9, "changed_patch_number": 11, "code_file_name": "android_2188", "comment_id": "cbd63fdb_d4a75218", "class_list": ["LibraryDependencies"], "func_list": ["public void addImportedLibraries(@Nonnull List<InputLibrary> importedLibraries)", "public void addLibrariesOnClasspath(@Nonnull List<InputLibrary> librariesOnClasspath)", "public void write(@Nonnull PrintStream ps)", "public boolean hasSameLibraryOnClasspath(@Nonnull LibraryDependencies libraryDependencies)", "public boolean hasSameImportedLibrary(@Nonnull LibraryDependencies libraryDependencies)", "private static boolean compare(@Nonnull List<String> digests1, @Nonnull List<String> digests2)"], "prime_var_dic": {}}, {"idx": 72217, "status": "update", "global_index": 15623, "project_name": "android_", "written_on": "2015-02-17 12:21:39", "tufano_target": "private void METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = STRING_1 ; for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) { String VAR_4 = VAR_3 . getName ( ) ; if ( VAR_4 . equals ( VAR_5 ) ) { VAR_6 . get ( VAR_3 . METHOD_3 ( VAR_7 ) ) . METHOD_4 ( VAR_2 ) ; } else if ( TYPE_2 . equals ( VAR_4 ) ) { VAR_2 = METHOD_5 ( VAR_3 ) ; } } }", "comment": "It's usually a good idea to reverse the comparison of strings and constants when using equals.\n\nTAG_ATTR.equals(subTagName) will also account for the case where subTagName is null", "tokenized_comment": ["It", "'", "s", "<|s|>", "usually", "<|s|>", "a", "<|s|>", "good", "<|s|>", "idea", "<|s|>", "to", "<|s|>", "reverse", "<|s|>", "the", "<|s|>", "comparison", "<|s|>", "of", "<|s|>", "strings", "<|s|>", "and", "<|s|>", "constants", "<|s|>", "when", "<|s|>", "using", "<|s|>", "equals", ".", "<|nl|>", "<|nl|>", "TAG", "_", "ATTR", ".", "equals", "(", "sub", "Tag", "Name", ")", "<|s|>", "will", "<|s|>", "also", "<|s|>", "account", "<|s|>", "for", "<|s|>", "the", "<|s|>", "case", "<|s|>", "where", "<|s|>", "sub", "Tag", "Name", "<|s|>", "is", "<|s|>", "null"], "tufano_code": "private void METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = STRING_1 ; for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) { String VAR_4 = VAR_3 . getName ( ) ; if ( VAR_4 . equals ( VAR_5 ) ) { VAR_6 . get ( VAR_3 . METHOD_3 ( VAR_7 ) ) . METHOD_4 ( VAR_2 ) ; } if ( VAR_4 . equals ( TYPE_2 ) ) { VAR_2 = METHOD_5 ( VAR_3 ) ; } } }", "our_target": "      } else\n      if (TAG_EAT_COMMENT.equals(subTagName)) {\n", "our_code": "  private void parseAndAddAttrGroups(XmlTag tag) {\n    String lastEatComment = \"\";\n    for (XmlTag subTag : tag.getSubTags()) {\n      String subTagName = subTag.getName();\n      if (subTagName.equals(TAG_ATTR)) {\n        myAttrs.get(subTag.getAttributeValue(ATTR_NAME)).setAttrGroup(lastEatComment);\n<|startfocus|>\n      }\n      if (subTagName.equals(TAG_EAT_COMMENT)) {\n<|endfocus|>\n        lastEatComment = getCommentBeforeEatComment(subTag);\n      }\n    }\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "void", "<|s|>", "parse", "And", "Add", "Attr", "Groups", "(", "Xml", "Tag", "<|s|>", "tag", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "last", "Eat", "Comment", "<|s|>", "=", "<|s|>", "\"", "\"", ";", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Xml", "Tag", "<|s|>", "sub", "Tag", "<|s|>", ":", "<|s|>", "tag", ".", "get", "Sub", "Tags", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "sub", "Tag", "Name", "<|s|>", "=", "<|s|>", "sub", "Tag", ".", "get", "Name", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "sub", "Tag", "Name", ".", "equals", "(", "TAG", "_", "ATTR", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "my", "Attrs", ".", "get", "(", "sub", "Tag", ".", "get", "Attribute", "Value", "(", "ATTR", "_", "NAME", ")", ")", ".", "set", "Attr", "Group", "(", "last", "Eat", "Comment", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "sub", "Tag", "Name", ".", "equals", "(", "TAG", "_", "EAT", "_", "COMMENT", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "last", "Eat", "Comment", "<|s|>", "=", "<|s|>", "get", "Comment", "Before", "Eat", "Comment", "(", "sub", "Tag", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 241, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_728", "comment_id": "2b8a802f_6d95b524", "class_list": ["AttributeDefinitionsImpl"], "func_list": ["public AttributeDefinitionsImpl(@NotNull XmlFile... files)", "private void addAttrsFromFile(XmlFile file)", "private AttributeDefinition parseAttrTag(XmlTag tag, @Nullable String parentStyleable)", "private static void parseDocComment(XmlTag tag, AttributeDefinition def, @Nullable String styleable)", "private String getCommentBeforeEatComment(XmlTag tag)", "private static List<AttributeFormat> parseAttrFormat(String formatString)", "private void parseAndAddValues(AttributeDefinition def, XmlTag[] values)", "private void parseDeclareStyleableTag(XmlTag tag, Map<StyleableDefinitionImpl, String[]> parentMap)", "private void parseStyleableAttr(StyleableDefinitionImpl def, XmlTag tag)", "private void parseAndAddAttrGroups(XmlTag tag)", "public StyleableDefinitionImpl getStyleableByName(@NotNull String name)", "public Set<String> getAttributeNames()", "public AttributeDefinition getAttrDefByName(@NotNull String name)", "public String getAttrGroupByName(@NotNull String name)", "public StyleableDefinition[] getStateStyleables()"], "prime_var_dic": {"implements": 1}}, {"idx": 88238, "status": "update", "global_index": 17495, "project_name": "android_", "written_on": "2012-05-02 19:56:51", "tufano_target": "public static double METHOD_1 ( int VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) || VAR_1 < - INT_1 || VAR_1 > INT_1 ) { throw new TYPE_2 ( STRING_1 + VAR_1 ) ; } return ( ( double ) VAR_1 ) / ( INT_2 * INT_3 ) ; }", "comment": "Please add a space after the double slash", "tokenized_comment": ["Please", "<|s|>", "add", "<|s|>", "a", "<|s|>", "space", "<|s|>", "after", "<|s|>", "the", "<|s|>", "double", "<|s|>", "slash"], "tufano_code": "public static double METHOD_1 ( int VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) || VAR_1 < - INT_1 || VAR_1 > INT_1 ) { throw new TYPE_2 ( STRING_1 + VAR_1 ) ; } return ( ( double ) VAR_1 ) / ( INT_2 * INT_3 ) ; }", "our_target": "            // Invalid value\n", "our_code": "    public static double convertQuartSecToDecDegrees(int quartSec){\n        if(Double.isNaN(quartSec) || quartSec < -2592000 || quartSec > 2592000){\n<|startfocus|>\n            //Invalid value\n<|endfocus|>\n            throw new IllegalArgumentException(\"Invalid coordiante value:\" + quartSec);\n        }\n        return ((double)quartSec) / (3600 * 4);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "double", "<|s|>", "convert", "Quart", "Sec", "To", "Dec", "Degrees", "(", "int", "<|s|>", "quart", "Sec", ")", "{", "<|nl|>", "<|8-s|>", "if", "(", "Double", ".", "is", "Na", "N", "(", "quart", "Sec", ")", "<|s|>", "||", "<|s|>", "quart", "Sec", "<|s|>", "<", "<|s|>", "-", "2592000", "<|s|>", "||", "<|s|>", "quart", "Sec", "<|s|>", ">", "<|s|>", "2592000", ")", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "//", "Invalid", "<|s|>", "value", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Invalid", "<|s|>", "coordiante", "<|s|>", "value", ":", "\"", "<|s|>", "+", "<|s|>", "quart", "Sec", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "(", "(", "double", ")", "quart", "Sec", ")", "<|s|>", "/", "<|s|>", "(", "3600", "<|s|>", "*", "<|s|>", "4", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 229, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4882", "comment_id": "AAAFK3%2F%2F%2Fuk%3D", "class_list": ["CdmaCellLocation"], "func_list": ["public CdmaCellLocation()", "public int getBaseStationId()", "public int getBaseStationLatitude()", "public int getBaseStationLongitude()", "public int getSystemId()", "public int getNetworkId()", "public void setStateInvalid()", "public void setCellLocationData(int baseStationId, int baseStationLatitude,", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "private static boolean equalsHandlesNulls(Object a, Object b)", "public void fillInNotifierBundle(Bundle bundleToFill)", "public boolean isEmpty()", "public static double convertQuartSecToDecDegrees(int quartSec)"], "prime_var_dic": {"int": 1, "location": 2, "obj": 2, "notifier": 1}}, {"idx": 70399, "status": "update", "global_index": 6778, "project_name": "android_", "written_on": "2016-06-07 14:50:03", "tufano_target": "private void METHOD_1 ( String fileName , byte [ ] VAR_1 ) { try ( TYPE_1 VAR_2 = METHOD_2 ( fileName ) ) { int VAR_4 = 0 ; while ( VAR_4 < VAR_1 . length ) { int n = VAR_2 . METHOD_3 ( VAR_1 , VAR_4 , VAR_1 . length - VAR_4 ) ; if ( n <= 0 ) { throw new TYPE_3 ( STRING_1 + fileName ) ; } VAR_4 += n ; } } catch ( TYPE_2 VAR_3 ) { throw new TYPE_3 ( STRING_1 + fileName , VAR_3 ) ; } }", "comment": "this is an infinite loop if fis.read() returns -1.", "tokenized_comment": ["this", "<|s|>", "is", "<|s|>", "an", "<|s|>", "infinite", "<|s|>", "loop", "<|s|>", "if", "<|s|>", "fis", ".", "read", "(", ")", "<|s|>", "returns", "<|s|>", "-", "1", "."], "tufano_code": "private void METHOD_1 ( String fileName , byte [ ] VAR_1 ) { try ( TYPE_1 VAR_2 = METHOD_2 ( fileName ) ) { int n = 0 ; while ( n < VAR_1 . length ) { n += VAR_2 . METHOD_3 ( VAR_1 , n , VAR_1 . length - n ) ; } } catch ( TYPE_2 VAR_3 ) { throw new TYPE_3 ( STRING_1 + fileName , VAR_3 ) ; } }", "our_target": "            int numBytes = 0;\n            while (numBytes < bytes.length) {\n                int n = fis.read(bytes, numBytes, bytes.length - numBytes);\n                if (n <= 0) {\n                    throw new RuntimeException(\"Couldn't read from \" + fileName);\n                }\n                numBytes += n;\n", "our_code": "    private void readBytesFromFile(String fileName, byte[] bytes) {\n        try (FileInputStream fis = openFileInput(fileName)) {\n<|startfocus|>\n            int n = 0;\n            while (n < bytes.length) {\n                n += fis.read(bytes, n, bytes.length - n);\n<|endfocus|>\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(\"Couldn't read from \" + fileName, e);\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "read", "Bytes", "From", "File", "(", "String", "<|s|>", "file", "Name", ",", "<|s|>", "byte", "[", "]", "<|s|>", "bytes", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "(", "File", "Input", "Stream", "<|s|>", "fis", "<|s|>", "=", "<|s|>", "open", "File", "Input", "(", "file", "Name", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "int", "<|s|>", "n", "<|s|>", "=", "<|s|>", "0", ";", "<|nl|>", "<|12-s|>", "while", "<|s|>", "(", "n", "<|s|>", "<", "<|s|>", "bytes", ".", "length", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "n", "<|s|>", "+=", "<|s|>", "fis", ".", "read", "(", "bytes", ",", "<|s|>", "n", ",", "<|s|>", "bytes", ".", "length", "<|s|>", "-", "<|s|>", "n", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "\"", "Couldn", "'", "t", "<|s|>", "read", "<|s|>", "from", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "file", "Name", ",", "<|s|>", "e", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 272, "base_patch_number": 9, "changed_patch_number": 10, "code_file_name": "android_3704", "comment_id": "03db203a_fda5e756", "class_list": ["({@link", "BrokenKeyDerivationActivity"], "func_list": ["private static SecretKey deriveKeyInsecurely(String password, int keySizeInBytes)", "private SecretKey deriveKeySecurely(String password, int keySizeInBytes)", "private String retrieveData(String password)", "public void onCreate(Bundle savedInstanceState)", "private static byte[] encryptOrDecrypt(", "private static byte[] encryptData(byte[] data, byte[] iv, SecretKey key)", "private static byte[] decryptData(byte[] data, byte[] iv, SecretKey key)", "private void cleanRoomStart()", "private boolean isDataStoredWithInsecureKey()", "private byte[] retrieveIv()", "private byte[] retrieveSalt()", "private byte[] retrieveEncryptedData()", "private void storeDataEncryptedWithSecureKey(byte[] encryptedData)", "private void readFromFileOrCreateRandom(String fileName, byte[] bytes)", "private boolean fileExists(String fileName)", "private void removeFile(String fileName)", "private void writeToFile(String fileName, byte[] bytes)", "private void readBytesFromFile(String fileName, byte[] bytes)"], "prime_var_dic": {"key": 1, "your": 1, "int": 2, "String": 1}}, {"idx": 47629, "status": "update", "global_index": 15502, "project_name": "android_", "written_on": "2015-02-18 19:32:10", "tufano_target": "private static TYPE_1 METHOD_1 ( TYPE_2 source , int VAR_1 ) { TYPE_2 VAR_3 = new TYPE_2 ( source , STRING_1 ) ; return new TYPE_1 ( VAR_3 . METHOD_3 ( ) , STRING_2 , String . METHOD_6 ( VAR_1 ) ) . METHOD_7 ( source ) ; }", "comment": "nit: This probably should be \"path\" instead?", "tokenized_comment": ["nit", ":", "<|s|>", "This", "<|s|>", "probably", "<|s|>", "should", "<|s|>", "be", "<|s|>", "\"", "path", "\"", "<|s|>", "instead", "?"], "tufano_code": "private static TYPE_1 METHOD_1 ( TYPE_2 source , int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( new TYPE_2 ( source , STRING_1 ) . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( source ) ; VAR_2 . METHOD_5 ( STRING_2 , String . METHOD_6 ( VAR_1 ) ) ; return VAR_2 ; }", "our_target": "    File batFile = new File(source, \"silent_install.bat\");\n    return new GeneralCommandLine(batFile.getAbsolutePath(), \"-m\", String.valueOf(memorySize)).withWorkDirectory(source);\n", "our_code": "  private static GeneralCommandLine getWindowsHaxmInstallCommandLine(File source, int memorySize) {\n<|startfocus|>\n    // TODO\n    GeneralCommandLine commandLine = new GeneralCommandLine();\n    commandLine.setExePath(new File(source, \"silent_install.bat\").getAbsolutePath());\n    commandLine.setWorkDirectory(source);\n    commandLine.addParameters(\"-m\", String.valueOf(memorySize));\n    return commandLine;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "General", "Command", "Line", "<|s|>", "get", "Windows", "Haxm", "Install", "Command", "Line", "(", "File", "<|s|>", "source", ",", "<|s|>", "int", "<|s|>", "memory", "Size", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", "<|nl|>", "<|4-s|>", "General", "Command", "Line", "<|s|>", "command", "Line", "<|s|>", "=", "<|s|>", "new", "<|s|>", "General", "Command", "Line", "(", ");", "<|nl|>", "<|4-s|>", "command", "Line", ".", "set", "Exe", "Path", "(", "new", "<|s|>", "File", "(", "source", ",", "<|s|>", "\"", "silent", "_", "install", ".", "bat", "\"", ")", ".", "get", "Absolute", "Path", "(", ")", ");", "<|nl|>", "<|4-s|>", "command", "Line", ".", "set", "Work", "Directory", "(", "source", ");", "<|nl|>", "<|4-s|>", "command", "Line", ".", "add", "Parameters", "(", "\"", "-", "m", "\"", ",", "<|s|>", "String", ".", "value", "Of", "(", "memory", "Size", ")", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "command", "Line", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 85, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_619", "comment_id": "0b993cf9_dce34d23", "class_list": ["Haxm"], "func_list": ["public Haxm(ScopedStateStore.Key<Boolean> isCustomInstall)", "private static GeneralCommandLine getMacHaxmInstallCommandLine(File source, int memorySize)", "private static String getAbsolutePathString(File source, String filename)", "private static GeneralCommandLine getWindowsHaxmInstallCommandLine(File source, int memorySize)", "private static int getRecommendedMemoryAllocation()", "public static long getMemorySize()", "public Set<DownloadableFileDescription> getFilesToDownloadAndExpand()", "public void init(ScopedStateStore state)", "public DynamicWizardStep[] createSteps()", "else if (SystemInfo.isWindows)"], "prime_var_dic": {"ScopedStateStore": 2}}, {"idx": 92922, "status": "update", "global_index": 16858, "project_name": "android_", "written_on": "2015-07-07 10:46:43", "tufano_target": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , true ) ; if ( VAR_2 == null ) { return TYPE_6 . METHOD_4 ( ) ; } return METHOD_7 ( VAR_2 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) , false ) ; }", "comment": "repository.getConfiguredResources(configuration.getFullConfig(), ResourceType.STYLE);", "tokenized_comment": ["repository", ".", "get", "Configured", "Resources", "(", "configuration", ".", "get", "Full", "Config", "(", ")", ",", "<|s|>", "Resource", "Type", ".", "STYLE", ");"], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , true ) ; if ( VAR_2 == null ) { return TYPE_6 . METHOD_4 ( ) ; } TYPE_7 < TYPE_8 , TYPE_7 < String , TYPE_9 > > VAR_3 = VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; return METHOD_7 ( VAR_1 , VAR_3 , false ) ; }", "our_target": "    return getThemes(repository.getConfiguredResources(myConfiguration.getFullConfig()), false /*isFramework*/);\n", "our_code": "  private List<StyleResourceValue> getProjectThemes(@NotNull Configuration configuration) {\n    LocalResourceRepository repository = AppResourceRepository.getAppResources(configuration.getModule(), true);\n    if (repository == null) {\n      return Collections.emptyList();\n    }\n\n<|startfocus|>\n    Map<ResourceType, Map<String, ResourceValue>> resources = repository.getConfiguredResources(configuration.getFullConfig());\n    return getThemes(configuration, resources, false /*isFramework*/);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "List", "<", "Style", "Resource", "Value", ">", "<|s|>", "get", "Project", "Themes", "(", "@", "Not", "Null", "<|s|>", "Configuration", "<|s|>", "configuration", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Local", "Resource", "Repository", "<|s|>", "repository", "<|s|>", "=", "<|s|>", "App", "Resource", "Repository", ".", "get", "App", "Resources", "(", "configuration", ".", "get", "Module", "(", ")", ",", "<|s|>", "true", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "repository", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Collections", ".", "empty", "List", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Map", "<", "Resource", "Type", ",", "<|s|>", "Map", "<", "String", ",", "<|s|>", "Resource", "Value", ">>", "<|s|>", "resources", "<|s|>", "=", "<|s|>", "repository", ".", "get", "Configured", "Resources", "(", "configuration", ".", "get", "Full", "Config", "(", ")", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "get", "Themes", "(", "configuration", ",", "<|s|>", "resources", ",", "<|s|>", "false", "<|s|>", "/*", "is", "Framework", "*/", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 128, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_321", "comment_id": "1840c241_b0b518bb", "class_list": ["ThemeResolver"], "func_list": ["public ThemeResolver(@NotNull Configuration configuration)", "private void resolveStyle(StyleResourceValue style, @NotNull ImmutableList.Builder<ThemeEditorStyle> sink, @Nullable Collection<StyleResourceValue> parentSink)", "private List<StyleResourceValue> getFrameworkThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getProjectThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getLocallyDefinedModuleThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getThemes(@NotNull Configuration configuration,", "public ThemeEditorStyle getTheme(@NotNull String themeName)", "public ImmutableList<ThemeEditorStyle> getLocalThemes()", "public ImmutableList<ThemeEditorStyle> getResolvedThemes()", "public ImmutableList<ThemeEditorStyle> getFrameworkThemes()", "public int getThemesCount()"], "prime_var_dic": {"myConfiguration": 1, "myResolver": 1}}, {"idx": 268, "status": "update", "global_index": 11014, "project_name": "android_", "written_on": "2015-06-04 23:14:49", "tufano_target": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 , INT_2 ) . METHOD_2 ( 1 , INT_2 , INT_3 ) . METHOD_2 ( INT_2 , INT_4 ) . METHOD_2 ( INT_3 , INT_5 , INT_6 ) . METHOD_2 ( INT_5 , INT_7 ) . METHOD_2 ( INT_6 , INT_7 ) . METHOD_2 ( INT_7 , INT_8 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; assertEquals ( VAR_1 . METHOD_6 ( ) . size ( ) , INT_8 ) ; }", "comment": "add soft references to this test.", "tokenized_comment": ["add", "<|s|>", "soft", "<|s|>", "references", "<|s|>", "to", "<|s|>", "this", "<|s|>", "test", "."], "tufano_code": "public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( INT_1 ) . METHOD_2 ( 1 , INT_2 , INT_3 ) . METHOD_2 ( INT_2 , INT_4 ) . METHOD_2 ( INT_3 , INT_5 , INT_6 ) . METHOD_2 ( INT_5 , INT_7 ) . METHOD_2 ( INT_6 , INT_7 ) . METHOD_2 ( INT_7 , INT_8 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; assertEquals ( VAR_1 . METHOD_6 ( ) . size ( ) , INT_8 ) ; }", "our_target": "        mSnapshot = new SnapshotBuilder(10, 2)\n", "our_code": "    public void testReachableInstances() {\n<|startfocus|>\n        mSnapshot = new SnapshotBuilder(10)\n<|endfocus|>\n                .addReferences(1, 2, 3)\n                .addReferences(2, 4)\n                .addReferences(3, 5, 6)\n                .addReferences(5, 7)\n                .addReferences(6, 7)\n                .addReferences(7, 8)\n                .addRoot(1)\n                .getSnapshot();\n\n        mSnapshot.computeDominators();\n\n        assertEquals(mSnapshot.getReachableInstances().size(), 8);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "Reachable", "Instances", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "m", "Snapshot", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Snapshot", "Builder", "(", "10", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", ".", "add", "References", "(", "1", ",", "<|s|>", "2", ",", "<|s|>", "3", ")", "<|nl|>", "<|16-s|>", ".", "add", "References", "(", "2", ",", "<|s|>", "4", ")", "<|nl|>", "<|16-s|>", ".", "add", "References", "(", "3", ",", "<|s|>", "5", ",", "<|s|>", "6", ")", "<|nl|>", "<|16-s|>", ".", "add", "References", "(", "5", ",", "<|s|>", "7", ")", "<|nl|>", "<|16-s|>", ".", "add", "References", "(", "6", ",", "<|s|>", "7", ")", "<|nl|>", "<|16-s|>", ".", "add", "References", "(", "7", ",", "<|s|>", "8", ")", "<|nl|>", "<|16-s|>", ".", "add", "Root", "(", "1", ")", "<|nl|>", "<|16-s|>", ".", "get", "Snapshot", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "m", "Snapshot", ".", "compute", "Dominators", "(", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "m", "Snapshot", ".", "get", "Reachable", "Instances", "(", ")", ".", "size", "(", ")", ",", "<|s|>", "8", ")", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 189, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3620", "comment_id": "790f0079_7662b10c", "class_list": ["DominatorsTest"], "func_list": ["public void testSimpleGraph()", "public void testCyclicGraph()", "public void testMultipleRoots()", "public void testDoublyLinkedList()", "public void testSameClassDifferentLoader()", "public void testTopSort()", "public void testMultiplePaths()", "public void testReachableInstances()", "private void assertDominates(int nodeA, int nodeB)", "private void assertParentPathToGc(int node, int... parents)"], "prime_var_dic": {}}, {"idx": 36752, "status": "update", "global_index": 7260, "project_name": "android_", "written_on": "2016-03-23 11:06:46", "tufano_target": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_3 ) { } TYPE_2 < TYPE_4 , TYPE_5 > VAR_2 = new TYPE_2 ( ) ; VAR_2 . put ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_1 ) { } }", "comment": "remove this line (here and below)", "tokenized_comment": ["remove", "<|s|>", "this", "<|s|>", "line", "<|s|>", "(", "here", "<|s|>", "and", "<|s|>", "below", ")"], "tufano_code": "public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new TYPE_2 < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_1 ) { } TYPE_2 < TYPE_4 , TYPE_5 > VAR_2 = new TYPE_2 ( ) ; VAR_2 . put ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_3 VAR_1 ) { } }", "our_target": "        } catch (UnsupportedOperationException expected) {\n", "our_code": "    public void test_unmodifiableMap_putIfAbsent() {\n        try {\n            Collections.unmodifiableMap(new HashMap<>()).putIfAbsent(1, 5.0);\n            fail();\n<|startfocus|>\n        } catch (UnsupportedOperationException e) {\n            // expected\n<|endfocus|>\n        }\n\n        // For existing key\n        HashMap<Integer, Double> m = new HashMap();\n        m.put(1, 5.0);\n        try {\n            Collections.unmodifiableMap(m).putIfAbsent(1, 5.0);\n            fail();\n        } catch (UnsupportedOperationException e) {\n            // expected\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "test", "_", "unmodifiable", "Map", "_", "put", "If", "Absent", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Collections", ".", "unmodifiable", "Map", "(", "new", "<|s|>", "Hash", "Map", "<", ">", "(", ")", ")", ".", "put", "If", "Absent", "(", "1", ",", "<|s|>", "5", ".", "0", ");", "<|nl|>", "<|12-s|>", "fail", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Unsupported", "Operation", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "expected", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "For", "<|s|>", "existing", "<|s|>", "key", "<|nl|>", "<|8-s|>", "Hash", "Map", "<", "Integer", ",", "<|s|>", "Double", ">", "<|s|>", "m", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Hash", "Map", "(", ");", "<|nl|>", "<|8-s|>", "m", ".", "put", "(", "1", ",", "<|s|>", "5", ".", "0", ");", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Collections", ".", "unmodifiable", "Map", "(", "m", ")", ".", "put", "If", "Absent", "(", "1", ",", "<|s|>", "5", ".", "0", ");", "<|nl|>", "<|12-s|>", "fail", "(", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Unsupported", "Operation", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "expected", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 236, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_3286", "comment_id": "7cd6320e_6954bdf5", "class_list": ["CollectionsTest", "ArrayListInheritor<T>", "IntegerWithExtremeComparator"], "func_list": ["public void testEmptyEnumeration()", "public void testEmptyIterator()", "public void testEmptyListIterator()", "public ArrayListInheritor(int capacity)", "public void testSort_leavesModcountUnmodified()", "public IntegerWithExtremeComparator(int value)", "public int compareTo(IntegerWithExtremeComparator another)", "public void testBinarySearch_comparatorThatReturnsMinAndMaxValue()", "public int compareTo(IntegerWithExtremeComparator another)", "public void testBinarySearch_emptyCollection()", "public void testSingletonSpliterator()", "public void test_unmodifiableMap_getOrDefault()", "public void test_unmodifiableMap_forEach()", "public void test_unmodifiableMap_putIfAbsent()", "public void test_unmodifiableMap_remove()", "public void test_unmodifiableMap_computeIfAbsent()", "public void test_unmodifiableMap_computeIfPresent()", "public void test_unmodifiableMap_computeIfAbsent()", "public void test_unmodifiableMap_merge()", "public void test_EmptyMap_getOrDefault()", "public void test_EmptyMap_forEach()", "public void test_EmptyMap_putIfAbsent()", "public void test_EmptyMap_remove()", "public void test_EmptyMap_computeIfAbsent()", "public void test_EmptyMap_computeIfPresent()", "public void test_EmptyMap_computeIfAbsent()", "public void test_EmptyMap_merge()", "public void test_SingletonMap_getOrDefault()", "public void test_SingletonMap_forEach()", "public void test_SingletonMap_putIfAbsent()", "public void test_SingletonMap_remove()", "public void test_SingletonMap_computeIfAbsent()", "public void test_SingletonMap_computeIfPresent()", "public void test_SingletonMap_computeIfAbsent()", "public void test_SingletonMap_merge()", "public ArrayListInheritor(int capacity)", "public IntegerWithExtremeComparator(int value)", "public int compareTo(IntegerWithExtremeComparator another)"], "prime_var_dic": {"IntegerWithExtremeComparator": 1, "value": 1}}, {"idx": 88209, "status": "insert", "global_index": 2586, "project_name": "android_", "written_on": "2017-03-31 15:09:26", "tufano_target": "private static String METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; case VAR_4 : return STRING_3 ; case VAR_5 : return STRING_4 ; case VAR_6 : return STRING_5 ; case VAR_7 : return STRING_7 ; case VAR_8 : return STRING_8 ; default : return STRING_6 ; } }", "comment": "What about ON_RTT_REQUEST_RESPONSE and ON_STOP_RTT?", "tokenized_comment": ["What", "<|s|>", "about", "<|s|>", "ON", "_", "RTT", "_", "REQUEST", "_", "RESPONSE", "<|s|>", "and", "<|s|>", "ON", "_", "STOP", "_", "RTT", "?"], "tufano_code": "private static String METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; case VAR_4 : return STRING_3 ; case VAR_5 : return STRING_4 ; case VAR_6 : return STRING_5 ; default : return STRING_6 ; } }", "our_target": "                return \"onStartRtt\";\n            case ON_RTT_REQUEST_RESPONSE:\n                return \"onRttRequestResponse\";\n            case ON_STOP_RTT:\n                return \"onStopRtt\";\n", "our_code": "    private static String getCounterLabel(int counterIndex) {\n        switch (counterIndex) {\n            case ON_POST_DIAL_WAIT:\n                return \"onPostDialWait\";\n            case ON_CALL_EVENT:\n                return \"onCallEvent\";\n            case ON_PULL_EXTERNAL_CALL:\n                return \"onPullExternalCall\";\n            case ON_EXTRAS_CHANGED:\n                return \"onExtrasChanged\";\n            case ON_START_RTT:\n<|startfocus|>\n                return \"onStartRtt\";\n<|endfocus|>\n            default:\n                return \"Callback\";\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "get", "Counter", "Label", "(", "int", "<|s|>", "counter", "Index", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "switch", "<|s|>", "(", "counter", "Index", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "case", "<|s|>", "ON", "_", "POST", "_", "DIAL", "_", "WAIT", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "on", "Post", "Dial", "Wait", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "ON", "_", "CALL", "_", "EVENT", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "on", "Call", "Event", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "ON", "_", "PULL", "_", "EXTERNAL", "_", "CALL", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "on", "Pull", "External", "Call", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "ON", "_", "EXTRAS", "_", "CHANGED", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "on", "Extras", "Changed", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "ON", "_", "START", "_", "RTT", ":", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "on", "Start", "Rtt", "\"", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "default", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "Callback", "\"", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 320, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_5460", "comment_id": "b0d73f49_3966fbd9", "class_list": ["that", "MockConnection"], "func_list": ["public void onAnswer()", "public void onReject()", "public void onHold()", "public void onUnhold()", "public void onDisconnect()", "public void onAbort()", "public void onPlayDtmfTone(char c)", "public void onStopDtmfTone()", "public void onCallAudioStateChanged(CallAudioState state)", "public void onStateChanged(int state)", "public void onPostDialContinue(boolean proceed)", "public void onCallEvent(String event, Bundle extras)", "public void onPullExternalCall()", "public void onExtrasChanged(Bundle extras)", "public void onStartRtt(RttTextStream rttTextStream)", "public void handleRttUpgradeResponse(RttTextStream rttTextStream)", "public void onStopRtt()", "public int getCurrentState()", "public CallAudioState getCurrentCallAudioState()", "public String getDtmfString()", "public InvokeCounter getInvokeCounter(int counterIndex)", "public void createMockVideoProvider()", "public void sendMockVideoQuality(int videoQuality)", "public void sendMockCallSessionEvent(int event)", "public void sendMockPeerWidth(int width)", "public void sendMockSessionModifyRequest(VideoProfile request)", "public MockVideoProvider getMockVideoProvider()", "public void setPhoneAccountHandle(PhoneAccountHandle handle)", "public PhoneAccountHandle getPhoneAccountHandle()", "public void setRemoteConnection(RemoteConnection remoteConnection)", "public RemoteConnection getRemoteConnection()", "public void setRttTextStream(RttTextStream rttTextStream)", "public RttTextStream getRttTextStream()", "private static String getCounterLabel(int counterIndex)"], "prime_var_dic": {"int": 7}}, {"idx": 92905, "status": "update", "global_index": 16856, "project_name": "android_", "written_on": "2015-07-07 10:46:43", "tufano_target": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return TYPE_5 . METHOD_3 ( ) ; } return METHOD_6 ( VAR_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) , true ) ; }", "comment": "repository.getConfiguredResources(configuration.getFullConfig(), ResourceType.STYLE);", "tokenized_comment": ["repository", ".", "get", "Configured", "Resources", "(", "configuration", ".", "get", "Full", "Config", "(", ")", ",", "<|s|>", "Resource", "Type", ".", "STYLE", ");"], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return TYPE_5 . METHOD_3 ( ) ; } TYPE_6 < TYPE_7 , TYPE_6 < String , TYPE_8 > > VAR_3 = VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return METHOD_6 ( VAR_1 , VAR_3 , true ) ; }", "our_target": "    return getThemes(repository.getConfiguredResources(myConfiguration.getFullConfig()), true /*isFramework*/);\n", "our_code": "  private List<StyleResourceValue> getFrameworkThemes(@NotNull Configuration configuration) {\n    ResourceRepository repository = configuration.getFrameworkResources();\n    if (repository == null) {\n      return Collections.emptyList();\n    }\n\n<|startfocus|>\n    Map<ResourceType, Map<String, ResourceValue>> resources = repository.getConfiguredResources(configuration.getFullConfig());\n    return getThemes(configuration, resources, true /*isFramework*/);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "List", "<", "Style", "Resource", "Value", ">", "<|s|>", "get", "Framework", "Themes", "(", "@", "Not", "Null", "<|s|>", "Configuration", "<|s|>", "configuration", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Resource", "Repository", "<|s|>", "repository", "<|s|>", "=", "<|s|>", "configuration", ".", "get", "Framework", "Resources", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "repository", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Collections", ".", "empty", "List", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Map", "<", "Resource", "Type", ",", "<|s|>", "Map", "<", "String", ",", "<|s|>", "Resource", "Value", ">>", "<|s|>", "resources", "<|s|>", "=", "<|s|>", "repository", ".", "get", "Configured", "Resources", "(", "configuration", ".", "get", "Full", "Config", "(", ")", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "get", "Themes", "(", "configuration", ",", "<|s|>", "resources", ",", "<|s|>", "true", "<|s|>", "/*", "is", "Framework", "*/", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 117, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_321", "comment_id": "f8f4ce42_1ff62389", "class_list": ["ThemeResolver"], "func_list": ["public ThemeResolver(@NotNull Configuration configuration)", "private void resolveStyle(StyleResourceValue style, @NotNull ImmutableList.Builder<ThemeEditorStyle> sink, @Nullable Collection<StyleResourceValue> parentSink)", "private List<StyleResourceValue> getFrameworkThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getProjectThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getLocallyDefinedModuleThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getThemes(@NotNull Configuration configuration,", "public ThemeEditorStyle getTheme(@NotNull String themeName)", "public ImmutableList<ThemeEditorStyle> getLocalThemes()", "public ImmutableList<ThemeEditorStyle> getResolvedThemes()", "public ImmutableList<ThemeEditorStyle> getFrameworkThemes()", "public int getThemesCount()"], "prime_var_dic": {"myConfiguration": 1, "myResolver": 1}}, {"idx": 42561, "status": "update", "global_index": 7308, "project_name": "android_", "written_on": "2016-03-14 20:18:56", "tufano_target": "private String METHOD_1 ( ) { int state = METHOD_2 ( ) ; switch ( state ) { case VAR_1 : return STRING_1 ; case VAR_2 : return STRING_2 ; case VAR_3 : return STRING_3 ; case VAR_4 : return STRING_4 ; case VAR_5 : return STRING_5 ; case VAR_6 : return STRING_6 ; case VAR_7 : return STRING_7 ; default : return STRING_9 + state ; } }", "comment": "Typo: UNKOWN -> UNKNOWN\n\nAlso, if the \"state\" value is not recognized, the actual value should be printed. E.g.,\n  \"UNKNOWN_STATE(1234)\" or similar.", "tokenized_comment": ["Typo", ":", "<|s|>", "UNKOWN", "<|s|>", "->", "<|s|>", "UNKNOWN", "<|nl|>", "<|nl|>", "Also", ",", "<|s|>", "if", "<|s|>", "the", "<|s|>", "\"", "state", "\"", "<|s|>", "value", "<|s|>", "is", "<|s|>", "not", "<|s|>", "recognized", ",", "<|s|>", "the", "<|s|>", "actual", "<|s|>", "value", "<|s|>", "should", "<|s|>", "be", "<|s|>", "printed", ".", "<|s|>", "E", ".", "g", ".", ",", "<|nl|>", "<|2-s|>", "\"", "UNKNOWN", "_", "STATE", "(", "1234", ")", "\"", "<|s|>", "or", "<|s|>", "similar", "."], "tufano_code": "private String METHOD_1 ( ) { int state = METHOD_2 ( ) ; switch ( state ) { case VAR_1 : return STRING_1 ; case VAR_2 : return STRING_2 ; case VAR_3 : return STRING_3 ; case VAR_4 : return STRING_4 ; case VAR_5 : return STRING_5 ; case VAR_6 : return STRING_6 ; case VAR_7 : return STRING_7 ; default : return STRING_8 ; } }", "our_target": "                return \"UNKNOWN STATE: \" + state;\n", "our_code": "    private String getStateString() {\n        int state = getState();\n        switch (state) {\n            case BluetoothAdapter.STATE_OFF:\n                return \"STATE_OFF\";\n            case BluetoothAdapter.STATE_TURNING_ON:\n                return \"STATE_TURNING_ON\";\n            case BluetoothAdapter.STATE_ON:\n                return \"STATE_ON\";\n            case BluetoothAdapter.STATE_TURNING_OFF:\n                return \"STATE_TURNING_OFF\";\n            case BluetoothAdapter.STATE_BLE_TURNING_ON:\n                return \"STATE_BLE_TURNING_ON\";\n            case BluetoothAdapter.STATE_BLE_ON:\n                return \"STATE_BLE_ON\";\n            case BluetoothAdapter.STATE_BLE_TURNING_OFF:\n                return \"STATE_BLE_TURNING_OFF\";\n            default:\n<|startfocus|>\n                return \"UNKOWN STATE\";\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "String", "<|s|>", "get", "State", "String", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "state", "<|s|>", "=", "<|s|>", "get", "State", "(", ");", "<|nl|>", "<|8-s|>", "switch", "<|s|>", "(", "state", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Bluetooth", "Adapter", ".", "STATE", "_", "OFF", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "STATE", "_", "OFF", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Bluetooth", "Adapter", ".", "STATE", "_", "TURNING", "_", "ON", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "STATE", "_", "TURNING", "_", "ON", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Bluetooth", "Adapter", ".", "STATE", "_", "ON", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "STATE", "_", "ON", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Bluetooth", "Adapter", ".", "STATE", "_", "TURNING", "_", "OFF", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "STATE", "_", "TURNING", "_", "OFF", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Bluetooth", "Adapter", ".", "STATE", "_", "BLE", "_", "TURNING", "_", "ON", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "STATE", "_", "BLE", "_", "TURNING", "_", "ON", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Bluetooth", "Adapter", ".", "STATE", "_", "BLE", "_", "ON", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "STATE", "_", "BLE", "_", "ON", "\"", ";", "<|nl|>", "<|12-s|>", "case", "<|s|>", "Bluetooth", "Adapter", ".", "STATE", "_", "BLE", "_", "TURNING", "_", "OFF", ":", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "STATE", "_", "BLE", "_", "TURNING", "_", "OFF", "\"", ";", "<|nl|>", "<|12-s|>", "default", ":", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "return", "<|s|>", "\"", "UNKOWN", "<|s|>", "STATE", "\"", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 2118, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4218", "comment_id": "573069cd_ba6910ff", "class_list": ["AdapterService", "should", "AdapterServiceBinder"], "func_list": ["public AdapterService()", "public void onProfileConnectionStateChanged(BluetoothDevice device, int profileId, int newState, int prevState)", "public void initProfilePriorities(BluetoothDevice device, ParcelUuid[] mUuids)", "private void processInitProfilePriorities (BluetoothDevice device, ParcelUuid[] uuids)", "private void processProfileStateChanged(BluetoothDevice device, int profileId, int newState, int prevState)", "public void addProfile(ProfileService profile)", "public void removeProfile(ProfileService profile)", "public void onProfileServiceStateChanged(String serviceName, int state)", "private void processProfileServiceStateChanged(String serviceName, int state)", "public void onCreate()", "public IBinder onBind(Intent intent)", "public boolean onUnbind(Intent intent)", "public void onDestroy()", "void BleOnProcessStart()", "void startBluetoothDisable()", "boolean stopProfileServices()", "boolean stopGattProfileService()", "void updateAdapterState(int prevState, int newState)", "void cleanup ()", "public void handleMessage(Message msg)", "private void setGattProfileServiceState(Class[] services, int state)", "private void setProfileServiceState(Class[] services, int state)", "private boolean isAvailable()", "public AdapterServiceBinder(AdapterService svc)", "public boolean cleanup()", "public AdapterService getService()", "public boolean isEnabled()", "public int getState()", "public boolean enable()", "public boolean enableNoAutoConnect()", "public boolean disable()", "public String getAddress()", "public ParcelUuid[] getUuids()", "public String getName()", "public boolean setName(String name)", "public int getScanMode()", "public boolean setScanMode(int mode, int duration)", "public int getDiscoverableTimeout()", "public boolean setDiscoverableTimeout(int timeout)", "public boolean startDiscovery()", "public boolean cancelDiscovery()", "public boolean isDiscovering()", "public BluetoothDevice[] getBondedDevices()", "public int getAdapterConnectionState()", "public int getProfileConnectionState(int profile)", "public boolean createBond(BluetoothDevice device, int transport)", "public boolean createBondOutOfBand(BluetoothDevice device, int transport, OobData oobData)", "public boolean cancelBondProcess(BluetoothDevice device)", "public boolean removeBond(BluetoothDevice device)", "public int getBondState(BluetoothDevice device)", "public int getConnectionState(BluetoothDevice device)", "public String getRemoteName(BluetoothDevice device)", "public int getRemoteType(BluetoothDevice device)", "public String getRemoteAlias(BluetoothDevice device)", "public boolean setRemoteAlias(BluetoothDevice device, String name)", "public int getRemoteClass(BluetoothDevice device)", "public ParcelUuid[] getRemoteUuids(BluetoothDevice device)", "public boolean fetchRemoteUuids(BluetoothDevice device)", "public boolean setPin(BluetoothDevice device, boolean accept, int len, byte[] pinCode)", "public boolean setPasskey(BluetoothDevice device, boolean accept, int len, byte[] passkey)", "public boolean setPairingConfirmation(BluetoothDevice device, boolean accept)", "public int getPhonebookAccessPermission(BluetoothDevice device)", "public boolean setPhonebookAccessPermission(BluetoothDevice device, int value)", "public int getMessageAccessPermission(BluetoothDevice device)", "public boolean setMessageAccessPermission(BluetoothDevice device, int value)", "public int getSimAccessPermission(BluetoothDevice device)", "public boolean setSimAccessPermission(BluetoothDevice device, int value)", "public void sendConnectionStateChange(BluetoothDevice", "public ParcelFileDescriptor connectSocket(BluetoothDevice device, int type,", "public ParcelFileDescriptor createSocketChannel(int type, String serviceName,", "public boolean sdpSearch(BluetoothDevice device, ParcelUuid uuid)", "public boolean configHciSnoopLog(boolean enable)", "public boolean factoryReset()", "public void registerCallback(IBluetoothCallback cb)", "public void unregisterCallback(IBluetoothCallback cb)", "public boolean isMultiAdvertisementSupported()", "public boolean isPeripheralModeSupported()", "public boolean isOffloadedFilteringSupported()", "public boolean isOffloadedScanBatchingSupported()", "public boolean isActivityAndEnergyReportingSupported()", "public void getActivityEnergyInfoFromController()", "public BluetoothActivityEnergyInfo reportActivityInfo()", "public void onLeServiceUp()", "public void onBrEdrDown()", "public void dump(FileDescriptor fd, String[] args)", "public boolean isQuietModeEnabled()", "public void autoConnect()", "private void autoConnectHeadset()", "private void autoConnectA2dp()", "private void autoConnectA2dpSink()", "public void connectOtherProfile(BluetoothDevice device, int firstProfileStatus)", "private void processConnectOtherProfiles (BluetoothDevice device, int firstProfileStatus)", "private void adjustOtherHeadsetPriorities(HeadsetService  hsService,", "private void adjustOtherSinkPriorities(A2dpService a2dpService,", "void setProfileAutoConnectionPriority (BluetoothDevice device, int profileId)", "public int getNumOfAdvertisementInstancesSupported()", "public boolean isRpaOffloadSupported()", "public int getNumOfOffloadedIrkSupported()", "public int getNumOfOffloadedScanFilterSupported()", "public int getOffloadedScanResultStorage()", "public int getTotalNumOfTrackableAdvertisements()", "private static int convertScanModeToHal(int mode)", "static int convertScanModeFromHal(int mode)", "private boolean setWakeAlarm(long delayMillis, boolean shouldWake)", "private boolean acquireWakeLock(String lockName)", "private boolean releaseWakeLock(String lockName)", "private int getIdleCurrentMa()", "private int getTxCurrentMa()", "private int getRxCurrentMa()", "private double getOperatingVolt()", "private String getStateString()", "private void dumpJava(FileDescriptor fd)", "private void debugLog(String msg)", "private void errorLog(String msg)", "public void onReceive(Context context, Intent intent)", "protected void finalize()", "public AdapterService()", "public IBinder onBind(Intent intent)"], "prime_var_dic": {"and": 1}}, {"idx": 40326, "status": "insert", "global_index": 15417, "project_name": "android_", "written_on": "2014-07-09 19:16:18", "tufano_target": "public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 ) { TYPE_1 < TYPE_2 > keys = VAR_1 == null ? new TYPE_3 < TYPE_2 > ( ) : new TYPE_3 < TYPE_2 > ( VAR_1 ) ; if ( keys . size ( ) > 0 && keys . get ( 0 ) . METHOD_2 ( ) != TYPE_4 . METHOD_3 ( ) ) { keys . add ( 1 , new TYPE_2 ( TYPE_4 . METHOD_3 ( ) , keys . get ( 0 ) . METHOD_4 ( ) ) ) ; } super . METHOD_1 ( keys ) ; }", "comment": "maybe add a comment above explaining what we are trying to do here", "tokenized_comment": ["maybe", "<|s|>", "add", "<|s|>", "a", "<|s|>", "comment", "<|s|>", "above", "<|s|>", "explaining", "<|s|>", "what", "<|s|>", "we", "<|s|>", "are", "<|s|>", "trying", "<|s|>", "to", "<|s|>", "do", "<|s|>", "here"], "tufano_code": "public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 ) { TYPE_1 < TYPE_2 > keys = VAR_1 == null ? new TYPE_3 < TYPE_2 > ( ) : new TYPE_3 < TYPE_2 > ( VAR_1 ) ; if ( keys . size ( ) > 0 && keys . get ( 0 ) . METHOD_2 ( ) != TYPE_4 . METHOD_3 ( ) ) { keys . add ( 1 , new TYPE_2 ( TYPE_4 . METHOD_3 ( ) , keys . get ( 0 ) . METHOD_4 ( ) ) ) ; } super . METHOD_1 ( keys ) ; }", "our_target": "        List<SortKey> keys = sortKeys == null ? new ArrayList<SortKey>() : new ArrayList<SortKey>(sortKeys);\n        // Does secondary sorting (breaks ties) on allocation size\n", "our_code": "      public void setSortKeys(@Nullable List<? extends SortKey> sortKeys) {\n<|startfocus|>\n        List<SortKey> keys = sortKeys == null ? new ArrayList<SortKey>() : new ArrayList<SortKey>(sortKeys);\n<|endfocus|>\n        if (keys.size() > 0 && keys.get(0).getColumn() != Column.ALLOCATION_SIZE.ordinal()) {\n          keys.add(1, new SortKey(Column.ALLOCATION_SIZE.ordinal(), keys.get(0).getSortOrder()));\n        }\n        super.setSortKeys(keys);\n      }", "tokenized_code": ["<|4-s|>", "<|2-s|>", "public", "<|s|>", "void", "<|s|>", "set", "Sort", "Keys", "(", "@", "Nullable", "<|s|>", "List", "<", "?", "<|s|>", "extends", "<|s|>", "Sort", "Key", ">", "<|s|>", "sort", "Keys", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "List", "<", "Sort", "Key", ">", "<|s|>", "keys", "<|s|>", "=", "<|s|>", "sort", "Keys", "<|s|>", "==", "<|s|>", "null", "<|s|>", "?", "<|s|>", "new", "<|s|>", "Array", "List", "<", "Sort", "Key", ">", "(", ")", "<|s|>", ":", "<|s|>", "new", "<|s|>", "Array", "List", "<", "Sort", "Key", ">", "(", "sort", "Keys", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "keys", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", "<|s|>", "&&", "<|s|>", "keys", ".", "get", "(", "0", ")", ".", "get", "Column", "(", ")", "<|s|>", "!=", "<|s|>", "Column", ".", "ALLOCATION", "_", "SIZE", ".", "ordinal", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "keys", ".", "add", "(", "1", ",", "<|s|>", "new", "<|s|>", "Sort", "Key", "(", "Column", ".", "ALLOCATION", "_", "SIZE", ".", "ordinal", "(", ")", ",", "<|s|>", "keys", ".", "get", "(", "0", ")", ".", "get", "Sort", "Order", "(", ")", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "super", ".", "set", "Sort", "Keys", "(", "keys", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}"], "base_code_line_number": 294, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_168", "comment_id": "f9f75445_26b2fcd1", "class_list": ["AllocationsViewPanel", "AllocationsViewModel", "AllocationsTableModel", "AllocationsRowSorter", "AllocationsRowListener", "SelectionClearListener", "AllocationsFilterListener", "AllocationsRowFilter", "DefaultCellRenderer", "StackTrace", "StackTraceListener"], "func_list": ["public AllocationsViewPanel(@NotNull Project project)", "private void init()", "public JPanel getComponent()", "private void setupTableView()", "public void itemStateChanged(ItemEvent e)", "private void resetTableView()", "public void setAllocations(@NotNull AllocationInfo[] allocations)", "public AllocationsViewModel()", "public void setTableModel(@NotNull TableModel tableModel)", "public void setRowSorter(@NotNull TableRowSorter<TableModel> rowSorter)", "public void setRowListener(@NotNull ListSelectionListener rowListener)", "public void setClickListener(@NotNull MouseListener clickListener)", "public void setFilterListener(@NotNull DocumentListener filterListener)", "public void setCellRenderer(@NotNull TableCellRenderer cellRenderer)", "public TableModel getTableModel()", "public TableRowSorter<TableModel> getRowSorter()", "public ListSelectionListener getRowListener()", "public MouseListener getClickListener()", "public DocumentListener getFilterListener()", "public TableCellRenderer getCellRenderer()", "private void clearTableSelection()", "private void updateFilter()", "public int getRowCount()", "public int getColumnCount()", "private Object getValueAt(@NotNull AllocationInfo data, int column)", "public String getColumnName(int column)", "public Class getColumnClass(int c)", "public AllocationsRowSorter()", "public void setSortKeys(@Nullable List<? extends SortKey> sortKeys)", "private int getModelRow(int viewRow)", "public void valueChanged(ListSelectionEvent event)", "private void parseStackTrace(int row)", "public void mousePressed(MouseEvent e)", "public void changedUpdate(@Nullable DocumentEvent e)", "public void insertUpdate(DocumentEvent e)", "public void removeUpdate(DocumentEvent e)", "public boolean include(Entry<? extends TableModel, ? extends Integer> entry)", "public void customizeCellRenderer(JTable table, Object value, boolean selected, boolean focused, int row, int column)", "public StackTrace(int depth)", "public void setVirtualFile(int index, @Nullable VirtualFile vf)", "public void setDescription(@NotNull String description)", "public VirtualFile getVirtualFile(int index)", "public String toString()", "public void hyperlinkUpdate(HyperlinkEvent e)", "public void setTableModel(@NotNull TableModel tableModel)", "public void setTableModel(@NotNull TableModel tableModel)", "public void setTableModel(@NotNull TableModel tableModel)", "public void setTableModel(@NotNull TableModel tableModel)", "public void setTableModel(@NotNull TableModel tableModel)", "public void setTableModel(@NotNull TableModel tableModel)", "public JPanel getComponent()"], "prime_var_dic": {}}, {"idx": 94529, "status": "update", "global_index": 2888, "project_name": "android_", "written_on": "2017-03-28 11:54:08", "tufano_target": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) ; } }", "comment": "this will never be thrown on Android (i should go modify the docs to stop claiming this happens)", "tokenized_comment": ["this", "<|s|>", "will", "<|s|>", "never", "<|s|>", "be", "<|s|>", "thrown", "<|s|>", "on", "<|s|>", "Android", "<|s|>", "(", "i", "<|s|>", "should", "<|s|>", "go", "<|s|>", "modify", "<|s|>", "the", "<|s|>", "docs", "<|s|>", "to", "<|s|>", "stop", "<|s|>", "claiming", "<|s|>", "this", "<|s|>", "happens", ")"], "tufano_code": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { try { VAR_2 . METHOD_3 ( ) ; } catch ( TYPE_2 VAR_4 ) { TYPE_3 . METHOD_4 ( VAR_5 , STRING_1 , VAR_4 ) ; } } }", "our_target": "            oldThread.interrupt();\n", "our_code": "    private void setConnectingThread(final Thread thread) {\n        final Thread oldThread = mConnectingThread.getAndSet(thread);\n        if (oldThread != null) {\n<|startfocus|>\n            try {\n                oldThread.interrupt();\n            } catch (SecurityException e) {\n                Log.e(TAG, \"Interrupting thread\", e);\n            }\n<|endfocus|>\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "set", "Connecting", "Thread", "(", "final", "<|s|>", "Thread", "<|s|>", "thread", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Thread", "<|s|>", "old", "Thread", "<|s|>", "=", "<|s|>", "m", "Connecting", "Thread", ".", "get", "And", "Set", "(", "thread", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "old", "Thread", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "old", "Thread", ".", "interrupt", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Security", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "Interrupting", "<|s|>", "thread", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 140, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_3711", "comment_id": "20c1f951_6baa782a", "class_list": ["ToyVpnService", "Connection"], "func_list": ["public Connection(Thread thread, ParcelFileDescriptor pfd)", "public void onCreate()", "public int onStartCommand(Intent intent, int flags, int startId)", "public void onDestroy()", "public boolean handleMessage(Message message)", "private void connect()", "private void startConnection(final ToyVpnConnection connection)", "public void onEstablish(ParcelFileDescriptor tunInterface)", "private void setConnectingThread(final Thread thread)", "private void setConnection(final Connection connection)", "private void disconnect()", "private void updateForegroundNotification(final int message)", "public Connection(Thread thread, ParcelFileDescriptor pfd)"], "prime_var_dic": {}}, {"idx": 5405, "status": "update", "global_index": 9054, "project_name": "android_", "written_on": "2015-08-26 17:08:32", "tufano_target": "private void METHOD_1 ( int VAR_1 , int result ) { float VAR_2 = ( float ) ( VAR_1 - result ) ; float VAR_3 = VAR_1 * VAR_4 ; VAR_5 . METHOD_3 ( STRING_1 + VAR_1 + STRING_2 + result , VAR_2 < VAR_3 ) ; }", "comment": "This is unacceptable, API spec only allows for rounding down", "tokenized_comment": ["This", "<|s|>", "is", "<|s|>", "unacceptable", ",", "<|s|>", "API", "<|s|>", "spec", "<|s|>", "only", "<|s|>", "allows", "<|s|>", "for", "<|s|>", "rounding", "<|s|>", "down"], "tufano_code": "private void METHOD_1 ( int VAR_1 , int result ) { int VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 - result ) ; int VAR_3 = ( int ) ( VAR_1 * VAR_4 ) ; VAR_5 . METHOD_3 ( STRING_1 + VAR_1 + STRING_2 + result , VAR_2 < VAR_3 ) ; }", "our_target": "        float sensitivityDelta = (float)(request - result);\n        float sensitivityErrorMargin = request * SENSITIVITY_ERROR_MARGIN_RATE;\n", "our_code": "    private void validateSensitivity(int request, int result) {\n<|startfocus|>\n        int sensitivityDelta = Math.abs(request - result);\n        int sensitivityErrorMargin = (int)(request * SENSITIVITY_ERROR_MARGIN_RATE);\n<|endfocus|>\n        // First, round down not up, second, need close enough.\n        mCollector.expectTrue(\"Sensitivity is invalid for AE manaul control test, request: \"\n                + request + \" result: \" + result,\n                sensitivityDelta < sensitivityErrorMargin);\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "validate", "Sensitivity", "(", "int", "<|s|>", "request", ",", "<|s|>", "int", "<|s|>", "result", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "int", "<|s|>", "sensitivity", "Delta", "<|s|>", "=", "<|s|>", "Math", ".", "abs", "(", "request", "<|s|>", "-", "<|s|>", "result", ");", "<|nl|>", "<|8-s|>", "int", "<|s|>", "sensitivity", "Error", "Margin", "<|s|>", "=", "<|s|>", "(", "int", ")", "(", "request", "<|s|>", "*", "<|s|>", "SENSITIVITY", "_", "ERROR", "_", "MARGIN", "_", "RATE", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "First", ",", "<|s|>", "round", "<|s|>", "down", "<|s|>", "not", "<|s|>", "up", ",", "<|s|>", "second", ",", "<|s|>", "need", "<|s|>", "close", "<|s|>", "enough", ".", "<|nl|>", "<|8-s|>", "m", "Collector", ".", "expect", "True", "(", "\"", "Sensitivity", "<|s|>", "is", "<|s|>", "invalid", "<|s|>", "for", "<|s|>", "AE", "<|s|>", "manaul", "<|s|>", "control", "<|s|>", "test", ",", "<|s|>", "request", ":", "<|s|>", "\"", "<|nl|>", "<|16-s|>", "+", "<|s|>", "request", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "result", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "result", ",", "<|nl|>", "<|16-s|>", "sensitivity", "Delta", "<|s|>", "<", "<|s|>", "sensitivity", "Error", "Margin", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 2004, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5343", "comment_id": "248c8586_38dab497", "class_list": ["CaptureRequestTest"], "func_list": ["private float verifyFocusDistanceControl(float distance, CaptureRequest request,", "private void validateColorCorrectionResult(CaptureResult result, int colorCorrectionMode)", "private void verifyFaceDetectionResults(SimpleCaptureCallback listener, int numFramesVerified,", "private void verifyToneMapModeResults(SimpleCaptureCallback listener, int numFramesVerified,", "private void verifyAwbCaptureResultUnchanged(SimpleCaptureCallback listener,", "private static boolean isAspectRatioContained(List<Double> aspectRatioList,", "private void changeExposure(CaptureRequest.Builder requestBuilder,", "private long[] getExposureTimeTestValues()", "private float[] getFocusDistanceTestValuesInOrder()", "private int[] getSensitivityTestValues()", "private void validateExposureTime(long request, long result)", "private void validateSensitivity(int request, int result)", "private void validateFrameDurationForCapture(CaptureResult result)", "private void validatePipelineDepth(CaptureResult result)", "private long getAntiFlickeringExposureTime(int flickeringMode, long exposureTime)"], "prime_var_dic": {"String": 1, "int": 14, "long": 5, "float": 9, "curve": 1, "INDEX_ALGORITHM_AE": 1, "INDEX_ALGORITHM_AWB": 1, "INDEX_ALGORITHM_AF": 1, "maps": 3, "and": 1, "lock": 2, "control": 8, "modes": 2, "optical": 1, "controls": 3, "test": 1, "optionally": 1, "accurate": 1, "mode": 2, "exposure": 4, "frame": 1, "Exception": 3, "not": 1, "unchanged": 1, "regions": 3, "MeteringRectangle": 1, "w": 1, "range": 1, "sensitivity": 2, "numFramesVerified": 1, "value": 1, "slow": 1, "depth": 1, "flickering": 1, "algoIdx": 2}}, {"idx": 59829, "status": "update", "global_index": 4437, "project_name": "android_", "written_on": "2016-11-04 15:16:08", "tufano_target": "protected void METHOD_1 ( TYPE_1 < ? > type ) { if ( VAR_1 >= VAR_2 || VAR_1 == ( VAR_5 + 1 ) ) { throw new TYPE_2 ( STRING_1 + VAR_1 ) ; } final TYPE_1 < ? > VAR_3 = ( VAR_1 < 0 ) ? VAR_4 . METHOD_2 ( ) : VAR_4 . METHOD_3 ( ) [ VAR_1 ] ; if ( VAR_3 != type ) { throw new TYPE_2 ( STRING_2 + type + STRING_3 + VAR_3 ) ; } }", "comment": "ditto", "tokenized_comment": ["ditto"], "tufano_code": "protected void METHOD_1 ( TYPE_1 < ? > type ) { if ( VAR_1 >= VAR_2 || VAR_1 == - 1 ) { throw new TYPE_2 ( STRING_1 + VAR_1 ) ; } final TYPE_1 < ? > VAR_3 = ( VAR_1 < 0 ) ? VAR_4 . METHOD_2 ( ) : VAR_4 . METHOD_3 ( ) [ VAR_1 ] ; if ( VAR_3 != type ) { throw new TYPE_2 ( STRING_2 + type + STRING_3 + VAR_3 ) ; } }", "our_target": "            if (argumentIdx >= numArgs || argumentIdx == (RETURN_VALUE_IDX + 1)) {\n", "our_code": "        protected void checkType(Class<?> type) {\n<|startfocus|>\n            if (argumentIdx >= numArgs || argumentIdx == -1) {\n<|endfocus|>\n                throw new IllegalArgumentException(\"Invalid argument index: \" + argumentIdx);\n            }\n\n            final Class<?> expectedType = (argumentIdx < 0) ?\n                    frame.type.rtype() : frame.type.ptypes()[argumentIdx];\n\n            if (expectedType != type) {\n                throw new IllegalArgumentException(\"Incorrect type: \" + type +\n                        \", expected: \" + expectedType);\n            }\n        }", "tokenized_code": ["<|8-s|>", "protected", "<|s|>", "void", "<|s|>", "check", "Type", "(", "Class", "<?>", "<|s|>", "type", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "argument", "Idx", "<|s|>", ">=", "<|s|>", "num", "Args", "<|s|>", "||", "<|s|>", "argument", "Idx", "<|s|>", "==", "<|s|>", "-", "1", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Invalid", "<|s|>", "argument", "<|s|>", "index", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "argument", "Idx", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "final", "<|s|>", "Class", "<?>", "<|s|>", "expected", "Type", "<|s|>", "=", "<|s|>", "(", "argument", "Idx", "<|s|>", "<", "<|s|>", "0", ")", "<|s|>", "?", "<|nl|>", "<|16-s|>", "<|4-s|>", "frame", ".", "type", ".", "rtype", "(", ")", "<|s|>", ":", "<|s|>", "frame", ".", "type", ".", "ptypes", "(", ")", "[", "argument", "Idx", "];", "<|nl|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "expected", "Type", "<|s|>", "!=", "<|s|>", "type", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "Argument", "Exception", "(", "\"", "Incorrect", "<|s|>", "type", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "type", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "\"", ",", "<|s|>", "expected", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "expected", "Type", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 286, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1601", "comment_id": "0b12739d_e4da7acb", "class_list": ["EmulatedStackFrame", "Range", "||", "StackFrameAccessor", "StackFrameWriter", "StackFrameReader"], "func_list": ["private EmulatedStackFrame(MethodType type, Object[] references, byte[] stackFrame)", "private Range(int referencesStart, int numReferences, int stackFrameStart, int numBytes)", "public static Range of(MethodType frameType, int startArg, int endArg)", "public static EmulatedStackFrame create(MethodType frameType)", "public void setReference(int idx, Object reference)", "public void copyRangeTo(EmulatedStackFrame other, Range fromRange, int referencesStart,", "public void copyReturnValueTo(EmulatedStackFrame other)", "private static boolean is64BitPrimitive(Class<?> type)", "private static int getSize(Class<?> type)", "protected StackFrameAccessor()", "public StackFrameAccessor attach(EmulatedStackFrame stackFrame)", "protected void checkType(Class<?> type)", "protected StackFrameAccessor asReturnValueAccessor()", "public void putNextByte(byte value)", "public void putNextInt(int value)", "public void putNextLong(long value)", "public void putNextChar(char value)", "public void putNextBoolean(boolean value)", "public void putNextShort(short value)", "public void putNextFloat(float value)", "public void putNextDouble(double value)", "public void putNextReference(Object value, Class<?> expectedType)", "public StackFrameWriter asReturnValueWriter()", "public int nextInt()", "public long nextLong()", "public char nextChar()", "public boolean nextBoolean()", "public short nextShort()", "public float nextFloat()", "public double nextDouble()", "public StackFrameReader asReturnValueReader()", "private Range(int referencesStart, int numReferences, int stackFrameStart, int numBytes)", "public static Range of(MethodType frameType, int startArg, int endArg)", "protected StackFrameAccessor()", "public StackFrameAccessor attach(EmulatedStackFrame stackFrame)", "protected void checkType(Class<?> type)", "protected StackFrameAccessor asReturnValueAccessor()", "public void putNextByte(byte value)", "public void putNextInt(int value)", "public void putNextLong(long value)", "public void putNextChar(char value)", "public void putNextBoolean(boolean value)", "public void putNextShort(short value)", "public void putNextFloat(float value)", "public void putNextDouble(double value)", "public void putNextReference(Object value, Class<?> expectedType)", "public StackFrameWriter asReturnValueWriter()", "public int nextInt()", "public long nextLong()", "public char nextChar()", "public boolean nextBoolean()", "public short nextShort()", "public float nextFloat()", "public double nextDouble()", "public StackFrameReader asReturnValueReader()"], "prime_var_dic": {}}, {"idx": 90190, "status": "update", "global_index": 12880, "project_name": "android_", "written_on": "2014-10-14 16:22:48", "tufano_target": "public void init ( ) { if ( ! TYPE_1 . METHOD_1 ( ) ) { String title = STRING_1 ; String msg = STRING_2 + STRING_3 ; super . init ( ) ; TYPE_2 . METHOD_2 ( msg , title ) ; return ; } METHOD_3 ( new TYPE_4 ( VAR_1 , METHOD_4 ( ) ) ) ; super . init ( ) ; }", "comment": "Is throwing an exception here a mistake? \n\nIf you are going to show a dialog to the user, then why is it necessary to also throw an unchecked exception (which could potentially crash Android Studio)?", "tokenized_comment": ["Is", "<|s|>", "throwing", "<|s|>", "an", "<|s|>", "exception", "<|s|>", "here", "<|s|>", "a", "<|s|>", "mistake", "?", "<|s|>", "<|nl|>", "<|nl|>", "If", "<|s|>", "you", "<|s|>", "are", "<|s|>", "going", "<|s|>", "to", "<|s|>", "show", "<|s|>", "a", "<|s|>", "dialog", "<|s|>", "to", "<|s|>", "the", "<|s|>", "user", ",", "<|s|>", "then", "<|s|>", "why", "<|s|>", "is", "<|s|>", "it", "<|s|>", "necessary", "<|s|>", "to", "<|s|>", "also", "<|s|>", "throw", "<|s|>", "an", "<|s|>", "unchecked", "<|s|>", "exception", "<|s|>", "(", "which", "<|s|>", "could", "<|s|>", "potentially", "<|s|>", "crash", "<|s|>", "Android", "<|s|>", "Studio", ")", "?"], "tufano_code": "public void init ( ) { if ( ! TYPE_1 . METHOD_1 ( ) ) { String title = STRING_1 ; String msg = STRING_2 + STRING_3 ; super . init ( ) ; TYPE_2 . METHOD_2 ( msg , title ) ; throw new TYPE_3 ( msg ) ; } METHOD_3 ( new TYPE_4 ( VAR_1 , METHOD_4 ( ) ) ) ; super . init ( ) ; }", "our_target": "      return;\n", "our_code": "  public void init() {\n    if (!AndroidSdkUtils.isAndroidSdkAvailable()) {\n      String title = \"SDK problem\";\n      String msg =\n        \"<html>Your Android SDK is missing or out of date.<br>\" +\n        \"You can configure your SDK via <b>Configure | Project Defaults | Project Structure | SDKs</b></html>\";\n      super.init();\n      Messages.showErrorDialog(msg, title);\n<|startfocus|>\n      throw new IllegalStateException(msg);\n<|endfocus|>\n    }\n\n    addPath(new SampleImportWizardPath(mySampleList, getDisposable()));\n    super.init();\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "init", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "Android", "Sdk", "Utils", ".", "is", "Android", "Sdk", "Available", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "title", "<|s|>", "=", "<|s|>", "\"", "SDK", "<|s|>", "problem", "\"", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "msg", "<|s|>", "=", "<|nl|>", "<|8-s|>", "\"", "<", "html", ">", "Your", "<|s|>", "Android", "<|s|>", "SDK", "<|s|>", "is", "<|s|>", "missing", "<|s|>", "or", "<|s|>", "out", "<|s|>", "of", "<|s|>", "date", ".", "<", "br", ">", "\"", "<|s|>", "+", "<|nl|>", "<|8-s|>", "\"", "You", "<|s|>", "can", "<|s|>", "configure", "<|s|>", "your", "<|s|>", "SDK", "<|s|>", "via", "<|s|>", "<", "b", ">", "Configure", "<|s|>", "|", "<|s|>", "Project", "<|s|>", "Defaults", "<|s|>", "|", "<|s|>", "Project", "<|s|>", "Structure", "<|s|>", "|", "<|s|>", "SDKs", "</", "b", ">", "</", "html", ">", "\"", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "super", ".", "init", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "Messages", ".", "show", "Error", "Dialog", "(", "msg", ",", "<|s|>", "title", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "msg", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "add", "Path", "(", "new", "<|s|>", "Sample", "Import", "Wizard", "Path", "(", "my", "Sample", "List", ",", "<|s|>", "get", "Disposable", "(", ")", ")", ");", "<|nl|>", "<|4-s|>", "super", ".", "init", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 49, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4586", "comment_id": "7030dc7e_c542c467", "class_list": ["SampleImportWizard"], "func_list": ["public SampleImportWizard(@Nullable Project project, @NotNull SampleCollection samples)", "public void init()", "public void performFinishingActions()", "protected String getWizardActionDescription()"], "prime_var_dic": {}}, {"idx": 55782, "status": "update", "global_index": 14444, "project_name": "android_", "written_on": "2014-03-20 15:26:01", "tufano_target": "public boolean METHOD_1 ( TYPE_1 file ) { TYPE_2 < TYPE_1 > VAR_1 = METHOD_2 ( ) ; if ( file . equals ( METHOD_3 ( ) ) ) { return true ; } for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ! VAR_2 . METHOD_4 ( ) ) { continue ; } if ( TYPE_3 . METHOD_5 ( VAR_2 , file , false ) ) { return true ; } if ( VAR_2 . METHOD_6 ( ) != null && VAR_2 . METHOD_6 ( ) . equals ( file ) ) { return true ; } } return false ; }", "comment": "or just\n\"if (file.equals(getManifestFile()) {\"\nsince file is known not to be null", "tokenized_comment": ["or", "<|s|>", "just", "<|nl|>", "\"", "if", "<|s|>", "(", "file", ".", "equals", "(", "get", "Manifest", "File", "(", ")", ")", "<|s|>", "{", "\"", "<|nl|>", "since", "<|s|>", "file", "<|s|>", "is", "<|s|>", "known", "<|s|>", "not", "<|s|>", "to", "<|s|>", "be", "<|s|>", "null"], "tufano_code": "public boolean METHOD_1 ( TYPE_1 file ) { TYPE_2 < TYPE_1 > VAR_1 = METHOD_2 ( ) ; if ( METHOD_3 ( ) != null && METHOD_3 ( ) . equals ( file ) ) { return true ; } for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ! VAR_2 . METHOD_4 ( ) ) { continue ; } if ( TYPE_3 . METHOD_5 ( VAR_2 , file , false ) ) { return true ; } if ( VAR_2 . METHOD_6 ( ) != null && VAR_2 . METHOD_6 ( ) . equals ( file ) ) { return true ; } } return false ; }", "our_target": "    if (file.equals(getManifestFile())) {\n", "our_code": "  public boolean containsFile(@NotNull VirtualFile file) {\n    Collection<VirtualFile> srcDirectories = getAllSourceFolders();\n<|startfocus|>\n    if (getManifestFile() != null && getManifestFile().equals(file)) {\n<|endfocus|>\n      return true;\n    }\n\n    for (VirtualFile container : srcDirectories) {\n      if (!container.exists()) {\n        continue;\n      }\n\n      if (VfsUtilCore.isAncestor(container, file, false /* allow them to be the same */)) {\n        return true;\n      }\n\n      // Check the flavor root directories\n      if (container.getParent() != null && container.getParent().equals(file)) {\n        return true;\n      }\n    }\n    return false;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "boolean", "<|s|>", "contains", "File", "(", "@", "Not", "Null", "<|s|>", "Virtual", "File", "<|s|>", "file", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Collection", "<", "Virtual", "File", ">", "<|s|>", "src", "Directories", "<|s|>", "=", "<|s|>", "get", "All", "Source", "Folders", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "get", "Manifest", "File", "(", ")", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "get", "Manifest", "File", "(", ")", ".", "equals", "(", "file", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "Virtual", "File", "<|s|>", "container", "<|s|>", ":", "<|s|>", "src", "Directories", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "!", "container", ".", "exists", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "continue", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "Vfs", "Util", "Core", ".", "is", "Ancestor", "(", "container", ",", "<|s|>", "file", ",", "<|s|>", "false", "<|s|>", "/*", "<|s|>", "allow", "<|s|>", "them", "<|s|>", "to", "<|s|>", "be", "<|s|>", "the", "<|s|>", "same", "<|s|>", "*/", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "//", "<|s|>", "Check", "<|s|>", "the", "<|s|>", "flavor", "<|s|>", "root", "<|s|>", "directories", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "container", ".", "get", "Parent", "(", ")", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "container", ".", "get", "Parent", "(", ")", ".", "equals", "(", "file", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 299, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_735", "comment_id": "3c30f57d_4a2c8379", "class_list": ["IdeaSourceProvider", "Gradle", "Legacy"], "func_list": ["private IdeaSourceProvider()", "public static IdeaSourceProvider create(@NotNull SourceProvider provider)", "private Gradle(@NotNull SourceProvider provider)", "public abstract VirtualFile getManifestFile();", "private static Set<VirtualFile> convertFileSet(@NotNull Collection<File> fileSet)", "public abstract Set<VirtualFile> getJavaDirectories();", "public abstract Set<VirtualFile> getResourcesDirectories();", "public abstract Set<VirtualFile> getAidlDirectories();", "public abstract Set<VirtualFile> getRenderscriptDirectories();", "public abstract Set<VirtualFile> getJniDirectories();", "public abstract Set<VirtualFile> getResDirectories();", "public abstract Set<VirtualFile> getAssetsDirectories();", "private Legacy(@NotNull AndroidFacet facet)", "public static Iterable<IdeaSourceProvider> getCurrentSourceProviders(@NotNull AndroidFacet facet)", "private Collection<VirtualFile> getAllSourceFolders()", "private static Collection<File> getAllSourceFolders(SourceProvider provider)", "public boolean containsFile(@NotNull VirtualFile file)", "public static boolean isContainedBy(@NotNull SourceProvider provider, File targetFolder)", "public static List<SourceProvider> getAllSourceProviders(@NotNull AndroidFacet facet)", "public static List<IdeaSourceProvider> getAllIdeaSourceProviders(@NotNull AndroidFacet facet)", "public static List<IdeaSourceProvider> getIdeaSourceProvidersForFile(@NotNull AndroidFacet facet,", "public static List<SourceProvider> getSourceProvidersForFile(AndroidFacet facet, @Nullable VirtualFile targetFolder)", "public static boolean isManifestFile(@NotNull AndroidFacet facet, @Nullable VirtualFile candidate)", "public static List<VirtualFile> getManifestFiles(@NotNull AndroidFacet facet)", "public static IdeaSourceProvider create(@NotNull final AndroidFacet facet)"], "prime_var_dic": {}}, {"idx": 22554, "status": "insert", "global_index": 9263, "project_name": "android_", "written_on": "2015-09-22 10:22:24", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 , String url ) { try { this . VAR_4 = TYPE_2 . METHOD_1 ( STRING_1 ) . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . url = url ; }", "comment": "Wouldn't an illegalargumentexception be more suitable here? That means an incompatible publicKey was provided.", "tokenized_comment": ["Wouldn", "'", "t", "<|s|>", "an", "<|s|>", "illegalargumentexception", "<|s|>", "be", "<|s|>", "more", "<|s|>", "suitable", "<|s|>", "here", "?", "<|s|>", "That", "<|s|>", "means", "<|s|>", "an", "<|s|>", "incompatible", "<|s|>", "public", "Key", "<|s|>", "was", "<|s|>", "provided", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 , String VAR_3 , String url ) { try { this . VAR_4 = TYPE_2 . METHOD_1 ( STRING_1 ) . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . url = url ; }", "our_target": "        } catch (NoSuchAlgorithmException e) {\n            // SHA-256 is guaranteed to be available\n", "our_code": "    public CTLogInfo(PublicKey publicKey, String description, String url) {\n        try {\n            this.logId = MessageDigest.getInstance(\"SHA-256\")\n                .digest(publicKey.getEncoded());\n<|startfocus|>\n        } catch (NoSuchAlgorithmException e) {\n<|endfocus|>\n            throw new RuntimeException(e);\n        }\n\n        this.publicKey = publicKey;\n        this.description = description;\n        this.url = url;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "CTLog", "Info", "(", "Public", "Key", "<|s|>", "public", "Key", ",", "<|s|>", "String", "<|s|>", "description", ",", "<|s|>", "String", "<|s|>", "url", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "this", ".", "log", "Id", "<|s|>", "=", "<|s|>", "Message", "Digest", ".", "get", "Instance", "(", "\"", "SHA", "-", "256", "\"", ")", "<|nl|>", "<|16-s|>", ".", "digest", "(", "public", "Key", ".", "get", "Encoded", "(", ")", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "No", "Such", "Algorithm", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "throw", "<|s|>", "new", "<|s|>", "Runtime", "Exception", "(", "e", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "this", ".", "public", "Key", "<|s|>", "=", "<|s|>", "public", "Key", ";", "<|nl|>", "<|8-s|>", "this", ".", "description", "<|s|>", "=", "<|s|>", "description", ";", "<|nl|>", "<|8-s|>", "this", ".", "url", "<|s|>", "=", "<|s|>", "url", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 18, "base_patch_number": 5, "changed_patch_number": 6, "code_file_name": "android_4741", "comment_id": "09987b8e_e29fe699", "class_list": ["CTLogInfo"], "func_list": ["public CTLogInfo(PublicKey publicKey, String description, String url)", "public byte[] getID()", "public PublicKey getPublicKey()", "public String getDescription()", "public String getUrl()"], "prime_var_dic": {"publicKey": 1, "description": 1, "url": 1}}, {"idx": 2852, "status": "update", "global_index": 12051, "project_name": "android_", "written_on": "2014-08-20 18:29:19", "tufano_target": "public TYPE_1 METHOD_1 ( String VAR_1 ) { for ( int i = 0 ; i < target . METHOD_2 ( ) . METHOD_3 ( ) ; ++ i ) { TYPE_2 VAR_2 = ( TYPE_2 ) target . METHOD_2 ( ) . METHOD_4 ( i ) ; if ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) != null && VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) . equals ( VAR_1 ) ) { super . METHOD_1 ( i ) ; } } return this ; }", "comment": "Remove check. Return value is always non-null.", "tokenized_comment": ["Remove", "<|s|>", "check", ".", "<|s|>", "Return", "<|s|>", "value", "<|s|>", "is", "<|s|>", "always", "<|s|>", "non", "-", "null", "."], "tufano_code": "public TYPE_1 METHOD_1 ( String VAR_1 ) { for ( int i = 0 ; i < target . METHOD_2 ( ) . METHOD_3 ( ) ; ++ i ) { TYPE_2 VAR_2 = ( TYPE_2 ) target . METHOD_2 ( ) . METHOD_4 ( i ) ; if ( VAR_2 . METHOD_5 ( ) != null && VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) != null && VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) . equals ( VAR_1 ) ) { super . METHOD_1 ( i ) ; } } return this ; }", "our_target": "        if (client.getClientData().getClientDescription() != null &&\n", "our_code": "    public ProcessListFixture selectItem(@NotNull String packageName) {\n      for (int i = 0; i < target.getModel().getSize(); ++i) {\n        Client client = (Client)target.getModel().getElementAt(i);\n<|startfocus|>\n        if (client.getClientData() != null &&\n            client.getClientData().getClientDescription() != null &&\n<|endfocus|>\n            client.getClientData().getClientDescription().equals(packageName)) {\n          super.selectItem(i);\n        }\n      }\n      return this;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "Process", "List", "Fixture", "<|s|>", "select", "Item", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "package", "Name", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "target", ".", "get", "Model", "(", ")", ".", "get", "Size", "(", ");", "<|s|>", "++", "i", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "Client", "<|s|>", "client", "<|s|>", "=", "<|s|>", "(", "Client", ")", "target", ".", "get", "Model", "(", ")", ".", "get", "Element", "At", "(", "i", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "client", ".", "get", "Client", "Data", "(", ")", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|nl|>", "<|12-s|>", "client", ".", "get", "Client", "Data", "(", ")", ".", "get", "Client", "Description", "(", ")", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "client", ".", "get", "Client", "Data", "(", ")", ".", "get", "Client", "Description", "(", ")", ".", "equals", "(", "package", "Name", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "super", ".", "select", "Item", "(", "i", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 97, "base_patch_number": 11, "changed_patch_number": 12, "code_file_name": "android_40", "comment_id": "3344ad56_019c8c8b", "class_list": ["LogcatToolWindowFixture", "ProcessListInitializationCondition", "ProcessListProcessWaitCondition", "ProcessListFixture"], "func_list": ["public boolean test()", "private ProcessListProcessWaitCondition(String description, @NotNull JList processList, @NotNull String packageName)", "public void waitForProcess(@NotNull String packageName)", "public ProcessListFixture selectItem(@NotNull String packageName)", "public LogcatToolWindowFixture(@NotNull String toolWindowId, @NotNull Project project, @NotNull Robot robot)", "public JTabbedPane getTabs()", "public JPanel getContentPanel()", "public ProcessListFixture getProcessList()", "public ActionButtonFixture findAction(@NotNull String text)", "public boolean test()", "private ProcessListProcessWaitCondition(String description, @NotNull JList processList, @NotNull String packageName)", "public boolean test()", "public void waitForProcess(@NotNull String packageName)", "public ProcessListFixture selectItem(@NotNull String packageName)"], "prime_var_dic": {}}, {"idx": 75779, "status": "insert", "global_index": 7571, "project_name": "android_", "written_on": "2015-10-26 23:18:48", "tufano_target": "public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 == this ) { return true ; } if ( VAR_1 instanceof String ) { String VAR_2 = ( String ) VAR_1 ; int count = this . count ; if ( VAR_2 . count != count ) { return false ; } return METHOD_1 ( VAR_2 , count ) ; } else { return false ; } }", "comment": "Maybe leave a comment about why we decided to drop the hash codes comparison?", "tokenized_comment": ["Maybe", "<|s|>", "leave", "<|s|>", "a", "<|s|>", "comment", "<|s|>", "about", "<|s|>", "why", "<|s|>", "we", "<|s|>", "decided", "<|s|>", "to", "<|s|>", "drop", "<|s|>", "the", "<|s|>", "hash", "<|s|>", "codes", "<|s|>", "comparison", "?"], "tufano_code": "public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 == this ) { return true ; } if ( VAR_1 instanceof String ) { String VAR_2 = ( String ) VAR_1 ; int count = this . count ; if ( VAR_2 . count != count ) { return false ; } return METHOD_1 ( VAR_2 , count ) ; } else { return false ; } }", "our_target": "            }\n            // We avoid a hash check here. In practice, the check filters for very short\n            // strings, mostly. In that case, an optimized array-equals has about the same\n            // performance. We also lower the inlining requirements by avoiding the load\n            // and compare.\n", "our_code": "    @Override public boolean equals(Object other) {\n        if (other == this) {\n          return true;\n        }\n        if (other instanceof String) {\n            String s = (String)other;\n            int count = this.count;\n            if (s.count != count) {\n                return false;\n<|startfocus|>\n            }\n<|endfocus|>\n            return equalsLoop(s, count);\n        } else {\n            return false;\n        }\n    }", "tokenized_code": ["<|4-s|>", "@", "Override", "<|s|>", "public", "<|s|>", "boolean", "<|s|>", "equals", "(", "Object", "<|s|>", "other", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "other", "<|s|>", "==", "<|s|>", "this", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "other", "<|s|>", "instanceof", "<|s|>", "String", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "String", "<|s|>", "s", "<|s|>", "=", "<|s|>", "(", "String", ")", "other", ";", "<|nl|>", "<|12-s|>", "int", "<|s|>", "count", "<|s|>", "=", "<|s|>", "this", ".", "count", ";", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "s", ".", "count", "<|s|>", "!=", "<|s|>", "count", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "equals", "Loop", "(", "s", ",", "<|s|>", "count", ");", "<|nl|>", "<|8-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 432, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_2855", "comment_id": "1683491e_2a4c7f5a", "class_list": ["String", "CaseInsensitiveComparator"], "func_list": ["public int compare(String o1, String o2)", "public String()", "private StringIndexOutOfBoundsException indexAndLength(int index)", "private StringIndexOutOfBoundsException startEndAndLength(int start, int end)", "private StringIndexOutOfBoundsException failedBoundsCheck(int arrayLength, int offset, int count)", "private char foldCase(char ch)", "public int compareToIgnoreCase(String string)", "public static String copyValueOf(char[] data)", "public boolean endsWith(String suffix)", "@Override public boolean equals(Object other)", "private boolean equalsLoop(String s, int count)", "public boolean equalsIgnoreCase(String string)", "public void getBytes(int start, int end, byte[] data, int index)", "public byte[] getBytes()", "public void getChars(int start, int end, char[] buffer, int index)", "private int hashCode;", "public int indexOf(int c)", "private int indexOfSupplementary(int c, int start)", "public boolean isEmpty()", "public int lastIndexOf(int c)", "private int lastIndexOfSupplementary(int c, int start)", "public static String copyValueOf(char[] data, int start, int length)", "public boolean regionMatches(int thisStart, String string, int start, int length)", "public String replace(char oldChar, char newChar)", "public boolean startsWith(String prefix)", "public String substring(int start)", "public String toLowerCase()", "public String toString()", "public String toUpperCase()", "public String trim()", "public static String valueOf(char[] data)", "public boolean contentEquals(StringBuffer sb)", "public boolean matches(String regularExpression)", "public String replaceAll(String regularExpression, String replacement)", "public String replaceFirst(String regularExpression, String replacement)", "public String[] split(String regularExpression)", "public CharSequence subSequence(int start, int end)", "public int codePointAt(int index)", "public int codePointBefore(int index)", "public int codePointCount(int start, int end)", "public boolean contains(CharSequence cs)", "public int offsetByCodePoints(int index, int codePointOffset)", "public static String format(String format, Object... args)", "public int compare(String o1, String o2)"], "prime_var_dic": {"long": 1}}, {"idx": 95754, "status": "update", "global_index": 11824, "project_name": "android_", "written_on": "2014-07-15 00:44:21", "tufano_target": "private static String METHOD_1 ( String text , TYPE_1 ... VAR_1 ) { int VAR_2 = VAR_1 . length ; if ( VAR_2 == 0 ) { return text ; } TYPE_2 b = new TYPE_2 ( ) ; b . append ( text ) . append ( STRING_1 ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { b . append ( STRING_1 ) . append ( VAR_3 . toString ( ) ) ; } return b . toString ( ) ; }", "comment": "...to here, then you can remove lines 84-64.", "tokenized_comment": ["...", "to", "<|s|>", "here", ",", "<|s|>", "then", "<|s|>", "you", "<|s|>", "can", "<|s|>", "remove", "<|s|>", "lines", "<|s|>", "84", "-", "64", "."], "tufano_code": "private static String METHOD_1 ( String text , TYPE_1 ... VAR_1 ) { int VAR_2 = VAR_1 . length ; if ( VAR_2 == 0 ) { return text ; } TYPE_2 b = new TYPE_2 ( ) ; b . append ( text ) . append ( STRING_1 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { b . append ( VAR_1 [ i ] . toString ( ) ) ; if ( i < VAR_2 - 1 ) { b . append ( STRING_1 ) ; } } return b . toString ( ) ; }", "our_target": "    for (NotificationHyperlink hyperlink : hyperlinks) {\n      b.append(\"<br>\\n\").append(hyperlink.toString());\n", "our_code": "  private static String addHyperlinksToText(@NotNull String text, @NotNull NotificationHyperlink...hyperlinks) {\n    // We need both \"<br>\" and \"\\n\" to separate lines. IDEA will show this message in a balloon (which respects \"<br>\", and in the\n    // 'Event Log' tool window, which respects \"\\n\".)\n    int hyperlinkCount = hyperlinks.length;\n    if (hyperlinkCount == 0) {\n      return text;\n    }\n    StringBuilder b = new StringBuilder();\n    b.append(text).append(\"<br>\\n\");\n\n<|startfocus|>\n    for (int i = 0; i < hyperlinkCount; i++) {\n      b.append(hyperlinks[i].toString());\n      if (i < hyperlinkCount - 1) {\n        b.append(\"<br>\\n\");\n      }\n<|endfocus|>\n    }\n\n    return b.toString();\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "String", "<|s|>", "add", "Hyperlinks", "To", "Text", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "text", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "Notification", "Hyperlink", "...", "hyperlinks", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "We", "<|s|>", "need", "<|s|>", "both", "<|s|>", "\"", "<", "br", ">", "\"", "<|s|>", "and", "<|s|>", "\"", "\\", "n", "\"", "<|s|>", "to", "<|s|>", "separate", "<|s|>", "lines", ".", "<|s|>", "IDEA", "<|s|>", "will", "<|s|>", "show", "<|s|>", "this", "<|s|>", "message", "<|s|>", "in", "<|s|>", "a", "<|s|>", "balloon", "<|s|>", "(", "which", "<|s|>", "respects", "<|s|>", "\"", "<", "br", ">", "\"", ",", "<|s|>", "and", "<|s|>", "in", "<|s|>", "the", "<|nl|>", "<|4-s|>", "//", "<|s|>", "'", "Event", "<|s|>", "Log", "'", "<|s|>", "tool", "<|s|>", "window", ",", "<|s|>", "which", "<|s|>", "respects", "<|s|>", "\"", "\\", "n", "\"", ".", ")", "<|nl|>", "<|4-s|>", "int", "<|s|>", "hyperlink", "Count", "<|s|>", "=", "<|s|>", "hyperlinks", ".", "length", ";", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "hyperlink", "Count", "<|s|>", "==", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "text", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "String", "Builder", "<|s|>", "b", "<|s|>", "=", "<|s|>", "new", "<|s|>", "String", "Builder", "(", ");", "<|nl|>", "<|4-s|>", "b", ".", "append", "(", "text", ")", ".", "append", "(", "\"", "<", "br", ">", "\\", "n", "\"", ");", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "hyperlink", "Count", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "b", ".", "append", "(", "hyperlinks", "[", "i", "]", ".", "to", "String", "(", ")", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "i", "<|s|>", "<", "<|s|>", "hyperlink", "Count", "<|s|>", "-", "<|s|>", "1", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "b", ".", "append", "(", "\"", "<", "br", ">", "\\", "n", "\"", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "b", ".", "to", "String", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 83, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_379", "comment_id": "99cbb865_629f7610", "class_list": ["AndroidGradleNotification"], "func_list": ["public static AndroidGradleNotification getInstance(@NotNull Project project)", "public AndroidGradleNotification(@NotNull Project project)", "public void showBalloon(@NotNull String title, @NotNull String text, @NotNull NotificationType type)", "private static String addHyperlinksToText(@NotNull String text, @NotNull NotificationHyperlink...hyperlinks)", "public void run()", "public Notification getNotification()"], "prime_var_dic": {"myNotification": 1, "Project": 1}}, {"idx": 14920, "status": "insert", "global_index": 12135, "project_name": "android_", "written_on": "2014-08-09 01:26:30", "tufano_target": "private void METHOD_1 ( int VAR_1 , String VAR_2 ) { if ( ! VAR_3 . contains ( VAR_1 ) && VAR_1 != VAR_4 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; try { TYPE_1 . METHOD_3 ( VAR_5 ) ; } catch ( TYPE_2 VAR_6 ) { TYPE_3 . METHOD_4 ( VAR_7 , STRING_1 + VAR_2 + STRING_2 ) ; VAR_6 . METHOD_5 ( ) ; } METHOD_6 ( ) ; METHOD_7 ( VAR_1 , VAR_2 ) ; METHOD_7 ( VAR_1 , VAR_2 ) ; VAR_3 . add ( VAR_1 ) ; } }", "comment": "if we were to use batching we'd have to synchronize here as well, can you add a comment that we don't need to synchronize because events should arrive as they are sampled", "tokenized_comment": ["if", "<|s|>", "we", "<|s|>", "were", "<|s|>", "to", "<|s|>", "use", "<|s|>", "batching", "<|s|>", "we", "'", "d", "<|s|>", "have", "<|s|>", "to", "<|s|>", "synchronize", "<|s|>", "here", "<|s|>", "as", "<|s|>", "well", ",", "<|s|>", "can", "<|s|>", "you", "<|s|>", "add", "<|s|>", "a", "<|s|>", "comment", "<|s|>", "that", "<|s|>", "we", "<|s|>", "don", "'", "t", "<|s|>", "need", "<|s|>", "to", "<|s|>", "synchronize", "<|s|>", "because", "<|s|>", "events", "<|s|>", "should", "<|s|>", "arrive", "<|s|>", "as", "<|s|>", "they", "<|s|>", "are", "<|s|>", "sampled"], "tufano_code": "private void METHOD_1 ( int VAR_1 , String VAR_2 ) { if ( ! VAR_3 . contains ( VAR_1 ) && VAR_1 != VAR_4 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; try { TYPE_1 . METHOD_3 ( VAR_5 ) ; } catch ( TYPE_2 VAR_6 ) { TYPE_3 . METHOD_4 ( VAR_7 , STRING_1 + VAR_2 + STRING_2 ) ; VAR_6 . METHOD_5 ( ) ; } METHOD_6 ( ) ; METHOD_7 ( VAR_1 , VAR_2 ) ; VAR_3 . add ( VAR_1 ) ; } }", "our_target": "\n            // No need to synchronize because events arrive as they are sampled\n            analyzeData(sensorType, sensorName);\n", "our_code": "    private void testSensorAccuracy(int sensorType, String sensorName) {\n        if (!mCompletedTests.contains(sensorType) && sensorType != Sensor.TYPE_SIGNIFICANT_MOTION) {\n            startDataCollection(sensorType, sensorName);\n\n            try {\n                Thread.sleep(DATA_COLLECTION_TIME_IN_MS);\n            } catch (InterruptedException e) {\n                Log.e(LOG_TAG, \"Data collection for  \" + sensorName + \"was interrupted\");\n                e.printStackTrace();\n            }\n\n            stopDataCollection();\n            analyzeData(sensorType, sensorName);\n<|startfocus|>\n\n<|endfocus|>\n            mCompletedTests.add(sensorType);\n        }\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "test", "Sensor", "Accuracy", "(", "int", "<|s|>", "sensor", "Type", ",", "<|s|>", "String", "<|s|>", "sensor", "Name", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "m", "Completed", "Tests", ".", "contains", "(", "sensor", "Type", ")", "<|s|>", "&&", "<|s|>", "sensor", "Type", "<|s|>", "!=", "<|s|>", "Sensor", ".", "TYPE", "_", "SIGNIFICANT", "_", "MOTION", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "start", "Data", "Collection", "(", "sensor", "Type", ",", "<|s|>", "sensor", "Name", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Thread", ".", "sleep", "(", "DATA", "_", "COLLECTION", "_", "TIME", "_", "IN", "_", "MS", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Interrupted", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Log", ".", "e", "(", "LOG", "_", "TAG", ",", "<|s|>", "\"", "Data", "<|s|>", "collection", "<|s|>", "for", "<|2-s|>", "\"", "<|s|>", "+", "<|s|>", "sensor", "Name", "<|s|>", "+", "<|s|>", "\"", "was", "<|s|>", "interrupted", "\"", ");", "<|nl|>", "<|16-s|>", "e", ".", "print", "Stack", "Trace", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "stop", "Data", "Collection", "(", ");", "<|nl|>", "<|12-s|>", "analyze", "Data", "(", "sensor", "Type", ",", "<|s|>", "sensor", "Name", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "m", "Completed", "Tests", ".", "add", "(", "sensor", "Type", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 92, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_891", "comment_id": "7687f329_09a26983", "class_list": ["SensorValueAccuracyActivity"], "func_list": ["protected void onCreate(Bundle savedInstanceState)", "private void testSensorAccuracy(int sensorType, String sensorName)", "private void startDataCollection(int sensorType, String sensorName)", "private void stopDataCollection()", "private void assertTrueWarning(String msg, boolean condition)", "private void assertEqualsWarning(String msg, double expected, double actual, double delta)", "private void analyzeData(int sensorType, String sensorName)", "public void onSensorChanged(SensorEvent sensorEvent)", "public void onAccuracyChanged(Sensor sensor, int accuracy)"], "prime_var_dic": {"DATA_COLLECTION_TIME_IN_MS": 1, "SENSOR_RATE": 1, "MAX_ERROR_ACCELEROMETER": 1, "MAX_ERROR_GYROSCOPE": 1, "RANGE_ATMOSPHERIC_PRESSURE": 1, "AMBIENT_TEMPERATURE_MIN": 1, "AMBIENT_TEMPERATURE_MAX": 1, "PROXIMITY_MIN": 1, "PROXIMITY_MAX": 1}}, {"idx": 31686, "status": "update", "global_index": 21252, "project_name": "android_", "written_on": "2013-10-24 17:08:12", "tufano_target": "private static String [ ] METHOD_1 ( TYPE_1 message ) { String text = message . getText ( ) ; if ( text . METHOD_5 ( CHAR_1 ) == - 1 ) { return new String [ ] { text } ; } TYPE_2 < String > VAR_1 = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( CHAR_1 ) . split ( text ) ) ; return VAR_1 . METHOD_4 ( new String [ VAR_1 . size ( ) ] ) ; }", "comment": "slightly faster: text.indexOf('\\n') == -1", "tokenized_comment": ["slightly", "<|s|>", "faster", ":", "<|s|>", "text", ".", "index", "Of", "(", "'", "\\", "n", "'", ")", "<|s|>", "==", "<|s|>", "-", "1"], "tufano_code": "private static String [ ] METHOD_1 ( TYPE_1 message ) { String text = message . getText ( ) ; if ( ! text . contains ( \"\\n\" ) ) { return new String [ ] { text } ; } TYPE_2 < String > VAR_1 = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( CHAR_1 ) . split ( text ) ) ; return VAR_1 . METHOD_4 ( new String [ VAR_1 . size ( ) ] ) ; }", "our_target": "    if (text.indexOf('\\n') == -1) {\n", "our_code": "  private static String[] getTextOf(@NotNull GradleMessage message) {\n    String text = message.getText();\n<|startfocus|>\n    if (!text.contains(\"\\n\")) {\n<|endfocus|>\n      return new String[]{text};\n    }\n    List<String> lines = Lists.newArrayList(Splitter.on('\\n').split(text));\n    return lines.toArray(new String[lines.size()]);\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "static", "<|s|>", "String", "[", "]", "<|s|>", "get", "Text", "Of", "(", "@", "Not", "Null", "<|s|>", "Gradle", "Message", "<|s|>", "message", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "text", "<|s|>", "=", "<|s|>", "message", ".", "get", "Text", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "text", ".", "contains", "(", "\"", "\\", "n", "\"", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "String", "[", "]", "{", "text", "};", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "List", "<", "String", ">", "<|s|>", "lines", "<|s|>", "=", "<|s|>", "Lists", ".", "new", "Array", "List", "(", "Splitter", ".", "on", "(", "'", "\\", "n", "'", ")", ".", "split", "(", "text", ")", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "lines", ".", "to", "Array", "(", "new", "<|s|>", "String", "[", "lines", ".", "size", "(", ")", "]", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 429, "base_patch_number": 13, "changed_patch_number": 14, "code_file_name": "android_361", "comment_id": "def26816_32d398f0", "class_list": ["GradleTasksExecutor", "CloseListener", "ProgressIndicatorStateDelegate"], "func_list": ["public String getProcessId()", "public DumbModeAction getDumbModeAction()", "public NotificationInfo getNotificationInfo()", "public void run(@NotNull ProgressIndicator indicator)", "private void addIndicatorDelegate()", "private void closeView()", "private void addStatisticsMessage(@NotNull String text)", "private void invokeGradleTasks()", "public Void fun(ProjectConnection connection)", "private void handleBuildException(BuildException e, String stdErr)", "private void addMessage(@NotNull final GradleMessage message)", "private void prepareMessageView()", "private void removeAllContents(@Nullable Content toKeep)", "private void openMessageView()", "public void stopProcess()", "public boolean isProcessStopped()", "private void addIndicatorDelegate()", "private static String[] getTextOf(@NotNull GradleMessage message)", "private static VirtualFile findFileFrom(@NotNull GradleMessage message)", "private boolean shouldHideWarnings()", "private static int translateMessageKind(@NotNull GradleMessage.Kind kind)", "private void notifyGradleInvocationCompleted(long durationMillis)", "private ToolWindowManager getToolWindowManager()", "private String createStatusMessage(long durationMillis)", "else if (myWarningCount > 0)", "private void showCompilerContent()", "private MessageView getMessageView()", "private Project getNotNullProject()", "private void activateMessageView()", "public void projectOpened(Project project)", "public boolean canCloseProject(Project project)", "public void projectClosed(Project project)", "public void projectClosing(Project project)", "void setContent(@NotNull ContentManager contentManager, @Nullable Content content)", "public void contentRemoved(ContentManagerEvent event)", "public void contentRemoveQuery(ContentManagerEvent event)", "private boolean shouldPromptUser()", "private void askUserToWait()", "public void cancel()", "public void stopProcess()", "private void stopAppIconProgress()", "protected void onProgressChange()", "private void closeView()"], "prime_var_dic": {}}, {"idx": 71469, "status": "update", "global_index": 21654, "project_name": "android_", "written_on": "2013-12-20 00:58:45", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 status = new TYPE_1 ( VAR_1 , STRING_1 , VAR_2 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , String . format ( STRING_2 , VAR_3 ) , VAR_2 . METHOD_2 ( ) , status ) ; }", "comment": "trailing whitespaces", "tokenized_comment": ["trailing", "<|s|>", "whitespaces"], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 status = new TYPE_1 ( VAR_1 , STRING_1 , VAR_2 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , String . format ( STRING_2 , VAR_3 ) , VAR_2 . METHOD_2 ( ) , status ) ; }", "our_target": "                            Status status = new Status(IStatus.ERROR,\n", "our_code": "                        public void run() {\n<|startfocus|>\n                            Status status = new Status(IStatus.ERROR, \n<|endfocus|>\n                                    \"Error writing file\", e.getLocalizedMessage());\n                            ErrorDialog.openError(Display.getDefault().getActiveShell(), \n                                    String.format(\"Error writing %s.uix\", filepath), \n                                    e.getLocalizedMessage(), status);\n                        }", "tokenized_code": ["<|16-s|>", "<|8-s|>", "public", "<|s|>", "void", "<|s|>", "run", "(", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|12-s|>", "Status", "<|s|>", "status", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Status", "(", "IStatus", ".", "ERROR", ",", "<|s|>", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "\"", "Error", "<|s|>", "writing", "<|s|>", "file", "\"", ",", "<|s|>", "e", ".", "get", "Localized", "Message", "(", ")", ");", "<|nl|>", "<|16-s|>", "<|12-s|>", "Error", "Dialog", ".", "open", "Error", "(", "Display", ".", "get", "Default", "(", ")", ".", "get", "Active", "Shell", "(", ")", ",", "<|s|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "String", ".", "format", "(", "\"", "Error", "<|s|>", "writing", "<|s|>", "%", "s", ".", "uix", "\"", ",", "<|s|>", "filepath", ")", ",", "<|s|>", "<|nl|>", "<|16-s|>", "<|16-s|>", "<|4-s|>", "e", ".", "get", "Localized", "Message", "(", ")", ",", "<|s|>", "status", ");", "<|nl|>", "<|16-s|>", "<|8-s|>", "}"], "base_code_line_number": 65, "base_patch_number": 15, "changed_patch_number": 16, "code_file_name": "android_5625", "comment_id": "088cc7b8_cc8637b7", "class_list": ["SaveScreenShotAction"], "func_list": ["public SaveScreenShotAction(UiAutomatorViewer viewer)", "public ImageDescriptor getImageDescriptor()", "public void run()", "new Thread()"], "prime_var_dic": {"String": 2}}, {"idx": 89140, "status": "update", "global_index": 15948, "project_name": "android_", "written_on": "2015-03-10 17:59:11", "tufano_target": "public String METHOD_1 ( ) { if ( VAR_1 != null ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } if ( VAR_2 != null ) { return METHOD_2 ( VAR_2 . METHOD_4 ( ) . METHOD_3 ( ) ) ; } throw new TYPE_2 ( ) ; }", "comment": "For me, the difference from ISE and AssertionError is that AE is an Error, that is a severe error that an application has no reason to catch, that is a bug in the implementation. Nothing to do, just crash. ISE is an exception, catchable, represent a wrong way of using an API, that is a bug in the usage, can be catchable. So, here, for me, it is an AssertionError. In addition, in Jack, we do not put message to AssertionError, unless to ass some dynamic data depending. We have all the info in the reporting to find the line.", "tokenized_comment": ["For", "<|s|>", "me", ",", "<|s|>", "the", "<|s|>", "difference", "<|s|>", "from", "<|s|>", "ISE", "<|s|>", "and", "<|s|>", "Assertion", "Error", "<|s|>", "is", "<|s|>", "that", "<|s|>", "AE", "<|s|>", "is", "<|s|>", "an", "<|s|>", "Error", ",", "<|s|>", "that", "<|s|>", "is", "<|s|>", "a", "<|s|>", "severe", "<|s|>", "error", "<|s|>", "that", "<|s|>", "an", "<|s|>", "application", "<|s|>", "has", "<|s|>", "no", "<|s|>", "reason", "<|s|>", "to", "<|s|>", "catch", ",", "<|s|>", "that", "<|s|>", "is", "<|s|>", "a", "<|s|>", "bug", "<|s|>", "in", "<|s|>", "the", "<|s|>", "implementation", ".", "<|s|>", "Nothing", "<|s|>", "to", "<|s|>", "do", ",", "<|s|>", "just", "<|s|>", "crash", ".", "<|s|>", "ISE", "<|s|>", "is", "<|s|>", "an", "<|s|>", "exception", ",", "<|s|>", "catchable", ",", "<|s|>", "represent", "<|s|>", "a", "<|s|>", "wrong", "<|s|>", "way", "<|s|>", "of", "<|s|>", "using", "<|s|>", "an", "<|s|>", "API", ",", "<|s|>", "that", "<|s|>", "is", "<|s|>", "a", "<|s|>", "bug", "<|s|>", "in", "<|s|>", "the", "<|s|>", "usage", ",", "<|s|>", "can", "<|s|>", "be", "<|s|>", "catchable", ".", "<|s|>", "So", ",", "<|s|>", "here", ",", "<|s|>", "for", "<|s|>", "me", ",", "<|s|>", "it", "<|s|>", "is", "<|s|>", "an", "<|s|>", "Assertion", "Error", ".", "<|s|>", "In", "<|s|>", "addition", ",", "<|s|>", "in", "<|s|>", "Jack", ",", "<|s|>", "we", "<|s|>", "do", "<|s|>", "not", "<|s|>", "put", "<|s|>", "message", "<|s|>", "to", "<|s|>", "Assertion", "Error", ",", "<|s|>", "unless", "<|s|>", "to", "<|s|>", "ass", "<|s|>", "some", "<|s|>", "dynamic", "<|s|>", "data", "<|s|>", "depending", ".", "<|s|>", "We", "<|s|>", "have", "<|s|>", "all", "<|s|>", "the", "<|s|>", "info", "<|s|>", "in", "<|s|>", "the", "<|s|>", "reporting", "<|s|>", "to", "<|s|>", "find", "<|s|>", "the", "<|s|>", "line", "."], "tufano_code": "public String METHOD_1 ( ) { if ( VAR_1 != null ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } if ( VAR_2 != null ) { return METHOD_2 ( VAR_2 . METHOD_4 ( ) . METHOD_3 ( ) ) ; } throw new TYPE_1 ( STRING_1 ) ; }", "our_target": "    throw new AssertionError();\n", "our_code": "  public String getMessage() {\n    if (location != null) {\n      return createMessage(location.getDescription());\n    }\n    if (locationProvider != null) {\n      return createMessage(locationProvider.getLocation().getDescription());\n    }\n<|startfocus|>\n    throw new IllegalStateException(\n        \"WithLocationException has to have location or location provider\");\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "String", "<|s|>", "get", "Message", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "location", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "create", "Message", "(", "location", ".", "get", "Description", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "location", "Provider", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "create", "Message", "(", "location", "Provider", ".", "get", "Location", "(", ")", ".", "get", "Description", "(", ")", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "<|nl|>", "<|8-s|>", "\"", "With", "Location", "Exception", "<|s|>", "has", "<|s|>", "to", "<|s|>", "have", "<|s|>", "location", "<|s|>", "or", "<|s|>", "location", "<|s|>", "provider", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 57, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3771", "comment_id": "1c9d0d70_71ed98bd", "class_list": ["for", "WithLocationException"], "func_list": ["protected WithLocationException(@CheckForNull Location location,", "public String getMessage()", "protected WithLocationException(@CheckForNull Location location,", "public String getMessage()"], "prime_var_dic": {"long": 1, "location": 1, "locationProvider": 1}}, {"idx": 95103, "status": "update", "global_index": 5495, "project_name": "android_", "written_on": "2016-09-30 19:55:04", "tufano_target": "public static TYPE_1 [ ] METHOD_1 ( TYPE_2 VAR_1 ) { int length = VAR_1 . METHOD_2 ( ) ; if ( length == 0 ) { return null ; } TYPE_1 [ ] VAR_2 = new TYPE_1 [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { VAR_2 [ i ] = METHOD_3 ( VAR_1 ) ; } return VAR_2 ; }", "comment": "Is there a upper bound to check?", "tokenized_comment": ["Is", "<|s|>", "there", "<|s|>", "a", "<|s|>", "upper", "<|s|>", "bound", "<|s|>", "to", "<|s|>", "check", "?"], "tufano_code": "public static TYPE_1 [ ] METHOD_1 ( TYPE_2 VAR_1 ) { int length = VAR_1 . METHOD_2 ( ) ; if ( length <= 0 ) { return null ; } TYPE_1 [ ] VAR_2 = new TYPE_1 [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { VAR_2 [ i ] = METHOD_3 ( VAR_1 ) ; } return VAR_2 ; }", "our_target": "        if (length == 0) {\n", "our_code": "    public static X509Certificate[] readCertificates(Parcel in) {\n        int length = in.readInt();\n<|startfocus|>\n        if (length <= 0) {\n<|endfocus|>\n            return null;\n        }\n\n        X509Certificate[] certs = new X509Certificate[length];\n        for (int i = 0; i < length; i++) {\n            certs[i] = readCertificate(in);\n        }\n        return certs;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "X", "509", "Certificate", "[", "]", "<|s|>", "read", "Certificates", "(", "Parcel", "<|s|>", "in", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "int", "<|s|>", "length", "<|s|>", "=", "<|s|>", "in", ".", "read", "Int", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "length", "<|s|>", "<=", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "X", "509", "Certificate", "[", "]", "<|s|>", "certs", "<|s|>", "=", "<|s|>", "new", "<|s|>", "X", "509", "Certificate", "[", "length", "];", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "length", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "certs", "[", "i", "]", "<|s|>", "=", "<|s|>", "read", "Certificate", "(", "in", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "certs", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 155, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_5685", "comment_id": "a28505ca_5006ee2f", "class_list": ["ParcelUtil"], "func_list": ["public static void writePrivateKey(Parcel dest, PrivateKey key)", "public static PrivateKey readPrivateKey(Parcel in)", "public static void writeCertificate(Parcel dest, X509Certificate cert)", "public static X509Certificate readCertificate(Parcel in)", "public static void writeCertificates(Parcel dest, X509Certificate[] certs)", "public static X509Certificate[] readCertificates(Parcel in)"], "prime_var_dic": {"data": 1, "name": 1, "String": 1}}, {"idx": 82751, "status": "update", "global_index": 6926, "project_name": "android_", "written_on": "2016-03-11 08:17:46", "tufano_target": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , String name ) { if ( VAR_1 != null && VAR_1 == VAR_2 ) { return VAR_1 ; } try { final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( name , VAR_5 ) ; final boolean VAR_6 = METHOD_3 ( VAR_3 ) ; final boolean VAR_7 = METHOD_4 ( VAR_3 ) ; if ( VAR_6 || VAR_7 ) { VAR_1 = VAR_7 ; } } catch ( TYPE_3 VAR_8 ) { METHOD_5 ( STRING_1 + name ) ; } return VAR_1 ; }", "comment": "I think this will throw a NullPointerException if currentPermission is null.\n\nHave you tested this code?", "tokenized_comment": ["I", "<|s|>", "think", "<|s|>", "this", "<|s|>", "will", "<|s|>", "throw", "<|s|>", "a", "<|s|>", "Null", "Pointer", "Exception", "<|s|>", "if", "<|s|>", "current", "Permission", "<|s|>", "is", "<|s|>", "null", ".", "<|nl|>", "<|nl|>", "Have", "<|s|>", "you", "<|s|>", "tested", "<|s|>", "this", "<|s|>", "code", "?"], "tufano_code": "private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , String name ) { if ( VAR_1 == VAR_2 ) { return VAR_1 ; } try { final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( name , VAR_5 ) ; final boolean VAR_6 = METHOD_3 ( VAR_3 ) ; final boolean VAR_7 = METHOD_4 ( VAR_3 ) ; if ( VAR_6 || VAR_7 ) { VAR_1 = VAR_7 ; } } catch ( TYPE_3 VAR_8 ) { METHOD_5 ( STRING_1 + name ) ; } return VAR_1 ; }", "our_target": "        if (currentPermission != null && currentPermission == SYSTEM) {\n", "our_code": "    private Boolean highestPermissionForApp(Boolean currentPermission, String name) {\n<|startfocus|>\n        if (currentPermission == SYSTEM) {\n<|endfocus|>\n            return currentPermission;\n        }\n        try {\n            final PackageInfo app = mPackageManager.getPackageInfo(name, GET_PERMISSIONS);\n            final boolean isNetwork = hasNetworkPermission(app);\n            final boolean isSystem = hasSystemPermission(app);\n            if (isNetwork || isSystem) {\n                currentPermission = isSystem;\n            }\n        } catch (NameNotFoundException e) {\n            // App not found.\n            loge(\"NameNotFoundException \" + name);\n        }\n        return currentPermission;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Boolean", "<|s|>", "highest", "Permission", "For", "App", "(", "Boolean", "<|s|>", "current", "Permission", ",", "<|s|>", "String", "<|s|>", "name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "current", "Permission", "<|s|>", "==", "<|s|>", "SYSTEM", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "current", "Permission", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "try", "<|s|>", "{", "<|nl|>", "<|12-s|>", "final", "<|s|>", "Package", "Info", "<|s|>", "app", "<|s|>", "=", "<|s|>", "m", "Package", "Manager", ".", "get", "Package", "Info", "(", "name", ",", "<|s|>", "GET", "_", "PERMISSIONS", ");", "<|nl|>", "<|12-s|>", "final", "<|s|>", "boolean", "<|s|>", "is", "Network", "<|s|>", "=", "<|s|>", "has", "Network", "Permission", "(", "app", ");", "<|nl|>", "<|12-s|>", "final", "<|s|>", "boolean", "<|s|>", "is", "System", "<|s|>", "=", "<|s|>", "has", "System", "Permission", "(", "app", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "is", "Network", "<|s|>", "||", "<|s|>", "is", "System", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "current", "Permission", "<|s|>", "=", "<|s|>", "is", "System", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Name", "Not", "Found", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "//", "<|s|>", "App", "<|s|>", "not", "<|s|>", "found", ".", "<|nl|>", "<|12-s|>", "loge", "(", "\"", "Name", "Not", "Found", "Exception", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "name", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "current", "Permission", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 231, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_4092", "comment_id": "37793574_162cbcdf", "class_list": ["to", "PermissionMonitor"], "func_list": ["public PermissionMonitor(Context context, INetworkManagementService netd)", "public void onReceive(Context context, Intent intent)", "private boolean hasPermission(PackageInfo app, String permission)", "private boolean hasNetworkPermission(PackageInfo app)", "private boolean hasSystemPermission(PackageInfo app)", "private int[] toIntArray(List<Integer> list)", "private void update(Set<Integer> users, Map<Integer, Boolean> apps, boolean add)", "private Boolean highestPermissionForApp(Boolean currentPermission, String name)", "private static void log(String s)", "private static void loge(String s)", "public PermissionMonitor(Context context, INetworkManagementService netd)", "public void onReceive(Context context, Intent intent)", "private boolean hasPermission(PackageInfo app, String permission)", "private boolean hasNetworkPermission(PackageInfo app)", "private boolean hasSystemPermission(PackageInfo app)", "private int[] toIntArray(List<Integer> list)", "private void update(Set<Integer> users, Map<Integer, Boolean> apps, boolean add)", "private Boolean highestPermissionForApp(Boolean currentPermission, String name)", "private static void log(String s)", "private static void loge(String s)"], "prime_var_dic": {"String": 1, "boolean": 3, "mContext": 1, "mPackageManager": 1, "mUserManager": 1, "mNetd": 1, "mIntentReceiver": 1, "IDs": 1}}, {"idx": 53699, "status": "update", "global_index": 3412, "project_name": "android_", "written_on": "2017-01-11 18:26:01", "tufano_target": "private boolean METHOD_1 ( String VAR_1 ) { String VAR_2 = null ; for ( int i = 0 ; i < VAR_3 + 1 ; i ++ ) { VAR_4 . METHOD_2 ( ) ; VAR_4 . execute ( VAR_1 ) ; String output = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = output ; } else if ( ! VAR_2 . equals ( output ) ) { return true ; } } return false ; }", "comment": "actually, you always needs to run it at least once (so divergenceRetry should be >= 1, not >= 0 as tested in the main driver). So, I would add the value 1 here (so that the name is really the number of retries).", "tokenized_comment": ["actually", ",", "<|s|>", "you", "<|s|>", "always", "<|s|>", "needs", "<|s|>", "to", "<|s|>", "run", "<|s|>", "it", "<|s|>", "at", "<|s|>", "least", "<|s|>", "once", "<|s|>", "(", "so", "<|s|>", "divergence", "Retry", "<|s|>", "should", "<|s|>", "be", "<|s|>", ">=", "<|s|>", "1", ",", "<|s|>", "not", "<|s|>", ">=", "<|s|>", "0", "<|s|>", "as", "<|s|>", "tested", "<|s|>", "in", "<|s|>", "the", "<|s|>", "main", "<|s|>", "driver", ")", ".", "<|s|>", "So", ",", "<|s|>", "I", "<|s|>", "would", "<|s|>", "add", "<|s|>", "the", "<|s|>", "value", "<|s|>", "1", "<|s|>", "here", "<|s|>", "(", "so", "<|s|>", "that", "<|s|>", "the", "<|s|>", "name", "<|s|>", "is", "<|s|>", "really", "<|s|>", "the", "<|s|>", "number", "<|s|>", "of", "<|s|>", "retries", ")", "."], "tufano_code": "private boolean METHOD_1 ( String VAR_1 ) { String VAR_2 = null ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { VAR_4 . METHOD_2 ( ) ; VAR_4 . execute ( VAR_1 ) ; String output = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = output ; } else if ( ! VAR_2 . equals ( output ) ) { return true ; } } return false ; }", "our_target": "    for (int i = 0; i < Options.divergenceRetry + 1; i++) {\n", "our_code": "  private boolean checkGoldenExecutorForSelfDivergence(String programName) {\n    // Run golden executor multiple times, make sure it always produces\n    // the same output, otherwise report that it is self-divergent.\n\n    // TODO: Instead, produce a list of acceptable outputs, and see if the divergent\n    // outputs of the backends fall within this set of outputs.\n    String seenOutput = null;\n<|startfocus|>\n    for (int i = 0; i < Options.divergenceRetry; i++) {\n<|endfocus|>\n      goldenExecutor.reset();\n      goldenExecutor.execute(programName);\n      String output = goldenExecutor.getResult().getFlattenedOutput();\n      if (seenOutput == null) {\n        seenOutput = output;\n      } else if (!seenOutput.equals(output)) {\n        return true;\n      }\n    }\n    return false;\n  }", "tokenized_code": ["<|2-s|>", "private", "<|s|>", "boolean", "<|s|>", "check", "Golden", "Executor", "For", "Self", "Divergence", "(", "String", "<|s|>", "program", "Name", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "//", "<|s|>", "Run", "<|s|>", "golden", "<|s|>", "executor", "<|s|>", "multiple", "<|s|>", "times", ",", "<|s|>", "make", "<|s|>", "sure", "<|s|>", "it", "<|s|>", "always", "<|s|>", "produces", "<|nl|>", "<|4-s|>", "//", "<|s|>", "the", "<|s|>", "same", "<|s|>", "output", ",", "<|s|>", "otherwise", "<|s|>", "report", "<|s|>", "that", "<|s|>", "it", "<|s|>", "is", "<|s|>", "self", "-", "divergent", ".", "<|nl|>", "<|nl|>", "<|4-s|>", "//", "<|s|>", "TODO", ":", "<|s|>", "Instead", ",", "<|s|>", "produce", "<|s|>", "a", "<|s|>", "list", "<|s|>", "of", "<|s|>", "acceptable", "<|s|>", "outputs", ",", "<|s|>", "and", "<|s|>", "see", "<|s|>", "if", "<|s|>", "the", "<|s|>", "divergent", "<|nl|>", "<|4-s|>", "//", "<|s|>", "outputs", "<|s|>", "of", "<|s|>", "the", "<|s|>", "backends", "<|s|>", "fall", "<|s|>", "within", "<|s|>", "this", "<|s|>", "set", "<|s|>", "of", "<|s|>", "outputs", ".", "<|nl|>", "<|4-s|>", "String", "<|s|>", "seen", "Output", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "Options", ".", "divergence", "Retry", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "golden", "Executor", ".", "reset", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "golden", "Executor", ".", "execute", "(", "program", "Name", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "String", "<|s|>", "output", "<|s|>", "=", "<|s|>", "golden", "Executor", ".", "get", "Result", "(", ")", ".", "get", "Flattened", "Output", "(", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "seen", "Output", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "seen", "Output", "<|s|>", "=", "<|s|>", "output", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "else", "<|s|>", "if", "<|s|>", "(", "!", "seen", "Output", ".", "equals", "(", "output", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 307, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_5575", "comment_id": "a3d9950f_ffd82b61", "class_list": ["provides", "Fuzzer", "that", "called"], "func_list": ["protected Fuzzer(BaseListener listener)", "public void printTimingInfo()", "public void shutdown()", "private void addExecutorsForArchitecture(Device device, Class<? extends Executor> optimizing,", "private void addExecutorsForArchitecture(Device device, Class<? extends Executor> optimizing,", "protected Program fuzz()", "protected boolean safeToExecute()", "protected void execute(Program program)", "private boolean checkForArchitectureSplit(Map<String, List<Executor>> outputMap)", "private boolean checkGoldenExecutorForSelfDivergence(String programName)", "private void analyseResults(Program program, String programName)", "private Program loadProgram(String inputName, List<Mutation> mutations)", "private boolean saveProgram(Program program, String outputName)", "protected Fuzzer(BaseListener listener)", "public void printTimingInfo()", "public void shutdown()", "private void addExecutorsForArchitecture(Device device, Class<? extends Executor> optimizing,", "private void addExecutorsForArchitecture(Device device, Class<? extends Executor> optimizing,", "protected Program fuzz()", "protected boolean safeToExecute()", "protected void execute(Program program)", "private boolean checkForArchitectureSplit(Map<String, List<Executor>> outputMap)", "private boolean checkGoldenExecutorForSelfDivergence(String programName)", "private void analyseResults(Program program, String programName)", "private Program loadProgram(String inputName, List<Mutation> mutations)", "private boolean saveProgram(Program program, String outputName)", "protected Fuzzer(BaseListener listener)", "public void shutdown()"], "prime_var_dic": {}}, {"idx": 84159, "status": "update", "global_index": 5164, "project_name": "android_", "written_on": "2016-09-05 10:52:02", "tufano_target": "private static void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( ( byte [ ] ) null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_4 ( null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( null , null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( ( TYPE_2 ) null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_5 ( null ) ) ; }", "comment": "static", "tokenized_comment": ["static"], "tufano_code": "private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( ( byte [ ] ) null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_4 ( null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( null , null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_3 ( ( TYPE_2 ) null ) ) ; METHOD_2 ( ( ) - > VAR_1 . METHOD_5 ( null ) ) ; }", "our_target": "    private static void checkEncoder_nullArgs(Encoder encoder) {\n", "our_code": "<|startfocus|>\n    private void checkEncoder_nullArgs(Encoder encoder) {\n<|endfocus|>\n        assertThrowsNpe(() -> encoder.encode((byte[]) null));\n        assertThrowsNpe(() -> encoder.encodeToString(null));\n        assertThrowsNpe(() -> encoder.encode(null, null));\n        assertThrowsNpe(() -> encoder.encode((ByteBuffer) null));\n        assertThrowsNpe(() -> encoder.wrap(null));\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "void", "<|s|>", "check", "Encoder", "_", "null", "Args", "(", "Encoder", "<|s|>", "encoder", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "assert", "Throws", "Npe", "(", "(", ")", "<|s|>", "->", "<|s|>", "encoder", ".", "encode", "(", "(", "byte", "[", "]", ")", "<|s|>", "null", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Throws", "Npe", "(", "(", ")", "<|s|>", "->", "<|s|>", "encoder", ".", "encode", "To", "String", "(", "null", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Throws", "Npe", "(", "(", ")", "<|s|>", "->", "<|s|>", "encoder", ".", "encode", "(", "null", ",", "<|s|>", "null", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Throws", "Npe", "(", "(", ")", "<|s|>", "->", "<|s|>", "encoder", ".", "encode", "(", "(", "Byte", "Buffer", ")", "<|s|>", "null", ")", ");", "<|nl|>", "<|8-s|>", "assert", "Throws", "Npe", "(", "(", ")", "<|s|>", "->", "<|s|>", "encoder", ".", "wrap", "(", "null", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 477, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_3283", "comment_id": "318881a4_429bd4c4", "class_list": ["Base64Test"], "func_list": ["public void testAlphabet_plain()", "public void testAlphabet_mime()", "public void testAlphabet_url()", "private static void checkAlphabet(Set<Character> expectedAlphabet, Encoder encoder)", "public void testDecoder_closedStream()", "private static InputStream closedDecodeStream()", "public void testDecoder_decodeArrayMethods()", "public void testDecoder_decodeByteBuffer()", "public void testDecoder_decodeByteBuffer_invalidData()", "private static void checkDecoder_decodeByteBuffer_invalidData(", "public void testDecoder_nullArgs()", "private void checkDecoder_nullArgs(Decoder decoder)", "public void testEncoder_nullArgs()", "private void checkEncoder_nullArgs(Encoder encoder)", "public void testGetMimeEncoder_invalidLineSeparator()", "public void testEncoder_closedStream()", "private static OutputStream closedEncodeStream()", "public void testEncoder_encodeArrayMethods()", "public void testEncoder_encodeByteBuffer()", "public void testRoundTrip_empty()", "private void checkRoundTrip_empty(Encoder encoder, Decoder decoder)", "public void testRoundTrip_allBytes_plain()", "public void testRoundTrip_allBytes_mime_singleLine()", "public void testRoundTrip_allBytes_mime_lineLength()", "public void testRoundTrip_allBytes_mime_lineLength_defaultsTo76Chars()", "public void testRoundTrip_allBytes_mime_lineLength_isRoundedDown()", "public void testRoundTrip_allBytes_url()", "private void checkRoundTrip_allBytes_singleLine(Encoder encoder, Decoder decoder)", "private void checkRoundTrip_allBytes_singleLine(Encoder encoder, Decoder decoder)", "public void testRoundTrip_variousSizes_plain()", "public void testRoundTrip_variousSizes_mime()", "public void testRoundTrip_variousSizes_url()", "private void checkRoundTrip_variousSizes(Encoder encoder, Decoder decoder)", "public void testEncoder_withoutPadding()", "private static String wrapLines(String lineSeparator, String s, int lineLength)", "private static List<String> breakLines(String longString, int lineLength)", "private static void assertRoundTrip(Encoder encoder, Decoder decoder, String encoded,", "private static void assertArrayPrefixEquals(byte[] expected, int len, byte[] actual)", "private static void assertArrayEquals(byte[] expected, byte[] actual)", "private static String hexString(byte[] bytes)", "private static void assertThrowsNpe(Runnable runnable)"], "prime_var_dic": {"Charset": 1, "before": 6, "valid": 4, "inside": 3, "String": 2, "Base64InputStream": 1, "IOException": 1, "that": 1, "the": 1, "long": 1}}, {"idx": 79576, "status": "update", "global_index": 12659, "project_name": "android_", "written_on": "2014-09-17 16:06:50", "tufano_target": "public boolean METHOD_1 ( TYPE_1 node ) { if ( node instanceof TYPE_2 ) { if ( node . METHOD_2 ( ) != null ) { throw new TYPE_3 ( STRING_1 ) ; } } else { if ( node . METHOD_2 ( ) != nodes . METHOD_3 ( ) ) { throw new TYPE_3 ( STRING_3 ) ; } } nodes . METHOD_5 ( node ) ; return super . METHOD_1 ( node ) ; }", "comment": "Not sure it is the right exception here. I think Error is more adequate.", "tokenized_comment": ["Not", "<|s|>", "sure", "<|s|>", "it", "<|s|>", "is", "<|s|>", "the", "<|s|>", "right", "<|s|>", "exception", "<|s|>", "here", ".", "<|s|>", "I", "<|s|>", "think", "<|s|>", "Error", "<|s|>", "is", "<|s|>", "more", "<|s|>", "adequate", "."], "tufano_code": "public boolean METHOD_1 ( TYPE_1 node ) { if ( node instanceof TYPE_2 ) { if ( node . METHOD_2 ( ) != null ) { throw new TYPE_3 ( STRING_1 ) ; } } else { TYPE_1 VAR_1 = nodes . METHOD_3 ( ) ; if ( ! node . METHOD_4 ( ) ) { throw new TYPE_4 ( node . getClass ( ) + STRING_2 ) ; } if ( node . METHOD_2 ( ) != VAR_1 ) { throw new TYPE_3 ( STRING_3 ) ; } } nodes . METHOD_5 ( node ) ; return super . METHOD_1 ( node ) ; }", "our_target": "        if (node.getParent() != nodes.peek()) {\n", "our_code": "    public boolean visit(@Nonnull JNode node) {\n      if (node instanceof JSession) {\n        if (node.getParent() != null) {\n          throw new AssertionError(\"Parent of JSession must be null.\");\n        }\n      } else {\n<|startfocus|>\n        JNode peekNode = nodes.peek();\n        if (!node.isNodeValid()) {\n          throw new IllegalStateException(node.getClass() + \" is invalid.\");\n        }\n        if (node.getParent() != peekNode) {\n<|endfocus|>\n          throw new AssertionError(\"Node with wrong parent.\");\n        }\n      }\n\n      nodes.push(node);\n\n      return super.visit(node);\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "visit", "(", "@", "Nonnull", "<|s|>", "JNode", "<|s|>", "node", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "node", "<|s|>", "instanceof", "<|s|>", "JSession", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "node", ".", "get", "Parent", "(", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Assertion", "Error", "(", "\"", "Parent", "<|s|>", "of", "<|s|>", "JSession", "<|s|>", "must", "<|s|>", "be", "<|s|>", "null", ".", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "JNode", "<|s|>", "peek", "Node", "<|s|>", "=", "<|s|>", "nodes", ".", "peek", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "node", ".", "is", "Node", "Valid", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "node", ".", "get", "Class", "(", ")", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "is", "<|s|>", "invalid", ".", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "node", ".", "get", "Parent", "(", ")", "<|s|>", "!=", "<|s|>", "peek", "Node", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Assertion", "Error", "(", "\"", "Node", "<|s|>", "with", "<|s|>", "wrong", "<|s|>", "parent", ".", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "nodes", ".", "push", "(", "node", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "super", ".", "visit", "(", "node", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 55, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_2539", "comment_id": "70c53b78_e2b35c1d", "class_list": ["AstChecker", "AstCheckerVisitor"], "func_list": ["public boolean visit(@Nonnull JNode node)", "public void endVisit(@Nonnull JNode node)", "public boolean visit(@Nonnull JNode node)", "public void endVisit(@Nonnull JNode node)"], "prime_var_dic": {}}, {"idx": 5075, "status": "update", "global_index": 16047, "project_name": "android_", "written_on": "2015-03-10 17:38:48", "tufano_target": "public TYPE_1 METHOD_5 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return null ; } TYPE_3 VAR_5 = VAR_3 . METHOD_3 ( ) ; if ( VAR_5 == null ) { return null ; } METHOD_4 ( VAR_5 ) ; return VAR_6 ; }", "comment": "method name seems odd", "tokenized_comment": ["method", "<|s|>", "name", "<|s|>", "seems", "<|s|>", "odd"], "tufano_code": "public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return null ; } TYPE_3 VAR_5 = VAR_3 . METHOD_3 ( ) ; if ( VAR_5 == null ) { return null ; } METHOD_4 ( VAR_5 ) ; return VAR_6 ; }", "our_target": "  public JPopupMenu getPopupMenuAtCell(int row, int column) {\n", "our_code": "<|startfocus|>\n  public JPopupMenu menuAtPoint(int row, int column) {\n<|endfocus|>\n    AttributesTableModel.RowContents contents = myModel.getRowContents(row);\n    if (contents == null) {\n      return null;\n    }\n\n    ActionListener callback = contents.getGoToDefinitionCallback();\n    if (callback == null) {\n      return null;\n    }\n\n    setActionListener(callback);\n    return myPopupMenu;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "JPopup", "Menu", "<|s|>", "menu", "At", "Point", "(", "int", "<|s|>", "row", ",", "<|s|>", "int", "<|s|>", "column", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "Attributes", "Table", "Model", ".", "Row", "Contents", "<|s|>", "contents", "<|s|>", "=", "<|s|>", "my", "Model", ".", "get", "Row", "Contents", "(", "row", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "contents", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "Action", "Listener", "<|s|>", "callback", "<|s|>", "=", "<|s|>", "contents", ".", "get", "Go", "To", "Definition", "Callback", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "callback", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "set", "Action", "Listener", "(", "callback", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "my", "Popup", "Menu", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 38, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_310", "comment_id": "dcd8d53c_3f24a76a", "class_list": ["ThemeEditorMenuProvider"], "func_list": ["public ThemeEditorMenuProvider(AttributesTableModel model)", "public JPopupMenu menuAtPoint(int row, int column)", "private void setActionListener(ActionListener callback)"], "prime_var_dic": {"implements": 1, "myModel": 1, "myPopupMenu": 1, "myGoToDefinitionItem": 1}}, {"idx": 81951, "status": "update", "global_index": 9728, "project_name": "android_", "written_on": "2015-05-05 23:24:58", "tufano_target": "public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_5 = VAR_6 . get ( VAR_1 . getId ( ) ) ; if ( VAR_5 != null && VAR_5 . METHOD_2 ( ) != null && VAR_4 . METHOD_3 ( ) != null ) { VAR_5 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_3 ( ) . METHOD_5 ( ) ) . METHOD_6 ( true ) ; } }", "comment": "Do we have to handle ui events like this ourselves?", "tokenized_comment": ["Do", "<|s|>", "we", "<|s|>", "have", "<|s|>", "to", "<|s|>", "handle", "<|s|>", "ui", "<|s|>", "events", "<|s|>", "like", "<|s|>", "this", "<|s|>", "ourselves", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 . getId ( ) ) ; if ( VAR_2 != null && VAR_2 . METHOD_2 ( ) != null && VAR_4 . METHOD_3 ( ) != null ) { VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_3 ( ) . METHOD_5 ( ) ) . METHOD_6 ( true ) ; } }", "our_target": "    final XBreakpoint xIdeBreakpoint = myIdeBreakpoints.get(serverBreakpoint.getId());\n    if (xIdeBreakpoint != null && xIdeBreakpoint.getSourcePosition() != null && myProcess.getXDebugSession() != null) {\n      xIdeBreakpoint.getSourcePosition().createNavigatable(myProcess.getXDebugSession().getProject()).navigate(true);\n", "our_code": "  public void navigateTo(@NotNull Breakpoint serverBreakpoint) {\n<|startfocus|>\n    final XBreakpoint xIDEBreakpoint = myIDEBreakpoints.get(serverBreakpoint.getId());\n    if (xIDEBreakpoint != null && xIDEBreakpoint.getSourcePosition() != null\n        && myProcess.getXDebugSession() != null) {\n      xIDEBreakpoint.getSourcePosition().createNavigatable(myProcess.getXDebugSession().getProject()).navigate(true);\n<|endfocus|>\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "void", "<|s|>", "navigate", "To", "(", "@", "Not", "Null", "<|s|>", "Breakpoint", "<|s|>", "server", "Breakpoint", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "final", "<|s|>", "XBreakpoint", "<|s|>", "x", "IDEBreakpoint", "<|s|>", "=", "<|s|>", "my", "IDEBreakpoints", ".", "get", "(", "server", "Breakpoint", ".", "get", "Id", "(", ")", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "x", "IDEBreakpoint", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "x", "IDEBreakpoint", ".", "get", "Source", "Position", "(", ")", "<|s|>", "!=", "<|s|>", "null", "<|nl|>", "<|8-s|>", "&&", "<|s|>", "my", "Process", ".", "get", "XDebug", "Session", "(", ")", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "x", "IDEBreakpoint", ".", "get", "Source", "Position", "(", ")", ".", "create", "Navigatable", "(", "my", "Process", ".", "get", "XDebug", "Session", "(", ")", ".", "get", "Project", "(", ")", ")", ".", "navigate", "(", "true", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 374, "base_patch_number": 14, "changed_patch_number": 15, "code_file_name": "android_4553", "comment_id": "8d1e2d58_5a9275a7", "class_list": ["is", "CloudBreakpointHandler"], "func_list": ["public CloudBreakpointHandler(@NotNull CloudDebugProcess process)", "void setPsiManager(PsiManager psiManager)", "public void registerBreakpoint(@NotNull XLineBreakpoint<CloudLineBreakpointProperties> xIDEBreakpoint)", "public void handleError(String errorMessage)", "public void unregisterBreakpoint(@NotNull XLineBreakpoint<CloudLineBreakpointProperties> xIDEBreakpoint, boolean temporary)", "public XBreakpoint getEnabledXBreakpoint(@NotNull Breakpoint serverBreakpoint)", "public XBreakpoint getXBreakpoint(@Nullable Breakpoint serverBreakpoint)", "public void createIDERepresentationsIfNecessary(@NotNull final List<Breakpoint> serverBreakpoints)", "public void run()", "public void cloneToNewBreakpoints(@NotNull final List<Breakpoint> serverBreakpoints)", "public void setStateToDisabled(@NotNull Breakpoint serverBreakpoint)", "public void deleteBreakpoint(@NotNull Breakpoint serverBreakpoint)", "public void navigateTo(@NotNull Breakpoint serverBreakpoint)"], "prime_var_dic": {"myProcess": 1, "to": 1, "breakpoint": 1}}, {"idx": 66066, "status": "update", "global_index": 21580, "project_name": "android_", "written_on": "2013-12-03 08:02:41", "tufano_target": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_3 . equals ( VAR_1 ) ) { METHOD_6 ( STRING_5 , VAR_1 , VAR_2 ) ; VAR_5 . METHOD_5 ( VAR_6 , VAR_2 ) ; } }", "comment": "You might consider a private static message that makes the common parts of these two messages.", "tokenized_comment": ["You", "<|s|>", "might", "<|s|>", "consider", "<|s|>", "a", "<|s|>", "private", "<|s|>", "static", "<|s|>", "message", "<|s|>", "that", "<|s|>", "makes", "<|s|>", "the", "<|s|>", "common", "<|s|>", "parts", "<|s|>", "of", "<|s|>", "these", "<|s|>", "two", "<|s|>", "messages", "."], "tufano_code": "public void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_3 . equals ( VAR_1 ) ) { if ( VAR_4 ) { METHOD_2 ( STRING_1 + VAR_2 + STRING_2 + VAR_1 + STRING_3 + VAR_2 . METHOD_3 ( ) + STRING_4 + VAR_2 . METHOD_4 ( ) ) ; } VAR_5 . METHOD_5 ( VAR_6 , VAR_2 ) ; } }", "our_target": "                maybeLog(\"addressRemoved\", iface, address);\n", "our_code": "        public void addressRemoved(String iface, LinkAddress address) {\n            if (mWifiStateMachine.mInterfaceName.equals(iface)) {\n<|startfocus|>\n                if (DBG) {\n                    log(\"addressRemoved: \" + address + \" on \" + iface +\n                        \" flags \" + address.getFlags() + \" scope \" + address.getScope());\n                }\n<|endfocus|>\n                mWifiStateMachine.sendMessage(CMD_IP_ADDRESS_REMOVED, address);\n            }\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "address", "Removed", "(", "String", "<|s|>", "iface", ",", "<|s|>", "Link", "Address", "<|s|>", "address", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "m", "Wifi", "State", "Machine", ".", "m", "Interface", "Name", ".", "equals", "(", "iface", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "DBG", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "log", "(", "\"", "address", "Removed", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "address", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "on", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "iface", "<|s|>", "+", "<|nl|>", "<|16-s|>", "<|8-s|>", "\"", "<|s|>", "flags", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "address", ".", "get", "Flags", "(", ")", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "scope", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "address", ".", "get", "Scope", "(", ")", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "m", "Wifi", "State", "Machine", ".", "send", "Message", "(", "CMD", "_", "IP", "_", "ADDRESS", "_", "REMOVED", ",", "<|s|>", "address", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 258, "base_patch_number": 10, "changed_patch_number": 12, "code_file_name": "android_5696", "comment_id": "c3e532f4_24c81891", "class_list": ["WifiStateMachine", "InterfaceObserver", "TetherStateChange", "DefaultState", "InitialState", "SupplicantStartingState", "SupplicantStartedState", "SupplicantStoppingState", "DriverStartingState", "DriverStartedState", "WaitForP2pDisableState", "DriverStoppingState", "DriverStoppedState", "ScanModeState", "ConnectModeState", "L2ConnectedState", "ObtainingIpState", "VerifyingLinkState", "CaptivePortalCheckState", "ConnectedState", "DisconnectingState", "DisconnectedState", "WpsRunningState", "SoftApStartingState", "SoftApStartedState", "TetheringState", "TetheredState", "UntetheringState"], "func_list": ["public void addressUpdated(String iface, LinkAddress address)", "public void addressRemoved(String iface, LinkAddress address)", "public WifiStateMachine(Context context, String wlanInterface)", "new BroadcastReceiver()", "public void onReceive(Context context, Intent intent)", "public void onChange(boolean selfChange)", "public Messenger getMessenger()", "public boolean syncPingSupplicant(AsyncChannel channel)", "public void startScan(int callingUid, WorkSource workSource)", "public void setBatchedScanSettings(BatchedScanSettings settings, int callingUid)", "public List<BatchedScanResult> syncGetBatchedScanResultsList()", "public void requestBatchedScanPoll()", "private void startBatchedScan()", "private void startNextBatchedScanAsync()", "private void startNextBatchedScanAsync()", "private void handleBatchedScanPollRequest()", "private boolean recordBatchedScanSettings(BatchedScanSettings settings)", "private void stopBatchedScan()", "private void setNextBatchedAlarm(int scansExpected)", "private void retrieveBatchedScanData()", "private void noteScanStart(int callingUid, WorkSource workSource)", "private void noteScanEnd()", "private void startScanNative(int type)", "public void setSupplicantRunning(boolean enable)", "public void setHostApRunning(WifiConfiguration wifiConfig, boolean enable)", "public void setWifiApConfiguration(WifiConfiguration config)", "public WifiConfiguration syncGetWifiApConfiguration()", "public int syncGetWifiState()", "public String syncGetWifiStateByName()", "public int syncGetWifiApState()", "public String syncGetWifiApStateByName()", "public WifiInfo syncRequestConnectionInfo()", "public DhcpResults syncGetDhcpResults()", "public void setDriverStart(boolean enable)", "public void captivePortalCheckComplete()", "public void setOperationalMode(int mode)", "public List<ScanResult> syncGetScanResultsList()", "public void disconnectCommand()", "public void reconnectCommand()", "public void reassociateCommand()", "public void reloadTlsNetworksAndReconnect()", "public int syncAddOrUpdateNetwork(AsyncChannel channel, WifiConfiguration config)", "public List<WifiConfiguration> syncGetConfiguredNetworks(AsyncChannel channel)", "public boolean syncRemoveNetwork(AsyncChannel channel, int networkId)", "public boolean syncEnableNetwork(AsyncChannel channel, int netId, boolean disableOthers)", "public boolean syncDisableNetwork(AsyncChannel channel, int netId)", "public void addToBlacklist(String bssid)", "public void clearBlacklist()", "public void enableRssiPolling(boolean enabled)", "public void enableBackgroundScanCommand(boolean enabled)", "public void enableAllNetworks()", "public void startFilteringMulticastV4Packets()", "public void stopFilteringMulticastV4Packets()", "public void startFilteringMulticastV6Packets()", "public void stopFilteringMulticastV6Packets()", "public void setHighPerfModeEnabled(boolean enable)", "public void setCountryCode(String countryCode, boolean persist)", "public void setFrequencyBand(int band, boolean persist)", "public void enableTdls(String remoteMacAddress, boolean enable)", "public int getFrequencyBand()", "public String getConfigFile()", "public void sendBluetoothAdapterStateChange(int state)", "public boolean syncSaveConfig(AsyncChannel channel)", "public void updateBatteryWorkSource(WorkSource newSource)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "private void handleScreenStateChanged(boolean screenOn)", "private void checkAndSetConnectivityInstance()", "private boolean startTethering(ArrayList<String> available)", "private void stopTethering()", "private boolean isWifiTethered(ArrayList<String> active)", "private void setSuspendOptimizationsNative(int reason, boolean enabled)", "private void setSuspendOptimizationsNative(int reason, boolean enabled)", "private void setWifiState(int wifiState)", "private void setWifiApState(int wifiApState)", "private void setScanResults()", "private void fetchRssiAndLinkSpeedNative()", "private void fetchPktcntNative(RssiPacketCountInfo info)", "private void updateLinkProperties()", "private void clearLinkProperties()", "private int getMaxDhcpRetries()", "private void sendScanResultsAvailableBroadcast()", "private void sendRssiChangeBroadcast(final int newRssi)", "private void sendNetworkStateChangeBroadcast(String bssid)", "private void sendLinkConfigurationChangedBroadcast()", "private void sendSupplicantConnectionChangedBroadcast(boolean connected)", "private void setNetworkDetailedState(NetworkInfo.DetailedState state)", "private DetailedState getNetworkDetailedState()", "private SupplicantState handleSupplicantStateChange(Message message)", "private void handleNetworkDisconnect()", "private void handleSupplicantConnectionLoss()", "void handlePreDhcpSetup()", "void startDhcp()", "void stopDhcp()", "void handlePostDhcpSetup()", "private void handleSuccessfulIpConfiguration(DhcpResults dhcpResults)", "private void handleFailedIpConfiguration()", "private void startSoftApWithConfig(final WifiConfiguration config)", "new Thread(new Runnable()", "public void run()", "public boolean processMessage(Message message)", "public void enter()", "private void initializeWpsDetails()", "public void exit()", "private void setScanAlarm(boolean enabled)", "private void replyToMessage(Message msg, int what)", "private Message obtainMessageWithArg2(Message srcMsg)", "public void addressUpdated(String iface, LinkAddress address)", "public void addressRemoved(String iface, LinkAddress address)"], "prime_var_dic": {}}, {"idx": 21980, "status": "update", "global_index": 12217, "project_name": "android_", "written_on": "2014-08-06 16:01:26", "tufano_target": "public boolean equals ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } TYPE_2 VAR_2 = ( TYPE_2 ) VAR_1 ; return TYPE_3 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) && TYPE_3 . equals ( METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) && TYPE_4 . equals ( args . METHOD_4 ( ) , VAR_2 . METHOD_3 ( ) ) ; }", "comment": "I assume the TypeNotPresentException from getRawType() is unlikely to happen?", "tokenized_comment": ["I", "<|s|>", "assume", "<|s|>", "the", "<|s|>", "Type", "Not", "Present", "Exception", "<|s|>", "from", "<|s|>", "get", "Raw", "Type", "(", ")", "<|s|>", "is", "<|s|>", "unlikely", "<|s|>", "to", "<|s|>", "happen", "?"], "tufano_code": "public boolean equals ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } TYPE_2 VAR_2 = ( TYPE_2 ) VAR_1 ; return TYPE_3 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) && TYPE_3 . equals ( METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) && TYPE_4 . equals ( METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) ; }", "our_target": "                Arrays.equals(args.getResolvedTypes(), that.getActualTypeArguments());\n", "our_code": "    public boolean equals(Object o) {\n        if (!(o instanceof ParameterizedType)) {\n            return false;\n        }\n        ParameterizedType that = (ParameterizedType) o;\n        return Objects.equals(getRawType(), that.getRawType()) &&\n                Objects.equals(getOwnerType(), that.getOwnerType()) &&\n<|startfocus|>\n                Arrays.equals(getActualTypeArguments(), that.getActualTypeArguments());\n<|endfocus|>\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "equals", "(", "Object", "<|s|>", "o", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "(", "o", "<|s|>", "instanceof", "<|s|>", "Parameterized", "Type", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "Parameterized", "Type", "<|s|>", "that", "<|s|>", "=", "<|s|>", "(", "Parameterized", "Type", ")", "<|s|>", "o", ";", "<|nl|>", "<|8-s|>", "return", "<|s|>", "Objects", ".", "equals", "(", "get", "Raw", "Type", "(", ")", ",", "<|s|>", "that", ".", "get", "Raw", "Type", "(", ")", ")", "<|s|>", "&&", "<|nl|>", "<|16-s|>", "Objects", ".", "equals", "(", "get", "Owner", "Type", "(", ")", ",", "<|s|>", "that", ".", "get", "Owner", "Type", "(", ")", ")", "<|s|>", "&&", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "Arrays", ".", "equals", "(", "get", "Actual", "Type", "Arguments", "(", ")", ",", "<|s|>", "that", ".", "get", "Actual", "Type", "Arguments", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 86, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_3124", "comment_id": "56390f00_7ae0d957", "class_list": ["ParameterizedTypeImpl", "has"], "func_list": ["public ParameterizedTypeImpl(ParameterizedTypeImpl ownerType, String rawTypeName,", "public Type[] getActualTypeArguments()", "public Type getOwnerType()", "public Class getRawType()", "Type getResolvedType()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()"], "prime_var_dic": {}}, {"idx": 94391, "status": "update", "global_index": 19857, "project_name": "android_", "written_on": "2012-08-21 17:29:40", "tufano_target": "public TYPE_1 METHOD_1 ( String VAR_1 , int x , int y , int VAR_2 , TYPE_1 VAR_3 , boolean VAR_4 ) { if ( VAR_5 != null ) { return VAR_5 . METHOD_1 ( VAR_1 , x , y , VAR_2 , VAR_3 , VAR_4 ) ; } else { return null ; } }", "comment": "Same missing spaces as above, plus one before the opening brace", "tokenized_comment": ["Same", "<|s|>", "missing", "<|s|>", "spaces", "<|s|>", "as", "<|s|>", "above", ",", "<|s|>", "plus", "<|s|>", "one", "<|s|>", "before", "<|s|>", "the", "<|s|>", "opening", "<|s|>", "brace"], "tufano_code": "public TYPE_1 METHOD_1 ( String VAR_1 , int x , int y , int VAR_2 , TYPE_1 VAR_3 , boolean VAR_4 ) { if ( VAR_5 != null ) { return VAR_5 . METHOD_1 ( VAR_1 , x , y , VAR_2 , VAR_3 , VAR_4 ) ; } else { return null ; } }", "our_target": "            } else {\n", "our_code": "        public Bundle onCommand(String action, int x, int y, int z,\n                Bundle extras, boolean resultRequested) {\n            if(mRenderer!=null){\n                return mRenderer.onCommand(action, x, y, z, extras, resultRequested);\n<|startfocus|>\n            }\n            else{\n<|endfocus|>\n                return null;\n            }\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "Bundle", "<|s|>", "on", "Command", "(", "String", "<|s|>", "action", ",", "<|s|>", "int", "<|s|>", "x", ",", "<|s|>", "int", "<|s|>", "y", ",", "<|s|>", "int", "<|s|>", "z", ",", "<|nl|>", "<|16-s|>", "Bundle", "<|s|>", "extras", ",", "<|s|>", "boolean", "<|s|>", "result", "Requested", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "if", "(", "m", "Renderer", "!=", "null", ")", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "m", "Renderer", ".", "on", "Command", "(", "action", ",", "<|s|>", "x", ",", "<|s|>", "y", ",", "<|s|>", "z", ",", "<|s|>", "extras", ",", "<|s|>", "result", "Requested", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "else", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 113, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4514", "comment_id": "AAAIxn%2F%2F%2Fxo%3D", "class_list": ["RenderScriptWallpaper<T", "RenderScriptEngine"], "func_list": ["public Engine onCreateEngine()", "public void onCreate(SurfaceHolder surfaceHolder)", "public void onDestroy()", "private void destroyRenderer()", "public void onVisibilityChanged(boolean visible)", "public void onSurfaceChanged(SurfaceHolder holder, int format, int width, int height)", "public void onOffsetsChanged(float xOffset, float yOffset,", "public void onSurfaceCreated(SurfaceHolder holder)", "public void onSurfaceDestroyed(SurfaceHolder holder)", "public Bundle onCommand(String action, int x, int y, int z,"], "prime_var_dic": {}}, {"idx": 79123, "status": "update", "global_index": 7608, "project_name": "android_", "written_on": "2016-01-08 00:05:45", "tufano_target": "public TYPE_1 [ ] get ( ) { synchronized ( this ) { TYPE_2 . METHOD_1 ( this ) ; if ( VAR_1 . METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( ) ; } try { METHOD_4 ( VAR_2 ) ; } catch ( TYPE_3 VAR_3 ) { } try { TYPE_4 . METHOD_5 ( INT_1 ) ; } catch ( TYPE_3 VAR_3 ) { } } TYPE_2 . METHOD_6 ( this ) ; return VAR_1 . METHOD_3 ( ) ; }", "comment": "Receive more what? Perhaps something like \"Sleep a little longer to give (hopefully all of) the rest of the clients a chance to become available\" would be more clear?", "tokenized_comment": ["Receive", "<|s|>", "more", "<|s|>", "what", "?", "<|s|>", "Perhaps", "<|s|>", "something", "<|s|>", "like", "<|s|>", "\"", "Sleep", "<|s|>", "a", "<|s|>", "little", "<|s|>", "longer", "<|s|>", "to", "<|s|>", "give", "<|s|>", "(", "hopefully", "<|s|>", "all", "<|s|>", "of", ")", "<|s|>", "the", "<|s|>", "rest", "<|s|>", "of", "<|s|>", "the", "<|s|>", "clients", "<|s|>", "a", "<|s|>", "chance", "<|s|>", "to", "<|s|>", "become", "<|s|>", "available", "\"", "<|s|>", "would", "<|s|>", "be", "<|s|>", "more", "<|s|>", "clear", "?"], "tufano_code": "public TYPE_1 [ ] get ( ) { synchronized ( this ) { TYPE_2 . METHOD_1 ( this ) ; if ( VAR_1 . METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( ) ; } try { METHOD_4 ( VAR_2 ) ; } catch ( TYPE_3 VAR_3 ) { } try { TYPE_4 . METHOD_5 ( INT_1 ) ; } catch ( TYPE_3 VAR_3 ) { } } TYPE_2 . METHOD_6 ( this ) ; return VAR_1 . METHOD_3 ( ) ; }", "our_target": "                // We will be woken up when the first client data arrives. Sleep a little longer\n                // to give (hopefully all of) the rest of the clients a chance to become available.\n                // Note: a loop with timeout is brittle as well and complicated, just accept this\n                //       for now.\n", "our_code": "        public Client[] get() {\n            synchronized (this) {\n                AndroidDebugBridge.addClientChangeListener(this);\n\n                if (device.hasClients()) {\n                    return device.getClients();\n                }\n\n                try {\n                    wait(timeout); // Note: doesn't guard for spurious wakeup.\n                } catch (InterruptedException exc) {\n                }\n\n<|startfocus|>\n                // We will be woken up when the first client data arrives. Sleep a little bit\n                // longer to potentially receive more. Note: a loop with timeout is brittle as\n                // well and complicated, just accept this for now.\n<|endfocus|>\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException exc) {\n                }\n            }\n\n            AndroidDebugBridge.removeClientChangeListener(this);\n\n            return device.getClients();\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "Client", "[", "]", "<|s|>", "get", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "synchronized", "<|s|>", "(", "this", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Android", "Debug", "Bridge", ".", "add", "Client", "Change", "Listener", "(", "this", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "device", ".", "has", "Clients", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "return", "<|s|>", "device", ".", "get", "Clients", "(", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|nl|>", "<|16-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "wait", "(", "timeout", ");", "<|s|>", "//", "<|s|>", "Note", ":", "<|s|>", "doesn", "'", "t", "<|s|>", "guard", "<|s|>", "for", "<|s|>", "spurious", "<|s|>", "wakeup", ".", "<|nl|>", "<|16-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Interrupted", "Exception", "<|s|>", "exc", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "//", "<|s|>", "We", "<|s|>", "will", "<|s|>", "be", "<|s|>", "woken", "<|s|>", "up", "<|s|>", "when", "<|s|>", "the", "<|s|>", "first", "<|s|>", "client", "<|s|>", "data", "<|s|>", "arrives", ".", "<|s|>", "Sleep", "<|s|>", "a", "<|s|>", "little", "<|s|>", "bit", "<|nl|>", "<|16-s|>", "//", "<|s|>", "longer", "<|s|>", "to", "<|s|>", "potentially", "<|s|>", "receive", "<|s|>", "more", ".", "<|s|>", "Note", ":", "<|s|>", "a", "<|s|>", "loop", "<|s|>", "with", "<|s|>", "timeout", "<|s|>", "is", "<|s|>", "brittle", "<|s|>", "as", "<|nl|>", "<|16-s|>", "//", "<|s|>", "well", "<|s|>", "and", "<|s|>", "complicated", ",", "<|s|>", "just", "<|s|>", "accept", "<|s|>", "this", "<|s|>", "for", "<|s|>", "now", ".", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "Thread", ".", "sleep", "(", "500", ");", "<|nl|>", "<|16-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Interrupted", "Exception", "<|s|>", "exc", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|nl|>", "<|12-s|>", "Android", "Debug", "Bridge", ".", "remove", "Client", "Change", "Listener", "(", "this", ");", "<|nl|>", "<|nl|>", "<|12-s|>", "return", "<|s|>", "device", ".", "get", "Clients", "(", ");", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 201, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_5587", "comment_id": "6a481bfe_28f0244a", "class_list": ["for", "ClientUtils", "WaitForClient", "WaitForClients"], "func_list": ["public ClientUtils()", "public Client findClient(IDevice device, String processName, int processPid)", "public Client[] findAllClients(IDevice device)", "public WaitForClient(IDevice device, String processName, int processPid, long timeout)", "public Client get()", "private Client searchForClient(IDevice device)", "private boolean matches(Client c)", "public void clientChanged(Client arg0, int arg1)", "public WaitForClients(IDevice device, long timeout)", "public Client[] get()", "public ClientUtils()", "public Client findClient(IDevice device, String processName, int processPid)", "public Client[] findAllClients(IDevice device)", "public WaitForClient(IDevice device, String processName, int processPid, long timeout)", "public Client get()", "private Client searchForClient(IDevice device)", "private boolean matches(Client c)", "public void clientChanged(Client arg0, int arg1)", "public WaitForClients(IDevice device, long timeout)", "public Client[] get()", "public Client[] findAllClients(IDevice device)"], "prime_var_dic": {}}, {"idx": 20787, "status": "update", "global_index": 15222, "project_name": "android_", "written_on": "2014-06-11 02:58:05", "tufano_target": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { try { TYPE_4 data = METHOD_2 ( VAR_1 ) ; if ( data != null ) { TYPE_5 file = METHOD_4 ( VAR_1 ) ; file . METHOD_5 ( ) . METHOD_6 ( ) ; data . METHOD_7 ( file ) ; } } catch ( TYPE_2 VAR_2 ) { TYPE_3 . info ( STRING_1 , VAR_2 ) ; } }", "comment": "createFrom is marked nullable so probably the return value should be checked before continuing to call save on it.\n\nAnd this covers the case where the model is not valid -- e.g. the user quits before syncing is done, or syncing fails, right?", "tokenized_comment": ["create", "From", "<|s|>", "is", "<|s|>", "marked", "<|s|>", "nullable", "<|s|>", "so", "<|s|>", "probably", "<|s|>", "the", "<|s|>", "return", "<|s|>", "value", "<|s|>", "should", "<|s|>", "be", "<|s|>", "checked", "<|s|>", "before", "<|s|>", "continuing", "<|s|>", "to", "<|s|>", "call", "<|s|>", "save", "<|s|>", "on", "<|s|>", "it", ".", "<|nl|>", "<|nl|>", "And", "<|s|>", "this", "<|s|>", "covers", "<|s|>", "the", "<|s|>", "case", "<|s|>", "where", "<|s|>", "the", "<|s|>", "model", "<|s|>", "is", "<|s|>", "not", "<|s|>", "valid", "<|s|>", "--", "<|s|>", "e", ".", "g", ".", "<|s|>", "the", "<|s|>", "user", "<|s|>", "quits", "<|s|>", "before", "<|s|>", "syncing", "<|s|>", "is", "<|s|>", "done", ",", "<|s|>", "or", "<|s|>", "syncing", "<|s|>", "fails", ",", "<|s|>", "right", "?"], "tufano_code": "public static void METHOD_1 ( TYPE_1 VAR_1 ) { try { METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 VAR_2 ) { TYPE_3 . info ( STRING_1 , VAR_2 ) ; } }", "our_target": "      AndroidGradleProjectData data = createFrom(project);\n      if (data != null) {\n        File file = getProjectStateFile(project);\n        file.getParentFile().mkdirs();\n        data.saveTo(file);\n      }\n", "our_code": "  public static void save(Project project) {\n    try {\n<|startfocus|>\n      createFrom(project).saveOn(project);\n<|endfocus|>\n    }\n    catch (IOException e) {\n      LOG.info(\"Error while creating persistent state from project\", e);\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "save", "(", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "create", "From", "(", "project", ")", ".", "save", "On", "(", "project", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "info", "(", "\"", "Error", "<|s|>", "while", "<|s|>", "creating", "<|s|>", "persistent", "<|s|>", "state", "<|s|>", "from", "<|s|>", "project", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 76, "base_patch_number": 8, "changed_patch_number": 9, "code_file_name": "android_381", "comment_id": "5f804079_cad0d7db", "class_list": ["AndroidGradleProjectData", "or", "with", "ModuleData", "WrapperInvocationHandler"], "func_list": ["private AndroidGradleProjectData()", "public static void save(Project project)", "static public boolean loadFromDisk(Project project)", "static boolean isSupported(Class<?> clazz)", "private void applyTo(Project project)", "private void saveOn(Project project)", "private AndroidGradleProjectData()", "public static void save(Project project)", "static public boolean loadFromDisk(Project project)", "static boolean isSupported(Class<?> clazz)", "private void applyTo(Project project)", "private void saveOn(Project project)", "private AndroidGradleProjectData()", "public static void save(Project project)", "static public boolean loadFromDisk(Project project)", "static boolean isSupported(Class<?> clazz)", "private void applyTo(Project project)", "private void saveOn(Project project)", "private AndroidGradleProjectData()"], "prime_var_dic": {}}, {"idx": 22669, "status": "update", "global_index": 15249, "project_name": "android_", "written_on": "2014-06-10 17:37:03", "tufano_target": "private String METHOD_1 ( TYPE_1 VAR_1 ) { String name = VAR_1 . getName ( ) ; int VAR_2 = name . METHOD_2 ( CHAR_1 ) ; if ( VAR_2 != - 1 ) { name = name . substring ( 0 , VAR_2 ) ; } TYPE_2 VAR_3 = TYPE_3 . METHOD_3 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_6 ( VAR_1 . METHOD_5 ( ) , VAR_5 ) ; return name + STRING_1 + VAR_4 . toString ( ) + STRING_2 ; }", "comment": "this should match the pre-dex code in the previous file.", "tokenized_comment": ["this", "<|s|>", "should", "<|s|>", "match", "<|s|>", "the", "<|s|>", "pre", "-", "dex", "<|s|>", "code", "<|s|>", "in", "<|s|>", "the", "<|s|>", "previous", "<|s|>", "file", "."], "tufano_code": "private String METHOD_1 ( TYPE_1 VAR_1 ) { String name = VAR_1 . getName ( ) ; int VAR_2 = name . METHOD_2 ( CHAR_1 ) ; if ( VAR_2 != - 1 ) { name = name . substring ( 0 , VAR_2 ) ; } TYPE_2 VAR_3 = TYPE_3 . METHOD_3 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return name + STRING_1 + VAR_4 . toString ( ) + STRING_2 ; }", "our_target": "        HashCode hashCode = hashFunction.hashString(inputFile.getAbsolutePath(), Charsets.UTF_16LE);\n", "our_code": "    private String getDexFileName(File inputFile) {\n        // get the filename\n        String name = inputFile.getName();\n        // remove the extension\n        int pos = name.lastIndexOf('.');\n        if (pos != -1) {\n            name = name.substring(0, pos);\n        }\n\n        // add a hash of the original file path\n        HashFunction hashFunction = Hashing.md5();\n<|startfocus|>\n        HashCode hashCode = hashFunction.hashUnencodedChars(inputFile.getAbsolutePath());\n<|endfocus|>\n\n        return name + \"-\" + hashCode.toString() + \".jar\";\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "String", "<|s|>", "get", "Dex", "File", "Name", "(", "File", "<|s|>", "input", "File", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "get", "<|s|>", "the", "<|s|>", "filename", "<|nl|>", "<|8-s|>", "String", "<|s|>", "name", "<|s|>", "=", "<|s|>", "input", "File", ".", "get", "Name", "(", ");", "<|nl|>", "<|8-s|>", "//", "<|s|>", "remove", "<|s|>", "the", "<|s|>", "extension", "<|nl|>", "<|8-s|>", "int", "<|s|>", "pos", "<|s|>", "=", "<|s|>", "name", ".", "last", "Index", "Of", "(", "'", ".", "'", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "pos", "<|s|>", "!=", "<|s|>", "-", "1", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "name", "<|s|>", "=", "<|s|>", "name", ".", "substring", "(", "0", ",", "<|s|>", "pos", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "add", "<|s|>", "a", "<|s|>", "hash", "<|s|>", "of", "<|s|>", "the", "<|s|>", "original", "<|s|>", "file", "<|s|>", "path", "<|nl|>", "<|8-s|>", "Hash", "Function", "<|s|>", "hash", "Function", "<|s|>", "=", "<|s|>", "Hashing", ".", "md", "5", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Hash", "Code", "<|s|>", "hash", "Code", "<|s|>", "=", "<|s|>", "hash", "Function", ".", "hash", "Unencoded", "Chars", "(", "input", "File", ".", "get", "Absolute", "Path", "(", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "name", "<|s|>", "+", "<|s|>", "\"", "-", "\"", "<|s|>", "+", "<|s|>", "hash", "Code", ".", "to", "String", "(", ")", "<|s|>", "+", "<|s|>", "\"", ".", "jar", "\"", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 177, "base_patch_number": 2, "changed_patch_number": 4, "code_file_name": "android_2838", "comment_id": "bffcdced_86a4eb2d", "class_list": ["DexExecTask"], "func_list": ["public void setExecutable(Path executable)", "public void setVerbose(boolean verbose)", "public void setOutput(Path output)", "public void setDexedLibs(Path dexedLibs)", "public void setNoLocals(boolean nolocals)", "public void setForceJumbo(boolean forceJumbo)", "public void setDisableDexMerger(boolean disableMerger)", "public Object createPath()", "public Object createFileSet()", "private void preDexLibraries(List<File> inputs)", "private String getDexFileName(File inputFile)", "private void runDx(File input, String output, boolean showInputs)", "protected String getExecTaskName()"], "prime_var_dic": {"of": 4, "value": 4, "paths": 1, "if": 1, "file": 1}}, {"idx": 79466, "status": "update", "global_index": 7613, "project_name": "android_", "written_on": "2016-01-04 22:09:54", "tufano_target": "private boolean METHOD_5 ( TYPE_1 c ) { if ( VAR_1 > 0 && c . METHOD_2 ( ) . METHOD_3 ( ) == VAR_1 ) { return true ; } if ( VAR_2 != null && VAR_2 . equals ( c . METHOD_2 ( ) . METHOD_4 ( ) ) ) { return true ; } return false ; }", "comment": "'matches' is not very descriptive. Perhaps call this 'isTargetClient'?", "tokenized_comment": ["'", "matches", "'", "<|s|>", "is", "<|s|>", "not", "<|s|>", "very", "<|s|>", "descriptive", ".", "<|s|>", "Perhaps", "<|s|>", "call", "<|s|>", "this", "<|s|>", "'", "is", "Target", "Client", "'", "?"], "tufano_code": "private boolean METHOD_1 ( TYPE_1 c ) { if ( VAR_1 > 0 && c . METHOD_2 ( ) . METHOD_3 ( ) == VAR_1 ) { return true ; } if ( VAR_2 != null && VAR_2 . equals ( c . METHOD_2 ( ) . METHOD_4 ( ) ) ) { return true ; } return false ; }", "our_target": "        private boolean isTargetClient(Client c) {\n", "our_code": "<|startfocus|>\n        private boolean matches(Client c) {\n<|endfocus|>\n            if (processPid > 0 && c.getClientData().getPid() == processPid) {\n                return true;\n            }\n            if (processName != null\n                    && processName.equals(c.getClientData().getClientDescription())) {\n                return true;\n            }\n            return false;\n        }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|8-s|>", "private", "<|s|>", "boolean", "<|s|>", "matches", "(", "Client", "<|s|>", "c", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "process", "Pid", "<|s|>", ">", "<|s|>", "0", "<|s|>", "&&", "<|s|>", "c", ".", "get", "Client", "Data", "(", ")", ".", "get", "Pid", "(", ")", "<|s|>", "==", "<|s|>", "process", "Pid", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "process", "Name", "<|s|>", "!=", "<|s|>", "null", "<|nl|>", "<|16-s|>", "<|4-s|>", "&&", "<|s|>", "process", "Name", ".", "equals", "(", "c", ".", "get", "Client", "Data", "(", ")", ".", "get", "Client", "Description", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "return", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 97, "base_patch_number": 3, "changed_patch_number": 5, "code_file_name": "android_5587", "comment_id": "cac4a77f_7cddb533", "class_list": ["ClientUtils", "WaitForClient", "WaitForClients"], "func_list": ["public static Client findClient(IDevice device, String processName, int processPid)", "public static Client[] findAllClients(IDevice device)", "public WaitForClient(IDevice device, String processName, int processPid, long timeout)", "public Client get()", "private void checkDevice(IDevice device)", "private boolean matches(Client c)", "public void clientChanged(Client arg0, int arg1)", "public WaitForClients(IDevice device, long timeout)", "public Client[] get()", "public static Client[] findAllClients(IDevice device)"], "prime_var_dic": {}}, {"idx": 81493, "status": "update", "global_index": 12684, "project_name": "android_", "written_on": "2014-09-18 14:40:53", "tufano_target": "protected static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 class . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 , VAR_1 ) ; try { VAR_6 . METHOD_3 ( ) ; } catch ( TYPE_4 VAR_5 ) { throw new TYPE_5 ( VAR_5 ) ; } }", "comment": "CharactersStreamSucker?", "tokenized_comment": ["Characters", "Stream", "Sucker", "?"], "tufano_code": "protected static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 class . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 , VAR_1 ) ; try { VAR_4 . METHOD_3 ( ) ; } catch ( TYPE_4 VAR_5 ) { throw new TYPE_5 ( VAR_5 ) ; } }", "our_target": "      css.suck();\n", "our_code": "  protected static void printSubUsage(PrintStream printStream) {\n    InputStream is = Main.class.getResourceAsStream(\"/help.txt\");\n    BytesStreamSucker bss = new BytesStreamSucker(is, printStream);\n    try {\n<|startfocus|>\n      bss.suck();\n<|endfocus|>\n    } catch (IOException e) {\n      throw new AssertionError(e);\n    }\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "static", "<|s|>", "void", "<|s|>", "print", "Sub", "Usage", "(", "Print", "Stream", "<|s|>", "print", "Stream", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Input", "Stream", "<|s|>", "is", "<|s|>", "=", "<|s|>", "Main", ".", "class", ".", "get", "Resource", "As", "Stream", "(", "\"", "/", "help", ".", "txt", "\"", ");", "<|nl|>", "<|4-s|>", "Bytes", "Stream", "Sucker", "<|s|>", "bss", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Bytes", "Stream", "Sucker", "(", "is", ",", "<|s|>", "print", "Stream", ");", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "bss", ".", "suck", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "throw", "<|s|>", "new", "<|s|>", "Assertion", "Error", "(", "e", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 139, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_2256", "comment_id": "9081cf4e_b5f7aaef", "class_list": ["CommandLine"], "func_list": ["protected static void runJackAndExitOnError(@Nonnull Options options)", "public static void printVersion()", "public static void printUsage(@Nonnull Options options)", "protected static void printSubUsage(PrintStream printStream)", "public int compare(PropertyId<?> o1, PropertyId<?> o2)", "protected static void printExceptionMessage(@Nonnull Throwable t,"], "prime_var_dic": {"CommandLine": 1, "String": 1, "properties": 1, "value": 1}}, {"idx": 94525, "status": "insert", "global_index": 2887, "project_name": "android_", "written_on": "2017-03-27 16:24:12", "tufano_target": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { try { VAR_4 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_6 ) { TYPE_3 . METHOD_5 ( VAR_7 , STRING_1 , VAR_6 ) ; } catch ( TYPE_4 VAR_6 ) { TYPE_3 . METHOD_5 ( VAR_7 , STRING_2 , VAR_6 ) ; } } }", "comment": "likewise", "tokenized_comment": ["likewise"], "tufano_code": "private void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { try { VAR_4 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_6 ) { TYPE_3 . METHOD_5 ( VAR_7 , STRING_1 , VAR_6 ) ; } } }", "our_target": "                Log.e(TAG, \"Interrupting thread\", e);\n            } catch (IOException e) {\n                Log.e(TAG, \"Closing VPN interface\", e);\n", "our_code": "    private void setConnection(final Connection connection) {\n        final Connection oldConnection = mConnection.getAndSet(connection);\n        if (oldConnection != null) {\n            try {\n                oldConnection.first.interrupt();\n                oldConnection.second.close();\n            } catch (Exception e) {\n<|startfocus|>\n                Log.e(TAG, \"Interrupting thread\", e);\n<|endfocus|>\n            }\n        }\n\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "void", "<|s|>", "set", "Connection", "(", "final", "<|s|>", "Connection", "<|s|>", "connection", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Connection", "<|s|>", "old", "Connection", "<|s|>", "=", "<|s|>", "m", "Connection", ".", "get", "And", "Set", "(", "connection", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "old", "Connection", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "old", "Connection", ".", "first", ".", "interrupt", "(", ");", "<|nl|>", "<|16-s|>", "old", "Connection", ".", "second", ".", "close", "(", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "Log", ".", "e", "(", "TAG", ",", "<|s|>", "\"", "Interrupting", "<|s|>", "thread", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 151, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_3711", "comment_id": "b44a7e9e_b76ca48c", "class_list": ["ToyVpnService", "Connection"], "func_list": ["public Connection(Thread thread, ParcelFileDescriptor pfd)", "public void onCreate()", "public int onStartCommand(Intent intent, int flags, int startId)", "public void onDestroy()", "public boolean handleMessage(Message message)", "private void connect()", "private void startConnection(final ToyVpnConnection connection)", "public void onEstablish(ParcelFileDescriptor tunInterface)", "private void setConnectingThread(final Thread thread)", "private void setConnection(final Connection connection)", "private void disconnect()", "private void updateForegroundNotification(final int message)", "public Connection(Thread thread, ParcelFileDescriptor pfd)"], "prime_var_dic": {}}, {"idx": 72819, "status": "update", "global_index": 13733, "project_name": "android_", "written_on": "2014-12-31 17:26:14", "tufano_target": "private static < TYPE_6 extends TYPE_1 < TYPE_2 > > TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 , TYPE_7 < TYPE_6 > VAR_4 ) throws TYPE_8 { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( 0 ) ; TYPE_1 < TYPE_2 > list = VAR_2 ? new TYPE_4 < TYPE_2 > ( VAR_1 ) : new TYPE_5 < TYPE_2 > ( VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; ++ i ) { list . add ( VAR_3 . METHOD_3 ( ) ) ; } return list ; }", "comment": "it was like this when you found it, but passing ArrayList.class and Vector.class would have been clearer than a boolean.", "tokenized_comment": ["it", "<|s|>", "was", "<|s|>", "like", "<|s|>", "this", "<|s|>", "when", "<|s|>", "you", "<|s|>", "found", "<|s|>", "it", ",", "<|s|>", "but", "<|s|>", "passing", "<|s|>", "Array", "List", ".", "class", "<|s|>", "and", "<|s|>", "Vector", ".", "class", "<|s|>", "would", "<|s|>", "have", "<|s|>", "been", "<|s|>", "clearer", "<|s|>", "than", "<|s|>", "a", "<|s|>", "boolean", "."], "tufano_code": "private static TYPE_1 < TYPE_2 > METHOD_1 ( int VAR_1 , boolean VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( 0 ) ; TYPE_1 < TYPE_2 > list = VAR_2 ? new TYPE_4 < TYPE_2 > ( VAR_1 ) : new TYPE_5 < TYPE_2 > ( VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; ++ i ) { list . add ( VAR_3 . METHOD_3 ( ) ) ; } return list ; }", "our_target": "    private static <T extends List<Integer>> List<Integer> buildList(int arrayListLength, Class<T> listClass)\n            throws Exception {\n", "our_code": "<|startfocus|>\n    private static List<Integer> buildList(int arrayListLength, boolean useArrayList) {\n<|endfocus|>\n        Random random = new Random();\n        random.setSeed(0);\n        List<Integer> list = useArrayList ? new ArrayList<Integer>(arrayListLength) :\n                new Vector<Integer>(arrayListLength);\n        for (int i = 0; i < arrayListLength; ++i) {\n            list.add(random.nextInt());\n        }\n        return list;\n    }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|4-s|>", "private", "<|s|>", "static", "<|s|>", "List", "<", "Integer", ">", "<|s|>", "build", "List", "(", "int", "<|s|>", "array", "List", "Length", ",", "<|s|>", "boolean", "<|s|>", "use", "Array", "List", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "Random", "<|s|>", "random", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Random", "(", ");", "<|nl|>", "<|8-s|>", "random", ".", "set", "Seed", "(", "0", ");", "<|nl|>", "<|8-s|>", "List", "<", "Integer", ">", "<|s|>", "list", "<|s|>", "=", "<|s|>", "use", "Array", "List", "<|s|>", "?", "<|s|>", "new", "<|s|>", "Array", "List", "<", "Integer", ">", "(", "array", "List", "Length", ")", "<|s|>", ":", "<|nl|>", "<|16-s|>", "new", "<|s|>", "Vector", "<", "Integer", ">", "(", "array", "List", "Length", ");", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "array", "List", "Length", ";", "<|s|>", "++", "i", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "list", ".", "add", "(", "random", ".", "next", "Int", "(", ")", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|8-s|>", "return", "<|s|>", "list", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 69, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_957", "comment_id": "8ef61548_9f159361", "class_list": ["CollectionsBenchmark"], "func_list": ["public void timeSort_arrayList(int nreps)", "public int compare(Integer lhs, Integer rhs)", "public void timeSortWithComparator_arrayList(int nreps)", "public void timeSort_vector(int nreps)", "public void timeSortWithComparator_vector(int nreps)", "private static List<Integer> buildList(int arrayListLength, boolean useArrayList)"], "prime_var_dic": {}}, {"idx": 92707, "status": "update", "global_index": 12947, "project_name": "android_", "written_on": "2014-10-07 22:46:51", "tufano_target": "public static TYPE_1 METHOD_1 ( ) { try { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( INT_1 ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( STRING_4 ) . build ( ) ; } catch ( TYPE_2 VAR_2 ) { TYPE_3 . error ( VAR_2 ) ; } return null ; }", "comment": "Perhaps just \"Create\" instead of \"Quick-create\" ? Or maybe \"Default\" - \"Create Default Nexus 5\" indicating that it's using some default options like 100MB storage and host GPU etc. \n\n(Not sure where this string shows up in the UI.)", "tokenized_comment": ["Perhaps", "<|s|>", "just", "<|s|>", "\"", "Create", "\"", "<|s|>", "instead", "<|s|>", "of", "<|s|>", "\"", "Quick", "-", "create", "\"", "<|s|>", "?", "<|s|>", "Or", "<|s|>", "maybe", "<|s|>", "\"", "Default", "\"", "<|s|>", "-", "<|s|>", "\"", "Create", "<|s|>", "Default", "<|s|>", "Nexus", "<|s|>", "5", "\"", "<|s|>", "indicating", "<|s|>", "that", "<|s|>", "it", "'", "s", "<|s|>", "using", "<|s|>", "some", "<|s|>", "default", "<|s|>", "options", "<|s|>", "like", "<|s|>", "100", "MB", "<|s|>", "storage", "<|s|>", "and", "<|s|>", "host", "<|s|>", "GPU", "<|s|>", "etc", ".", "<|s|>", "<|nl|>", "<|nl|>", "(", "Not", "<|s|>", "sure", "<|s|>", "where", "<|s|>", "this", "<|s|>", "string", "<|s|>", "shows", "<|s|>", "up", "<|s|>", "in", "<|s|>", "the", "<|s|>", "UI", ".", ")"], "tufano_code": "public static TYPE_1 METHOD_1 ( ) { try { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( INT_1 ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( STRING_3 ) . build ( ) ; } catch ( TYPE_2 VAR_2 ) { TYPE_3 . error ( VAR_2 ) ; } return null ; }", "our_target": "        .setDisplayName(\"Default Nexus 5\")\n", "our_code": "  public static AvdInfo createNexus5() {\n    try {\n      return create()\n        .setDevice(\"Google\", \"Nexus 5\")\n        .setApiLevel(19)\n        .setAbiType(Abi.X86)\n<|startfocus|>\n        .setDisplayName(\"Quick-Create Nexus 5\")\n<|endfocus|>\n        .build();\n    }\n    catch (AvdBuilderException e) {\n      LOG.error(e);\n    }\n    return null;\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "static", "<|s|>", "Avd", "Info", "<|s|>", "create", "Nexus", "5", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "try", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "create", "(", ")", "<|nl|>", "<|8-s|>", ".", "set", "Device", "(", "\"", "Google", "\"", ",", "<|s|>", "\"", "Nexus", "<|s|>", "5", "\"", ")", "<|nl|>", "<|8-s|>", ".", "set", "Api", "Level", "(", "19", ")", "<|nl|>", "<|8-s|>", ".", "set", "Abi", "Type", "(", "Abi", ".", "X", "86", ")", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", ".", "set", "Display", "Name", "(", "\"", "Quick", "-", "Create", "<|s|>", "Nexus", "<|s|>", "5", "\"", ")", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", ".", "build", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "catch", "<|s|>", "(", "Avd", "Builder", "Exception", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "LOG", ".", "error", "(", "e", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 75, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_116", "comment_id": "d0b988d9_e56b815c", "class_list": ["AvdBuilder", "AvdBuilderException"], "func_list": ["public static AvdBuilder create()", "public static AvdInfo createNexus5()", "public static AvdInfo createNexus7()", "private AvdBuilder()", "public AvdBuilder setDevice(@NotNull String manufacturer, @NotNull String deviceId) throws AvdBuilderException", "public AvdBuilder setAbiType(@NotNull Abi abiType)", "public AvdBuilder setAndroidVersion(@NotNull AndroidVersion version)", "public AvdBuilder setApiLevel(int apiLevel)", "public AvdBuilder setApiString(@NotNull String apiString)", "public AvdBuilder setSystemImageDescription(@NotNull SystemImageDescription description)", "public AvdBuilder setRam(@NotNull Storage ram)", "public AvdBuilder setVmHeapStorage(@NotNull Storage vmHeapStorage)", "public AvdBuilder setSdCard(@NotNull File sdCardFile)", "public AvdBuilder setInternalStorage(@NotNull Storage internalStorage)", "public AvdBuilder setScale(@NotNull AvdScaleFactor scale)", "public AvdBuilder setUseHostGpu(boolean useHostGpu)", "public AvdBuilder setUseSnapshot(boolean useSnapshot)", "public AvdBuilder setFrontCamera(@NotNull String cameraType)", "public AvdBuilder setBackCamera(@NotNull String cameraType)", "public AvdBuilder setNetworkLatency(@NotNull String latency)", "public AvdBuilder setNetworkSpeed(@NotNull String speed)", "public AvdBuilder setDisplayName(@NotNull String displayName)", "public AvdBuilder setSkinFile(@NotNull File skinFile)", "public AvdBuilderException(String message)"], "prime_var_dic": {}}, {"idx": 1634, "status": "update", "global_index": 4023, "project_name": "android_", "written_on": "2017-02-17 17:15:45", "tufano_target": "public void METHOD_1 ( ) { String VAR_1 = STRING_1 ; TYPE_5 < TYPE_2 > VAR_2 = new TYPE_1 < > ( ) ; TYPE_5 < TYPE_2 > VAR_3 = new TYPE_1 < > ( TYPE_3 . METHOD_2 ( INT_1 , INT_2 ) ) ; String VAR_4 = STRING_2 + VAR_1 + STRING_3 ; assertEquals ( VAR_4 , TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }", "comment": "Set", "tokenized_comment": ["Set"], "tufano_code": "public void METHOD_1 ( ) { String VAR_1 = STRING_1 ; TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < > ( ) ; TYPE_1 < TYPE_2 > VAR_3 = new TYPE_1 < > ( TYPE_3 . METHOD_2 ( INT_1 , INT_2 ) ) ; String VAR_4 = STRING_2 + VAR_1 + STRING_3 ; assertEquals ( VAR_4 , TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }", "our_target": "        Set<Integer> anqpIds = new TreeSet<>();\n        Set<Integer> hs20Subtypes = new TreeSet<>(Arrays.asList(3, 7));\n", "our_code": "    public void testbuildAnqpQueryCommandWithOnlyHsSubtypes() {\n        String bssid = \"34:12:ac:45:21:12\";\n<|startfocus|>\n        TreeSet<Integer> anqpIds = new TreeSet<>();\n        TreeSet<Integer> hs20Subtypes = new TreeSet<>(Arrays.asList(3, 7));\n<|endfocus|>\n\n        String expectedCommand = \"HS20_ANQP_GET \" + bssid + \" 3,7\";\n        assertEquals(expectedCommand,\n                WifiNative.buildAnqpQueryCommand(bssid, anqpIds, hs20Subtypes));\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "testbuild", "Anqp", "Query", "Command", "With", "Only", "Hs", "Subtypes", "(", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "<|s|>", "bssid", "<|s|>", "=", "<|s|>", "\"", "34", ":", "12", ":", "ac", ":", "45", ":", "21", ":", "12", "\"", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "Tree", "Set", "<", "Integer", ">", "<|s|>", "anqp", "Ids", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Tree", "Set", "<", ">", "(", ");", "<|nl|>", "<|8-s|>", "Tree", "Set", "<", "Integer", ">", "<|s|>", "hs", "20", "Subtypes", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Tree", "Set", "<", ">", "(", "Arrays", ".", "as", "List", "(", "3", ",", "<|s|>", "7", ")", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|nl|>", "<|8-s|>", "String", "<|s|>", "expected", "Command", "<|s|>", "=", "<|s|>", "\"", "HS", "20", "_", "ANQP", "_", "GET", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "bssid", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "3", ",", "7", "\"", ";", "<|nl|>", "<|8-s|>", "assert", "Equals", "(", "expected", "Command", ",", "<|nl|>", "<|16-s|>", "Wifi", "Native", ".", "build", "Anqp", "Query", "Command", "(", "bssid", ",", "<|s|>", "anqp", "Ids", ",", "<|s|>", "hs", "20", "Subtypes", ")", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 608, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_5530", "comment_id": "37df2177_33fed66a", "class_list": ["WifiNativeTest", "FrameTypeMapping", "FateMapping"], "func_list": ["public void testSetNetworkExtra()", "public void testGetNetworkExtra()", "public void testTxFateReportCtorSetsFields()", "public void testRxFateReportCtorSetsFields()", "public void testFateReportTableHeader()", "public void testTxFateReportToTableRowString()", "public void testTxFateReportToVerboseStringWithPiiAllowed()", "public void testRxFateReportToTableRowString()", "public void testRxFateReportToVerboseStringWithPiiAllowed()", "public void testStartPktFateMonitoringReturnsFalseWhenHalIsNotStarted()", "public void testGetTxPktFatesReturnsErrorWhenHalIsNotStarted()", "public void testGetRxPktFatesReturnsErrorWhenHalIsNotStarted()", "public void testGetDriverStateDumpReturnsNullWhenHalIsNotStarted()", "public void testSetupDriverForClientMode()", "public void testSetupDriverForClientModeError()", "public void testSetupDriverForSoftApMode()", "public void testSetupDriverForSoftApModeError()", "public void testEnableSupplicant()", "public void testDisableSupplicant()", "public void testTearDownInterfaces()", "public void testbuildAnqpQueryCommandWithOnlyHsSubtypes()", "public void testbuildAnqpQueryCommandWithMixedTypes()"], "prime_var_dic": {}}, {"idx": 43392, "status": "update", "global_index": 11226, "project_name": "android_", "written_on": "2014-10-02 22:55:05", "tufano_target": "public TYPE_1 METHOD_1 ( String VAR_1 ) { return METHOD_10 ( STRING_1 ) . METHOD_9 ( VAR_1 ) ; }", "comment": "This ought to be a utility method somewhere.", "tokenized_comment": ["This", "<|s|>", "ought", "<|s|>", "to", "<|s|>", "be", "<|s|>", "a", "<|s|>", "utility", "<|s|>", "method", "<|s|>", "somewhere", "."], "tufano_code": "public TYPE_1 METHOD_1 ( String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_4 class ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_2 ( ) . METHOD_5 ( VAR_2 , new TYPE_4 < TYPE_3 > ( VAR_6 class ) { protected boolean METHOD_6 ( TYPE_3 VAR_7 ) { return VAR_7 . METHOD_7 ( ) . contains ( STRING_1 ) ; } } ) ; VAR_3 . METHOD_8 ( VAR_5 ) ; METHOD_9 ( VAR_1 ) ; return this ; }", "our_target": "    return clickActionButtonWithinTab(\"Add\").setName(newItemName);\n", "our_code": "  public ProjectStructureDialogFixture addToListWithinTab(@NotNull String newItemName) {\n<|startfocus|>\n    ActionToolbarImpl actionToolbar = robot.finder().findByType(getMainPanel(), ActionToolbarImpl.class);\n    ActionButton addButton = robot.finder().find(actionToolbar, new GenericTypeMatcher<ActionButton>(ActionButton.class) {\n      @Override\n      protected boolean isMatching(ActionButton actionButton) {\n        return actionButton.getToolTipText().contains(\"Add\");\n      }\n    });\n    robot.click(addButton);\n\n    setName(newItemName);\n    return this;\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Project", "Structure", "Dialog", "Fixture", "<|s|>", "add", "To", "List", "Within", "Tab", "(", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "new", "Item", "Name", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Action", "Toolbar", "Impl", "<|s|>", "action", "Toolbar", "<|s|>", "=", "<|s|>", "robot", ".", "finder", "(", ")", ".", "find", "By", "Type", "(", "get", "Main", "Panel", "(", ")", ",", "<|s|>", "Action", "Toolbar", "Impl", ".", "class", ");", "<|nl|>", "<|4-s|>", "Action", "Button", "<|s|>", "add", "Button", "<|s|>", "=", "<|s|>", "robot", ".", "finder", "(", ")", ".", "find", "(", "action", "Toolbar", ",", "<|s|>", "new", "<|s|>", "Generic", "Type", "Matcher", "<", "Action", "Button", ">", "(", "Action", "Button", ".", "class", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "@", "Override", "<|nl|>", "<|4-s|>", "<|2-s|>", "protected", "<|s|>", "boolean", "<|s|>", "is", "Matching", "(", "Action", "Button", "<|s|>", "action", "Button", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "action", "Button", ".", "get", "Tool", "Tip", "Text", "(", ")", ".", "contains", "(", "\"", "Add", "\"", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", ");", "<|nl|>", "<|4-s|>", "robot", ".", "click", "(", "add", "Button", ");", "<|nl|>", "<|nl|>", "<|4-s|>", "set", "Name", "(", "new", "Item", "Name", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "this", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 118, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_54", "comment_id": "10632029_566a125d", "class_list": ["ProjectStructureDialogFixture"], "func_list": ["public static ProjectStructureDialogFixture find(@NotNull IdeFrameFixture project, @NotNull Robot robot)", "private ProjectStructureDialogFixture(@NotNull Robot robot, @NotNull JDialog dialog)", "public ProjectStructureDialogFixture selectTab(@NotNull final String tabName)", "protected boolean isMatching(TabLabel tabLabel)", "public ProjectStructureDialogFixture selectFromListInTab(@NotNull String listItemName)", "public ProjectStructureDialogFixture addToListWithinTab(@NotNull String newItemName)", "public ProjectStructureDialogFixture removeFromListWithinTab(@NotNull String itemName)", "public ProjectStructureDialogFixture setName(@NotNull String newName)", "public String getName()", "public ProjectStructureDialogFixture setTextFieldValue(@NotNull String label, @NotNull String value)", "public String getTextFieldValue(@NotNull String label)", "public ProjectStructureDialogFixture setComoboBoxValue(@NotNull String label, @NotNull String value)", "public String getComboBoxValue(@NotNull String label)", "public void clickOk()", "public void clickCancel()", "public ProjectStructureDialogFixture clickApply()", "private JBTabsImpl getMainPanel()"], "prime_var_dic": {}}, {"idx": 45692, "status": "update", "global_index": 11259, "project_name": "android_", "written_on": "2014-12-18 17:19:47", "tufano_target": "protected TYPE_1 METHOD_1 ( ) { String VAR_1 = VAR_2 . getText ( ) ; if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return new TYPE_1 ( STRING_2 , VAR_2 ) ; } if ( ! VAR_3 . METHOD_3 ( VAR_1 ) ) { return new TYPE_1 ( VAR_3 . METHOD_4 ( VAR_1 ) , VAR_2 ) ; } return super . METHOD_1 ( ) ; }", "comment": "s/an/a/", "tokenized_comment": ["s", "/", "an", "/", "a", "/"], "tufano_code": "protected TYPE_1 METHOD_1 ( ) { String VAR_1 = VAR_2 . getText ( ) ; if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { return new TYPE_1 ( STRING_1 , VAR_2 ) ; } if ( ! VAR_3 . METHOD_3 ( VAR_1 ) ) { return new TYPE_1 ( VAR_3 . METHOD_4 ( VAR_1 ) , VAR_2 ) ; } return super . METHOD_1 ( ) ; }", "our_target": "      return new ValidationInfo(\"You must specify a style name\", myStyleNameTextField);\n", "our_code": "  protected ValidationInfo doValidate() {\n    String newStyleName = myStyleNameTextField.getText();\n    if (Strings.isNullOrEmpty(newStyleName)) {\n<|startfocus|>\n      return new ValidationInfo(\"You must specify an style name\", myStyleNameTextField);\n<|endfocus|>\n    }\n\n    if (!myResourceNameValidator.checkInput(newStyleName)) {\n      return new ValidationInfo(myResourceNameValidator.getErrorText(newStyleName), myStyleNameTextField);\n    }\n\n    return super.doValidate();\n  }", "tokenized_code": ["<|2-s|>", "protected", "<|s|>", "Validation", "Info", "<|s|>", "do", "Validate", "(", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "String", "<|s|>", "new", "Style", "Name", "<|s|>", "=", "<|s|>", "my", "Style", "Name", "Text", "Field", ".", "get", "Text", "(", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "Strings", ".", "is", "Null", "Or", "Empty", "(", "new", "Style", "Name", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Validation", "Info", "(", "\"", "You", "<|s|>", "must", "<|s|>", "specify", "<|s|>", "an", "<|s|>", "style", "<|s|>", "name", "\"", ",", "<|s|>", "my", "Style", "Name", "Text", "Field", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "!", "my", "Resource", "Name", "Validator", ".", "check", "Input", "(", "new", "Style", "Name", ")", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "new", "<|s|>", "Validation", "Info", "(", "my", "Resource", "Name", "Validator", ".", "get", "Error", "Text", "(", "new", "Style", "Name", ")", ",", "<|s|>", "my", "Style", "Name", "Text", "Field", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "return", "<|s|>", "super", ".", "do", "Validate", "(", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 87, "base_patch_number": 72, "changed_patch_number": 75, "code_file_name": "android_292", "comment_id": "81a8a891_2ff72936", "class_list": ["NewStyleDialog"], "func_list": ["public NewStyleDialog(@NotNull final Configuration configuration, @Nullable String defaultParentStyle, @Nullable String message)", "public void actionPerformed(ActionEvent e)", "protected JComponent createCenterPanel()", "public JComponent getPreferredFocusedComponent()", "protected ValidationInfo doValidate()", "public String getStyleName()", "public String getStyleParentName()"], "prime_var_dic": {"myResourceNameValidator": 1}}, {"idx": 96189, "status": "update", "global_index": 5726, "project_name": "android_", "written_on": "2016-05-27 22:34:02", "tufano_target": "public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , int [ ] VAR_2 ) { for ( int i = 0 ; i < VAR_2 . length ; i ++ ) { METHOD_2 ( context , VAR_1 , VAR_2 [ i ] ) ; } }", "comment": "just use appWidgetIds.length; why do you need N?", "tokenized_comment": ["just", "<|s|>", "use", "<|s|>", "app", "Widget", "Ids", ".", "length", ";", "<|s|>", "why", "<|s|>", "do", "<|s|>", "you", "<|s|>", "need", "<|s|>", "N", "?"], "tufano_code": "public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , int [ ] VAR_2 ) { final int VAR_3 = VAR_2 . length ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { METHOD_2 ( context , VAR_1 , VAR_2 [ i ] ) ; } }", "our_target": "        for (int i = 0; i < appWidgetIds.length; i++) {\n", "our_code": "    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\n        // There may be multiple widgets active, so update all of them\n<|startfocus|>\n        final int N = appWidgetIds.length;\n        for (int i = 0; i < N; i++) {\n<|endfocus|>\n            updateAppWidget(context, appWidgetManager, appWidgetIds[i]);\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Update", "(", "Context", "<|s|>", "context", ",", "<|s|>", "App", "Widget", "Manager", "<|s|>", "app", "Widget", "Manager", ",", "<|s|>", "int", "[", "]", "<|s|>", "app", "Widget", "Ids", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "There", "<|s|>", "may", "<|s|>", "be", "<|s|>", "multiple", "<|s|>", "widgets", "<|s|>", "active", ",", "<|s|>", "so", "<|s|>", "update", "<|s|>", "all", "<|s|>", "of", "<|s|>", "them", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "final", "<|s|>", "int", "<|s|>", "N", "<|s|>", "=", "<|s|>", "app", "Widget", "Ids", ".", "length", ";", "<|nl|>", "<|8-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ";", "<|s|>", "i", "<|s|>", "<", "<|s|>", "N", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "update", "App", "Widget", "(", "context", ",", "<|s|>", "app", "Widget", "Manager", ",", "<|s|>", "app", "Widget", "Ids", "[", "i", "]", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 35, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_881", "comment_id": "9cd76f7e_f00f587b", "class_list": ["AppWidget"], "func_list": ["public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds)", "static void updateAppWidget(Context context, AppWidgetManager appWidgetManager, int"], "prime_var_dic": {"Widget": 1}}, {"idx": 95847, "status": "update", "global_index": 11879, "project_name": "android_", "written_on": "2014-07-21 17:47:58", "tufano_target": "private static TYPE_1 METHOD_1 ( String VAR_1 ) { try { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; } if ( VAR_2 == null ) { throw new TYPE_3 ( STRING_2 + VAR_1 + STRING_3 ) ; } return VAR_2 ; } catch ( TYPE_4 VAR_3 ) { throw new TYPE_5 ( STRING_4 + VAR_1 + STRING_3 , VAR_3 ) ; } }", "comment": "likewise.", "tokenized_comment": ["likewise", "."], "tufano_code": "private static TYPE_1 METHOD_1 ( String VAR_1 ) { try { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; } if ( VAR_2 == null ) { throw new TYPE_3 ( STRING_2 + VAR_1 + STRING_3 ) ; } return VAR_2 ; } catch ( TYPE_4 VAR_3 ) { throw new TYPE_3 ( STRING_4 + VAR_1 + STRING_3 , VAR_3 ) ; } }", "our_target": "                throw new AssertionError(\"Error loading timezone: \\\"\" + timezoneId + \"\\\"\", e);\n", "our_code": "        private static ZoneInfo lookupZoneInfo(String timezoneId) {\n            try {\n                ZoneInfo zoneInfo = ZoneInfoDB.getInstance().makeTimeZone(timezoneId);\n                if (zoneInfo == null) {\n                    zoneInfo = ZoneInfoDB.getInstance().makeTimeZone(\"GMT\");\n                }\n                if (zoneInfo == null) {\n                    throw new IllegalStateException(\"GMT not found: \\\"\" + timezoneId + \"\\\"\");\n                }\n                return zoneInfo;\n            } catch (IOException e) {\n                // This should not ever be thrown.\n<|startfocus|>\n                throw new IllegalStateException(\n                        \"Error loading timezone: \\\"\" + timezoneId + \"\\\"\", e);\n<|endfocus|>\n            }\n        }", "tokenized_code": ["<|8-s|>", "private", "<|s|>", "static", "<|s|>", "Zone", "Info", "<|s|>", "lookup", "Zone", "Info", "(", "String", "<|s|>", "timezone", "Id", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "try", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Zone", "Info", "<|s|>", "zone", "Info", "<|s|>", "=", "<|s|>", "Zone", "Info", "DB", ".", "get", "Instance", "(", ")", ".", "make", "Time", "Zone", "(", "timezone", "Id", ");", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "zone", "Info", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "zone", "Info", "<|s|>", "=", "<|s|>", "Zone", "Info", "DB", ".", "get", "Instance", "(", ")", ".", "make", "Time", "Zone", "(", "\"", "GMT", "\"", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "zone", "Info", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "\"", "GMT", "<|s|>", "not", "<|s|>", "found", ":", "<|s|>", "\\", "\"", "\"", "<|s|>", "+", "<|s|>", "timezone", "Id", "<|s|>", "+", "<|s|>", "\"", "\\", "\"", "\"", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|16-s|>", "return", "<|s|>", "zone", "Info", ";", "<|nl|>", "<|12-s|>", "}", "<|s|>", "catch", "<|s|>", "(", "IOException", "<|s|>", "e", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "//", "<|s|>", "This", "<|s|>", "should", "<|s|>", "not", "<|s|>", "ever", "<|s|>", "be", "<|s|>", "thrown", ".", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "throw", "<|s|>", "new", "<|s|>", "Illegal", "State", "Exception", "(", "<|nl|>", "<|16-s|>", "<|8-s|>", "\"", "Error", "<|s|>", "loading", "<|s|>", "timezone", ":", "<|s|>", "\\", "\"", "\"", "<|s|>", "+", "<|s|>", "timezone", "Id", "<|s|>", "+", "<|s|>", "\"", "\\", "\"", "\"", ",", "<|s|>", "e", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 1085, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_1442", "comment_id": "191c281e_7fade30b", "class_list": ["represents", "is", "has", "Time", "is", "that", "originated", "(\"android.Time\")", "because", "TimeCalculator"], "func_list": ["public TimeCalculator(String timezoneId)", "public long toMillis(boolean ignoreDst)", "public void setTimeInMillis(long millis)", "public String format(String format)", "private void updateZoneInfoFromTimeZone()", "private static ZoneInfo lookupZoneInfo(String timezoneId)", "public void switchTimeZone(String timezone)", "public String format2445(boolean hasTime)", "private char toChar(int n)", "public String toStringInternal()", "public static int compare(TimeCalculator aObject, TimeCalculator bObject)", "public void copyFieldsToTime(Time time)", "public void copyFieldsFromTime(Time time)", "public TimeCalculator(String timezoneId)", "public long toMillis(boolean ignoreDst)", "public void setTimeInMillis(long millis)", "public String format(String format)", "private void updateZoneInfoFromTimeZone()", "private static ZoneInfo lookupZoneInfo(String timezoneId)", "public void switchTimeZone(String timezone)", "public String format2445(boolean hasTime)", "private char toChar(int n)", "public String toStringInternal()", "public static int compare(TimeCalculator aObject, TimeCalculator bObject)", "public void copyFieldsToTime(Time time)", "public void copyFieldsFromTime(Time time)", "public Time(String timezoneId)"], "prime_var_dic": {}}, {"idx": 92914, "status": "update", "global_index": 16857, "project_name": "android_", "written_on": "2015-07-07 10:33:05", "tufano_target": "private TYPE_1 < TYPE_2 > METHOD_8 ( ) { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( VAR_4 . METHOD_3 ( ) , true ) ; if ( VAR_2 == null ) { return TYPE_6 . METHOD_4 ( ) ; } TYPE_7 < TYPE_8 , TYPE_7 < String , TYPE_9 > > VAR_3 = VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; return METHOD_7 ( VAR_1 , VAR_3 , false ) ; }", "comment": "Is there any reasons not just using myConfiguration?", "tokenized_comment": ["Is", "<|s|>", "there", "<|s|>", "any", "<|s|>", "reasons", "<|s|>", "not", "<|s|>", "just", "<|s|>", "using", "<|s|>", "my", "Configuration", "?"], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , true ) ; if ( VAR_2 == null ) { return TYPE_6 . METHOD_4 ( ) ; } TYPE_7 < TYPE_8 , TYPE_7 < String , TYPE_9 > > VAR_3 = VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; return METHOD_7 ( VAR_1 , VAR_3 , false ) ; }", "our_target": "  private List<StyleResourceValue> resolveProjectThemes() {\n    LocalResourceRepository repository = AppResourceRepository.getAppResources(myConfiguration.getModule(), true);\n", "our_code": "<|startfocus|>\n  private List<StyleResourceValue> getProjectThemes(@NotNull Configuration configuration) {\n    LocalResourceRepository repository = AppResourceRepository.getAppResources(configuration.getModule(), true);\n<|endfocus|>\n    if (repository == null) {\n      return Collections.emptyList();\n    }\n\n    Map<ResourceType, Map<String, ResourceValue>> resources = repository.getConfiguredResources(configuration.getFullConfig());\n    return getThemes(configuration, resources, false /*isFramework*/);\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "List", "<", "Style", "Resource", "Value", ">", "<|s|>", "get", "Project", "Themes", "(", "@", "Not", "Null", "<|s|>", "Configuration", "<|s|>", "configuration", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "Local", "Resource", "Repository", "<|s|>", "repository", "<|s|>", "=", "<|s|>", "App", "Resource", "Repository", ".", "get", "App", "Resources", "(", "configuration", ".", "get", "Module", "(", ")", ",", "<|s|>", "true", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "repository", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "return", "<|s|>", "Collections", ".", "empty", "List", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|nl|>", "<|4-s|>", "Map", "<", "Resource", "Type", ",", "<|s|>", "Map", "<", "String", ",", "<|s|>", "Resource", "Value", ">>", "<|s|>", "resources", "<|s|>", "=", "<|s|>", "repository", ".", "get", "Configured", "Resources", "(", "configuration", ".", "get", "Full", "Config", "(", ")", ");", "<|nl|>", "<|4-s|>", "return", "<|s|>", "get", "Themes", "(", "configuration", ",", "<|s|>", "resources", ",", "<|s|>", "false", "<|s|>", "/*", "is", "Framework", "*/", ");", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 122, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_321", "comment_id": "d829ca86_6e258fb8", "class_list": ["ThemeResolver"], "func_list": ["public ThemeResolver(@NotNull Configuration configuration)", "private void resolveStyle(StyleResourceValue style, @NotNull ImmutableList.Builder<ThemeEditorStyle> sink, @Nullable Collection<StyleResourceValue> parentSink)", "private List<StyleResourceValue> getFrameworkThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getProjectThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getLocallyDefinedModuleThemes(@NotNull Configuration configuration)", "private List<StyleResourceValue> getThemes(@NotNull Configuration configuration,", "public ThemeEditorStyle getTheme(@NotNull String themeName)", "public ImmutableList<ThemeEditorStyle> getLocalThemes()", "public ImmutableList<ThemeEditorStyle> getResolvedThemes()", "public ImmutableList<ThemeEditorStyle> getFrameworkThemes()", "public int getThemesCount()"], "prime_var_dic": {"myConfiguration": 1, "myResolver": 1}}, {"idx": 12146, "status": "update", "global_index": 15139, "project_name": "android_", "written_on": "2014-05-22 23:59:04", "tufano_target": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_4 = VAR_2 ; TYPE_3 VAR_6 = VAR_2 . METHOD_3 ( ) ? null : VAR_2 . METHOD_1 ( ) . METHOD_2 ( VAR_7 ) ; if ( VAR_6 != null ) { VAR_8 = new TYPE_4 ( VAR_6 , VAR_2 ) ; } else { VAR_8 = null ; } }", "comment": "It is more reliable to check project.isDefaultProject() than checking if it has a base dir.", "tokenized_comment": ["It", "<|s|>", "is", "<|s|>", "more", "<|s|>", "reliable", "<|s|>", "to", "<|s|>", "check", "<|s|>", "project", ".", "is", "Default", "Project", "(", ")", "<|s|>", "than", "<|s|>", "checking", "<|s|>", "if", "<|s|>", "it", "<|s|>", "has", "<|s|>", "a", "<|s|>", "base", "<|s|>", "dir", "."], "tufano_code": "public VAR_1 ( TYPE_1 VAR_2 ) { VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_4 = VAR_2 ; TYPE_3 VAR_5 = VAR_2 . METHOD_1 ( ) ; TYPE_3 VAR_6 = VAR_5 != null ? VAR_5 . METHOD_2 ( VAR_7 ) : null ; if ( VAR_6 != null ) { VAR_8 = new TYPE_4 ( VAR_6 , VAR_2 ) ; } else { VAR_8 = null ; } }", "our_target": "    VirtualFile vf = project.isDefault() ? null : project.getBaseDir().findChild(SdkConstants.FN_BUILD_GRADLE);\n", "our_code": "  public AndroidProjectConfigurable(Project project) {\n    myKeyValuePane = new KeyValuePane(project);\n    myProject = project;\n<|startfocus|>\n    VirtualFile baseDir = project.getBaseDir();\n    VirtualFile vf = baseDir != null ? baseDir.findChild(SdkConstants.FN_BUILD_GRADLE) : null;\n<|endfocus|>\n    if (vf != null) {\n      myGradleBuildFile = new GradleBuildFile(vf, project);\n    } else {\n      myGradleBuildFile = null;\n    }\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Android", "Project", "Configurable", "(", "Project", "<|s|>", "project", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "my", "Key", "Value", "Pane", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Key", "Value", "Pane", "(", "project", ");", "<|nl|>", "<|4-s|>", "my", "Project", "<|s|>", "=", "<|s|>", "project", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "Virtual", "File", "<|s|>", "base", "Dir", "<|s|>", "=", "<|s|>", "project", ".", "get", "Base", "Dir", "(", ");", "<|nl|>", "<|4-s|>", "Virtual", "File", "<|s|>", "vf", "<|s|>", "=", "<|s|>", "base", "Dir", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "?", "<|s|>", "base", "Dir", ".", "find", "Child", "(", "Sdk", "Constants", ".", "FN", "_", "BUILD", "_", "GRADLE", ")", "<|s|>", ":", "<|s|>", "null", ";", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "vf", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Gradle", "Build", "File", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Gradle", "Build", "File", "(", "vf", ",", "<|s|>", "project", ");", "<|nl|>", "<|4-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "my", "Gradle", "Build", "File", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 59, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_583", "comment_id": "9f9d5828_75e6887e", "class_list": ["AndroidProjectConfigurable"], "func_list": ["public AndroidProjectConfigurable(Project project)", "public void setDisplayName(String name)", "public Object getEditableObject()", "public String getBannerSlogan()", "public JComponent createOptionsPanel()", "public String getDisplayName()", "public String getHelpTopic()", "public boolean isModified()", "public void run()", "public void reset()", "public void disposeUIResources()", "public Icon getIcon(boolean expanded)"], "prime_var_dic": {"String": 1, "myKeyValuePane": 1, "myProject": 1, "myGradleBuildFile": 1, "ImmutableList": 1}}, {"idx": 42913, "status": "update", "global_index": 13476, "project_name": "android_", "written_on": "2014-12-02 14:38:04", "tufano_target": "public static void main ( String [ ] args ) { VAR_1 = new char [ INT_1 * INT_2 ] [ ] ; if ( ! METHOD_1 ( VAR_1 ) ) { VAR_2 . METHOD_2 ( STRING_3 ) ; } if ( ! METHOD_3 ( ) ) { VAR_2 . METHOD_2 ( STRING_2 ) ; } TYPE_1 . METHOD_4 ( ) ; }", "comment": "threw -> throw", "tokenized_comment": ["threw", "<|s|>", "->", "<|s|>", "throw"], "tufano_code": "public static void main ( String [ ] args ) { VAR_1 = new char [ INT_1 * INT_2 ] [ ] ; if ( ! METHOD_1 ( VAR_1 ) ) { VAR_2 . METHOD_2 ( STRING_1 ) ; } if ( ! METHOD_3 ( ) ) { VAR_2 . METHOD_2 ( STRING_2 ) ; } TYPE_1 . METHOD_4 ( ) ; }", "our_target": "            System.out.println(\"NEW_ARRAY did not throw OOME\");\n", "our_code": "    public static void main(String[] args) {\n        // Keep holder alive to make instance OOM happen faster\n        holder = new char[128 * 1024][];\n        if (!triggerArrayOOM(holder)) {\n<|startfocus|>\n            System.out.println(\"NEW_ARRAY did not threw OOME\");\n<|endfocus|>\n        }\n\n        if (!triggerInstanceFinalizerOOM()) {\n            System.out.println(\"NEW_INSTANCE (finalize) did not threw OOME\");\n        }\n\n        System.runFinalization();\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "void", "<|s|>", "main", "(", "String", "[", "]", "<|s|>", "args", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "//", "<|s|>", "Keep", "<|s|>", "holder", "<|s|>", "alive", "<|s|>", "to", "<|s|>", "make", "<|s|>", "instance", "<|s|>", "OOM", "<|s|>", "happen", "<|s|>", "faster", "<|nl|>", "<|8-s|>", "holder", "<|s|>", "=", "<|s|>", "new", "<|s|>", "char", "[", "128", "<|s|>", "*", "<|s|>", "1024", "]", "[", "];", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "trigger", "Array", "OOM", "(", "holder", ")", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "System", ".", "out", ".", "println", "(", "\"", "NEW", "_", "ARRAY", "<|s|>", "did", "<|s|>", "not", "<|s|>", "threw", "<|s|>", "OOME", "\"", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "!", "trigger", "Instance", "Finalizer", "OOM", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "System", ".", "out", ".", "println", "(", "\"", "NEW", "_", "INSTANCE", "<|s|>", "(", "finalize", ")", "<|s|>", "did", "<|s|>", "not", "<|s|>", "threw", "<|s|>", "OOME", "\"", ");", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "System", ".", "run", "Finalization", "(", ");", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 62, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4995", "comment_id": "5f8a0930_73c91884", "class_list": ["Main", "ArrayMemEater", "InstanceFinalizerMemEater"], "func_list": ["static void blowup(char[][] holder)", "public void finalize() }", "static boolean triggerArrayOOM(char[][] holder)", "static boolean triggerInstanceFinalizerOOM()", "public static void main(String[] args)", "static void blowup(char[][] holder)", "public void finalize() }"], "prime_var_dic": {}}, {"idx": 94307, "status": "update", "global_index": 1926, "project_name": "android_", "written_on": "2017-05-09 22:22:06", "tufano_target": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 + VAR_2 + STRING_2 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 = null ; VAR_4 . add ( VAR_5 ) ; TYPE_2 info = METHOD_4 ( VAR_2 ) ; TYPE_3 VAR_6 = ( info == null ) ? null : info . METHOD_5 ( ) ; if ( VAR_6 != null ) { METHOD_6 ( VAR_6 . METHOD_7 ( ) ) ; } else { METHOD_8 ( VAR_2 ) ; } VAR_7 = true ; METHOD_9 ( ) ; }", "comment": "For readability, I'd prefer the conditional to be in brackets; e.g.\ncontroller = (info == null) ? ...", "tokenized_comment": ["For", "<|s|>", "readability", ",", "<|s|>", "I", "'", "d", "<|s|>", "prefer", "<|s|>", "the", "<|s|>", "conditional", "<|s|>", "to", "<|s|>", "be", "<|s|>", "in", "<|s|>", "brackets", ";", "<|s|>", "e", ".", "g", ".", "<|nl|>", "controller", "<|s|>", "=", "<|s|>", "(", "info", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "?", "<|s|>", "..."], "tufano_code": "public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 + VAR_2 + STRING_2 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 = null ; VAR_4 . add ( VAR_5 ) ; TYPE_2 info = METHOD_4 ( VAR_2 ) ; TYPE_3 VAR_6 = info == null ? null : info . METHOD_5 ( ) ; if ( VAR_6 != null ) { METHOD_6 ( VAR_6 . METHOD_7 ( ) ) ; } else { METHOD_8 ( VAR_2 ) ; } VAR_7 = true ; METHOD_9 ( ) ; }", "our_target": "            MediaController controller = (info == null) ? null : info.getMediaController();\n", "our_code": "        public void onConnected() {\n            Log.d(TAG, \"BrowsablePlayerListBuilder: \" + mCurrentPlayer.packageName + \" OK\");\n            mCurrentBrowser.disconnect();\n            mCurrentBrowser = null;\n            mBrowsePlayerInfoList.add(mCurrentPlayer);\n            MediaPlayerInfo info = getMediaPlayerInfo(mCurrentPlayer.packageName);\n<|startfocus|>\n            MediaController controller = info == null ? null : info.getMediaController();\n<|endfocus|>\n            // Refresh the media player entry so it notices we can browse\n            if (controller != null) {\n                addMediaPlayerController(controller.getWrappedInstance());\n            } else {\n                addMediaPlayerPackage(mCurrentPlayer.packageName);\n            }\n            mPlayersChanged = true;\n            connectNextPlayer();\n        }", "tokenized_code": ["<|8-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Connected", "(", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "Log", ".", "d", "(", "TAG", ",", "<|s|>", "\"", "Browsable", "Player", "List", "Builder", ":", "<|s|>", "\"", "<|s|>", "+", "<|s|>", "m", "Current", "Player", ".", "package", "Name", "<|s|>", "+", "<|s|>", "\"", "<|s|>", "OK", "\"", ");", "<|nl|>", "<|12-s|>", "m", "Current", "Browser", ".", "disconnect", "(", ");", "<|nl|>", "<|12-s|>", "m", "Current", "Browser", "<|s|>", "=", "<|s|>", "null", ";", "<|nl|>", "<|12-s|>", "m", "Browse", "Player", "Info", "List", ".", "add", "(", "m", "Current", "Player", ");", "<|nl|>", "<|12-s|>", "Media", "Player", "Info", "<|s|>", "info", "<|s|>", "=", "<|s|>", "get", "Media", "Player", "Info", "(", "m", "Current", "Player", ".", "package", "Name", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|12-s|>", "Media", "Controller", "<|s|>", "controller", "<|s|>", "=", "<|s|>", "info", "<|s|>", "==", "<|s|>", "null", "<|s|>", "?", "<|s|>", "null", "<|s|>", ":", "<|s|>", "info", ".", "get", "Media", "Controller", "(", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "//", "<|s|>", "Refresh", "<|s|>", "the", "<|s|>", "media", "<|s|>", "player", "<|s|>", "entry", "<|s|>", "so", "<|s|>", "it", "<|s|>", "notices", "<|s|>", "we", "<|s|>", "can", "<|s|>", "browse", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "controller", "<|s|>", "!=", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "add", "Media", "Player", "Controller", "(", "controller", ".", "get", "Wrapped", "Instance", "(", ")", ");", "<|nl|>", "<|12-s|>", "}", "<|s|>", "else", "<|s|>", "{", "<|nl|>", "<|16-s|>", "add", "Media", "Player", "Package", "(", "m", "Current", "Player", ".", "package", "Name", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "m", "Players", "Changed", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|12-s|>", "connect", "Next", "Player", "(", ");", "<|nl|>", "<|8-s|>", "}"], "base_code_line_number": 1728, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_4213", "comment_id": "94438433_4066d115", "class_list": ["Avrcp", "MediaKeyLog", "MediaControllerListener", "AvrcpMessageHandler", "MediaAttributes", "AvrcpServiceBootReceiver", "AvrcpServiceBroadcastReceiver", "BrowsablePlayerListBuilder", "AvrcpBrowseManager", "which", "implements", "AvrcpMediaRsp"], "func_list": ["public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "private AvrcpMessageHandler mHandler;", "private void start()", "public static Avrcp make(Context context)", "public void doQuit()", "public void cleanup()", "public void onMetadataChanged(MediaMetadata metadata)", "public void onSessionDestroyed()", "public void onQueueChanged(List<MediaSession.QueueItem> queue)", "private AvrcpMessageHandler mHandler;", "public void handleMessage(Message msg)", "private void updatePlaybackState(PlaybackState state)", "private void updateTransportControls(int transportControlFlags)", "public MediaAttributes(MediaMetadata data)", "public long getLength()", "public boolean equals(MediaAttributes other)", "public String getString(int attrId)", "private String stringOrBlank(String s)", "private String longStringOrBlank(Long s)", "private void updateCurrentMediaState()", "private void getRcFeaturesRequestFromNative(byte[] address, int features)", "private void getPlayStatusRequestFromNative(byte[] address)", "private void getElementAttrRequestFromNative(byte[] address, byte numAttr, int[] attrs)", "private void registerNotificationRequestFromNative(byte[] address,int eventId, int param)", "private void processRegisterNotification(byte[] address, int eventId, int param)", "private void handlePassthroughCmdRequestFromNative(byte[] address, int id, int keyState)", "private void sendTrackChangedRsp(boolean requested)", "private void trackChangeRspForBrowseUnsupported(boolean requested)", "private long getPlayPosition()", "private int convertPlayStateToPlayStatus(PlaybackState state)", "private boolean isPlayingState(PlaybackState state)", "private void sendPlayPosNotificationRsp(boolean requested)", "public boolean isAbsoluteVolumeSupported()", "public void adjustVolume(int direction)", "public void setAbsoluteVolume(int volume)", "private void volumeChangeRequestFromNative(byte[] address, int volume, int ctype)", "private void getFolderItemsRequestFromNative(", "private void setAddressedPlayerRequestFromNative(byte[] address, int playerId)", "private void setBrowsedPlayerRequestFromNative(byte[] address, int playerId)", "private void changePathRequestFromNative(byte[] address, byte direction, byte[] folderUid)", "private void getItemAttrRequestFromNative(byte[] address, byte scope, byte[] itemUid, int uidCounter,", "private void searchRequestFromNative(byte[] address, int charsetId, byte[] searchStr)", "private void playItemRequestFromNative(byte[] address, byte scope, int uidCounter, byte[] uid)", "private void addToPlayListRequestFromNative(byte[] address, byte scope, byte[] uid, int uidCounter)", "private void getTotalNumOfItemsRequestFromNative(byte[] address, byte scope)", "private void notifyVolumeChanged(int volume)", "private int convertToAudioStreamVolume(int volume)", "private int convertToAvrcpVolume(int volume)", "private void blackListCurrentDevice()", "private int modifyRcFeatureFromBlacklist(int feature, String address)", "public void resetBlackList(String address)", "public void setA2dpAudioState(int state)", "public void onReceive(Context context, Intent intent)", "private void handlePackageModified(String packageName, boolean removed)", "private boolean isBrowsableListUpdated(String newPackageName)", "private void removePackageFromBrowseList(String packageName)", "private int getBrowseId(String packageName)", "private void setAddressedPlayerRequestFromNative(byte[] address, int playerId)", "private void setBrowsedPlayerRequestFromNative(byte[] address, int playerId)", "public void onActiveSessionsChanged(", "private void setAddressedMediaSessionPackage(@Nullable String packageName)", "private void setActiveMediaSession(MediaSession.Token token)", "private boolean startBrowseService(byte[] bdaddr, String packageName)", "private String getBrowseServiceName(String packageName)", "public BrowsablePlayerListBuilder() }", "private void connectNextPlayer()", "public void onConnected()", "public void onConnectionFailed()", "private void initMediaPlayersList()", "private boolean addMediaPlayerPackage(String packageName)", "private boolean addMediaPlayerController(android.media.session.MediaController controller)", "private boolean addMediaPlayerInfo(MediaPlayerInfo info)", "private MediaPlayerInfo removeMediaPlayerInfo(String packageName)", "private void removeMediaController(android.media.session.MediaController controller)", "private byte getPlayStateBytes(PlaybackState pbState)", "private int convertPlayStateToBytes(int playState)", "private short[] getFeatureBitMask(String packageName)", "private boolean isBrowseSupported(String packageName)", "private String getPackageName(int id)", "private String getCurrentBrowsedPlayer(byte[] bdaddr)", "private MediaPlayerInfo getAddressedPlayerInfo()", "private MediaPlayerInfo getMediaPlayerInfo(String packageName)", "private MediaPlayerListRsp prepareMediaPlayerRspObj()", "private void handleMediaPlayerListRsp(AvrcpCmd.FolderItemsCmd folderObj)", "private boolean updateCurrentController(int addrId, int browseId)", "private void handleGetFolderItemBrowseResponse(AvrcpCmd.FolderItemsCmd folderObj, byte[] bdaddr)", "private void updateNewIds(int addrId, int browseId)", "private String getAppLabel(String packageName)", "private void handlePlayItemResponse(byte[] bdaddr, byte[] uid, byte scope)", "private void handleGetItemAttr(AvrcpCmd.ItemAttrCmd itemAttr)", "private void handleGetTotalNumOfItemsResponse(byte[] bdaddr, byte scope)", "private boolean isAddrPlayerSameAsBrowsed(byte[] bdaddr)", "private boolean isPackageNameValid(String browsedPackage)", "private boolean isPlayerAlreadyAddressed(int selectedId)", "public void dump(StringBuilder sb)", "public AvrcpBrowseManager(Context context, AvrcpMediaRspInterface mediaInterface)", "public BrowsedMediaPlayer getBrowsedMediaPlayer(byte[] bdaddr)", "public boolean clearBrowsedMediaPlayer(byte[] bdaddr)", "private byte[] hexStringToByteArray(String s)", "public void setAddrPlayerRsp(byte[] address, int rspStatus)", "public void setBrowsedPlayerRsp(byte[] address, int rspStatus, byte depth, int numItems,", "public void mediaPlayerListRsp(byte[] address, int rspStatus, MediaPlayerListRsp rspObj)", "public void folderItemsRsp(byte[] address, int rspStatus, FolderItemsRsp rspObj)", "public void changePathRsp(byte[] address, int rspStatus, int numItems)", "public void getItemAttrRsp(byte[] address, int rspStatus, ItemAttrRsp rspObj)", "public void playItemRsp(byte[] address, int rspStatus)", "public void getTotalNumOfItemsRsp(byte[] address, int rspStatus, int uidCounter,", "public void addrPlayerChangedRsp(int type, int playerId, int uidCounter)", "public void avalPlayerChangedRsp(byte[] address, int type)", "public void uidsChangedRsp(byte[] address, int type, int uidCounter)", "public void nowPlayingChangedRsp(int type)", "public void trackChangedRsp(int type, byte[] uid)", "public AvrcpBrowseManager getAvrcpBrowseManager()", "private void handlePassthroughCmdRequestFromNative(byte[] address, int id, int keyState)", "private int avrcpPassthroughToKeyCode(int operation)", "private void addKeyPending(KeyEvent event)", "private void recordKeyDispatched(KeyEvent event, String packageName)", "public void onMediaKeyEventDispatched(KeyEvent event, MediaSession.Token token)", "public void onAddressedPlayerChanged(MediaSession.Token token)", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()", "public void setAddrPlayerRsp(byte[] address, int rspStatus)", "public void setBrowsedPlayerRsp(byte[] address, int rspStatus, byte depth, int numItems,", "public void mediaPlayerListRsp(byte[] address, int rspStatus, MediaPlayerListRsp rspObj)", "public void folderItemsRsp(byte[] address, int rspStatus, FolderItemsRsp rspObj)", "public void changePathRsp(byte[] address, int rspStatus, int numItems)", "public void getItemAttrRsp(byte[] address, int rspStatus, ItemAttrRsp rspObj)", "public void playItemRsp(byte[] address, int rspStatus)", "public void getTotalNumOfItemsRsp(byte[] address, int rspStatus, int uidCounter,", "public void addrPlayerChangedRsp(int type, int playerId, int uidCounter)", "public void avalPlayerChangedRsp(byte[] address, int type)", "public void uidsChangedRsp(byte[] address, int type, int uidCounter)", "public void nowPlayingChangedRsp(int type)", "public void trackChangedRsp(int type, byte[] uid)", "public MediaKeyLog(long time, KeyEvent event)", "public boolean addDispatch(long time, KeyEvent event, String packageName)", "public String toString()"], "prime_var_dic": {"int": 38, "avrc_defs": 1, "from": 1, "dispatches": 1, "keys": 1}}, {"idx": 3726, "status": "update", "global_index": 14057, "project_name": "android_", "written_on": "2015-02-14 00:29:26", "tufano_target": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { long id ; boolean VAR_2 = VAR_1 . METHOD_2 ( ) && VAR_3 < VAR_4 ; id = VAR_1 . METHOD_3 ( INT_1 , 0 , VAR_2 ) ; TYPE_1 VAR_5 = new TYPE_1 ( id , VAR_1 ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; return VAR_5 ; }", "comment": "you could directly assign the condition above to mUseIncSupp", "tokenized_comment": ["you", "<|s|>", "could", "<|s|>", "directly", "<|s|>", "assign", "<|s|>", "the", "<|s|>", "condition", "<|s|>", "above", "<|s|>", "to", "<|s|>", "m", "Use", "Inc", "Supp"], "tufano_code": "public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { long id ; boolean VAR_2 = false ; if ( VAR_1 . METHOD_2 ( ) && VAR_3 < VAR_4 ) { VAR_2 = true ; } id = VAR_1 . METHOD_3 ( INT_1 , 0 , VAR_2 ) ; TYPE_1 VAR_5 = new TYPE_1 ( id , VAR_1 ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; return VAR_5 ; }", "our_target": "        boolean mUseIncSupp = rs.isUseNative() &&\n                              android.os.Build.VERSION.SDK_INT < INTRINSIC_API_LEVEL;\n\n", "our_code": "    public static ScriptIntrinsicResize create(RenderScript rs) {\n        long id;\n<|startfocus|>\n        boolean mUseIncSupp = false;\n        if (rs.isUseNative() && android.os.Build.VERSION.SDK_INT < INTRINSIC_API_LEVEL) {\n            mUseIncSupp = true;\n        }\n<|endfocus|>\n        id = rs.nScriptIntrinsicCreate(12, 0, mUseIncSupp);\n\n        ScriptIntrinsicResize si = new ScriptIntrinsicResize(id, rs);\n        si.setIncSupp(mUseIncSupp);\n        return si;\n\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "static", "<|s|>", "Script", "Intrinsic", "Resize", "<|s|>", "create", "(", "Render", "Script", "<|s|>", "rs", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "long", "<|s|>", "id", ";", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "boolean", "<|s|>", "m", "Use", "Inc", "Supp", "<|s|>", "=", "<|s|>", "false", ";", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "rs", ".", "is", "Use", "Native", "(", ")", "<|s|>", "&&", "<|s|>", "android", ".", "os", ".", "Build", ".", "VERSION", ".", "SDK", "_", "INT", "<|s|>", "<", "<|s|>", "INTRINSIC", "_", "API", "_", "LEVEL", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "m", "Use", "Inc", "Supp", "<|s|>", "=", "<|s|>", "true", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|8-s|>", "id", "<|s|>", "=", "<|s|>", "rs", ".", "n", "Script", "Intrinsic", "Create", "(", "12", ",", "<|s|>", "0", ",", "<|s|>", "m", "Use", "Inc", "Supp", ");", "<|nl|>", "<|nl|>", "<|8-s|>", "Script", "Intrinsic", "Resize", "<|s|>", "si", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Script", "Intrinsic", "Resize", "(", "id", ",", "<|s|>", "rs", ");", "<|nl|>", "<|8-s|>", "si", ".", "set", "Inc", "Supp", "(", "m", "Use", "Inc", "Supp", ");", "<|nl|>", "<|8-s|>", "return", "<|s|>", "si", ";", "<|nl|>", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 47, "base_patch_number": 6, "changed_patch_number": 7, "code_file_name": "android_5665", "comment_id": "0b4dbcae_bcf42155", "class_list": ["ScriptIntrinsicResize"], "func_list": ["protected ScriptIntrinsicResize(long id, RenderScript rs)", "public static ScriptIntrinsicResize create(RenderScript rs)", "public void setInput(Allocation ain)", "public void forEach_bicubic(Allocation aout)"], "prime_var_dic": {"the": 1, "int": 1, "Element": 2, "RenderScript": 1, "input": 1, "for": 1}}, {"idx": 77081, "status": "update", "global_index": 12627, "project_name": "android_", "written_on": "2014-09-19 16:44:22", "tufano_target": "public boolean METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) & VAR_1 ) != 0 ) { switch ( event . METHOD_3 ( ) ) { case VAR_2 : { final float VAR_3 ; final float VAR_4 ; if ( VAR_3 != FLOAT_1 || VAR_4 != FLOAT_1 ) { VAR_7 . METHOD_5 ( VAR_3 , VAR_4 ) ; } } } } return true ; }", "comment": "final float hscroll = event.get.....\nfinal float vscroll = -event.get.....", "tokenized_comment": ["final", "<|s|>", "float", "<|s|>", "hscroll", "<|s|>", "=", "<|s|>", "event", ".", "get", "...", "<|nl|>", "final", "<|s|>", "float", "<|s|>", "vscroll", "<|s|>", "=", "<|s|>", "-", "event", ".", "get", "..."], "tufano_code": "public boolean METHOD_1 ( TYPE_1 event ) { if ( ( event . METHOD_2 ( ) & VAR_1 ) != 0 ) { switch ( event . METHOD_3 ( ) ) { case VAR_2 : { final float VAR_3 ; final float VAR_4 ; VAR_3 = event . METHOD_4 ( VAR_5 ) ; VAR_4 = - event . METHOD_4 ( VAR_6 ) ; if ( VAR_3 != FLOAT_1 || VAR_4 != FLOAT_1 ) { VAR_7 . METHOD_5 ( VAR_3 , VAR_4 ) ; } } } } return true ; }", "our_target": "                    if (hscroll != 0.0f || vscroll != 0.0f) {\n", "our_code": "    public boolean onGenericMotionEvent(MotionEvent event) {\n        if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_SCROLL: {\n                    final float hscroll;\n                    final float vscroll;\n\n<|startfocus|>\n                    hscroll = event.getAxisValue(MotionEvent.AXIS_HSCROLL);\n                    vscroll = -event.getAxisValue(MotionEvent.AXIS_VSCROLL);\n\n                    if (hscroll != 0.0f || vscroll != 0.0f)\n                    {\n<|endfocus|>\n                        mListener.onMouseScroll(hscroll, vscroll);\n                    }\n                }\n            }\n        }\n\n        return true;\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "boolean", "<|s|>", "on", "Generic", "Motion", "Event", "(", "Motion", "Event", "<|s|>", "event", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "(", "event", ".", "get", "Source", "(", ")", "<|s|>", "&", "<|s|>", "Input", "Device", ".", "SOURCE", "_", "CLASS", "_", "POINTER", ")", "<|s|>", "!=", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "switch", "<|s|>", "(", "event", ".", "get", "Action", "(", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "case", "<|s|>", "Motion", "Event", ".", "ACTION", "_", "SCROLL", ":", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "final", "<|s|>", "float", "<|s|>", "hscroll", ";", "<|nl|>", "<|16-s|>", "<|4-s|>", "final", "<|s|>", "float", "<|s|>", "vscroll", ";", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "hscroll", "<|s|>", "=", "<|s|>", "event", ".", "get", "Axis", "Value", "(", "Motion", "Event", ".", "AXIS", "_", "HSCROLL", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "vscroll", "<|s|>", "=", "<|s|>", "-", "event", ".", "get", "Axis", "Value", "(", "Motion", "Event", ".", "AXIS", "_", "VSCROLL", ");", "<|nl|>", "<|nl|>", "<|16-s|>", "<|4-s|>", "if", "<|s|>", "(", "hscroll", "<|s|>", "!=", "<|s|>", "0", ".", "0", "f", "<|s|>", "||", "<|s|>", "vscroll", "<|s|>", "!=", "<|s|>", "0", ".", "0", "f", ")", "<|nl|>", "<|16-s|>", "<|4-s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|16-s|>", "<|8-s|>", "m", "Listener", ".", "on", "Mouse", "Scroll", "(", "hscroll", ",", "<|s|>", "vscroll", ");", "<|nl|>", "<|16-s|>", "<|4-s|>", "}", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "true", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 74, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4289", "comment_id": "5064b799_23c1413c", "class_list": ["aggregates", "FilmStripGestureRecognizer", "MyGestureListener", "MyDoubleTapListener", "MyScaleListener"], "func_list": ["public FilmStripGestureRecognizer(Context context, Listener listener)", "public void onTouchEvent(MotionEvent event)", "public boolean onGenericMotionEvent(MotionEvent event)", "boolean onScroll(float x, float y, float dx, float dy);", "boolean onFling(float velocityX, float velocityY);", "boolean onDown(float x, float y);", "public boolean onSingleTapConfirmed(MotionEvent e)", "boolean onDoubleTap(float x, float y);", "public boolean onDoubleTapEvent(MotionEvent e)", "boolean onScaleBegin(float focusX, float focusY);", "boolean onScaleBegin(float focusX, float focusY);", "void onScaleEnd();", "public FilmStripGestureRecognizer(Context context, Listener listener)", "public void onTouchEvent(MotionEvent event)", "public boolean onGenericMotionEvent(MotionEvent event)", "boolean onScroll(float x, float y, float dx, float dy);", "boolean onFling(float velocityX, float velocityY);", "boolean onDown(float x, float y);", "public boolean onSingleTapConfirmed(MotionEvent e)", "boolean onDoubleTap(float x, float y);", "public boolean onDoubleTapEvent(MotionEvent e)", "boolean onScaleBegin(float focusX, float focusY);", "boolean onScaleBegin(float focusX, float focusY);", "void onScaleEnd();", "public void onTouchEvent(MotionEvent event)", "public void onTouchEvent(MotionEvent event)", "public void onTouchEvent(MotionEvent event)"], "prime_var_dic": {}}, {"idx": 13555, "status": "update", "global_index": 4080, "project_name": "android_", "written_on": "2016-09-22 17:42:37", "tufano_target": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , String name , boolean VAR_4 ) { boolean value = VAR_4 ; TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( name ) ; if ( VAR_3 != null && VAR_3 . getValue ( ) instanceof TYPE_3 ) { VAR_2 = ( ( TYPE_3 ) VAR_3 . getValue ( ) ) . getValue ( ) ; } return VAR_2 ; }", "comment": "@Nonnull JAnnotation annotation, @Nonnull String name", "tokenized_comment": ["@", "Nonnull", "<|s|>", "JAnnotation", "<|s|>", "annotation", ",", "<|s|>", "@", "Nonnull", "<|s|>", "String", "<|s|>", "name"], "tufano_code": "public static boolean METHOD_1 ( TYPE_1 VAR_1 , String name , boolean VAR_2 ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( name ) ; if ( VAR_3 != null && VAR_3 . getValue ( ) instanceof TYPE_3 ) { VAR_2 = ( ( TYPE_3 ) VAR_3 . getValue ( ) ) . getValue ( ) ; } return VAR_2 ; }", "our_target": "  public static boolean getBooleanValueFromAnnotation(@Nonnull JAnnotation annotation,\n      @Nonnull String name, boolean defaultValue) {\n    boolean value = defaultValue;\n", "our_code": "<|startfocus|>\n  public static boolean getBooleanValueFromAnnotation(JAnnotation annotation, String name,\n      boolean defautValue) {\n<|endfocus|>\n    JNameValuePair removeAfterValuePair = annotation.getNameValuePair(name);\n    if (removeAfterValuePair != null\n        && removeAfterValuePair.getValue() instanceof JBooleanLiteral) {\n      defautValue = ((JBooleanLiteral) removeAfterValuePair.getValue()).getValue();\n    }\n    return defautValue;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "public", "<|s|>", "static", "<|s|>", "boolean", "<|s|>", "get", "Boolean", "Value", "From", "Annotation", "(", "JAnnotation", "<|s|>", "annotation", ",", "<|s|>", "String", "<|s|>", "name", ",", "<|nl|>", "<|4-s|>", "<|2-s|>", "boolean", "<|s|>", "defaut", "Value", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "JName", "Value", "Pair", "<|s|>", "remove", "After", "Value", "Pair", "<|s|>", "=", "<|s|>", "annotation", ".", "get", "Name", "Value", "Pair", "(", "name", ");", "<|nl|>", "<|4-s|>", "if", "<|s|>", "(", "remove", "After", "Value", "Pair", "<|s|>", "!=", "<|s|>", "null", "<|nl|>", "<|8-s|>", "&&", "<|s|>", "remove", "After", "Value", "Pair", ".", "get", "Value", "(", ")", "<|s|>", "instanceof", "<|s|>", "JBoolean", "Literal", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "defaut", "Value", "<|s|>", "=", "<|s|>", "(", "(", "JBoolean", "Literal", ")", "<|s|>", "remove", "After", "Value", "Pair", ".", "get", "Value", "(", ")", ")", ".", "get", "Value", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "defaut", "Value", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 77, "base_patch_number": 12, "changed_patch_number": 14, "code_file_name": "android_2551", "comment_id": "b0f70f09_5ba80379", "class_list": ["AnnotationUtils"], "func_list": ["public static Set<JAnnotationType> getAnnotationTypes(", "public static List<JAnnotation> getAnnotation(@Nonnull Collection<JAnnotation> annotations,", "public static boolean getBooleanValueFromAnnotation(JAnnotation annotation, String name,"], "prime_var_dic": {}}, {"idx": 47768, "status": "update", "global_index": 5126, "project_name": "android_", "written_on": "2016-09-28 14:14:18", "tufano_target": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) ; if ( VAR_3 . size ( ) > 0 ) { for ( TYPE_4 VAR_4 : VAR_3 ) { VAR_10 . add ( VAR_5 ) ; } return VAR_2 ; } synchronized ( this ) { for ( TYPE_2 VAR_6 : VAR_7 ) { TYPE_4 VAR_4 = VAR_8 ; if ( VAR_4 != null && VAR_9 == VAR_1 ) { VAR_2 . add ( VAR_6 ) ; } } } return VAR_2 ; }", "comment": "change to !app.curReceivers.isEmpty()", "tokenized_comment": ["change", "<|s|>", "to", "<|s|>", "!", "app", ".", "cur", "Receivers", ".", "is", "Empty", "(", ")"], "tufano_code": "private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) ; if ( VAR_3 . size ( ) > 0 ) { for ( TYPE_4 VAR_4 : VAR_3 ) { VAR_2 . add ( VAR_5 ) ; } return VAR_2 ; } synchronized ( this ) { for ( TYPE_2 VAR_6 : VAR_7 ) { TYPE_4 VAR_4 = VAR_8 ; if ( VAR_4 != null && VAR_9 == VAR_1 ) { VAR_2 . add ( VAR_6 ) ; } } } return VAR_2 ; }", "our_target": "                receivingQueues.add(r.queue);\n", "our_code": "    private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app) {\n        final ArraySet<BroadcastQueue> queues = new ArraySet<BroadcastQueue>();\n        if (app.curReceivers.size() > 0) {\n            for (BroadcastRecord r : app.curReceivers) {\n<|startfocus|>\n                queues.add(r.queue);\n<|endfocus|>\n            }\n            return queues;\n        }\n\n        // It's not the current receiver, but it might be starting up to become one\n        synchronized (this) {\n            for (BroadcastQueue queue : mBroadcastQueues) {\n                BroadcastRecord r = queue.mPendingBroadcast;\n                if (r != null && r.curApp == app) {\n                    // found it; report which queue it's in\n                    queues.add(queue);\n                }\n            }\n        }\n\n        return queues;\n    }", "tokenized_code": ["<|4-s|>", "private", "<|s|>", "Array", "Set", "<", "Broadcast", "Queue", ">", "<|s|>", "is", "Receiving", "Broadcast", "(", "Process", "Record", "<|s|>", "app", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "final", "<|s|>", "Array", "Set", "<", "Broadcast", "Queue", ">", "<|s|>", "queues", "<|s|>", "=", "<|s|>", "new", "<|s|>", "Array", "Set", "<", "Broadcast", "Queue", ">", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "app", ".", "cur", "Receivers", ".", "size", "(", ")", "<|s|>", ">", "<|s|>", "0", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "for", "<|s|>", "(", "Broadcast", "Record", "<|s|>", "r", "<|s|>", ":", "<|s|>", "app", ".", "cur", "Receivers", ")", "<|s|>", "{", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|16-s|>", "queues", ".", "add", "(", "r", ".", "queue", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|12-s|>", "return", "<|s|>", "queues", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "//", "<|s|>", "It", "'", "s", "<|s|>", "not", "<|s|>", "the", "<|s|>", "current", "<|s|>", "receiver", ",", "<|s|>", "but", "<|s|>", "it", "<|s|>", "might", "<|s|>", "be", "<|s|>", "starting", "<|s|>", "up", "<|s|>", "to", "<|s|>", "become", "<|s|>", "one", "<|nl|>", "<|8-s|>", "synchronized", "<|s|>", "(", "this", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "for", "<|s|>", "(", "Broadcast", "Queue", "<|s|>", "queue", "<|s|>", ":", "<|s|>", "m", "Broadcast", "Queues", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "Broadcast", "Record", "<|s|>", "r", "<|s|>", "=", "<|s|>", "queue", ".", "m", "Pending", "Broadcast", ";", "<|nl|>", "<|16-s|>", "if", "<|s|>", "(", "r", "<|s|>", "!=", "<|s|>", "null", "<|s|>", "&&", "<|s|>", "r", ".", "cur", "App", "<|s|>", "==", "<|s|>", "app", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "<|4-s|>", "//", "<|s|>", "found", "<|s|>", "it", ";", "<|s|>", "report", "<|s|>", "which", "<|s|>", "queue", "<|s|>", "it", "'", "s", "<|s|>", "in", "<|nl|>", "<|16-s|>", "<|4-s|>", "queues", ".", "add", "(", "queue", ");", "<|nl|>", "<|16-s|>", "}", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|8-s|>", "return", "<|s|>", "queues", ";", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 18907, "base_patch_number": 3, "changed_patch_number": 4, "code_file_name": "android_4081", "comment_id": "e5c1c7c3_8bbfcea6", "class_list": ["ActivityManagerService", "PendingAssistExtras", "ForegroundToken", "of", "Association", "GrantUri", "FontScaleSettingObserver", "Identity", "ProcessChangeItem", "AppDeathRecipient", "KillHandler", "UiHandler", "MainHandler", "MemBinder", "GraphicsBinder", "DbBinder", "CpuBinder", "Lifecycle", "ProcessInfoService", "PermissionController", "IntentFirewallInterface", "NeededUriGrants", "", "ItemMatcher", "MemItem", "LocalService", "SleepTokenImpl", "AppTaskImpl"], "func_list": ["BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public void run()", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "void build(String name)", "int build(String[] args, int opti)", "boolean match(Object object, ComponentName comp)", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "BroadcastQueue broadcastQueueForIntent(Intent intent)", "public boolean canShowErrorDialogs()", "@Override protected Integer initialValue()", "static void boostPriorityForLockedSection()", "static void resetPriorityAfterLockedSection()", "public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent,", "public void run()", "protected boolean allowFilterResult(", "protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId)", "protected BroadcastFilter[] newArray(int size)", "protected boolean isPackageForFilter(String packageName, BroadcastFilter filter)", "public GrantUri(int sourceUserId, Uri uri, boolean prefix)", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public String toSafeString()", "public static GrantUri resolve(int defaultSourceUserHandle, Uri uri)", "public FontScaleSettingObserver()", "public void onChange(boolean selfChange, Uri uri)", "public void binderDied()", "public KillHandler(Looper looper)", "public void handleMessage(Message msg)", "public UiHandler()", "public MainHandler(Looper looper)", "public void setSystemProcess()", "public void setWindowManager(WindowManagerService wm)", "public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager)", "public void startObservingNativeCrashes()", "public IAppOpsService getAppOpsService()", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public Lifecycle(Context context)", "public void onStart()", "public ActivityManagerService getService()", "public ActivityManagerService getService()", "@Override public void opChanged(int op, int uid, String packageName)", "public void setSystemServiceManager(SystemServiceManager mgr)", "public void setInstaller(Installer installer)", "public void startObservingNativeCrashes()", "void onUserStoppedLocked(int userId)", "public void initPowerManagement()", "void updateCpuStats()", "void updateCpuStatsNow()", "public void batteryNeedsCpuUpdate()", "public void batteryPowerChanged(boolean onBattery)", "public void batterySendBroadcast(Intent intent)", "boolean setFocusedActivityLocked(ActivityRecord r, String reason)", "public void setFocusedStack(int stackId)", "public void setFocusedTask(int taskId)", "public void notifyActivityDrawn(IBinder token)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private void applyVrModeIfNeededLocked(ActivityRecord r, boolean enable)", "private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index,", "static void killProcessGroup(int uid, int pid)", "void notifyPackageUse(String packageName, int reason)", "boolean isNextTransitionForward()", "int startIsolatedProcess(String entryPoint, String[] entryPointArgs,", "boolean isAllowedWhileBooting(ApplicationInfo ai)", "void updateUsageStats(ActivityRecord component, boolean resumed)", "Intent getHomeIntent()", "boolean startHomeActivityLocked(int userId, String reason)", "private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId)", "void startSetupActivityLocked()", "CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai)", "void enforceNotIsolatedCaller(String caller)", "void enforceShellRestriction(String restriction, int userHandle)", "public int getFrontActivityScreenCompatMode()", "public void setFrontActivityScreenCompatMode(int mode)", "public int getPackageScreenCompatMode(String packageName)", "public void setPackageScreenCompatMode(String packageName, int mode)", "public boolean getPackageAskScreenCompat(String packageName)", "public void setPackageAskScreenCompat(String packageName, boolean ask)", "private boolean hasUsageStatsPermission(String callingPackage)", "public int getPackageProcessState(String packageName, String callingPackage)", "public boolean setProcessMemoryTrimLevel(String process, int userId, int level)", "private void dispatchProcessesChanged()", "private void dispatchProcessDied(int pid, int uid)", "private void dispatchUidsChanged()", "public int startVoiceActivity(String callingPackage, int callingPid, int callingUid,", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake)", "public boolean startNextMatchingActivity(IBinder callingActivity,", "public void reportActivityFullyDrawn(IBinder token)", "public void setRequestedOrientation(IBinder token, int requestedOrientation)", "public int getRequestedOrientation(IBinder token)", "public void crashApplication(int uid, int initialPid, String packageName,", "public boolean finishActivityAffinity(IBinder token)", "public void finishVoiceTask(IVoiceInteractionSession session)", "public boolean releaseActivityInstance(IBinder token)", "public void releaseSomeActivities(IApplicationThread appInt)", "public boolean willActivityBeVisible(IBinder token)", "public void overridePendingTransition(IBinder token, String packageName,", "public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids,", "private static void dumpStackTraces(String tracesPath, ArrayList<Integer> firstPids,", "public boolean clearApplicationUserData(final String packageName,", "public void killBackgroundProcesses(final String packageName, int userId)", "public void killAllBackgroundProcesses()", "private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState)", "public void forceStopPackage(final String packageName, int userId)", "public void addPackageDependency(String packageName)", "public void killApplication(String pkg, int appId, int userId, String reason)", "public void closeSystemDialogs(String reason)", "void closeSystemDialogsLocked(String reason)", "public long[] getProcessPss(int[] pids)", "public void killApplicationProcess(String processName, int uid)", "private void forceStopPackageLocked(final String packageName, int uid, String reason)", "private void finishForceStopPackageLocked(final String packageName, int uid)", "private void cleanupDisabledPackageComponentsLocked(", "boolean removeProcessLocked(ProcessRecord app,", "void postFinishBooting(boolean finishBooting, boolean enableScreen)", "void enableScreenAfterBoot()", "public void showBootMessage(final CharSequence msg, final boolean always)", "public void keyguardWaitingForActivityDrawn()", "public void keyguardGoingAway(int flags)", "public void onReceive(Context context, Intent intent)", "public void performReceive(Intent intent, int resultCode,", "public void bootAnimationComplete()", "public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration,", "public String getCallingPackage(IBinder token)", "public ComponentName getCallingActivity(IBinder token)", "private ActivityRecord getCallingRecordLocked(IBinder token)", "public ComponentName getActivityClassForToken(IBinder token)", "public String getPackageForToken(IBinder token)", "public boolean isRootVoiceInteraction(IBinder token)", "public IIntentSender getIntentSender(int type,", "IIntentSender getIntentSenderLocked(int type, String packageName,", "public int sendIntentSender(IIntentSender target, int code, Intent intent, String resolvedType,", "void tempWhitelistAppForPowerSave(int callerPid, int callerUid, int targetUid, long duration)", "public void cancelIntentSender(IIntentSender sender)", "void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity)", "public String getPackageForIntentSender(IIntentSender pendingResult)", "public int getUidForIntentSender(IIntentSender sender)", "public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult)", "public boolean isIntentSenderAnActivity(IIntentSender pendingResult)", "public Intent getIntentForIntentSender(IIntentSender pendingResult)", "public String getTagForIntentSender(IIntentSender pendingResult, String prefix)", "String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix)", "public void setProcessLimit(int max)", "public int getProcessLimit()", "void foregroundTokenDied(ForegroundToken token)", "public void setProcessForeground(IBinder token, int pid, boolean isForeground)", "int getUidState(int uid)", "public boolean isInMultiWindowMode(IBinder token)", "public boolean isInPictureInPictureMode(IBinder token)", "public void enterPictureInPictureMode(IBinder token)", "public void getProcessStatesFromPids(/*in*/ int[] pids, /*out*/ int[] states)", "public void getProcessStatesAndOomScoresFromPids(", "public void getProcessStatesAndOomScoresForPIDs(", "public boolean checkPermission(String permission, int pid, int uid)", "public String[] getPackagesForUid(int uid)", "public boolean isRuntimePermission(String permission)", "public int checkComponentPermission(String permission, int pid, int uid,", "public Object getAMSLock()", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken)", "int checkCallingPermission(String permission)", "void enforceCallingPermission(String permission, String func)", "public int getAppStartMode(int uid, String packageName)", "int checkAllowBackgroundLocked(int uid, String packageName, int callingPid,", "private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags)", "private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri)", "private UriPermission findOrCreateUriPermissionLocked(String sourcePkg,", "public int checkUriPermission(Uri uri, int pid, int uid,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri,", "NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,", "void grantUriPermissionFromIntentLocked(int callingUid,", "void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri,", "void removeUriPermissionIfNeededLocked(UriPermission perm)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void revokeUriPermissionLocked(int callingUid, GrantUri grantUri, final int modeFlags)", "private void removeUriPermissionsForPackageLocked(", "public IBinder newUriPermissionOwner(String name)", "public IBinder getUriPermissionOwnerForActivity(IBinder activityToken)", "public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri,", "public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId)", "private void schedulePersistUriGrants()", "private void writeGrantedUriPermissions()", "private void readGrantedUriPermissionsLocked()", "public void takePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "public void releasePersistableUriPermission(Uri uri, final int modeFlags, int userId)", "private boolean maybePrunePersistedUriGrantsLocked(int uid)", "public void clearGrantedUriPermissions(String packageName, int userId)", "public void showWaitingForDebugger(IApplicationThread who, boolean waiting)", "public void getMemoryInfo(ActivityManager.MemoryInfo outInfo)", "public List<IAppTask> getAppTasks(String callingPackage)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)", "public Point getAppTaskThumbnailSize()", "public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td)", "public void setTaskResizeable(int taskId, int resizeableMode)", "public void resizeTask(int taskId, Rect bounds, int resizeMode)", "public Rect getTaskBounds(int taskId)", "public Bitmap getTaskDescriptionIcon(String filePath, int userId)", "private void cleanUpRemovedTaskLocked(TaskRecord tr, boolean killProcess,", "private void removeTasksByPackageNameLocked(String packageName, int userId)", "private void cleanupDisabledPackageTasksLocked(String packageName, Set<String> filterByClasses,", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void removeStack(int stackId)", "private boolean removeTaskByIdLocked(int taskId, boolean killProcess,", "public void moveTaskToFront(int taskId, int flags, Bundle bOptions)", "void moveTaskToFrontLocked(int taskId, int flags, Bundle bOptions)", "public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot)", "public void moveTaskBackwards(int task)", "public void moveTaskToStack(int taskId, int stackId, boolean toTop)", "public boolean moveTaskToDockedStack(int taskId, int createMode, boolean toTop, boolean animate,", "public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds)", "public void resizeStack(int stackId, Rect bounds, boolean allowResizeInDockedMode,", "public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds,", "public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds)", "public void positionTaskInStack(int taskId, int stackId, int position)", "public List<StackInfo> getAllStackInfos()", "public StackInfo getStackInfo(int stackId)", "public boolean isInHomeStack(int taskId)", "public int getTaskForActivity(IBinder token, boolean onlyRoot)", "public void updateDeviceOwner(String packageName)", "public void updateLockTaskPackages(int userId, String[] packages)", "void startLockTaskModeLocked(TaskRecord task)", "void startLockTaskModeLocked(TaskRecord task)", "public void stopLockTaskMode()", "public boolean isInLockTaskMode()", "public int getLockTaskModeState()", "public void showLockTaskEscapeMessage(IBinder token)", "boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "ContentProviderConnection incProviderCountLocked(ProcessRecord r,", "boolean decProviderCountLocked(ContentProviderConnection conn,", "private void checkTime(long startTime, String where)", "boolean isProcessAliveLocked(ProcessRecord proc)", "private ContentProviderHolder getContentProviderImpl(IApplicationThread caller,", "private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi,", "PackageManagerInternal getPackageManagerInternalLocked()", "public ContentProviderHolder getContentProviderExternal(", "private ContentProviderHolder getContentProviderExternalUnchecked(String name,", "public void removeContentProvider(IBinder connection, boolean stable)", "public void removeContentProviderExternal(String name, IBinder token)", "private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId)", "public boolean refContentProvider(IBinder connection, int stable, int unstable)", "public void unstableProviderDied(IBinder connection)", "public void appNotRespondingViaProvider(IBinder connection)", "private void startPersistentApps(int matchFlags)", "private void installEncryptionUnawareProviders(int userId)", "public String getProviderMimeType(Uri uri, int userId)", "private boolean canClearIdentity(int callingPid, int callingUid, int userId)", "public void unhandledBack()", "boolean isSleepingOrShuttingDownLocked()", "boolean isShuttingDownLocked()", "boolean isSleepingLocked()", "void onWakefulnessChanged(int wakefulness)", "void finishRunningVoiceLocked()", "void startTimeTrackingFocusedActivityLocked()", "void updateSleepIfNeededLocked()", "private boolean shouldSleepLocked()", "void notifyTaskPersisterLocked(TaskRecord task, boolean flush)", "void notifyTaskStackChangedLocked()", "void notifyActivityPinnedLocked()", "void notifyPinnedActivityRestartAttemptLocked()", "public void notifyPinnedStackAnimationEnded()", "public void notifyCleartextNetwork(int uid, byte[] firstPacket)", "public boolean shutdown(int timeout)", "private String lockScreenShownToString()", "void logLockScreen(String msg)", "void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid)", "private void updateEventDispatchingLocked()", "public void setLockScreenShown(boolean showing, boolean occluded)", "public void notifyLockedProfile(@UserIdInt int userId)", "public void startConfirmDeviceCredentialIntent(Intent intent)", "public void stopAppSwitches()", "public void resumeAppSwitches()", "boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid,", "public void setDebugApp(String packageName, boolean waitForDebugger,", "void setTrackAllocationApp(ApplicationInfo app, String processName)", "void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo)", "void setNativeDebuggingAppLocked(ApplicationInfo app, String processName)", "public void setAlwaysFinish(boolean enabled)", "public void setLenientBackgroundCheck(boolean enabled)", "public void setActivityController(IActivityController controller, boolean imAMonkey)", "public void setUserIsMonkey(boolean userIsMonkey)", "public boolean isUserAMonkey()", "public void requestBugReport(int bugreportType)", "public static long getInputDispatchingTimeoutLocked(ActivityRecord r)", "public long inputDispatchingTimedOut(int pid, final boolean aboveSystem, String reason)", "public boolean inputDispatchingTimedOut(final ProcessRecord proc,", "public Bundle getAssistContextExtras(int requestType)", "public boolean isAssistDataAllowedOnCurrentActivity()", "public boolean showAssistFromActivity(IBinder token, Bundle args)", "public boolean requestAssistContextExtras(int requestType, IResultReceiver receiver,", "private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint,", "void pendingAssistExtrasTimedOut(PendingAssistExtras pae)", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure,", "public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle,", "public void registerProcessObserver(IProcessObserver observer)", "public void unregisterProcessObserver(IProcessObserver observer)", "public void registerUidObserver(IUidObserver observer, int which)", "public void unregisterUidObserver(IUidObserver observer)", "public boolean convertFromTranslucent(IBinder token)", "public boolean convertToTranslucent(IBinder token, ActivityOptions options)", "public boolean requestVisibleBehind(IBinder token, boolean visible)", "public boolean isBackgroundVisibleBehind(IBinder token)", "public ActivityOptions getActivityOptions(IBinder token)", "public void setImmersive(IBinder token, boolean immersive)", "public boolean isImmersive(IBinder token)", "public int setVrMode(IBinder token, boolean enabled, ComponentName packageName)", "public boolean isVrModePackageEnabled(ComponentName packageName)", "public boolean isTopActivityImmersive()", "public boolean isTopOfTask(IBinder token)", "public void noteWakeupAlarm(IIntentSender sender, int sourceUid, String sourcePkg, String tag)", "public void noteAlarmStart(IIntentSender sender, int sourceUid, String tag)", "public void noteAlarmFinish(IIntentSender sender, int sourceUid, String tag)", "public boolean killPids(int[] pids, String pReason, boolean secure)", "public void killUid(int appId, int userId, String reason)", "public boolean killProcessesBelowForeground(String reason)", "private boolean killProcessesBelowAdj(int belowAdj, String reason)", "public void hang(final IBinder who, boolean allowRestart)", "public void restart()", "private long getLowRamTimeSinceIdle(long now)", "public void performIdleMaintenance()", "public void sendIdleJobTrigger()", "private void retrieveSettings()", "public boolean testIsSystemReady()", "public void systemReady(final Runnable goingCallback)", "void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog)", "void skipCurrentReceiverLocked(ProcessRecord app)", "public void handleApplicationCrash(IBinder app, ApplicationErrorReport.CrashInfo crashInfo)", "void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName,", "public void handleApplicationStrictModeViolation(", "private void logStrictModeViolationToDropBox(", "static ThreadLocal<Integer> sIsBoosted = new ThreadLocal<Integer>()", "public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system,", "ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag,", "private ProcessRecord findAppProcess(IBinder app, String reason)", "private void appendDropBoxProcessHeaders(ProcessRecord process, String processName,", "private static String processClass(ProcessRecord process)", "public void addErrorToDropBox(String eventType,", "static int procStateToImportance(int procState, int memAdj,", "private void fillInProcMemInfo(ProcessRecord app,", "public List<ApplicationInfo> getRunningExternalApplications()", "public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outInfo)", "public int getMemoryTrimLevel()", "public void onShellCommand(FileDescriptor in, FileDescriptor out,", "void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpRecentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpUids(PrintWriter pw, String dumpPackage, SparseArray<UidRecord> uids,", "void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "boolean dumpProcessesToGc(FileDescriptor fd, PrintWriter pw, String[] args,", "void printOomLevel(PrintWriter pw, String name, int adj)", "boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result)", "int build(String[] args, int opti)", "boolean matchesProvider(Uri uri, ProviderInfo cpi)", "protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args,", "private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw,", "void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args,", "public int compare(Pair<ProcessRecord, Integer> object1,", "ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs,", "public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id,", "private static String stringifySize(long size, int order)", "private static String stringifyKBSize(long size)", "private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss,", "private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi)", "void reportMemUsage(ArrayList<ProcessMemInfo> memInfos)", "private static boolean scanArgs(String[] args, String value)", "boolean checkAppInLaunchingProvidersLocked(ProcessRecord app)", "boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad)", "public PendingIntent getRunningServiceControlPanel(ComponentName name)", "public int stopService(IApplicationThread caller, Intent service,", "public IBinder peekService(Intent service, String resolvedType, String callingPackage)", "public boolean stopServiceToken(ComponentName className, IBinder token,", "public void setServiceForeground(ComponentName className, IBinder token,", "public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,", "boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,", "boolean isValidSingletonCall(int callingUid, int componentUid)", "public boolean unbindService(IServiceConnection connection)", "public void publishService(IBinder token, Intent intent, IBinder service)", "public void unbindFinished(IBinder token, Intent intent, boolean doRebind)", "public void serviceDoneExecuting(IBinder token, int type, int startId, int res)", "public boolean bindBackupAgent(String packageName, int backupMode, int userId)", "public void clearPendingBackup()", "public void backupAgentCreated(String agentPackageName, IBinder agent)", "public void unbindBackupAgent(ApplicationInfo appInfo)", "boolean isPendingBroadcastProcessLocked(int pid)", "void skipPendingBroadcastLocked(int pid)", "boolean sendPendingBroadcastsLocked(ProcessRecord app)", "public Intent registerReceiver(IApplicationThread caller, String callerPackage,", "public void unregisterReceiver(IIntentReceiver receiver)", "void removeReceiverLocked(ReceiverList rl)", "private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType,", "private boolean isPermittedShellBroadcast(Intent intent)", "int broadcastIntentInPackage(String packageName, int uid,", "void backgroundServicesFinishedLocked(int userId)", "public void finishReceiver(IBinder who, int resultCode, String resultData,", "public boolean startInstrumentation(ComponentName className,", "private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher,", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results)", "public ConfigurationInfo getDeviceConfigurationInfo()", "ActivityStack getFocusedStack()", "public Configuration getConfiguration()", "public void moveTasksToFullscreenStack(int fromStackId, boolean onTop)", "public void updatePersistentConfiguration(Configuration values)", "private void updateFontScaleIfNeeded()", "private void enforceWriteSettingsPermission(String func)", "public void updateConfiguration(Configuration values)", "void updateUserConfigurationLocked()", "boolean updateConfigurationLocked(Configuration values,", "public boolean shouldUpRecreateTask(IBinder token, String destAffinity)", "public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode,", "public int getLaunchedFromUid(IBinder activityToken)", "public String getLaunchedFromPackage(IBinder activityToken)", "private ArraySet<BroadcastQueue> isReceivingBroadcast(ProcessRecord app)", "Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState,", "void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid,", "private void noteUidProcessState(final int uid, final int state)", "void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss,", "void requestPssLocked(ProcessRecord proc, int procState)", "void requestPssAllProcsLocked(long now, boolean always, boolean memLowered)", "public void setTestPssMode(boolean enabled)", "private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName,", "private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed)", "private void stopProfilerLocked(ProcessRecord proc, int profileType)", "private void clearProfilerLocked()", "private ProcessRecord findProcessLocked(String process, int userId, String callName)", "public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize,", "public void dumpHeapFinished(String path)", "public void monitor()", "void onCoreSettingsChange(Bundle settings)", "public boolean startUserInBackground(final int userId)", "public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener)", "public boolean switchUser(final int targetUserId)", "void scheduleStartProfilesLocked()", "public int stopUser(final int userId, boolean force, final IStopUserCallback callback)", "public UserInfo getCurrentUser()", "public boolean isUserRunning(int userId, int flags)", "public int[] getRunningUserIds()", "public void registerUserSwitchObserver(IUserSwitchObserver observer)", "public void unregisterUserSwitchObserver(IUserSwitchObserver observer)", "ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId)", "public boolean isUserStopped(int userId)", "ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId)", "private boolean processSanityChecksLocked(ProcessRecord process)", "public SleepToken acquireSleepToken(String tag)", "public ComponentName getHomeActivityForUser(int userId)", "public void onUserRemoved(int userId)", "void onLocalVoiceInteractionStartedLocked(IBinder activity,", "public void notifyStartingWindowDrawn()", "public void notifyAppTransitionStarting(int reason)", "public void notifyAppTransitionFinished()", "public void notifyAppTransitionCancelled()", "public List<IBinder> getTopVisibleActivities()", "public void notifyDockedStackMinimizedChanged(boolean minimized)", "public void killForegroundAppsForUser(int userHandle)", "public void setPendingIntentWhitelistDuration(IIntentSender target, long duration)", "public SleepTokenImpl(String tag)", "public void releaseSomeActivities(IApplicationThread appInt)", "public AppTaskImpl(int taskId, int callingUid)", "private void checkCaller()", "public void finishAndRemoveTask()", "public void moveToFront()", "public final int startActivity(IApplicationThread caller, String callingPackage,", "public void setExcludeFromRecents(boolean exclude)", "public void killPackageDependents(String packageName, int userId)", "public ComponentName getHomeActivityForUser(int userId)", "public List<RunningTaskInfo> getTasks(int maxNum, int flags)", "private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid)"], "prime_var_dic": {"task": 1}}, {"idx": 32339, "status": "update", "global_index": 10382, "project_name": "android_", "written_on": "2015-04-27 16:43:59", "tufano_target": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , String VAR_2 ) { for ( int i = 0 , n = VAR_1 . METHOD_2 ( ) ; i < n ; i ++ ) { TYPE_1 item = VAR_1 . METHOD_3 ( i ) ; if ( item instanceof TYPE_3 && VAR_2 . equals ( ( ( TYPE_3 ) item ) . getId ( ) ) ) { return item ; } } return null ; }", "comment": "@NotNull", "tokenized_comment": ["@", "Not", "Null"], "tufano_code": "private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , String VAR_2 ) { for ( int i = 0 , n = VAR_1 . METHOD_2 ( ) ; i < n ; i ++ ) { TYPE_1 item = VAR_1 . METHOD_3 ( i ) ; if ( item instanceof TYPE_3 && VAR_2 . equals ( ( ( TYPE_3 ) item ) . getId ( ) ) ) { return item ; } } return null ; }", "our_target": "  private static Object findAvdWithName(@NotNull JComboBox avdCombo, @NotNull String avdName) {\n", "our_code": "<|startfocus|>\n  private static Object findAvdWithName(JComboBox avdCombo, @NotNull String avdName) {\n<|endfocus|>\n    for (int i = 0, n = avdCombo.getItemCount(); i < n; i++) {\n      Object item = avdCombo.getItemAt(i);\n      if (item instanceof IdDisplay && avdName.equals(((IdDisplay)item).getId())) {\n        return item;\n      }\n    }\n    return null;\n  }", "tokenized_code": ["<|startfocus|>", "<|nl|>", "<|2-s|>", "private", "<|s|>", "static", "<|s|>", "Object", "<|s|>", "find", "Avd", "With", "Name", "(", "JCombo", "Box", "<|s|>", "avd", "Combo", ",", "<|s|>", "@", "Not", "Null", "<|s|>", "String", "<|s|>", "avd", "Name", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|4-s|>", "for", "<|s|>", "(", "int", "<|s|>", "i", "<|s|>", "=", "<|s|>", "0", ",", "<|s|>", "n", "<|s|>", "=", "<|s|>", "avd", "Combo", ".", "get", "Item", "Count", "(", ");", "<|s|>", "i", "<|s|>", "<", "<|s|>", "n", ";", "<|s|>", "i", "++", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "Object", "<|s|>", "item", "<|s|>", "=", "<|s|>", "avd", "Combo", ".", "get", "Item", "At", "(", "i", ");", "<|nl|>", "<|4-s|>", "<|2-s|>", "if", "<|s|>", "(", "item", "<|s|>", "instanceof", "<|s|>", "Id", "Display", "<|s|>", "&&", "<|s|>", "avd", "Name", ".", "equals", "(", "(", "(", "Id", "Display", ")", "item", ")", ".", "get", "Id", "(", ")", ")", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "return", "<|s|>", "item", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "}", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "null", ";", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 391, "base_patch_number": 2, "changed_patch_number": 3, "code_file_name": "android_752", "comment_id": "f0f222e5_5e0c39ef", "class_list": ["AndroidRunConfigurationEditor<T", "SelectCloudProjectAction"], "func_list": ["public void setConfigurationSpecificEditor(ConfigurationSpecificEditor<T> configurationSpecificEditor)", "public AndroidRunConfigurationEditor(final Project project, final Predicate<AndroidFacet> libraryProjectValidator)", "public boolean isModuleAccepted(Module module)", "public void actionPerformed(ActionEvent e)", "private void createUIComponents()", "public Module getModule()", "public void customize(JList list, Object value, int index, boolean selected, boolean hasFocus)", "else if (value instanceof IdDisplay)", "private void updateGoogleCloudVisible(AndroidRunConfigurationBase configuration)", "private void updateEnabled()", "private void updateCloudMatrixTestEnabled(boolean isEnabled)", "private void updateCloudDeviceLaunchEnabled(boolean isEnabled)", "private void resetAvdCompatibilityWarningLabel(@Nullable String warning)", "private CloudConfiguration getCloudConfigurationComboSelection(Kind configurationKind)", "private boolean isCloudProjectSpecified(Kind configurationKind)", "public int getSelectedCloudConfigurationId(Kind configurationKind)", "private boolean isValidCloudSelection(Kind configurationKind)", "private String getInvalidSelectionErrorMessage(Kind configurationKind)", "private String getAvdCompatibilityWarning()", "public JComponent getAnchor()", "public void setAnchor(JComponent anchor)", "private static Object findAvdWithName(JComboBox avdCombo, @NotNull String avdName)", "protected void resetEditorFrom(T configuration)", "private static void selectItemCaseInsensitively(@NotNull JComboBox comboBox, @Nullable String item)", "protected JComponent createEditor()", "public ConfigurationModuleSelector getModuleSelector()", "public SelectCloudProjectAction(CloudProjectIdLabel label, CloudConfigurationComboBox comboBox)", "private void updateGoogleCloudVisible(AndroidRunConfigurationBase configuration)", "private void updateGoogleCloudVisible(AndroidRunConfigurationBase configuration)"], "prime_var_dic": {}}, {"idx": 93833, "status": "update", "global_index": 1873, "project_name": "android_", "written_on": "2017-04-27 16:11:34", "tufano_target": "public void METHOD_1 ( TYPE_1 context , TYPE_2 intent ) { String VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } if ( TYPE_3 . equals ( VAR_1 ) ) { TYPE_4 VAR_2 = context . METHOD_3 ( ) ; if ( ! VAR_2 . METHOD_4 ( VAR_3 ) ) { VAR_2 . METHOD_5 ( context . METHOD_6 ( ) , VAR_4 , 0 ) ; } } }", "comment": "not needed if you just swap the equals test below -- \n\n  if (Intent.ACTION_BOOT_COMPLETED.equals(action)) {", "tokenized_comment": ["not", "<|s|>", "needed", "<|s|>", "if", "<|s|>", "you", "<|s|>", "just", "<|s|>", "swap", "<|s|>", "the", "<|s|>", "equals", "<|s|>", "test", "<|s|>", "below", "<|s|>", "--", "<|s|>", "<|nl|>", "<|nl|>", "<|2-s|>", "if", "<|s|>", "(", "Intent", ".", "ACTION", "_", "BOOT", "_", "COMPLETED", ".", "equals", "(", "action", ")", ")", "<|s|>", "{"], "tufano_code": "public void METHOD_1 ( TYPE_1 context , TYPE_2 intent ) { String VAR_1 = intent . METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } if ( VAR_1 . equals ( TYPE_3 ) ) { TYPE_4 VAR_2 = context . METHOD_3 ( ) ; if ( ! VAR_2 . METHOD_4 ( VAR_3 ) ) { VAR_2 . METHOD_5 ( context . METHOD_6 ( ) , VAR_4 , 0 ) ; } } }", "our_target": "        if (Intent.ACTION_BOOT_COMPLETED.equals(action)) {\n", "our_code": "    public void onReceive(Context context, Intent intent) {\n        String action = intent.getAction();\n        if (action == null) {\n            return;\n        }\n\n<|startfocus|>\n        if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {\n<|endfocus|>\n            PackageManager pm = context.getPackageManager();\n            if (!pm.hasSystemFeature(PackageManager.FEATURE_NFC)) {\n                pm.setApplicationEnabledSetting(context.getPackageName(),\n                    PackageManager.COMPONENT_ENABLED_STATE_DISABLED, 0);\n            }\n        }\n    }", "tokenized_code": ["<|4-s|>", "public", "<|s|>", "void", "<|s|>", "on", "Receive", "(", "Context", "<|s|>", "context", ",", "<|s|>", "Intent", "<|s|>", "intent", ")", "<|s|>", "{", "<|nl|>", "<|8-s|>", "String", "<|s|>", "action", "<|s|>", "=", "<|s|>", "intent", ".", "get", "Action", "(", ");", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "action", "<|s|>", "==", "<|s|>", "null", ")", "<|s|>", "{", "<|nl|>", "<|12-s|>", "return", ";", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|8-s|>", "if", "<|s|>", "(", "action", ".", "equals", "(", "Intent", ".", "ACTION", "_", "BOOT", "_", "COMPLETED", ")", ")", "<|s|>", "{", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|12-s|>", "Package", "Manager", "<|s|>", "pm", "<|s|>", "=", "<|s|>", "context", ".", "get", "Package", "Manager", "(", ");", "<|nl|>", "<|12-s|>", "if", "<|s|>", "(", "!", "pm", ".", "has", "System", "Feature", "(", "Package", "Manager", ".", "FEATURE", "_", "NFC", ")", ")", "<|s|>", "{", "<|nl|>", "<|16-s|>", "pm", ".", "set", "Application", "Enabled", "Setting", "(", "context", ".", "get", "Package", "Name", "(", ")", ",", "<|nl|>", "<|16-s|>", "<|4-s|>", "Package", "Manager", ".", "COMPONENT", "_", "ENABLED", "_", "STATE", "_", "DISABLED", ",", "<|s|>", "0", ");", "<|nl|>", "<|12-s|>", "}", "<|nl|>", "<|8-s|>", "}", "<|nl|>", "<|4-s|>", "}"], "base_code_line_number": 35, "base_patch_number": 1, "changed_patch_number": 2, "code_file_name": "android_4363", "comment_id": "0c4d172a_6d62da7b", "class_list": ["NfcBootCompletedReceiver"], "func_list": ["public void onReceive(Context context, Intent intent)"], "prime_var_dic": {}}, {"idx": 40808, "status": "update", "global_index": 12296, "project_name": "android_", "written_on": "2014-08-20 15:21:29", "tufano_target": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 context ) { boolean VAR_2 = VAR_3 . METHOD_1 ( VAR_1 , context ) . METHOD_2 ( ) ; boolean VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , context ) . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( VAR_6 . METHOD_1 ( VAR_2 , VAR_4 ) ) ; }", "comment": "return Boolean.valueOf(operator.eval(left.eval(tested, context), right.eval(tested, context));", "tokenized_comment": ["return", "<|s|>", "Boolean", ".", "value", "Of", "(", "operator", ".", "eval", "(", "left", ".", "eval", "(", "tested", ",", "<|s|>", "context", ")", ",", "<|s|>", "right", ".", "eval", "(", "tested", ",", "<|s|>", "context", ")", ");"], "tufano_code": "public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 context ) { boolean VAR_2 = VAR_3 . METHOD_1 ( VAR_1 , context ) . METHOD_2 ( ) ; boolean VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , context ) . METHOD_2 ( ) ; boolean result ; switch ( VAR_6 ) { case VAR_7 : result = VAR_2 || VAR_4 ; break ; case VAR_8 : result = VAR_2 && VAR_4 ; break ; case VAR_9 : result = VAR_2 ^ VAR_4 ; break ; case VAR_10 : result = VAR_2 == VAR_4 ; break ; default : throw new TYPE_4 ( ) ; } return TYPE_1 . METHOD_3 ( result ) ; }", "our_target": "    return Boolean.valueOf(operator.eval(leftValue, rightValue));\n", "our_code": "  public Boolean eval(@Nonnull U tested, @Nonnull Context context) {\n    boolean leftValue = left.eval(tested, context).booleanValue();\n    boolean rightValue = right.eval(tested, context).booleanValue();\n<|startfocus|>\n    boolean result;\n    switch (operator) {\n      case OR:\n        result = leftValue || rightValue;\n        break;\n      case AND:\n        result = leftValue && rightValue;\n        break;\n      case XOR:\n        result = leftValue ^ rightValue;\n        break;\n      case EQUALS:\n        result = leftValue == rightValue;\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return Boolean.valueOf(result);\n<|endfocus|>\n  }", "tokenized_code": ["<|2-s|>", "public", "<|s|>", "Boolean", "<|s|>", "eval", "(", "@", "Nonnull", "<|s|>", "U", "<|s|>", "tested", ",", "<|s|>", "@", "Nonnull", "<|s|>", "Context", "<|s|>", "context", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "left", "Value", "<|s|>", "=", "<|s|>", "left", ".", "eval", "(", "tested", ",", "<|s|>", "context", ")", ".", "boolean", "Value", "(", ");", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "right", "Value", "<|s|>", "=", "<|s|>", "right", ".", "eval", "(", "tested", ",", "<|s|>", "context", ")", ".", "boolean", "Value", "(", ");", "<|nl|>", "<|startfocus|>", "<|nl|>", "<|4-s|>", "boolean", "<|s|>", "result", ";", "<|nl|>", "<|4-s|>", "switch", "<|s|>", "(", "operator", ")", "<|s|>", "{", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "OR", ":", "<|nl|>", "<|8-s|>", "result", "<|s|>", "=", "<|s|>", "left", "Value", "<|s|>", "||", "<|s|>", "right", "Value", ";", "<|nl|>", "<|8-s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "AND", ":", "<|nl|>", "<|8-s|>", "result", "<|s|>", "=", "<|s|>", "left", "Value", "<|s|>", "&&", "<|s|>", "right", "Value", ";", "<|nl|>", "<|8-s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "XOR", ":", "<|nl|>", "<|8-s|>", "result", "<|s|>", "=", "<|s|>", "left", "Value", "<|s|>", "^", "<|s|>", "right", "Value", ";", "<|nl|>", "<|8-s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "case", "<|s|>", "EQUALS", ":", "<|nl|>", "<|8-s|>", "result", "<|s|>", "=", "<|s|>", "left", "Value", "<|s|>", "==", "<|s|>", "right", "Value", ";", "<|nl|>", "<|8-s|>", "break", ";", "<|nl|>", "<|4-s|>", "<|2-s|>", "default", ":", "<|nl|>", "<|8-s|>", "throw", "<|s|>", "new", "<|s|>", "Assertion", "Error", "(", ");", "<|nl|>", "<|4-s|>", "}", "<|nl|>", "<|4-s|>", "return", "<|s|>", "Boolean", ".", "value", "Of", "(", "result", ");", "<|nl|>", "<|endfocus|>", "<|nl|>", "<|2-s|>", "}"], "base_code_line_number": 46, "base_patch_number": 4, "changed_patch_number": 5, "code_file_name": "android_2193", "comment_id": "9310f93f_891a0506", "class_list": ["BooleanBinaryExpression<U>"], "func_list": ["public BooleanBinaryExpression(", "public Boolean eval(@Nonnull U tested, @Nonnull Context context)"], "prime_var_dic": {"Expression": 1, "operator": 1}}]